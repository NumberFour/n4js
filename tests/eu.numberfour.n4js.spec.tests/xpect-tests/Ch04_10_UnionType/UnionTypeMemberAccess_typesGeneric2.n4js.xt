/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */

interface A {}
interface B {}
interface C {}

//
// generic types - binding to conflicting types
//

class Gen1<T> {
	f : T;
	get g() : T {return null;}
	set s(param : T) {}
}

class Gen2Super<T> {
	set s(param : T) {}
}
class Gen2<T> extends Gen2Super<C> {
	f : T;
	get g() : T {return null;}
}


var u : union{Gen1<A>,Gen2<B>};


// XPECT type of 'u.f' --> union{A,B}
u.f;
// XPECT expectedType at 'null' --> intersection{A,B}
u.f = null;
// XPECT type of 'u.g' --> union{A,B}
u.g;
// XPECT expectedType at 'null' --> intersection{A,C}
u.s = null;

