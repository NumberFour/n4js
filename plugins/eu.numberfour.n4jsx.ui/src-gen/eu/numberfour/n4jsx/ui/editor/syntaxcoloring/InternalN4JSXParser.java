package eu.numberfour.n4jsx.ui.editor.syntaxcoloring; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4jsx.services.N4JSXGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSXParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSXParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSXParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSXParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSXParser.g"; }




    	private N4JSXGrammarAccess grammarAccess;
    	 	
    	public InternalN4JSXParser(TokenStream input, N4JSXGrammarAccess grammarAccess) {
    		this(input);
    		this.grammarAccess = grammarAccess;
    	}
    	
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleIDLScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIDLScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleIDLScript() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;



            
        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getIDLScriptAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getIDLScriptAccess().getScriptElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryExpression_return retval = new InternalN4JSXParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.ruleParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;



            
        try {
            {
            int alt3=14;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PrimaryExpression_return retval = new InternalN4JSXParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_4 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_13 = null;



            
        try {
            {
            int alt4=14;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_3=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.start):null), (JSXElementParserRuleCall_3!=null?((Token)JSXElementParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_4=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.start):null), (ParameterizedCallExpressionParserRuleCall_4!=null?((Token)ParameterizedCallExpressionParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_5=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.start):null), (LiteralParserRuleCall_5!=null?((Token)LiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_6=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.start):null), (ArrayLiteralParserRuleCall_6!=null?((Token)ArrayLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_7=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.start):null), (ObjectLiteralParserRuleCall_7!=null?((Token)ObjectLiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_8=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.start):null), (ParenExpressionParserRuleCall_8!=null?((Token)ParenExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_9=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.start):null), (AnnotatedExpressionParserRuleCall_9!=null?((Token)AnnotatedExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_10=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.start):null), (FunctionExpressionParserRuleCall_10!=null?((Token)FunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_11=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.start):null), (AsyncFunctionExpressionParserRuleCall_11!=null?((Token)AsyncFunctionExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_11()); 
                    }

                    }


                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_12=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.start):null), (N4ClassExpressionParserRuleCall_12!=null?((Token)N4ClassExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_13=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.start):null), (TemplateLiteralParserRuleCall_13!=null?((Token)TemplateLiteralParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElement_return retval = new InternalN4JSXParser.ruleJSXElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleJSXAttributes_return JSXAttributesParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;

        InternalN4JSXParser.ruleJSXClosingElement_return JSXClosingElementParserRuleCall_3_0_2 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_6);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_7);
            JSXAttributesParserRuleCall_2=ruleJSXAttributes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.start):null), (JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.stop):null), grammarAccess.getJSXElementAccess().getJSXAttributesParserRuleCall_2()); 
            }
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==GreaterThanSign) ) {
                alt6=1;
            }
            else if ( (LA6_0==Solidus) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0()); 
                    }
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==LessThanSign) ) {
                            int LA5_1 = input.LA(2);

                            if ( ((LA5_1>=Intersection && LA5_1<=Implements)||(LA5_1>=Promisify && LA5_1<=Abstract)||LA5_1==External||(LA5_1>=Private && LA5_1<=Project)||LA5_1==Public||LA5_1==Static||LA5_1==Target||(LA5_1>=Async && LA5_1<=Await)||LA5_1==Union||(LA5_1>=Yield && LA5_1<=This)||LA5_1==From||LA5_1==Type||(LA5_1>=Get && LA5_1<=Let)||(LA5_1>=Out && LA5_1<=Set)||LA5_1==As||LA5_1==Of||LA5_1==RULE_IDENTIFIER) ) {
                                alt5=1;
                            }


                        }
                        else if ( (LA5_0==LeftCurlyBracket) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_8);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    JSXClosingElementParserRuleCall_3_0_2=ruleJSXClosingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.start):null), (JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.stop):null), grammarAccess.getJSXElementAccess().getJSXClosingElementParserRuleCall_3_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0()); 
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXClosingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXClosingElement_return ruleJSXClosingElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXClosingElement_return retval = new InternalN4JSXParser.ruleJSXClosingElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token SolidusKeyword_1=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_10); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXClosingElementAccess().getLessThanSignKeyword_0()); 
            }
            SolidusKeyword_1=(Token)match(input,Solidus,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SolidusKeyword_1, grammarAccess.getJSXClosingElementAccess().getSolidusKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_9);
            JsxClosingNameJSXElementNameParserRuleCall_2_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.stop):null), grammarAccess.getJSXClosingElementAccess().getJsxClosingNameAssignment_2()); 
            }

            }


            }

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getJSXClosingElementAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSXParser.ruleJSXChild_return retval = new InternalN4JSXParser.ruleJSXChild_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXExpression_return JSXExpressionParserRuleCall_1 = null;



            
        try {
            {
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LessThanSign) ) {
                alt7=1;
            }
            else if ( (LA7_0==LeftCurlyBracket) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_0=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.start):null), (JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXExpressionParserRuleCall_1=ruleJSXExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.start):null), (JSXExpressionParserRuleCall_1!=null?((Token)JSXExpressionParserRuleCall_1.stop):null), grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXExpression_return ruleJSXExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXExpression_return retval = new InternalN4JSXParser.ruleJSXExpression_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getJSXExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementName_return retval = new InternalN4JSXParser.ruleJSXElementName_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementNameExpression_return retval = new InternalN4JSXParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_13);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==FullStop) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_13);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXAttributes_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttributes_return ruleJSXAttributes() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttributes_return retval = new InternalN4JSXParser.ruleJSXAttributes_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_0 = null;



            
        try {
            {
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==LeftCurlyBracket||LA9_0==RULE_IDENTIFIER) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    JsxAttributesJSXAttributeParserRuleCall_0=ruleJSXAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributesAccess().getJsxAttributesAssignment()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttribute_return retval = new InternalN4JSXParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;



            
        try {
            {
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LeftCurlyBracket) ) {
                alt10=1;
            }
            else if ( (LA10_0==RULE_IDENTIFIER) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSXParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_15); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0()); 
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSXParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);

        Token PropertyIDENTIFIERTerminalRuleCall_0_0=null;
        Token EqualsSignKeyword_1=null;
        Token LeftCurlyBracketKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_2_1_2=null;
        InternalN4JSXParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            PropertyIDENTIFIERTerminalRuleCall_0_0=(Token)match(input,RULE_IDENTIFIER,FOLLOW_16); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PropertyIDENTIFIERTerminalRuleCall_0_0, grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_17); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1()); 
            }
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==RULE_STRING) ) {
                alt11=1;
            }
            else if ( (LA11_0==LeftCurlyBracket) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    JsxAttributeValueStringLiteralParserRuleCall_2_0_0=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JsxAttributeValueStringLiteralParserRuleCall_2_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_2_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_2_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_2_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_2_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_2_1_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_2_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_2_1_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_2_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_2_1_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_2_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleScriptElement_return retval = new InternalN4JSXParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;



            
        try {
            {
            int alt12=7;
            alt12 = dfa12.predict(input);
            switch (alt12) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSXParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_18);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt25=5;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( ((LA13_0>=Protected && LA13_0<=Abstract)||LA13_0==External||(LA13_0>=Private && LA13_0<=Project)||LA13_0==Public||LA13_0==Static||LA13_0==Const) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt22=2;
                    alt22 = dfa22.predict(input);
                    switch (alt22) {
                        case 1 :
                            {
                            {
                            loop14:
                            do {
                                int alt14=2;
                                int LA14_0 = input.LA(1);

                                if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                                    alt14=1;
                                }


                                switch (alt14) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop14;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2()); 
                            }
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( (LA15_0==Tilde) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4()); 
                            }

                            }


                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==LessThanSign) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt17=2;
                            int LA17_0 = input.LA(1);

                            if ( (LA17_0==Implements||LA17_0==Extends) ) {
                                alt17=1;
                            }
                            switch (alt17) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop18:
                            do {
                                int alt18=2;
                                int LA18_0 = input.LA(1);

                                if ( ((LA18_0>=Protected && LA18_0<=Abstract)||LA18_0==External||(LA18_0>=Private && LA18_0<=Project)||LA18_0==Public||LA18_0==Static||LA18_0==Const) ) {
                                    alt18=1;
                                }


                                switch (alt18) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop18;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2()); 
                            }
                            int alt19=2;
                            int LA19_0 = input.LA(1);

                            if ( (LA19_0==Tilde) ) {
                                alt19=1;
                            }
                            switch (alt19) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4()); 
                            }

                            }


                            }
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==LessThanSign) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt21=2;
                            int LA21_0 = input.LA(1);

                            if ( (LA21_0==Implements||LA21_0==Extends) ) {
                                alt21=1;
                            }
                            switch (alt21) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( ((LA23_0>=Protected && LA23_0<=Abstract)||LA23_0==External||(LA23_0>=Private && LA23_0<=Project)||LA23_0==Public||LA23_0==Static||LA23_0==Const) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5()); 
                    }

                    }


                    }
                    loop24:
                    do {
                        int alt24=2;
                        int LA24_0 = input.LA(1);

                        if ( (LA24_0==Comma) ) {
                            alt24=1;
                        }


                        switch (alt24) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop24;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariables_return retval = new InternalN4JSXParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1()); 
            }

            }


            }
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==Comma) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclaration_return retval = new InternalN4JSXParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclarationImpl_return retval = new InternalN4JSXParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;



            
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_30); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0()); 
            }
            int alt29=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt29=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt29=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt29=3;
                }
                break;
            case Default:
                {
                alt29=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_31); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_32);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==From) && (synpred10_InternalN4JSXParser())) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_32);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_34); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0()); 
                    }

                    }


                    }
                    int alt28=2;
                    alt28 = dfa28.predict(input);
                    switch (alt28) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_32);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportFromClause_return retval = new InternalN4JSXParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSXParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;



            
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportClause_return retval = new InternalN4JSXParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0()); 
            }
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( ((LA32_0>=Intersection && LA32_0<=Implements)||(LA32_0>=Promisify && LA32_0<=Abstract)||LA32_0==External||(LA32_0>=Private && LA32_0<=Project)||LA32_0==Public||LA32_0==Static||LA32_0==Target||(LA32_0>=Async && LA32_0<=Await)||LA32_0==Union||(LA32_0>=Yield && LA32_0<=This)||LA32_0==From||LA32_0==Type||(LA32_0>=Get && LA32_0<=Let)||(LA32_0>=Out && LA32_0<=Set)||LA32_0==As||LA32_0==Of||LA32_0==RULE_IDENTIFIER) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0()); 
                    }

                    }


                    }
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==Comma) ) {
                            int LA30_1 = input.LA(2);

                            if ( ((LA30_1>=Intersection && LA30_1<=Implements)||(LA30_1>=Promisify && LA30_1<=Abstract)||LA30_1==External||(LA30_1>=Private && LA30_1<=Project)||LA30_1==Public||LA30_1==Static||LA30_1==Target||(LA30_1>=Async && LA30_1<=Await)||LA30_1==Union||(LA30_1>=Yield && LA30_1<=This)||LA30_1==From||LA30_1==Type||(LA30_1>=Get && LA30_1<=Let)||(LA30_1>=Out && LA30_1<=Set)||LA30_1==As||LA30_1==Of||LA30_1==RULE_IDENTIFIER) ) {
                                alt30=1;
                            }


                        }


                        switch (alt30) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==Comma) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleExportSpecifier_return retval = new InternalN4JSXParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_37);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0()); 
            }

            }


            }
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==As) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleExportableElement_return retval = new InternalN4JSXParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;



            
        try {
            {
            int alt34=6;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSXParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_39);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt49=4;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    {
                    {
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( ((LA35_0>=Protected && LA35_0<=Abstract)||LA35_0==External||(LA35_0>=Private && LA35_0<=Project)||LA35_0==Public||LA35_0==Static||LA35_0==Const) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop36:
                    do {
                        int alt36=2;
                        alt36 = dfa36.predict(input);
                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_40);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_41);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3()); 
                    }

                    }


                    }
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==Comma) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_42);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt46=2;
                    alt46 = dfa46.predict(input);
                    switch (alt46) {
                        case 1 :
                            {
                            {
                            loop38:
                            do {
                                int alt38=2;
                                int LA38_0 = input.LA(1);

                                if ( ((LA38_0>=Protected && LA38_0<=Abstract)||LA38_0==External||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public||LA38_0==Static||LA38_0==Const) ) {
                                    alt38=1;
                                }


                                switch (alt38) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop38;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2()); 
                            }
                            int alt39=2;
                            int LA39_0 = input.LA(1);

                            if ( (LA39_0==Tilde) ) {
                                alt39=1;
                            }
                            switch (alt39) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4()); 
                            }

                            }


                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);

                            if ( (LA40_0==LessThanSign) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==Implements||LA41_0==Extends) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop42:
                            do {
                                int alt42=2;
                                int LA42_0 = input.LA(1);

                                if ( ((LA42_0>=Protected && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Const) ) {
                                    alt42=1;
                                }


                                switch (alt42) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop42;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2()); 
                            }
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==Tilde) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4()); 
                            }

                            }


                            }
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==LessThanSign) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==Implements||LA45_0==Extends) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( ((LA47_0>=Protected && LA47_0<=Abstract)||LA47_0==External||(LA47_0>=Private && LA47_0<=Project)||LA47_0==Public||LA47_0==Static||LA47_0==Const) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5()); 
                    }

                    }


                    }
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==Comma) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclaration_return retval = new InternalN4JSXParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclarationImpl_return retval = new InternalN4JSXParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSXParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0()); 
            }
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( ((LA50_0>=Intersection && LA50_0<=Implements)||(LA50_0>=Promisify && LA50_0<=Abstract)||LA50_0==External||(LA50_0>=Private && LA50_0<=Project)||LA50_0==Public||LA50_0==Static||LA50_0==Target||(LA50_0>=Async && LA50_0<=Await)||LA50_0==Union||(LA50_0>=Yield && LA50_0<=This)||LA50_0==From||LA50_0==Type||(LA50_0>=Get && LA50_0<=Let)||(LA50_0>=Out && LA50_0<=Set)||LA50_0==As||LA50_0==Of||LA50_0==Asterisk||LA50_0==LeftCurlyBracket||LA50_0==RULE_IDENTIFIER) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    pushFollow(FOLLOW_31);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_32);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSXParser.ruleImportClause_return retval = new InternalN4JSXParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSXParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;



            
        try {
            {
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( ((LA52_0>=Intersection && LA52_0<=Implements)||(LA52_0>=Promisify && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Target||(LA52_0>=Async && LA52_0<=Await)||LA52_0==Union||(LA52_0>=Yield && LA52_0<=This)||LA52_0==From||LA52_0==Type||(LA52_0>=Get && LA52_0<=Let)||(LA52_0>=Out && LA52_0<=Set)||LA52_0==As||LA52_0==Of||LA52_0==RULE_IDENTIFIER) ) {
                alt52=1;
            }
            else if ( (LA52_0==Asterisk||LA52_0==LeftCurlyBracket) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0()); 
                    }

                    }


                    }
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==Comma) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0()); 
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( (LA56_0==LeftCurlyBracket) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0()); 
                    }
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( ((LA55_0>=Intersection && LA55_0<=With)||(LA55_0>=For && LA55_0<=Var)||(LA55_0>=As && LA55_0<=Of)||LA55_0==RULE_IDENTIFIER) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop53:
                            do {
                                int alt53=2;
                                int LA53_0 = input.LA(1);

                                if ( (LA53_0==Comma) ) {
                                    int LA53_1 = input.LA(2);

                                    if ( ((LA53_1>=Intersection && LA53_1<=With)||(LA53_1>=For && LA53_1<=Var)||(LA53_1>=As && LA53_1<=Of)||LA53_1==RULE_IDENTIFIER) ) {
                                        alt53=1;
                                    }


                                }


                                switch (alt53) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_38); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_27);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop53;
                                }
                            } while (true);
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==Comma) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2()); 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamedImportSpecifier_return retval = new InternalN4JSXParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0()); 
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSXParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSXParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;



            
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1()); 
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3()); 
            }

            }


            }
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==PlusSign) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleModuleSpecifier_return retval = new InternalN4JSXParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionDeclaration_return retval = new InternalN4JSXParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( ((LA59_0>=Protected && LA59_0<=Abstract)||LA59_0==External||(LA59_0>=Private && LA59_0<=Project)||LA59_0==Public||LA59_0==Static||LA59_0==Const) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt60=2;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionDeclaration_return retval = new InternalN4JSXParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( ((LA61_0>=Protected && LA61_0<=Abstract)||LA61_0==External||(LA61_0>=Private && LA61_0<=Project)||LA61_0==Public||LA61_0==Static||LA61_0==Const) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Semicolon) ) {
                int LA62_1 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt62=1;
                }
            }
            else if ( (LA62_0==EOF) && (synpred22_InternalN4JSXParser())) {
                alt62=1;
            }
            else if ( (LA62_0==RULE_EOL) && (synpred22_InternalN4JSXParser())) {
                alt62=1;
            }
            else if ( (LA62_0==RULE_ML_COMMENT) && (synpred22_InternalN4JSXParser())) {
                alt62=1;
            }
            else if ( (LA62_0==RightCurlyBracket) ) {
                int LA62_5 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt62=1;
                }
            }
            switch (alt62) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;



            
        try {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Async) ) {
                int LA63_1 = input.LA(2);

                if ( ((LA63_1>=Intersection && LA63_1<=With)||(LA63_1>=For && LA63_1<=Var)||(LA63_1>=As && LA63_1<=Of)||LA63_1==LeftSquareBracket||LA63_1==RULE_DOUBLE||LA63_1==RULE_HEX_INT||LA63_1==RULE_OCTAL_INT||LA63_1==RULE_SCIENTIFIC_INT||LA63_1==RULE_IDENTIFIER||LA63_1==RULE_STRING||LA63_1==RULE_NO_LINE_TERMINATOR||LA63_1==RULE_INT) ) {
                    alt63=1;
                }
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionImpl_return retval = new InternalN4JSXParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Asterisk) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||(LA64_0>=Yield && LA64_0<=This)||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==LeftParenthesis||LA64_0==LessThanSign||LA64_0==RULE_IDENTIFIER) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionImpl_return retval = new InternalN4JSXParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Asterisk) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||LA65_0==This||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==LeftParenthesis||LA65_0==LessThanSign||LA65_0==RULE_IDENTIFIER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_FunctionImpl_return retval = new InternalN4JSXParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Asterisk) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||(LA66_0>=Yield && LA66_0<=This)||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==LeftParenthesis||LA66_0==LessThanSign||LA66_0==RULE_IDENTIFIER) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionHeader_return retval = new InternalN4JSXParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||(LA68_0>=Yield && LA68_0<=This)||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Colon) && (synpred23_InternalN4JSXParser())) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionHeader_return retval = new InternalN4JSXParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==LessThanSign) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0>=Intersection && LA71_0<=Implements)||(LA71_0>=Promisify && LA71_0<=Abstract)||LA71_0==External||(LA71_0>=Private && LA71_0<=Project)||LA71_0==Public||LA71_0==Static||LA71_0==Target||(LA71_0>=Async && LA71_0<=Await)||LA71_0==Union||LA71_0==This||LA71_0==From||LA71_0==Type||(LA71_0>=Get && LA71_0<=Let)||(LA71_0>=Out && LA71_0<=Set)||LA71_0==As||LA71_0==Of||LA71_0==RULE_IDENTIFIER) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==Colon) && (synpred24_InternalN4JSXParser())) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionHeader_return retval = new InternalN4JSXParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==LessThanSign) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( ((LA74_0>=Intersection && LA74_0<=Implements)||(LA74_0>=Promisify && LA74_0<=Abstract)||LA74_0==External||(LA74_0>=Private && LA74_0<=Project)||LA74_0==Public||LA74_0==Static||LA74_0==Target||(LA74_0>=Async && LA74_0<=Await)||LA74_0==Union||(LA74_0>=Yield && LA74_0<=This)||LA74_0==From||LA74_0==Type||(LA74_0>=Get && LA74_0<=Let)||(LA74_0>=Out && LA74_0<=Set)||LA74_0==As||LA74_0==Of||LA74_0==RULE_IDENTIFIER) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==Colon) && (synpred25_InternalN4JSXParser())) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionHeader_return retval = new InternalN4JSXParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LessThanSign) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( ((LA77_0>=Intersection && LA77_0<=Implements)||(LA77_0>=Promisify && LA77_0<=Abstract)||LA77_0==External||(LA77_0>=Private && LA77_0<=Project)||LA77_0==Public||LA77_0==Static||LA77_0==Target||(LA77_0>=Async && LA77_0<=Await)||LA77_0==Union||LA77_0==This||LA77_0==From||LA77_0==Type||(LA77_0>=Get && LA77_0<=Let)||(LA77_0>=Out && LA77_0<=Set)||LA77_0==As||LA77_0==Of||LA77_0==RULE_IDENTIFIER) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Colon) && (synpred26_InternalN4JSXParser())) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionBody_return retval = new InternalN4JSXParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionBody_return retval = new InternalN4JSXParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionBody_return retval = new InternalN4JSXParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionBody_return retval = new InternalN4JSXParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( ((LA81_0>=Protected && LA81_0<=Abstract)||LA81_0==External||(LA81_0>=Private && LA81_0<=Project)||LA81_0==Public||LA81_0==Static||LA81_0==Const) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0>=Protected && LA82_0<=Abstract)||LA82_0==External||(LA82_0>=Private && LA82_0<=Project)||LA82_0==Public||LA82_0==Static||LA82_0==Const) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionExpression_return retval = new InternalN4JSXParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSXParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0()); 
            }

            }


            }

            pushFollow(FOLLOW_57);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2()); 
            }

            }


            }

            pushFollow(FOLLOW_25);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowExpression_return retval = new InternalN4JSXParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt89=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt89=1;
                }
                break;
            case Async:
                {
                int LA89_2 = input.LA(2);

                if ( (LA89_2==EqualsSignGreaterThanSign) ) {
                    alt89=3;
                }
                else if ( (LA89_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSXParser())) {
                    alt89=2;
                }
                else if ( (LA89_2==LeftParenthesis) && (synpred37_InternalN4JSXParser())) {
                    alt89=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( ((LA84_0>=Intersection && LA84_0<=Implements)||(LA84_0>=Promisify && LA84_0<=Abstract)||LA84_0==External||(LA84_0>=Private && LA84_0<=Project)||LA84_0==Public||LA84_0==Static||LA84_0==Target||(LA84_0>=Async && LA84_0<=Await)||LA84_0==Union||(LA84_0>=Yield && LA84_0<=This)||LA84_0==From||LA84_0==This_1||(LA84_0>=Type && LA84_0<=Void)||LA84_0==FullStopFullStopFullStop||(LA84_0>=Get && LA84_0<=Let)||(LA84_0>=Out && LA84_0<=Set)||LA84_0==As||LA84_0==Of||(LA84_0>=QuestionMark && LA84_0<=LeftSquareBracket)||LA84_0==LeftCurlyBracket||LA84_0==Tilde||LA84_0==RULE_IDENTIFIER) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop83:
                            do {
                                int alt83=2;
                                int LA83_0 = input.LA(1);

                                if ( (LA83_0==Comma) ) {
                                    alt83=1;
                                }


                                switch (alt83) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop83;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==Colon) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( ((LA87_0>=Intersection && LA87_0<=Implements)||(LA87_0>=Promisify && LA87_0<=Abstract)||LA87_0==External||(LA87_0>=Private && LA87_0<=Project)||LA87_0==Public||LA87_0==Static||LA87_0==Target||(LA87_0>=Async && LA87_0<=Await)||LA87_0==Union||(LA87_0>=Yield && LA87_0<=This)||LA87_0==From||LA87_0==This_1||(LA87_0>=Type && LA87_0<=Void)||LA87_0==FullStopFullStopFullStop||(LA87_0>=Get && LA87_0<=Let)||(LA87_0>=Out && LA87_0<=Set)||LA87_0==As||LA87_0==Of||(LA87_0>=QuestionMark && LA87_0<=LeftSquareBracket)||LA87_0==LeftCurlyBracket||LA87_0==Tilde||LA87_0==RULE_IDENTIFIER) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop86:
                            do {
                                int alt86=2;
                                int LA86_0 = input.LA(1);

                                if ( (LA86_0==Comma) ) {
                                    alt86=1;
                                }


                                switch (alt86) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop86;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==Colon) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrowExpression_return retval = new InternalN4JSXParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt97=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt97=1;
                }
                break;
            case Async:
                {
                int LA97_2 = input.LA(2);

                if ( (LA97_2==EqualsSignGreaterThanSign) ) {
                    alt97=3;
                }
                else if ( (LA97_2==RULE_NO_LINE_TERMINATOR) && (synpred41_InternalN4JSXParser())) {
                    alt97=2;
                }
                else if ( (LA97_2==LeftParenthesis) && (synpred41_InternalN4JSXParser())) {
                    alt97=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( ((LA92_0>=Intersection && LA92_0<=Implements)||(LA92_0>=Promisify && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Target||(LA92_0>=Async && LA92_0<=Await)||LA92_0==Union||(LA92_0>=Yield && LA92_0<=This)||LA92_0==From||LA92_0==This_1||(LA92_0>=Type && LA92_0<=Void)||LA92_0==FullStopFullStopFullStop||(LA92_0>=Get && LA92_0<=Let)||(LA92_0>=Out && LA92_0<=Set)||LA92_0==As||LA92_0==Of||(LA92_0>=QuestionMark && LA92_0<=LeftSquareBracket)||LA92_0==LeftCurlyBracket||LA92_0==Tilde||LA92_0==RULE_IDENTIFIER) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop91:
                            do {
                                int alt91=2;
                                int LA91_0 = input.LA(1);

                                if ( (LA91_0==Comma) ) {
                                    alt91=1;
                                }


                                switch (alt91) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop91;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( ((LA95_0>=Intersection && LA95_0<=Implements)||(LA95_0>=Promisify && LA95_0<=Abstract)||LA95_0==External||(LA95_0>=Private && LA95_0<=Project)||LA95_0==Public||LA95_0==Static||LA95_0==Target||(LA95_0>=Async && LA95_0<=Await)||LA95_0==Union||(LA95_0>=Yield && LA95_0<=This)||LA95_0==From||LA95_0==This_1||(LA95_0>=Type && LA95_0<=Void)||LA95_0==FullStopFullStopFullStop||(LA95_0>=Get && LA95_0<=Let)||(LA95_0>=Out && LA95_0<=Set)||LA95_0==As||LA95_0==Of||(LA95_0>=QuestionMark && LA95_0<=LeftSquareBracket)||LA95_0==LeftCurlyBracket||LA95_0==Tilde||LA95_0==RULE_IDENTIFIER) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop94:
                            do {
                                int alt94=2;
                                int LA94_0 = input.LA(1);

                                if ( (LA94_0==Comma) ) {
                                    alt94=1;
                                }


                                switch (alt94) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop94;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==Colon) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ArrowExpression_return retval = new InternalN4JSXParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt105=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt105=1;
                }
                break;
            case Async:
                {
                int LA105_2 = input.LA(2);

                if ( (LA105_2==EqualsSignGreaterThanSign) ) {
                    alt105=3;
                }
                else if ( (LA105_2==RULE_NO_LINE_TERMINATOR) && (synpred45_InternalN4JSXParser())) {
                    alt105=2;
                }
                else if ( (LA105_2==LeftParenthesis) && (synpred45_InternalN4JSXParser())) {
                    alt105=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;
            }

            switch (alt105) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( ((LA100_0>=Intersection && LA100_0<=Implements)||(LA100_0>=Promisify && LA100_0<=Abstract)||LA100_0==External||(LA100_0>=Private && LA100_0<=Project)||LA100_0==Public||LA100_0==Static||LA100_0==Target||(LA100_0>=Async && LA100_0<=Await)||LA100_0==Union||LA100_0==This||LA100_0==From||LA100_0==This_1||(LA100_0>=Type && LA100_0<=Void)||LA100_0==FullStopFullStopFullStop||(LA100_0>=Get && LA100_0<=Let)||(LA100_0>=Out && LA100_0<=Set)||LA100_0==As||LA100_0==Of||(LA100_0>=QuestionMark && LA100_0<=LeftSquareBracket)||LA100_0==LeftCurlyBracket||LA100_0==Tilde||LA100_0==RULE_IDENTIFIER) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop99:
                            do {
                                int alt99=2;
                                int LA99_0 = input.LA(1);

                                if ( (LA99_0==Comma) ) {
                                    alt99=1;
                                }


                                switch (alt99) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop99;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Colon) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( ((LA103_0>=Intersection && LA103_0<=Implements)||(LA103_0>=Promisify && LA103_0<=Abstract)||LA103_0==External||(LA103_0>=Private && LA103_0<=Project)||LA103_0==Public||LA103_0==Static||LA103_0==Target||(LA103_0>=Async && LA103_0<=Await)||LA103_0==Union||LA103_0==This||LA103_0==From||LA103_0==This_1||(LA103_0>=Type && LA103_0<=Void)||LA103_0==FullStopFullStopFullStop||(LA103_0>=Get && LA103_0<=Let)||(LA103_0>=Out && LA103_0<=Set)||LA103_0==As||LA103_0==Of||(LA103_0>=QuestionMark && LA103_0<=LeftSquareBracket)||LA103_0==LeftCurlyBracket||LA103_0==Tilde||LA103_0==RULE_IDENTIFIER) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop102:
                            do {
                                int alt102=2;
                                int LA102_0 = input.LA(1);

                                if ( (LA102_0==Comma) ) {
                                    alt102=1;
                                }


                                switch (alt102) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop102;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==Colon) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ArrowExpression_return retval = new InternalN4JSXParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt113=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt113=1;
                }
                break;
            case Async:
                {
                int LA113_2 = input.LA(2);

                if ( (LA113_2==EqualsSignGreaterThanSign) ) {
                    alt113=3;
                }
                else if ( (LA113_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSXParser())) {
                    alt113=2;
                }
                else if ( (LA113_2==LeftParenthesis) && (synpred49_InternalN4JSXParser())) {
                    alt113=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt113=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( ((LA108_0>=Intersection && LA108_0<=Implements)||(LA108_0>=Promisify && LA108_0<=Abstract)||LA108_0==External||(LA108_0>=Private && LA108_0<=Project)||LA108_0==Public||LA108_0==Static||LA108_0==Target||(LA108_0>=Async && LA108_0<=Await)||LA108_0==Union||LA108_0==This||LA108_0==From||LA108_0==This_1||(LA108_0>=Type && LA108_0<=Void)||LA108_0==FullStopFullStopFullStop||(LA108_0>=Get && LA108_0<=Let)||(LA108_0>=Out && LA108_0<=Set)||LA108_0==As||LA108_0==Of||(LA108_0>=QuestionMark && LA108_0<=LeftSquareBracket)||LA108_0==LeftCurlyBracket||LA108_0==Tilde||LA108_0==RULE_IDENTIFIER) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop107:
                            do {
                                int alt107=2;
                                int LA107_0 = input.LA(1);

                                if ( (LA107_0==Comma) ) {
                                    alt107=1;
                                }


                                switch (alt107) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop107;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==Colon) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( ((LA111_0>=Intersection && LA111_0<=Implements)||(LA111_0>=Promisify && LA111_0<=Abstract)||LA111_0==External||(LA111_0>=Private && LA111_0<=Project)||LA111_0==Public||LA111_0==Static||LA111_0==Target||(LA111_0>=Async && LA111_0<=Await)||LA111_0==Union||LA111_0==This||LA111_0==From||LA111_0==This_1||(LA111_0>=Type && LA111_0<=Void)||LA111_0==FullStopFullStopFullStop||(LA111_0>=Get && LA111_0<=Let)||(LA111_0>=Out && LA111_0<=Set)||LA111_0==As||LA111_0==Of||(LA111_0>=QuestionMark && LA111_0<=LeftSquareBracket)||LA111_0==LeftCurlyBracket||LA111_0==Tilde||LA111_0==RULE_IDENTIFIER) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop110:
                            do {
                                int alt110=2;
                                int LA110_0 = input.LA(1);

                                if ( (LA110_0==Comma) ) {
                                    alt110=1;
                                }


                                switch (alt110) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop110;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==Colon) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt114=2;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.ruleStrictFormalParameters_return retval = new InternalN4JSXParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=Intersection && LA116_0<=Implements)||(LA116_0>=Promisify && LA116_0<=Abstract)||LA116_0==External||(LA116_0>=Private && LA116_0<=Project)||LA116_0==Public||LA116_0==Static||LA116_0==Target||(LA116_0>=Async && LA116_0<=Await)||LA116_0==Union||(LA116_0>=Yield && LA116_0<=This)||LA116_0==From||LA116_0==This_1||(LA116_0>=Type && LA116_0<=Void)||LA116_0==FullStopFullStopFullStop||(LA116_0>=Get && LA116_0<=Let)||(LA116_0>=Out && LA116_0<=Set)||LA116_0==As||LA116_0==Of||(LA116_0>=QuestionMark && LA116_0<=LeftSquareBracket)||LA116_0==LeftCurlyBracket||LA116_0==Tilde||LA116_0==RULE_IDENTIFIER) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( (LA115_0==Comma) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop115;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.norm1_StrictFormalParameters_return retval = new InternalN4JSXParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( ((LA118_0>=Intersection && LA118_0<=Implements)||(LA118_0>=Promisify && LA118_0<=Abstract)||LA118_0==External||(LA118_0>=Private && LA118_0<=Project)||LA118_0==Public||LA118_0==Static||LA118_0==Target||(LA118_0>=Async && LA118_0<=Await)||LA118_0==Union||LA118_0==This||LA118_0==From||LA118_0==This_1||(LA118_0>=Type && LA118_0<=Void)||LA118_0==FullStopFullStopFullStop||(LA118_0>=Get && LA118_0<=Let)||(LA118_0>=Out && LA118_0<=Set)||LA118_0==As||LA118_0==Of||(LA118_0>=QuestionMark && LA118_0<=LeftSquareBracket)||LA118_0==LeftCurlyBracket||LA118_0==Tilde||LA118_0==RULE_IDENTIFIER) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==Comma) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop117;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.ruleBlockMinusBraces_return retval = new InternalN4JSXParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Function)||(LA119_0>=Private && LA119_0<=Delete)||(LA119_0>=Public && LA119_0<=Break)||(LA119_0>=Class && LA119_0<=This)||(LA119_0>=From && LA119_0<=With)||(LA119_0>=For && LA119_0<=Var)||LA119_0==PlusSignPlusSign||LA119_0==HyphenMinusHyphenMinus||LA119_0==SolidusEqualsSign||(LA119_0>=As && LA119_0<=If)||LA119_0==Of||LA119_0==ExclamationMark||LA119_0==LeftParenthesis||LA119_0==PlusSign||LA119_0==HyphenMinus||LA119_0==Solidus||(LA119_0>=Semicolon && LA119_0<=LessThanSign)||(LA119_0>=CommercialAt && LA119_0<=LeftSquareBracket)||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_DOUBLE||(LA119_0>=RULE_HEX_INT && LA119_0<=RULE_LEGACY_OCTAL_INT)||LA119_0==RULE_SCIENTIFIC_INT||LA119_0==RULE_IDENTIFIER||LA119_0==RULE_STRING||(LA119_0>=RULE_TEMPLATE_HEAD && LA119_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA119_0==RULE_INT) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.norm1_BlockMinusBraces_return retval = new InternalN4JSXParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0>=Intersection && LA120_0<=Implements)||(LA120_0>=Promisify && LA120_0<=Function)||(LA120_0>=Private && LA120_0<=Delete)||(LA120_0>=Public && LA120_0<=Break)||(LA120_0>=Class && LA120_0<=This)||(LA120_0>=From && LA120_0<=With)||(LA120_0>=For && LA120_0<=Var)||LA120_0==PlusSignPlusSign||LA120_0==HyphenMinusHyphenMinus||LA120_0==SolidusEqualsSign||(LA120_0>=As && LA120_0<=If)||LA120_0==Of||LA120_0==ExclamationMark||LA120_0==LeftParenthesis||LA120_0==PlusSign||LA120_0==HyphenMinus||LA120_0==Solidus||(LA120_0>=Semicolon && LA120_0<=LessThanSign)||(LA120_0>=CommercialAt && LA120_0<=LeftSquareBracket)||LA120_0==LeftCurlyBracket||LA120_0==Tilde||LA120_0==RULE_DOUBLE||(LA120_0>=RULE_HEX_INT && LA120_0<=RULE_LEGACY_OCTAL_INT)||LA120_0==RULE_SCIENTIFIC_INT||LA120_0==RULE_IDENTIFIER||LA120_0==RULE_STRING||(LA120_0>=RULE_TEMPLATE_HEAD && LA120_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA120_0==RULE_INT) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSXParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSXParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExpression_return retval = new InternalN4JSXParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==Class) ) {
                alt123=1;
            }
            else if ( (LA123_0==Function||LA123_0==Async) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( ((LA121_0>=Intersection && LA121_0<=Constructor)||(LA121_0>=Promisify && LA121_0<=Abstract)||LA121_0==External||(LA121_0>=Private && LA121_0<=Project)||LA121_0==Public||LA121_0==Static||LA121_0==Target||(LA121_0>=Async && LA121_0<=Await)||LA121_0==Union||(LA121_0>=Yield && LA121_0<=This)||LA121_0==From||LA121_0==Type||(LA121_0>=Get && LA121_0<=Let)||(LA121_0>=Out && LA121_0<=Set)||LA121_0==As||LA121_0==Of||LA121_0==RULE_IDENTIFIER) ) {
                        alt121=1;
                    }
                    else if ( (LA121_0==Implements) ) {
                        int LA121_2 = input.LA(2);

                        if ( (LA121_2==Implements||LA121_2==Extends||LA121_2==LeftCurlyBracket) ) {
                            alt121=1;
                        }
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==Implements||LA122_0==Extends) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_22);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedExpression_return retval = new InternalN4JSXParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==Class) ) {
                alt126=1;
            }
            else if ( (LA126_0==Function||LA126_0==Async) ) {
                alt126=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( ((LA124_0>=Intersection && LA124_0<=Constructor)||(LA124_0>=Promisify && LA124_0<=Abstract)||LA124_0==External||(LA124_0>=Private && LA124_0<=Project)||LA124_0==Public||LA124_0==Static||LA124_0==Target||(LA124_0>=Async && LA124_0<=Await)||LA124_0==Union||LA124_0==This||LA124_0==From||LA124_0==Type||(LA124_0>=Get && LA124_0<=Let)||(LA124_0>=Out && LA124_0<=Set)||LA124_0==As||LA124_0==Of||LA124_0==RULE_IDENTIFIER) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==Implements) ) {
                        int LA124_2 = input.LA(2);

                        if ( (LA124_2==Implements||LA124_2==Extends||LA124_2==LeftCurlyBracket) ) {
                            alt124=1;
                        }
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_68);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==Implements||LA125_0==Extends) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_68);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariable_return retval = new InternalN4JSXParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt127=3;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Out) ) {
                alt127=1;
            }
            else if ( (LA127_0==In) ) {
                alt127=2;
            }
            switch (alt127) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1()); 
            }

            }


            }
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==Extends) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleFormalParameter_return retval = new InternalN4JSXParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_FormalParameter_return retval = new InternalN4JSXParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElementFragment_return retval = new InternalN4JSXParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt133=2;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==CommercialAt) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_71);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop129;
                        }
                    } while (true);
                    int alt130=2;
                    alt130 = dfa130.predict(input);
                    switch (alt130) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_72);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==FullStopFullStopFullStop) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==Colon) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_70);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==EqualsSign) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElementFragment_return retval = new InternalN4JSXParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt139=2;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==CommercialAt) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_71);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);
                    int alt136=2;
                    alt136 = dfa136.predict(input);
                    switch (alt136) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_72);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==FullStopFullStopFullStop) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==Colon) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_70);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==EqualsSign) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleColonSepTypeRef_return retval = new InternalN4JSXParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;



            
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSXParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSXParser.ruleBlock_return retval = new InternalN4JSXParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Function)||(LA141_0>=Private && LA141_0<=Delete)||(LA141_0>=Public && LA141_0<=Break)||(LA141_0>=Class && LA141_0<=This)||(LA141_0>=From && LA141_0<=With)||(LA141_0>=For && LA141_0<=Var)||LA141_0==PlusSignPlusSign||LA141_0==HyphenMinusHyphenMinus||LA141_0==SolidusEqualsSign||(LA141_0>=As && LA141_0<=If)||LA141_0==Of||LA141_0==ExclamationMark||LA141_0==LeftParenthesis||LA141_0==PlusSign||LA141_0==HyphenMinus||LA141_0==Solidus||(LA141_0>=Semicolon && LA141_0<=LessThanSign)||(LA141_0>=CommercialAt && LA141_0<=LeftSquareBracket)||LA141_0==LeftCurlyBracket||LA141_0==Tilde||LA141_0==RULE_DOUBLE||(LA141_0>=RULE_HEX_INT && LA141_0<=RULE_LEGACY_OCTAL_INT)||LA141_0==RULE_SCIENTIFIC_INT||LA141_0==RULE_IDENTIFIER||LA141_0==RULE_STRING||(LA141_0>=RULE_TEMPLATE_HEAD && LA141_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA141_0==RULE_INT) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSXParser.norm1_Block_return retval = new InternalN4JSXParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( ((LA142_0>=Intersection && LA142_0<=Implements)||(LA142_0>=Promisify && LA142_0<=Function)||(LA142_0>=Private && LA142_0<=Delete)||(LA142_0>=Public && LA142_0<=Break)||(LA142_0>=Class && LA142_0<=This)||(LA142_0>=From && LA142_0<=With)||(LA142_0>=For && LA142_0<=Var)||LA142_0==PlusSignPlusSign||LA142_0==HyphenMinusHyphenMinus||LA142_0==SolidusEqualsSign||(LA142_0>=As && LA142_0<=If)||LA142_0==Of||LA142_0==ExclamationMark||LA142_0==LeftParenthesis||LA142_0==PlusSign||LA142_0==HyphenMinus||LA142_0==Solidus||(LA142_0>=Semicolon && LA142_0<=LessThanSign)||(LA142_0>=CommercialAt && LA142_0<=LeftSquareBracket)||LA142_0==LeftCurlyBracket||LA142_0==Tilde||LA142_0==RULE_DOUBLE||(LA142_0>=RULE_HEX_INT && LA142_0<=RULE_LEGACY_OCTAL_INT)||LA142_0==RULE_SCIENTIFIC_INT||LA142_0==RULE_IDENTIFIER||LA142_0==RULE_STRING||(LA142_0>=RULE_TEMPLATE_HEAD && LA142_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA142_0==RULE_INT) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSXParser.ruleRootStatement_return retval = new InternalN4JSXParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt143=16;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_RootStatement_return retval = new InternalN4JSXParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt144=16;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSXParser.ruleStatement_return retval = new InternalN4JSXParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSXParser.norm1_Statement_return retval = new InternalN4JSXParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt146=2;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableStatement_return retval = new InternalN4JSXParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==Comma) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableStatement_return retval = new InternalN4JSXParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==Comma) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableStatement_return retval = new InternalN4JSXParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop149:
            do {
                int alt149=2;
                alt149 = dfa149.predict(input);
                switch (alt149) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_40);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3()); 
            }

            }


            }
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==Comma) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LeftCurlyBracket) && (synpred67_InternalN4JSXParser())) {
                alt151=1;
            }
            else if ( (LA151_0==LeftSquareBracket) && (synpred67_InternalN4JSXParser())) {
                alt151=1;
            }
            else if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Abstract)||LA151_0==External||(LA151_0>=Private && LA151_0<=Project)||LA151_0==Public||LA151_0==Static||LA151_0==Target||(LA151_0>=Async && LA151_0<=Await)||LA151_0==Union||(LA151_0>=Yield && LA151_0<=This)||LA151_0==From||LA151_0==Type||(LA151_0>=Get && LA151_0<=Let)||(LA151_0>=Out && LA151_0<=Set)||LA151_0==As||LA151_0==Of||LA151_0==CommercialAt||LA151_0==RULE_IDENTIFIER) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LeftCurlyBracket) && (synpred68_InternalN4JSXParser())) {
                alt152=1;
            }
            else if ( (LA152_0==LeftSquareBracket) && (synpred68_InternalN4JSXParser())) {
                alt152=1;
            }
            else if ( ((LA152_0>=Intersection && LA152_0<=Implements)||(LA152_0>=Promisify && LA152_0<=Abstract)||LA152_0==External||(LA152_0>=Private && LA152_0<=Project)||LA152_0==Public||LA152_0==Static||LA152_0==Target||(LA152_0>=Async && LA152_0<=Await)||LA152_0==Union||(LA152_0>=Yield && LA152_0<=This)||LA152_0==From||LA152_0==Type||(LA152_0>=Get && LA152_0<=Let)||(LA152_0>=Out && LA152_0<=Set)||LA152_0==As||LA152_0==Of||LA152_0==CommercialAt||LA152_0==RULE_IDENTIFIER) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LeftCurlyBracket) && (synpred69_InternalN4JSXParser())) {
                alt153=1;
            }
            else if ( (LA153_0==LeftSquareBracket) && (synpred69_InternalN4JSXParser())) {
                alt153=1;
            }
            else if ( ((LA153_0>=Intersection && LA153_0<=Implements)||(LA153_0>=Promisify && LA153_0<=Abstract)||LA153_0==External||(LA153_0>=Private && LA153_0<=Project)||LA153_0==Public||LA153_0==Static||LA153_0==Target||(LA153_0>=Async && LA153_0<=Await)||LA153_0==Union||LA153_0==This||LA153_0==From||LA153_0==Type||(LA153_0>=Get && LA153_0<=Let)||(LA153_0>=Out && LA153_0<=Set)||LA153_0==As||LA153_0==Of||LA153_0==CommercialAt||LA153_0==RULE_IDENTIFIER) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LeftCurlyBracket) && (synpred70_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( (LA154_0==LeftSquareBracket) && (synpred70_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( ((LA154_0>=Intersection && LA154_0<=Implements)||(LA154_0>=Promisify && LA154_0<=Abstract)||LA154_0==External||(LA154_0>=Private && LA154_0<=Project)||LA154_0==Public||LA154_0==Static||LA154_0==Target||(LA154_0>=Async && LA154_0<=Await)||LA154_0==Union||LA154_0==This||LA154_0==From||LA154_0==Type||(LA154_0>=Get && LA154_0<=Let)||(LA154_0>=Out && LA154_0<=Set)||LA154_0==As||LA154_0==Of||LA154_0==CommercialAt||LA154_0==RULE_IDENTIFIER) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LeftCurlyBracket) && (synpred71_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( (LA155_0==LeftSquareBracket) && (synpred71_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Abstract)||LA155_0==External||(LA155_0>=Private && LA155_0<=Project)||LA155_0==Public||LA155_0==Static||LA155_0==Target||(LA155_0>=Async && LA155_0<=Await)||LA155_0==Union||(LA155_0>=Yield && LA155_0<=This)||LA155_0==From||LA155_0==Type||(LA155_0>=Get && LA155_0<=Let)||(LA155_0>=Out && LA155_0<=Set)||LA155_0==As||LA155_0==Of||LA155_0==CommercialAt||LA155_0==RULE_IDENTIFIER) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LeftCurlyBracket) && (synpred72_InternalN4JSXParser())) {
                alt156=1;
            }
            else if ( (LA156_0==LeftSquareBracket) && (synpred72_InternalN4JSXParser())) {
                alt156=1;
            }
            else if ( ((LA156_0>=Intersection && LA156_0<=Implements)||(LA156_0>=Promisify && LA156_0<=Abstract)||LA156_0==External||(LA156_0>=Private && LA156_0<=Project)||LA156_0==Public||LA156_0==Static||LA156_0==Target||(LA156_0>=Async && LA156_0<=Await)||LA156_0==Union||LA156_0==This||LA156_0==From||LA156_0==Type||(LA156_0>=Get && LA156_0<=Let)||(LA156_0>=Out && LA156_0<=Set)||LA156_0==As||LA156_0==Of||LA156_0==CommercialAt||LA156_0==RULE_IDENTIFIER) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableBinding_return retval = new InternalN4JSXParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableBinding_return retval = new InternalN4JSXParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableBinding_return retval = new InternalN4JSXParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableBinding_return retval = new InternalN4JSXParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableBinding_return retval = new InternalN4JSXParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==EqualsSign) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==EqualsSign) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableBinding_return retval = new InternalN4JSXParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclaration_return retval = new InternalN4JSXParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclaration_return retval = new InternalN4JSXParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclaration_return retval = new InternalN4JSXParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return retval = new InternalN4JSXParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclaration_return retval = new InternalN4JSXParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return retval = new InternalN4JSXParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==EqualsSign) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop163:
            do {
                int alt163=2;
                alt163 = dfa163.predict(input);
                switch (alt163) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==EqualsSign) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop165:
            do {
                int alt165=2;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==EqualsSign) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop167:
            do {
                int alt167=2;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==EqualsSign) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop169:
            do {
                int alt169=2;
                alt169 = dfa169.predict(input);
                switch (alt169) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==Colon) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==EqualsSign) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop172:
            do {
                int alt172=2;
                alt172 = dfa172.predict(input);
                switch (alt172) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==Colon) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==EqualsSign) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop175:
            do {
                int alt175=2;
                alt175 = dfa175.predict(input);
                switch (alt175) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==Colon) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==EqualsSign) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop178:
            do {
                int alt178=2;
                alt178 = dfa178.predict(input);
                switch (alt178) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==Colon) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==EqualsSign) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LeftCurlyBracket) && (synpred89_InternalN4JSXParser())) {
                alt181=1;
            }
            else if ( (LA181_0==LeftSquareBracket) && (synpred89_InternalN4JSXParser())) {
                alt181=1;
            }
            else if ( ((LA181_0>=Intersection && LA181_0<=Implements)||(LA181_0>=Promisify && LA181_0<=Abstract)||LA181_0==External||(LA181_0>=Private && LA181_0<=Project)||LA181_0==Public||LA181_0==Static||LA181_0==Target||(LA181_0>=Async && LA181_0<=Await)||LA181_0==Union||(LA181_0>=Yield && LA181_0<=This)||LA181_0==From||LA181_0==Type||(LA181_0>=Get && LA181_0<=Let)||(LA181_0>=Out && LA181_0<=Set)||LA181_0==As||LA181_0==Of||LA181_0==CommercialAt||LA181_0==RULE_IDENTIFIER) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==LeftCurlyBracket) && (synpred90_InternalN4JSXParser())) {
                alt182=1;
            }
            else if ( (LA182_0==LeftSquareBracket) && (synpred90_InternalN4JSXParser())) {
                alt182=1;
            }
            else if ( ((LA182_0>=Intersection && LA182_0<=Implements)||(LA182_0>=Promisify && LA182_0<=Abstract)||LA182_0==External||(LA182_0>=Private && LA182_0<=Project)||LA182_0==Public||LA182_0==Static||LA182_0==Target||(LA182_0>=Async && LA182_0<=Await)||LA182_0==Union||LA182_0==This||LA182_0==From||LA182_0==Type||(LA182_0>=Get && LA182_0<=Let)||(LA182_0>=Out && LA182_0<=Set)||LA182_0==As||LA182_0==Of||LA182_0==CommercialAt||LA182_0==RULE_IDENTIFIER) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableBinding_return retval = new InternalN4JSXParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSXParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSXParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSXParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSXParser.ruleEmptyStatement_return retval = new InternalN4JSXParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;


            
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionStatement_return retval = new InternalN4JSXParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionStatement_return retval = new InternalN4JSXParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIfStatement_return retval = new InternalN4JSXParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==Else) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred93_InternalN4JSXParser()) ) {
                    alt183=1;
                }
            }
            switch (alt183) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IfStatement_return retval = new InternalN4JSXParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==Else) ) {
                int LA184_1 = input.LA(2);

                if ( (synpred94_InternalN4JSXParser()) ) {
                    alt184=1;
                }
            }
            switch (alt184) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIterationStatement_return retval = new InternalN4JSXParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt185=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt185=1;
                }
                break;
            case While:
                {
                alt185=2;
                }
                break;
            case For:
                {
                alt185=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IterationStatement_return retval = new InternalN4JSXParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt186=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt186=1;
                }
                break;
            case While:
                {
                alt186=2;
                }
                break;
            case For:
                {
                alt186=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDoStatement_return retval = new InternalN4JSXParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt187=2;
            alt187 = dfa187.predict(input);
            switch (alt187) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_DoStatement_return retval = new InternalN4JSXParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==Semicolon) ) {
                int LA188_1 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt188=1;
                }
            }
            else if ( (LA188_0==EOF) && (synpred96_InternalN4JSXParser())) {
                alt188=1;
            }
            else if ( (LA188_0==RULE_EOL) && (synpred96_InternalN4JSXParser())) {
                alt188=1;
            }
            else if ( (LA188_0==RULE_ML_COMMENT) && (synpred96_InternalN4JSXParser())) {
                alt188=1;
            }
            else if ( (LA188_0==RightCurlyBracket) ) {
                int LA188_5 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt188=1;
                }
            }
            switch (alt188) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWhileStatement_return retval = new InternalN4JSXParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WhileStatement_return retval = new InternalN4JSXParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSXParser.ruleForStatement_return retval = new InternalN4JSXParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt206=2;
            alt206 = dfa206.predict(input);
            switch (alt206) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt205=3;
                    alt205 = dfa205.predict(input);
                    switch (alt205) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt197=2;
                            alt197 = dfa197.predict(input);
                            switch (alt197) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt189=2;
                                    int LA189_0 = input.LA(1);

                                    if ( (LA189_0==In) ) {
                                        alt189=1;
                                    }
                                    else if ( (LA189_0==Of) ) {
                                        alt189=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 189, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt189) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt190=2;
                                    alt190 = dfa190.predict(input);
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt196=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt196=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt196=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt196=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 196, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt196) {
                                        case 1 :
                                            {
                                            {
                                            loop191:
                                            do {
                                                int alt191=2;
                                                int LA191_0 = input.LA(1);

                                                if ( (LA191_0==Comma) ) {
                                                    alt191=1;
                                                }


                                                switch (alt191) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop191;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt192=2;
                                            int LA192_0 = input.LA(1);

                                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||LA192_0==Public||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||LA192_0==HyphenMinusHyphenMinus||LA192_0==SolidusEqualsSign||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                                alt192=1;
                                            }
                                            switch (alt192) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt193=2;
                                            int LA193_0 = input.LA(1);

                                            if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||LA193_0==Public||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||LA193_0==HyphenMinusHyphenMinus||LA193_0==SolidusEqualsSign||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                                alt193=1;
                                            }
                                            switch (alt193) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt194=2;
                                            int LA194_0 = input.LA(1);

                                            if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||LA194_0==Public||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||LA194_0==HyphenMinusHyphenMinus||LA194_0==SolidusEqualsSign||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                                alt194=1;
                                            }
                                            switch (alt194) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt195=2;
                                            int LA195_0 = input.LA(1);

                                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                                alt195=1;
                                            }
                                            switch (alt195) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt202=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt202=1;
                                }
                                break;
                            case In:
                                {
                                alt202=2;
                                }
                                break;
                            case Of:
                                {
                                alt202=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 202, 0, input);

                                throw nvae;
                            }

                            switch (alt202) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt198=2;
                                    int LA198_0 = input.LA(1);

                                    if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||LA198_0==Public||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||LA198_0==HyphenMinusHyphenMinus||LA198_0==SolidusEqualsSign||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                        alt198=1;
                                    }
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);

                                    if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||(LA199_0>=External && LA199_0<=Function)||(LA199_0>=Private && LA199_0<=Delete)||LA199_0==Public||LA199_0==Static||(LA199_0>=Target && LA199_0<=Await)||LA199_0==Class||(LA199_0>=False && LA199_0<=Super)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||(LA199_0>=From && LA199_0<=Void)||(LA199_0>=Get && LA199_0<=Set)||LA199_0==PlusSignPlusSign||LA199_0==HyphenMinusHyphenMinus||LA199_0==SolidusEqualsSign||LA199_0==As||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||LA199_0==PlusSign||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {
                                        alt199=1;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt200=2;
                                    int LA200_0 = input.LA(1);

                                    if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||LA200_0==Public||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||LA200_0==HyphenMinusHyphenMinus||LA200_0==SolidusEqualsSign||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {
                                        alt200=1;
                                    }
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt201=2;
                                    int LA201_0 = input.LA(1);

                                    if ( ((LA201_0>=Intersection && LA201_0<=Implements)||(LA201_0>=Promisify && LA201_0<=Abstract)||(LA201_0>=External && LA201_0<=Function)||(LA201_0>=Private && LA201_0<=Delete)||LA201_0==Public||LA201_0==Static||(LA201_0>=Target && LA201_0<=Await)||LA201_0==Class||(LA201_0>=False && LA201_0<=Super)||LA201_0==Union||(LA201_0>=Yield && LA201_0<=This)||(LA201_0>=From && LA201_0<=Void)||(LA201_0>=Get && LA201_0<=Set)||LA201_0==PlusSignPlusSign||LA201_0==HyphenMinusHyphenMinus||LA201_0==SolidusEqualsSign||LA201_0==As||LA201_0==Of||LA201_0==ExclamationMark||LA201_0==LeftParenthesis||LA201_0==PlusSign||LA201_0==HyphenMinus||LA201_0==Solidus||LA201_0==LessThanSign||(LA201_0>=CommercialAt && LA201_0<=LeftSquareBracket)||LA201_0==LeftCurlyBracket||LA201_0==Tilde||LA201_0==RULE_DOUBLE||(LA201_0>=RULE_HEX_INT && LA201_0<=RULE_LEGACY_OCTAL_INT)||LA201_0==RULE_SCIENTIFIC_INT||LA201_0==RULE_IDENTIFIER||LA201_0==RULE_STRING||(LA201_0>=RULE_TEMPLATE_HEAD && LA201_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA201_0==RULE_INT) ) {
                                        alt201=1;
                                    }
                                    switch (alt201) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                alt203=1;
                            }
                            switch (alt203) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt204=2;
                            int LA204_0 = input.LA(1);

                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                alt204=1;
                            }
                            switch (alt204) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ForStatement_return retval = new InternalN4JSXParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt224=2;
            alt224 = dfa224.predict(input);
            switch (alt224) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt223=3;
                    alt223 = dfa223.predict(input);
                    switch (alt223) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt215=2;
                            alt215 = dfa215.predict(input);
                            switch (alt215) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt207=2;
                                    int LA207_0 = input.LA(1);

                                    if ( (LA207_0==In) ) {
                                        alt207=1;
                                    }
                                    else if ( (LA207_0==Of) ) {
                                        alt207=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 207, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt207) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt208=2;
                                    alt208 = dfa208.predict(input);
                                    switch (alt208) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt214=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt214=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt214=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt214=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 214, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt214) {
                                        case 1 :
                                            {
                                            {
                                            loop209:
                                            do {
                                                int alt209=2;
                                                int LA209_0 = input.LA(1);

                                                if ( (LA209_0==Comma) ) {
                                                    alt209=1;
                                                }


                                                switch (alt209) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop209;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt210=2;
                                            int LA210_0 = input.LA(1);

                                            if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||LA210_0==Public||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||LA210_0==HyphenMinusHyphenMinus||LA210_0==SolidusEqualsSign||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                                                alt210=1;
                                            }
                                            switch (alt210) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt211=2;
                                            int LA211_0 = input.LA(1);

                                            if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||LA211_0==Public||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                                alt211=1;
                                            }
                                            switch (alt211) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt212=2;
                                            int LA212_0 = input.LA(1);

                                            if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||LA212_0==Public||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                                alt212=1;
                                            }
                                            switch (alt212) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt213=2;
                                            int LA213_0 = input.LA(1);

                                            if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                                alt213=1;
                                            }
                                            switch (alt213) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt220=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt220=1;
                                }
                                break;
                            case In:
                                {
                                alt220=2;
                                }
                                break;
                            case Of:
                                {
                                alt220=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 0, input);

                                throw nvae;
                            }

                            switch (alt220) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt216=2;
                                    int LA216_0 = input.LA(1);

                                    if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||LA216_0==Public||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||LA216_0==HyphenMinusHyphenMinus||LA216_0==SolidusEqualsSign||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_HEX_INT && LA216_0<=RULE_LEGACY_OCTAL_INT)||LA216_0==RULE_SCIENTIFIC_INT||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_STRING||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_INT) ) {
                                        alt216=1;
                                    }
                                    switch (alt216) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt217=2;
                                    int LA217_0 = input.LA(1);

                                    if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||(LA217_0>=External && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||LA217_0==Public||LA217_0==Static||(LA217_0>=Target && LA217_0<=Await)||LA217_0==Class||(LA217_0>=False && LA217_0<=Super)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||(LA217_0>=From && LA217_0<=Void)||(LA217_0>=Get && LA217_0<=Set)||LA217_0==PlusSignPlusSign||LA217_0==HyphenMinusHyphenMinus||LA217_0==SolidusEqualsSign||LA217_0==As||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||LA217_0==PlusSign||LA217_0==HyphenMinus||LA217_0==Solidus||LA217_0==LessThanSign||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_HEX_INT && LA217_0<=RULE_LEGACY_OCTAL_INT)||LA217_0==RULE_SCIENTIFIC_INT||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_STRING||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_INT) ) {
                                        alt217=1;
                                    }
                                    switch (alt217) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt218=2;
                                    int LA218_0 = input.LA(1);

                                    if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||(LA218_0>=External && LA218_0<=Function)||(LA218_0>=Private && LA218_0<=Delete)||LA218_0==Public||LA218_0==Static||(LA218_0>=Target && LA218_0<=Await)||LA218_0==Class||(LA218_0>=False && LA218_0<=Super)||LA218_0==Union||(LA218_0>=Yield && LA218_0<=This)||(LA218_0>=From && LA218_0<=Void)||(LA218_0>=Get && LA218_0<=Set)||LA218_0==PlusSignPlusSign||LA218_0==HyphenMinusHyphenMinus||LA218_0==SolidusEqualsSign||LA218_0==As||LA218_0==Of||LA218_0==ExclamationMark||LA218_0==LeftParenthesis||LA218_0==PlusSign||LA218_0==HyphenMinus||LA218_0==Solidus||LA218_0==LessThanSign||(LA218_0>=CommercialAt && LA218_0<=LeftSquareBracket)||LA218_0==LeftCurlyBracket||LA218_0==Tilde||LA218_0==RULE_DOUBLE||(LA218_0>=RULE_HEX_INT && LA218_0<=RULE_LEGACY_OCTAL_INT)||LA218_0==RULE_SCIENTIFIC_INT||LA218_0==RULE_IDENTIFIER||LA218_0==RULE_STRING||(LA218_0>=RULE_TEMPLATE_HEAD && LA218_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA218_0==RULE_INT) ) {
                                        alt218=1;
                                    }
                                    switch (alt218) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt219=2;
                                    int LA219_0 = input.LA(1);

                                    if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||(LA219_0>=External && LA219_0<=Function)||(LA219_0>=Private && LA219_0<=Delete)||LA219_0==Public||LA219_0==Static||(LA219_0>=Target && LA219_0<=Await)||LA219_0==Class||(LA219_0>=False && LA219_0<=Super)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||(LA219_0>=From && LA219_0<=Void)||(LA219_0>=Get && LA219_0<=Set)||LA219_0==PlusSignPlusSign||LA219_0==HyphenMinusHyphenMinus||LA219_0==SolidusEqualsSign||LA219_0==As||LA219_0==Of||LA219_0==ExclamationMark||LA219_0==LeftParenthesis||LA219_0==PlusSign||LA219_0==HyphenMinus||LA219_0==Solidus||LA219_0==LessThanSign||(LA219_0>=CommercialAt && LA219_0<=LeftSquareBracket)||LA219_0==LeftCurlyBracket||LA219_0==Tilde||LA219_0==RULE_DOUBLE||(LA219_0>=RULE_HEX_INT && LA219_0<=RULE_LEGACY_OCTAL_INT)||LA219_0==RULE_SCIENTIFIC_INT||LA219_0==RULE_IDENTIFIER||LA219_0==RULE_STRING||(LA219_0>=RULE_TEMPLATE_HEAD && LA219_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA219_0==RULE_INT) ) {
                                        alt219=1;
                                    }
                                    switch (alt219) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt221=2;
                            int LA221_0 = input.LA(1);

                            if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||LA221_0==Public||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||LA221_0==HyphenMinusHyphenMinus||LA221_0==SolidusEqualsSign||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                                alt221=1;
                            }
                            switch (alt221) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt222=2;
                            int LA222_0 = input.LA(1);

                            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||LA222_0==Public||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||LA222_0==HyphenMinusHyphenMinus||LA222_0==SolidusEqualsSign||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                                alt222=1;
                            }
                            switch (alt222) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleLetIdentifierRef_return retval = new InternalN4JSXParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleLetAsIdentifier_return retval = new InternalN4JSXParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;


            
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSXParser.ruleContinueStatement_return retval = new InternalN4JSXParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||LA225_0==External||(LA225_0>=Private && LA225_0<=Project)||LA225_0==Public||LA225_0==Static||LA225_0==Target||(LA225_0>=Async && LA225_0<=Await)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||LA225_0==From||LA225_0==Type||(LA225_0>=Get && LA225_0<=Let)||(LA225_0>=Out && LA225_0<=Set)||LA225_0==As||LA225_0==Of||LA225_0==RULE_IDENTIFIER) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ContinueStatement_return retval = new InternalN4JSXParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( ((LA226_0>=Intersection && LA226_0<=Implements)||(LA226_0>=Promisify && LA226_0<=Abstract)||LA226_0==External||(LA226_0>=Private && LA226_0<=Project)||LA226_0==Public||LA226_0==Static||LA226_0==Target||(LA226_0>=Async && LA226_0<=Await)||LA226_0==Union||LA226_0==This||LA226_0==From||LA226_0==Type||(LA226_0>=Get && LA226_0<=Let)||(LA226_0>=Out && LA226_0<=Set)||LA226_0==As||LA226_0==Of||LA226_0==RULE_IDENTIFIER) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSXParser.ruleBreakStatement_return retval = new InternalN4JSXParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( ((LA227_0>=Intersection && LA227_0<=Implements)||(LA227_0>=Promisify && LA227_0<=Abstract)||LA227_0==External||(LA227_0>=Private && LA227_0<=Project)||LA227_0==Public||LA227_0==Static||LA227_0==Target||(LA227_0>=Async && LA227_0<=Await)||LA227_0==Union||(LA227_0>=Yield && LA227_0<=This)||LA227_0==From||LA227_0==Type||(LA227_0>=Get && LA227_0<=Let)||(LA227_0>=Out && LA227_0<=Set)||LA227_0==As||LA227_0==Of||LA227_0==RULE_IDENTIFIER) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_BreakStatement_return retval = new InternalN4JSXParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||LA228_0==External||(LA228_0>=Private && LA228_0<=Project)||LA228_0==Public||LA228_0==Static||LA228_0==Target||(LA228_0>=Async && LA228_0<=Await)||LA228_0==Union||LA228_0==This||LA228_0==From||LA228_0==Type||(LA228_0>=Get && LA228_0<=Let)||(LA228_0>=Out && LA228_0<=Set)||LA228_0==As||LA228_0==Of||LA228_0==RULE_IDENTIFIER) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSXParser.ruleReturnStatement_return retval = new InternalN4JSXParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||(LA229_0>=External && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||LA229_0==Public||LA229_0==Static||(LA229_0>=Target && LA229_0<=Await)||LA229_0==Class||(LA229_0>=False && LA229_0<=Super)||LA229_0==Union||(LA229_0>=Yield && LA229_0<=This)||(LA229_0>=From && LA229_0<=Void)||(LA229_0>=Get && LA229_0<=Set)||LA229_0==PlusSignPlusSign||LA229_0==HyphenMinusHyphenMinus||LA229_0==SolidusEqualsSign||LA229_0==As||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||LA229_0==LessThanSign||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ReturnStatement_return retval = new InternalN4JSXParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Abstract)||(LA230_0>=External && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||LA230_0==Public||LA230_0==Static||(LA230_0>=Target && LA230_0<=Await)||LA230_0==Class||(LA230_0>=False && LA230_0<=Super)||LA230_0==Union||(LA230_0>=Yield && LA230_0<=This)||(LA230_0>=From && LA230_0<=Void)||(LA230_0>=Get && LA230_0<=Set)||LA230_0==PlusSignPlusSign||LA230_0==HyphenMinusHyphenMinus||LA230_0==SolidusEqualsSign||LA230_0==As||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||LA230_0==LessThanSign||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWithStatement_return retval = new InternalN4JSXParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WithStatement_return retval = new InternalN4JSXParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSXParser.ruleSwitchStatement_return retval = new InternalN4JSXParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==Case) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==Default) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop232:
                    do {
                        int alt232=2;
                        int LA232_0 = input.LA(1);

                        if ( (LA232_0==Case) ) {
                            alt232=1;
                        }


                        switch (alt232) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop232;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_SwitchStatement_return retval = new InternalN4JSXParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==Case) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==Default) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop235:
                    do {
                        int alt235=2;
                        int LA235_0 = input.LA(1);

                        if ( (LA235_0==Case) ) {
                            alt235=1;
                        }


                        switch (alt235) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop235;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSXParser.ruleCaseClause_return retval = new InternalN4JSXParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( ((LA237_0>=Intersection && LA237_0<=Implements)||(LA237_0>=Promisify && LA237_0<=Function)||(LA237_0>=Private && LA237_0<=Delete)||(LA237_0>=Public && LA237_0<=Break)||(LA237_0>=Class && LA237_0<=This)||(LA237_0>=From && LA237_0<=With)||(LA237_0>=For && LA237_0<=Var)||LA237_0==PlusSignPlusSign||LA237_0==HyphenMinusHyphenMinus||LA237_0==SolidusEqualsSign||(LA237_0>=As && LA237_0<=If)||LA237_0==Of||LA237_0==ExclamationMark||LA237_0==LeftParenthesis||LA237_0==PlusSign||LA237_0==HyphenMinus||LA237_0==Solidus||(LA237_0>=Semicolon && LA237_0<=LessThanSign)||(LA237_0>=CommercialAt && LA237_0<=LeftSquareBracket)||LA237_0==LeftCurlyBracket||LA237_0==Tilde||LA237_0==RULE_DOUBLE||(LA237_0>=RULE_HEX_INT && LA237_0<=RULE_LEGACY_OCTAL_INT)||LA237_0==RULE_SCIENTIFIC_INT||LA237_0==RULE_IDENTIFIER||LA237_0==RULE_STRING||(LA237_0>=RULE_TEMPLATE_HEAD && LA237_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA237_0==RULE_INT) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSXParser.norm1_CaseClause_return retval = new InternalN4JSXParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( ((LA238_0>=Intersection && LA238_0<=Implements)||(LA238_0>=Promisify && LA238_0<=Function)||(LA238_0>=Private && LA238_0<=Delete)||(LA238_0>=Public && LA238_0<=Break)||(LA238_0>=Class && LA238_0<=This)||(LA238_0>=From && LA238_0<=With)||(LA238_0>=For && LA238_0<=Var)||LA238_0==PlusSignPlusSign||LA238_0==HyphenMinusHyphenMinus||LA238_0==SolidusEqualsSign||(LA238_0>=As && LA238_0<=If)||LA238_0==Of||LA238_0==ExclamationMark||LA238_0==LeftParenthesis||LA238_0==PlusSign||LA238_0==HyphenMinus||LA238_0==Solidus||(LA238_0>=Semicolon && LA238_0<=LessThanSign)||(LA238_0>=CommercialAt && LA238_0<=LeftSquareBracket)||LA238_0==LeftCurlyBracket||LA238_0==Tilde||LA238_0==RULE_DOUBLE||(LA238_0>=RULE_HEX_INT && LA238_0<=RULE_LEGACY_OCTAL_INT)||LA238_0==RULE_SCIENTIFIC_INT||LA238_0==RULE_IDENTIFIER||LA238_0==RULE_STRING||(LA238_0>=RULE_TEMPLATE_HEAD && LA238_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA238_0==RULE_INT) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultClause_return retval = new InternalN4JSXParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( ((LA239_0>=Intersection && LA239_0<=Implements)||(LA239_0>=Promisify && LA239_0<=Function)||(LA239_0>=Private && LA239_0<=Delete)||(LA239_0>=Public && LA239_0<=Break)||(LA239_0>=Class && LA239_0<=This)||(LA239_0>=From && LA239_0<=With)||(LA239_0>=For && LA239_0<=Var)||LA239_0==PlusSignPlusSign||LA239_0==HyphenMinusHyphenMinus||LA239_0==SolidusEqualsSign||(LA239_0>=As && LA239_0<=If)||LA239_0==Of||LA239_0==ExclamationMark||LA239_0==LeftParenthesis||LA239_0==PlusSign||LA239_0==HyphenMinus||LA239_0==Solidus||(LA239_0>=Semicolon && LA239_0<=LessThanSign)||(LA239_0>=CommercialAt && LA239_0<=LeftSquareBracket)||LA239_0==LeftCurlyBracket||LA239_0==Tilde||LA239_0==RULE_DOUBLE||(LA239_0>=RULE_HEX_INT && LA239_0<=RULE_LEGACY_OCTAL_INT)||LA239_0==RULE_SCIENTIFIC_INT||LA239_0==RULE_IDENTIFIER||LA239_0==RULE_STRING||(LA239_0>=RULE_TEMPLATE_HEAD && LA239_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA239_0==RULE_INT) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSXParser.norm1_DefaultClause_return retval = new InternalN4JSXParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( ((LA240_0>=Intersection && LA240_0<=Implements)||(LA240_0>=Promisify && LA240_0<=Function)||(LA240_0>=Private && LA240_0<=Delete)||(LA240_0>=Public && LA240_0<=Break)||(LA240_0>=Class && LA240_0<=This)||(LA240_0>=From && LA240_0<=With)||(LA240_0>=For && LA240_0<=Var)||LA240_0==PlusSignPlusSign||LA240_0==HyphenMinusHyphenMinus||LA240_0==SolidusEqualsSign||(LA240_0>=As && LA240_0<=If)||LA240_0==Of||LA240_0==ExclamationMark||LA240_0==LeftParenthesis||LA240_0==PlusSign||LA240_0==HyphenMinus||LA240_0==Solidus||(LA240_0>=Semicolon && LA240_0<=LessThanSign)||(LA240_0>=CommercialAt && LA240_0<=LeftSquareBracket)||LA240_0==LeftCurlyBracket||LA240_0==Tilde||LA240_0==RULE_DOUBLE||(LA240_0>=RULE_HEX_INT && LA240_0<=RULE_LEGACY_OCTAL_INT)||LA240_0==RULE_SCIENTIFIC_INT||LA240_0==RULE_IDENTIFIER||LA240_0==RULE_STRING||(LA240_0>=RULE_TEMPLATE_HEAD && LA240_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_0==RULE_INT) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSXParser.ruleLabelledStatement_return retval = new InternalN4JSXParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_LabelledStatement_return retval = new InternalN4JSXParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSXParser.ruleThrowStatement_return retval = new InternalN4JSXParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ThrowStatement_return retval = new InternalN4JSXParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSXParser.ruleTryStatement_return retval = new InternalN4JSXParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==Catch) ) {
                alt242=1;
            }
            else if ( (LA242_0==Finally) ) {
                alt242=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==Finally) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_TryStatement_return retval = new InternalN4JSXParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==Catch) ) {
                alt244=1;
            }
            else if ( (LA244_0==Finally) ) {
                alt244=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }
            switch (alt244) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==Finally) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSXParser.ruleCatchBlock_return retval = new InternalN4JSXParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchBlock_return retval = new InternalN4JSXParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSXParser.ruleCatchVariable_return retval = new InternalN4JSXParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt246=3;
            alt246 = dfa246.predict(input);
            switch (alt246) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt245=2;
                    alt245 = dfa245.predict(input);
                    switch (alt245) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchVariable_return retval = new InternalN4JSXParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt248=3;
            alt248 = dfa248.predict(input);
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt247=2;
                    alt247 = dfa247.predict(input);
                    switch (alt247) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSXParser.ruleFinallyBlock_return retval = new InternalN4JSXParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_FinallyBlock_return retval = new InternalN4JSXParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDebuggerStatement_return retval = new InternalN4JSXParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1()); 
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParenExpression_return retval = new InternalN4JSXParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParenExpression_return retval = new InternalN4JSXParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierRef_return retval = new InternalN4JSXParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSXParser.norm1_IdentifierRef_return retval = new InternalN4JSXParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleSuperLiteral_return retval = new InternalN4JSXParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;


            
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleThisLiteral_return retval = new InternalN4JSXParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleArrayLiteral_return retval = new InternalN4JSXParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==Comma) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=Intersection && LA254_0<=Implements)||(LA254_0>=Promisify && LA254_0<=Abstract)||(LA254_0>=External && LA254_0<=Function)||(LA254_0>=Private && LA254_0<=Delete)||LA254_0==Public||LA254_0==Static||(LA254_0>=Target && LA254_0<=Await)||LA254_0==Class||(LA254_0>=False && LA254_0<=Super)||LA254_0==Union||(LA254_0>=Yield && LA254_0<=This)||(LA254_0>=From && LA254_0<=Void)||LA254_0==FullStopFullStopFullStop||(LA254_0>=Get && LA254_0<=Set)||LA254_0==PlusSignPlusSign||LA254_0==HyphenMinusHyphenMinus||LA254_0==SolidusEqualsSign||LA254_0==As||LA254_0==Of||LA254_0==ExclamationMark||LA254_0==LeftParenthesis||LA254_0==PlusSign||LA254_0==HyphenMinus||LA254_0==Solidus||LA254_0==LessThanSign||(LA254_0>=CommercialAt && LA254_0<=LeftSquareBracket)||LA254_0==LeftCurlyBracket||LA254_0==Tilde||LA254_0==RULE_DOUBLE||(LA254_0>=RULE_HEX_INT && LA254_0<=RULE_LEGACY_OCTAL_INT)||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_IDENTIFIER||LA254_0==RULE_STRING||(LA254_0>=RULE_TEMPLATE_HEAD && LA254_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA254_0==RULE_INT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop251:
                    do {
                        int alt251=2;
                        alt251 = dfa251.predict(input);
                        switch (alt251) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop250:
                    	    do {
                    	        int alt250=2;
                    	        int LA250_0 = input.LA(1);

                    	        if ( (LA250_0==Comma) ) {
                    	            alt250=1;
                    	        }


                    	        switch (alt250) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop250;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==Comma) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop252:
                            do {
                                int alt252=2;
                                int LA252_0 = input.LA(1);

                                if ( (LA252_0==Comma) ) {
                                    alt252=1;
                                }


                                switch (alt252) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop252;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayLiteral_return retval = new InternalN4JSXParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==Comma) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( ((LA260_0>=Intersection && LA260_0<=Implements)||(LA260_0>=Promisify && LA260_0<=Abstract)||(LA260_0>=External && LA260_0<=Function)||(LA260_0>=Private && LA260_0<=Delete)||LA260_0==Public||LA260_0==Static||(LA260_0>=Target && LA260_0<=Await)||LA260_0==Class||(LA260_0>=False && LA260_0<=Super)||LA260_0==Union||(LA260_0>=Yield && LA260_0<=This)||(LA260_0>=From && LA260_0<=Void)||LA260_0==FullStopFullStopFullStop||(LA260_0>=Get && LA260_0<=Set)||LA260_0==PlusSignPlusSign||LA260_0==HyphenMinusHyphenMinus||LA260_0==SolidusEqualsSign||LA260_0==As||LA260_0==Of||LA260_0==ExclamationMark||LA260_0==LeftParenthesis||LA260_0==PlusSign||LA260_0==HyphenMinus||LA260_0==Solidus||LA260_0==LessThanSign||(LA260_0>=CommercialAt && LA260_0<=LeftSquareBracket)||LA260_0==LeftCurlyBracket||LA260_0==Tilde||LA260_0==RULE_DOUBLE||(LA260_0>=RULE_HEX_INT && LA260_0<=RULE_LEGACY_OCTAL_INT)||LA260_0==RULE_SCIENTIFIC_INT||LA260_0==RULE_IDENTIFIER||LA260_0==RULE_STRING||(LA260_0>=RULE_TEMPLATE_HEAD && LA260_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA260_0==RULE_INT) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop257:
                    do {
                        int alt257=2;
                        alt257 = dfa257.predict(input);
                        switch (alt257) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop256:
                    	    do {
                    	        int alt256=2;
                    	        int LA256_0 = input.LA(1);

                    	        if ( (LA256_0==Comma) ) {
                    	            alt256=1;
                    	        }


                    	        switch (alt256) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop256;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop257;
                        }
                    } while (true);
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==Comma) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop258:
                            do {
                                int alt258=2;
                                int LA258_0 = input.LA(1);

                                if ( (LA258_0==Comma) ) {
                                    alt258=1;
                                }


                                switch (alt258) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop258;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSXParser.ruleArrayPadding_return retval = new InternalN4JSXParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSXParser.ruleArrayElement_return retval = new InternalN4JSXParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==FullStopFullStopFullStop) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayElement_return retval = new InternalN4JSXParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==FullStopFullStopFullStop) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleObjectLiteral_return retval = new InternalN4JSXParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( ((LA265_0>=Intersection && LA265_0<=With)||(LA265_0>=For && LA265_0<=Var)||(LA265_0>=As && LA265_0<=Of)||LA265_0==LeftParenthesis||LA265_0==Asterisk||LA265_0==LessThanSign||(LA265_0>=QuestionMark && LA265_0<=LeftSquareBracket)||LA265_0==LeftCurlyBracket||LA265_0==Tilde||LA265_0==RULE_DOUBLE||LA265_0==RULE_HEX_INT||LA265_0==RULE_OCTAL_INT||LA265_0==RULE_SCIENTIFIC_INT||LA265_0==RULE_IDENTIFIER||LA265_0==RULE_STRING||LA265_0==RULE_INT) ) {
                alt265=1;
            }
            switch (alt265) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop263:
                    do {
                        int alt263=2;
                        int LA263_0 = input.LA(1);

                        if ( (LA263_0==Comma) ) {
                            int LA263_1 = input.LA(2);

                            if ( ((LA263_1>=Intersection && LA263_1<=With)||(LA263_1>=For && LA263_1<=Var)||(LA263_1>=As && LA263_1<=Of)||LA263_1==LeftParenthesis||LA263_1==Asterisk||LA263_1==LessThanSign||(LA263_1>=QuestionMark && LA263_1<=LeftSquareBracket)||LA263_1==LeftCurlyBracket||LA263_1==Tilde||LA263_1==RULE_DOUBLE||LA263_1==RULE_HEX_INT||LA263_1==RULE_OCTAL_INT||LA263_1==RULE_SCIENTIFIC_INT||LA263_1==RULE_IDENTIFIER||LA263_1==RULE_STRING||LA263_1==RULE_INT) ) {
                                alt263=1;
                            }


                        }


                        switch (alt263) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop263;
                        }
                    } while (true);
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==Comma) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectLiteral_return retval = new InternalN4JSXParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( ((LA268_0>=Intersection && LA268_0<=With)||(LA268_0>=For && LA268_0<=Var)||(LA268_0>=As && LA268_0<=Of)||LA268_0==LeftParenthesis||LA268_0==Asterisk||LA268_0==LessThanSign||(LA268_0>=QuestionMark && LA268_0<=LeftSquareBracket)||LA268_0==LeftCurlyBracket||LA268_0==Tilde||LA268_0==RULE_DOUBLE||LA268_0==RULE_HEX_INT||LA268_0==RULE_OCTAL_INT||LA268_0==RULE_SCIENTIFIC_INT||LA268_0==RULE_IDENTIFIER||LA268_0==RULE_STRING||LA268_0==RULE_INT) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop266:
                    do {
                        int alt266=2;
                        int LA266_0 = input.LA(1);

                        if ( (LA266_0==Comma) ) {
                            int LA266_1 = input.LA(2);

                            if ( ((LA266_1>=Intersection && LA266_1<=With)||(LA266_1>=For && LA266_1<=Var)||(LA266_1>=As && LA266_1<=Of)||LA266_1==LeftParenthesis||LA266_1==Asterisk||LA266_1==LessThanSign||(LA266_1>=QuestionMark && LA266_1<=LeftSquareBracket)||LA266_1==LeftCurlyBracket||LA266_1==Tilde||LA266_1==RULE_DOUBLE||LA266_1==RULE_HEX_INT||LA266_1==RULE_OCTAL_INT||LA266_1==RULE_SCIENTIFIC_INT||LA266_1==RULE_IDENTIFIER||LA266_1==RULE_STRING||LA266_1==RULE_INT) ) {
                                alt266=1;
                            }


                        }


                        switch (alt266) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop266;
                        }
                    } while (true);
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==Comma) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_12); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignment_return retval = new InternalN4JSXParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt269=6;
            alt269 = dfa269.predict(input);
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyAssignment_return retval = new InternalN4JSXParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt270=6;
            alt270 = dfa270.predict(input);
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt278=5;
            alt278 = dfa278.predict(input);
            switch (alt278) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt271=2;
                    alt271 = dfa271.predict(input);
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==LessThanSign) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt273=2;
                    alt273 = dfa273.predict(input);
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==Asterisk) ) {
                        alt274=1;
                    }
                    else if ( ((LA274_0>=Intersection && LA274_0<=With)||(LA274_0>=For && LA274_0<=Var)||(LA274_0>=As && LA274_0<=Of)||LA274_0==LeftSquareBracket||LA274_0==RULE_DOUBLE||LA274_0==RULE_HEX_INT||LA274_0==RULE_OCTAL_INT||LA274_0==RULE_SCIENTIFIC_INT||LA274_0==RULE_IDENTIFIER||LA274_0==RULE_STRING||LA274_0==RULE_INT) ) {
                        alt274=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);

                        throw nvae;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==Semicolon) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt276=2;
                    alt276 = dfa276.predict(input);
                    switch (alt276) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_70);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==EqualsSign) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt286=5;
            alt286 = dfa286.predict(input);
            switch (alt286) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt279=2;
                    alt279 = dfa279.predict(input);
                    switch (alt279) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==LessThanSign) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt281=2;
                    alt281 = dfa281.predict(input);
                    switch (alt281) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==Asterisk) ) {
                        alt282=1;
                    }
                    else if ( ((LA282_0>=Intersection && LA282_0<=With)||(LA282_0>=For && LA282_0<=Var)||(LA282_0>=As && LA282_0<=Of)||LA282_0==LeftSquareBracket||LA282_0==RULE_DOUBLE||LA282_0==RULE_HEX_INT||LA282_0==RULE_OCTAL_INT||LA282_0==RULE_SCIENTIFIC_INT||LA282_0==RULE_IDENTIFIER||LA282_0==RULE_STRING||LA282_0==RULE_INT) ) {
                        alt282=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 282, 0, input);

                        throw nvae;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==Semicolon) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt284=2;
                    alt284 = dfa284.predict(input);
                    switch (alt284) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_70);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==EqualsSign) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSXParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==LessThanSign) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt288=2;
            alt288 = dfa288.predict(input);
            switch (alt288) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==Asterisk) ) {
                alt289=1;
            }
            else if ( ((LA289_0>=Intersection && LA289_0<=With)||(LA289_0>=For && LA289_0<=Var)||(LA289_0>=As && LA289_0<=Of)||LA289_0==LeftSquareBracket||LA289_0==RULE_DOUBLE||LA289_0==RULE_HEX_INT||LA289_0==RULE_OCTAL_INT||LA289_0==RULE_SCIENTIFIC_INT||LA289_0==RULE_IDENTIFIER||LA289_0==RULE_STRING||LA289_0==RULE_INT) ) {
                alt289=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==Semicolon) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LessThanSign) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt292=2;
            alt292 = dfa292.predict(input);
            switch (alt292) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==Asterisk) ) {
                alt293=1;
            }
            else if ( ((LA293_0>=Intersection && LA293_0<=With)||(LA293_0>=For && LA293_0<=Var)||(LA293_0>=As && LA293_0<=Of)||LA293_0==LeftSquareBracket||LA293_0==RULE_DOUBLE||LA293_0==RULE_HEX_INT||LA293_0==RULE_OCTAL_INT||LA293_0==RULE_SCIENTIFIC_INT||LA293_0==RULE_IDENTIFIER||LA293_0==RULE_STRING||LA293_0==RULE_INT) ) {
                alt293=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 293, 0, input);

                throw nvae;
            }
            switch (alt293) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==Semicolon) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePair_return retval = new InternalN4JSXParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt295=2;
            alt295 = dfa295.predict(input);
            switch (alt295) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt296=2;
            alt296 = dfa296.predict(input);
            switch (alt296) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt297=2;
            alt297 = dfa297.predict(input);
            switch (alt297) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_70);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==EqualsSign) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt299=2;
            alt299 = dfa299.predict(input);
            switch (alt299) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_70);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==EqualsSign) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSXParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertySetterDeclaration_return retval = new InternalN4JSXParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedCallExpression_return retval = new InternalN4JSXParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSXParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLeftHandSideExpression_return retval = new InternalN4JSXParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( (LA302_0==LeftParenthesis) ) {
                alt302=1;
            }
            switch (alt302) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop301:
                    do {
                        int alt301=5;
                        int LA301_0 = input.LA(1);

                        if ( (LA301_0==LeftParenthesis) ) {
                            alt301=1;
                        }
                        else if ( (LA301_0==LeftSquareBracket) ) {
                            alt301=2;
                        }
                        else if ( (LA301_0==FullStop) ) {
                            alt301=3;
                        }
                        else if ( (LA301_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred163_InternalN4JSXParser())) {
                            alt301=4;
                        }
                        else if ( (LA301_0==RULE_TEMPLATE_HEAD) && (synpred163_InternalN4JSXParser())) {
                            alt301=4;
                        }


                        switch (alt301) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop301;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSXParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==LeftParenthesis) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop303:
                    do {
                        int alt303=5;
                        int LA303_0 = input.LA(1);

                        if ( (LA303_0==LeftParenthesis) ) {
                            alt303=1;
                        }
                        else if ( (LA303_0==LeftSquareBracket) ) {
                            alt303=2;
                        }
                        else if ( (LA303_0==FullStop) ) {
                            alt303=3;
                        }
                        else if ( (LA303_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred164_InternalN4JSXParser())) {
                            alt303=4;
                        }
                        else if ( (LA303_0==RULE_TEMPLATE_HEAD) && (synpred164_InternalN4JSXParser())) {
                            alt303=4;
                        }


                        switch (alt303) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop303;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSXParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( ((LA305_0>=Intersection && LA305_0<=Implements)||(LA305_0>=Promisify && LA305_0<=Abstract)||(LA305_0>=External && LA305_0<=Function)||(LA305_0>=Private && LA305_0<=Delete)||LA305_0==Public||LA305_0==Static||(LA305_0>=Target && LA305_0<=Await)||LA305_0==Class||(LA305_0>=False && LA305_0<=Super)||LA305_0==Union||(LA305_0>=Yield && LA305_0<=This)||(LA305_0>=From && LA305_0<=Void)||LA305_0==FullStopFullStopFullStop||(LA305_0>=Get && LA305_0<=Set)||LA305_0==PlusSignPlusSign||LA305_0==HyphenMinusHyphenMinus||LA305_0==SolidusEqualsSign||LA305_0==As||LA305_0==Of||LA305_0==ExclamationMark||LA305_0==LeftParenthesis||LA305_0==PlusSign||LA305_0==HyphenMinus||LA305_0==Solidus||LA305_0==LessThanSign||(LA305_0>=CommercialAt && LA305_0<=LeftSquareBracket)||LA305_0==LeftCurlyBracket||LA305_0==Tilde||LA305_0==RULE_DOUBLE||(LA305_0>=RULE_HEX_INT && LA305_0<=RULE_LEGACY_OCTAL_INT)||LA305_0==RULE_SCIENTIFIC_INT||LA305_0==RULE_IDENTIFIER||LA305_0==RULE_STRING||(LA305_0>=RULE_TEMPLATE_HEAD && LA305_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA305_0==RULE_INT) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSXParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( ((LA306_0>=Intersection && LA306_0<=Implements)||(LA306_0>=Promisify && LA306_0<=Abstract)||(LA306_0>=External && LA306_0<=Function)||(LA306_0>=Private && LA306_0<=Delete)||LA306_0==Public||LA306_0==Static||(LA306_0>=Target && LA306_0<=Await)||LA306_0==Class||(LA306_0>=False && LA306_0<=Super)||LA306_0==Union||(LA306_0>=Yield && LA306_0<=This)||(LA306_0>=From && LA306_0<=Void)||LA306_0==FullStopFullStopFullStop||(LA306_0>=Get && LA306_0<=Set)||LA306_0==PlusSignPlusSign||LA306_0==HyphenMinusHyphenMinus||LA306_0==SolidusEqualsSign||LA306_0==As||LA306_0==Of||LA306_0==ExclamationMark||LA306_0==LeftParenthesis||LA306_0==PlusSign||LA306_0==HyphenMinus||LA306_0==Solidus||LA306_0==LessThanSign||(LA306_0>=CommercialAt && LA306_0<=LeftSquareBracket)||LA306_0==LeftCurlyBracket||LA306_0==Tilde||LA306_0==RULE_DOUBLE||(LA306_0>=RULE_HEX_INT && LA306_0<=RULE_LEGACY_OCTAL_INT)||LA306_0==RULE_SCIENTIFIC_INT||LA306_0==RULE_IDENTIFIER||LA306_0==RULE_STRING||(LA306_0>=RULE_TEMPLATE_HEAD && LA306_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA306_0==RULE_INT) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSXParser.ruleArguments_return retval = new InternalN4JSXParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop307:
            do {
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( (LA307_0==Comma) ) {
                    alt307=1;
                }


                switch (alt307) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSXParser.norm1_Arguments_return retval = new InternalN4JSXParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( (LA308_0==Comma) ) {
                    alt308=1;
                }


                switch (alt308) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop308;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSXParser.ruleArgument_return retval = new InternalN4JSXParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==FullStopFullStopFullStop) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSXParser.norm1_Argument_return retval = new InternalN4JSXParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==FullStopFullStopFullStop) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArguments_return retval = new InternalN4JSXParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1()); 
            }

            }


            }
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==Comma) ) {
                    alt311=1;
                }


                switch (alt311) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop311;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMemberExpression_return retval = new InternalN4JSXParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt317=3;
            alt317 = dfa317.predict(input);
            switch (alt317) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_112);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==LessThanSign) ) {
                        int LA312_1 = input.LA(2);

                        if ( (synpred167_InternalN4JSXParser()) ) {
                            alt312=1;
                        }
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==LeftParenthesis) ) {
                        int LA315_1 = input.LA(2);

                        if ( (synpred168_InternalN4JSXParser()) ) {
                            alt315=1;
                        }
                    }
                    switch (alt315) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt313=2;
                            int LA313_0 = input.LA(1);

                            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Delete)||LA313_0==Public||LA313_0==Static||(LA313_0>=Target && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||(LA313_0>=Yield && LA313_0<=This)||(LA313_0>=From && LA313_0<=Void)||LA313_0==FullStopFullStopFullStop||(LA313_0>=Get && LA313_0<=Set)||LA313_0==PlusSignPlusSign||LA313_0==HyphenMinusHyphenMinus||LA313_0==SolidusEqualsSign||LA313_0==As||LA313_0==Of||LA313_0==ExclamationMark||LA313_0==LeftParenthesis||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==Tilde||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                                alt313=1;
                            }
                            switch (alt313) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop314:
                            do {
                                int alt314=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt314=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt314=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt314=3;
                                    }
                                    break;

                                }

                                switch (alt314) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop314;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop316:
                    do {
                        int alt316=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt316=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt316=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt316=3;
                            }
                            break;

                        }

                        switch (alt316) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop316;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MemberExpression_return retval = new InternalN4JSXParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt323=3;
            alt323 = dfa323.predict(input);
            switch (alt323) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_112);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==LessThanSign) ) {
                        int LA318_1 = input.LA(2);

                        if ( (synpred171_InternalN4JSXParser()) ) {
                            alt318=1;
                        }
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==LeftParenthesis) ) {
                        int LA321_1 = input.LA(2);

                        if ( (synpred172_InternalN4JSXParser()) ) {
                            alt321=1;
                        }
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt319=2;
                            int LA319_0 = input.LA(1);

                            if ( ((LA319_0>=Intersection && LA319_0<=Implements)||(LA319_0>=Promisify && LA319_0<=Abstract)||(LA319_0>=External && LA319_0<=Function)||(LA319_0>=Private && LA319_0<=Delete)||LA319_0==Public||LA319_0==Static||(LA319_0>=Target && LA319_0<=Await)||LA319_0==Class||(LA319_0>=False && LA319_0<=Super)||LA319_0==Union||(LA319_0>=Yield && LA319_0<=This)||(LA319_0>=From && LA319_0<=Void)||LA319_0==FullStopFullStopFullStop||(LA319_0>=Get && LA319_0<=Set)||LA319_0==PlusSignPlusSign||LA319_0==HyphenMinusHyphenMinus||LA319_0==SolidusEqualsSign||LA319_0==As||LA319_0==Of||LA319_0==ExclamationMark||LA319_0==LeftParenthesis||LA319_0==PlusSign||LA319_0==HyphenMinus||LA319_0==Solidus||LA319_0==LessThanSign||(LA319_0>=CommercialAt && LA319_0<=LeftSquareBracket)||LA319_0==LeftCurlyBracket||LA319_0==Tilde||LA319_0==RULE_DOUBLE||(LA319_0>=RULE_HEX_INT && LA319_0<=RULE_LEGACY_OCTAL_INT)||LA319_0==RULE_SCIENTIFIC_INT||LA319_0==RULE_IDENTIFIER||LA319_0==RULE_STRING||(LA319_0>=RULE_TEMPLATE_HEAD && LA319_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA319_0==RULE_INT) ) {
                                alt319=1;
                            }
                            switch (alt319) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop320:
                            do {
                                int alt320=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt320=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt320=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt320=3;
                                    }
                                    break;

                                }

                                switch (alt320) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_106);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop320;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_106);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop322:
                    do {
                        int alt322=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt322=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt322=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt322=3;
                            }
                            break;

                        }

                        switch (alt322) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop322;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSXParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==LessThanSign) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==LessThanSign) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSXParser.rulePostfixExpression_return retval = new InternalN4JSXParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==PlusSignPlusSign) && (synpred173_InternalN4JSXParser())) {
                alt326=1;
            }
            else if ( (LA326_0==HyphenMinusHyphenMinus) && (synpred173_InternalN4JSXParser())) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PostfixExpression_return retval = new InternalN4JSXParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==PlusSignPlusSign) && (synpred174_InternalN4JSXParser())) {
                alt327=1;
            }
            else if ( (LA327_0==HyphenMinusHyphenMinus) && (synpred174_InternalN4JSXParser())) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSXParser.ruleCastExpression_return retval = new InternalN4JSXParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==As) && (synpred175_InternalN4JSXParser())) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_CastExpression_return retval = new InternalN4JSXParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==As) && (synpred176_InternalN4JSXParser())) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnaryExpression_return retval = new InternalN4JSXParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( ((LA330_0>=Intersection && LA330_0<=Implements)||(LA330_0>=Promisify && LA330_0<=Abstract)||(LA330_0>=External && LA330_0<=Function)||(LA330_0>=Private && LA330_0<=Project)||LA330_0==Public||LA330_0==Static||LA330_0==Target||(LA330_0>=Async && LA330_0<=Await)||LA330_0==Class||(LA330_0>=False && LA330_0<=Super)||LA330_0==Union||(LA330_0>=Yield && LA330_0<=This)||(LA330_0>=From && LA330_0<=Type)||(LA330_0>=Get && LA330_0<=Set)||LA330_0==SolidusEqualsSign||LA330_0==As||LA330_0==Of||LA330_0==LeftParenthesis||LA330_0==Solidus||LA330_0==LessThanSign||(LA330_0>=CommercialAt && LA330_0<=LeftSquareBracket)||LA330_0==LeftCurlyBracket||LA330_0==RULE_DOUBLE||(LA330_0>=RULE_HEX_INT && LA330_0<=RULE_LEGACY_OCTAL_INT)||LA330_0==RULE_SCIENTIFIC_INT||LA330_0==RULE_IDENTIFIER||LA330_0==RULE_STRING||(LA330_0>=RULE_TEMPLATE_HEAD && LA330_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA330_0==RULE_INT) ) {
                alt330=1;
            }
            else if ( (LA330_0==Delete||LA330_0==Typeof||LA330_0==Void||LA330_0==PlusSignPlusSign||LA330_0==HyphenMinusHyphenMinus||LA330_0==ExclamationMark||LA330_0==PlusSign||LA330_0==HyphenMinus||LA330_0==Tilde) ) {
                alt330=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_UnaryExpression_return retval = new InternalN4JSXParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( ((LA331_0>=Intersection && LA331_0<=Implements)||(LA331_0>=Promisify && LA331_0<=Abstract)||(LA331_0>=External && LA331_0<=Function)||(LA331_0>=Private && LA331_0<=Project)||LA331_0==Public||LA331_0==Static||LA331_0==Target||(LA331_0>=Async && LA331_0<=Await)||LA331_0==Class||(LA331_0>=False && LA331_0<=Super)||LA331_0==Union||LA331_0==This||(LA331_0>=From && LA331_0<=Type)||(LA331_0>=Get && LA331_0<=Set)||LA331_0==SolidusEqualsSign||LA331_0==As||LA331_0==Of||LA331_0==LeftParenthesis||LA331_0==Solidus||LA331_0==LessThanSign||(LA331_0>=CommercialAt && LA331_0<=LeftSquareBracket)||LA331_0==LeftCurlyBracket||LA331_0==RULE_DOUBLE||(LA331_0>=RULE_HEX_INT && LA331_0<=RULE_LEGACY_OCTAL_INT)||LA331_0==RULE_SCIENTIFIC_INT||LA331_0==RULE_IDENTIFIER||LA331_0==RULE_STRING||(LA331_0>=RULE_TEMPLATE_HEAD && LA331_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA331_0==RULE_INT) ) {
                alt331=1;
            }
            else if ( (LA331_0==Delete||LA331_0==Typeof||LA331_0==Void||LA331_0==PlusSignPlusSign||LA331_0==HyphenMinusHyphenMinus||LA331_0==ExclamationMark||LA331_0==PlusSign||LA331_0==HyphenMinus||LA331_0==Tilde) ) {
                alt331=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);

                throw nvae;
            }
            switch (alt331) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_11);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMultiplicativeExpression_return retval = new InternalN4JSXParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==Asterisk) && (synpred177_InternalN4JSXParser())) {
                    alt332=1;
                }
                else if ( (LA332_0==Solidus) && (synpred177_InternalN4JSXParser())) {
                    alt332=1;
                }
                else if ( (LA332_0==PercentSign) && (synpred177_InternalN4JSXParser())) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSXParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);

                if ( (LA333_0==Asterisk) && (synpred178_InternalN4JSXParser())) {
                    alt333=1;
                }
                else if ( (LA333_0==Solidus) && (synpred178_InternalN4JSXParser())) {
                    alt333=1;
                }
                else if ( (LA333_0==PercentSign) && (synpred178_InternalN4JSXParser())) {
                    alt333=1;
                }


                switch (alt333) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop333;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAdditiveExpression_return retval = new InternalN4JSXParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);

                if ( (LA334_0==PlusSign) && (synpred179_InternalN4JSXParser())) {
                    alt334=1;
                }
                else if ( (LA334_0==HyphenMinus) && (synpred179_InternalN4JSXParser())) {
                    alt334=1;
                }


                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AdditiveExpression_return retval = new InternalN4JSXParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop335:
            do {
                int alt335=2;
                int LA335_0 = input.LA(1);

                if ( (LA335_0==PlusSign) && (synpred180_InternalN4JSXParser())) {
                    alt335=1;
                }
                else if ( (LA335_0==HyphenMinus) && (synpred180_InternalN4JSXParser())) {
                    alt335=1;
                }


                switch (alt335) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSXParser.ruleShiftExpression_return retval = new InternalN4JSXParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop336:
            do {
                int alt336=2;
                alt336 = dfa336.predict(input);
                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ShiftExpression_return retval = new InternalN4JSXParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop337:
            do {
                int alt337=2;
                alt337 = dfa337.predict(input);
                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop337;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSXParser.ruleShiftOperator_return retval = new InternalN4JSXParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;


            
        try {
            {
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==GreaterThanSign) ) {
                alt339=1;
            }
            else if ( (LA339_0==LessThanSignLessThanSign) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0()); 
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1()); 
                    }
                    int alt338=2;
                    int LA338_0 = input.LA(1);

                    if ( (LA338_0==GreaterThanSign) ) {
                        alt338=1;
                    }
                    switch (alt338) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalExpression_return retval = new InternalN4JSXParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop340:
            do {
                int alt340=2;
                alt340 = dfa340.predict(input);
                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalExpression_return retval = new InternalN4JSXParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop341:
            do {
                int alt341=2;
                alt341 = dfa341.predict(input);
                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_RelationalExpression_return retval = new InternalN4JSXParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop342:
            do {
                int alt342=2;
                alt342 = dfa342.predict(input);
                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_RelationalExpression_return retval = new InternalN4JSXParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop343:
            do {
                int alt343=2;
                alt343 = dfa343.predict(input);
                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalOperator_return retval = new InternalN4JSXParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;


            
        try {
            {
            int alt344=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt344=1;
                }
                break;
            case GreaterThanSign:
                {
                alt344=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt344=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt344=4;
                }
                break;
            case Instanceof:
                {
                alt344=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;
            }

            switch (alt344) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalOperator_return retval = new InternalN4JSXParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;


            
        try {
            {
            int alt345=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt345=1;
                }
                break;
            case GreaterThanSign:
                {
                alt345=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt345=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt345=4;
                }
                break;
            case Instanceof:
                {
                alt345=5;
                }
                break;
            case In:
                {
                alt345=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);

                throw nvae;
            }

            switch (alt345) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSXParser.ruleEqualityExpression_return retval = new InternalN4JSXParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==EqualsSignEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==EqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_EqualityExpression_return retval = new InternalN4JSXParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==EqualsSignEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==ExclamationMarkEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==EqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==ExclamationMarkEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_EqualityExpression_return retval = new InternalN4JSXParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==EqualsSignEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==ExclamationMarkEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==EqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==ExclamationMarkEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_EqualityExpression_return retval = new InternalN4JSXParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==EqualsSignEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt349=1;
                }
                else if ( (LA349_0==ExclamationMarkEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt349=1;
                }
                else if ( (LA349_0==EqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt349=1;
                }
                else if ( (LA349_0==ExclamationMarkEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDExpression_return retval = new InternalN4JSXParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==Ampersand) && (synpred195_InternalN4JSXParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==Ampersand) && (synpred196_InternalN4JSXParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);

                if ( (LA352_0==Ampersand) && (synpred197_InternalN4JSXParser())) {
                    alt352=1;
                }


                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==Ampersand) && (synpred198_InternalN4JSXParser())) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDOperator_return retval = new InternalN4JSXParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;


            
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXORExpression_return retval = new InternalN4JSXParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==CircumflexAccent) && (synpred199_InternalN4JSXParser())) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==CircumflexAccent) && (synpred200_InternalN4JSXParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==CircumflexAccent) && (synpred201_InternalN4JSXParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==CircumflexAccent) && (synpred202_InternalN4JSXParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXOROperator_return retval = new InternalN4JSXParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;


            
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseORExpression_return retval = new InternalN4JSXParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==VerticalLine) && (synpred203_InternalN4JSXParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==VerticalLine) && (synpred204_InternalN4JSXParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==VerticalLine) && (synpred205_InternalN4JSXParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==VerticalLine) && (synpred206_InternalN4JSXParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseOROperator_return retval = new InternalN4JSXParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;


            
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDExpression_return retval = new InternalN4JSXParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==AmpersandAmpersand) && (synpred207_InternalN4JSXParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalANDExpression_return retval = new InternalN4JSXParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==AmpersandAmpersand) && (synpred208_InternalN4JSXParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalANDExpression_return retval = new InternalN4JSXParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==AmpersandAmpersand) && (synpred209_InternalN4JSXParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalANDExpression_return retval = new InternalN4JSXParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==AmpersandAmpersand) && (synpred210_InternalN4JSXParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDOperator_return retval = new InternalN4JSXParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;


            
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalORExpression_return retval = new InternalN4JSXParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==VerticalLineVerticalLine) && (synpred211_InternalN4JSXParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalORExpression_return retval = new InternalN4JSXParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==VerticalLineVerticalLine) && (synpred212_InternalN4JSXParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalORExpression_return retval = new InternalN4JSXParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==VerticalLineVerticalLine) && (synpred213_InternalN4JSXParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalORExpression_return retval = new InternalN4JSXParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);

                if ( (LA369_0==VerticalLineVerticalLine) && (synpred214_InternalN4JSXParser())) {
                    alt369=1;
                }


                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop369;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalOROperator_return retval = new InternalN4JSXParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;


            
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleConditionalExpression_return retval = new InternalN4JSXParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==QuestionMark) && (synpred215_InternalN4JSXParser())) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ConditionalExpression_return retval = new InternalN4JSXParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==QuestionMark) && (synpred216_InternalN4JSXParser())) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ConditionalExpression_return retval = new InternalN4JSXParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( (LA372_0==QuestionMark) && (synpred217_InternalN4JSXParser())) {
                alt372=1;
            }
            switch (alt372) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ConditionalExpression_return retval = new InternalN4JSXParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==QuestionMark) && (synpred218_InternalN4JSXParser())) {
                alt373=1;
            }
            switch (alt373) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpression_return retval = new InternalN4JSXParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt375=4;
            alt375 = dfa375.predict(input);
            switch (alt375) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt374=2;
                    alt374 = dfa374.predict(input);
                    switch (alt374) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpression_return retval = new InternalN4JSXParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt377=4;
            alt377 = dfa377.predict(input);
            switch (alt377) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt376=2;
                    alt376 = dfa376.predict(input);
                    switch (alt376) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AssignmentExpression_return retval = new InternalN4JSXParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt379=5;
            alt379 = dfa379.predict(input);
            switch (alt379) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt378=2;
                    alt378 = dfa378.predict(input);
                    switch (alt378) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AssignmentExpression_return retval = new InternalN4JSXParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt381=5;
            alt381 = dfa381.predict(input);
            switch (alt381) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt380=2;
                    alt380 = dfa380.predict(input);
                    switch (alt380) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_11);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSXParser.ruleYieldExpression_return retval = new InternalN4JSXParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==Asterisk) && (synpred239_InternalN4JSXParser())) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt383=2;
            alt383 = dfa383.predict(input);
            switch (alt383) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_YieldExpression_return retval = new InternalN4JSXParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==Asterisk) && (synpred241_InternalN4JSXParser())) {
                alt384=1;
            }
            switch (alt384) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt385=2;
            alt385 = dfa385.predict(input);
            switch (alt385) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentOperator_return retval = new InternalN4JSXParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;


            
        try {
            {
            int alt387=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt387=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt387=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt387=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt387=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt387=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt387=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt387=7;
                }
                break;
            case GreaterThanSign:
                {
                alt387=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt387=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt387=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt387=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);

                throw nvae;
            }

            switch (alt387) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0()); 
                    }
                    int alt386=2;
                    int LA386_0 = input.LA(1);

                    if ( (LA386_0==GreaterThanSign) ) {
                        alt386=1;
                    }
                    switch (alt386) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1()); 
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAwaitExpression_return retval = new InternalN4JSXParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AwaitExpression_return retval = new InternalN4JSXParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AwaitExpression_return retval = new InternalN4JSXParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AwaitExpression_return retval = new InternalN4JSXParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.rulePromisifyExpression_return retval = new InternalN4JSXParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PromisifyExpression_return retval = new InternalN4JSXParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_PromisifyExpression_return retval = new InternalN4JSXParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_PromisifyExpression_return retval = new InternalN4JSXParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_11); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSXParser.ruleExpression_return retval = new InternalN4JSXParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt389=2;
            int LA389_0 = input.LA(1);

            if ( (LA389_0==Comma) ) {
                alt389=1;
            }
            switch (alt389) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop388:
                    do {
                        int alt388=2;
                        int LA388_0 = input.LA(1);

                        if ( (LA388_0==Comma) ) {
                            alt388=1;
                        }


                        switch (alt388) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop388;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSXParser.norm1_Expression_return retval = new InternalN4JSXParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt391=2;
            int LA391_0 = input.LA(1);

            if ( (LA391_0==Comma) ) {
                alt391=1;
            }
            switch (alt391) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop390:
                    do {
                        int alt390=2;
                        int LA390_0 = input.LA(1);

                        if ( (LA390_0==Comma) ) {
                            alt390=1;
                        }


                        switch (alt390) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop390;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSXParser.norm2_Expression_return retval = new InternalN4JSXParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==Comma) ) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop392:
                    do {
                        int alt392=2;
                        int LA392_0 = input.LA(1);

                        if ( (LA392_0==Comma) ) {
                            alt392=1;
                        }


                        switch (alt392) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop392;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSXParser.norm3_Expression_return retval = new InternalN4JSXParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==Comma) ) {
                alt395=1;
            }
            switch (alt395) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop394:
                    do {
                        int alt394=2;
                        int LA394_0 = input.LA(1);

                        if ( (LA394_0==Comma) ) {
                            alt394=1;
                        }


                        switch (alt394) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_11); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop394;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateLiteral_return retval = new InternalN4JSXParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt399=2;
            int LA399_0 = input.LA(1);

            if ( (LA399_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt399=1;
            }
            else if ( (LA399_0==RULE_TEMPLATE_HEAD) ) {
                alt399=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 399, 0, input);

                throw nvae;
            }
            switch (alt399) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_136);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt396=2;
                    int LA396_0 = input.LA(1);

                    if ( ((LA396_0>=Intersection && LA396_0<=Implements)||(LA396_0>=Promisify && LA396_0<=Abstract)||(LA396_0>=External && LA396_0<=Function)||(LA396_0>=Private && LA396_0<=Delete)||LA396_0==Public||LA396_0==Static||(LA396_0>=Target && LA396_0<=Await)||LA396_0==Class||(LA396_0>=False && LA396_0<=Super)||LA396_0==Union||(LA396_0>=Yield && LA396_0<=This)||(LA396_0>=From && LA396_0<=Void)||(LA396_0>=Get && LA396_0<=Set)||LA396_0==PlusSignPlusSign||LA396_0==HyphenMinusHyphenMinus||LA396_0==SolidusEqualsSign||LA396_0==As||LA396_0==Of||LA396_0==ExclamationMark||LA396_0==LeftParenthesis||LA396_0==PlusSign||LA396_0==HyphenMinus||LA396_0==Solidus||LA396_0==LessThanSign||(LA396_0>=CommercialAt && LA396_0<=LeftSquareBracket)||LA396_0==LeftCurlyBracket||LA396_0==Tilde||LA396_0==RULE_DOUBLE||(LA396_0>=RULE_HEX_INT && LA396_0<=RULE_LEGACY_OCTAL_INT)||LA396_0==RULE_SCIENTIFIC_INT||LA396_0==RULE_IDENTIFIER||LA396_0==RULE_STRING||(LA396_0>=RULE_TEMPLATE_HEAD && LA396_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA396_0==RULE_INT) ) {
                        alt396=1;
                    }
                    switch (alt396) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_136);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_137);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop398:
                    do {
                        int alt398=2;
                        int LA398_0 = input.LA(1);

                        if ( (LA398_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt398=1;
                        }


                        switch (alt398) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_136);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt397=2;
                    	    int LA397_0 = input.LA(1);

                    	    if ( ((LA397_0>=Intersection && LA397_0<=Implements)||(LA397_0>=Promisify && LA397_0<=Abstract)||(LA397_0>=External && LA397_0<=Function)||(LA397_0>=Private && LA397_0<=Delete)||LA397_0==Public||LA397_0==Static||(LA397_0>=Target && LA397_0<=Await)||LA397_0==Class||(LA397_0>=False && LA397_0<=Super)||LA397_0==Union||(LA397_0>=Yield && LA397_0<=This)||(LA397_0>=From && LA397_0<=Void)||(LA397_0>=Get && LA397_0<=Set)||LA397_0==PlusSignPlusSign||LA397_0==HyphenMinusHyphenMinus||LA397_0==SolidusEqualsSign||LA397_0==As||LA397_0==Of||LA397_0==ExclamationMark||LA397_0==LeftParenthesis||LA397_0==PlusSign||LA397_0==HyphenMinus||LA397_0==Solidus||LA397_0==LessThanSign||(LA397_0>=CommercialAt && LA397_0<=LeftSquareBracket)||LA397_0==LeftCurlyBracket||LA397_0==Tilde||LA397_0==RULE_DOUBLE||(LA397_0>=RULE_HEX_INT && LA397_0<=RULE_LEGACY_OCTAL_INT)||LA397_0==RULE_SCIENTIFIC_INT||LA397_0==RULE_IDENTIFIER||LA397_0==RULE_STRING||(LA397_0>=RULE_TEMPLATE_HEAD && LA397_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA397_0==RULE_INT) ) {
                    	        alt397=1;
                    	    }
                    	    switch (alt397) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_136);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_137);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop398;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_TemplateLiteral_return retval = new InternalN4JSXParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt403=1;
            }
            else if ( (LA403_0==RULE_TEMPLATE_HEAD) ) {
                alt403=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);

                throw nvae;
            }
            switch (alt403) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_136);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt400=2;
                    int LA400_0 = input.LA(1);

                    if ( ((LA400_0>=Intersection && LA400_0<=Implements)||(LA400_0>=Promisify && LA400_0<=Abstract)||(LA400_0>=External && LA400_0<=Function)||(LA400_0>=Private && LA400_0<=Delete)||LA400_0==Public||LA400_0==Static||(LA400_0>=Target && LA400_0<=Await)||LA400_0==Class||(LA400_0>=False && LA400_0<=Super)||LA400_0==Union||(LA400_0>=Yield && LA400_0<=This)||(LA400_0>=From && LA400_0<=Void)||(LA400_0>=Get && LA400_0<=Set)||LA400_0==PlusSignPlusSign||LA400_0==HyphenMinusHyphenMinus||LA400_0==SolidusEqualsSign||LA400_0==As||LA400_0==Of||LA400_0==ExclamationMark||LA400_0==LeftParenthesis||LA400_0==PlusSign||LA400_0==HyphenMinus||LA400_0==Solidus||LA400_0==LessThanSign||(LA400_0>=CommercialAt && LA400_0<=LeftSquareBracket)||LA400_0==LeftCurlyBracket||LA400_0==Tilde||LA400_0==RULE_DOUBLE||(LA400_0>=RULE_HEX_INT && LA400_0<=RULE_LEGACY_OCTAL_INT)||LA400_0==RULE_SCIENTIFIC_INT||LA400_0==RULE_IDENTIFIER||LA400_0==RULE_STRING||(LA400_0>=RULE_TEMPLATE_HEAD && LA400_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA400_0==RULE_INT) ) {
                        alt400=1;
                    }
                    switch (alt400) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_136);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_137);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop402:
                    do {
                        int alt402=2;
                        int LA402_0 = input.LA(1);

                        if ( (LA402_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt402=1;
                        }


                        switch (alt402) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_136);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt401=2;
                    	    int LA401_0 = input.LA(1);

                    	    if ( ((LA401_0>=Intersection && LA401_0<=Implements)||(LA401_0>=Promisify && LA401_0<=Abstract)||(LA401_0>=External && LA401_0<=Function)||(LA401_0>=Private && LA401_0<=Delete)||LA401_0==Public||LA401_0==Static||(LA401_0>=Target && LA401_0<=Await)||LA401_0==Class||(LA401_0>=False && LA401_0<=Super)||LA401_0==Union||(LA401_0>=Yield && LA401_0<=This)||(LA401_0>=From && LA401_0<=Void)||(LA401_0>=Get && LA401_0<=Set)||LA401_0==PlusSignPlusSign||LA401_0==HyphenMinusHyphenMinus||LA401_0==SolidusEqualsSign||LA401_0==As||LA401_0==Of||LA401_0==ExclamationMark||LA401_0==LeftParenthesis||LA401_0==PlusSign||LA401_0==HyphenMinus||LA401_0==Solidus||LA401_0==LessThanSign||(LA401_0>=CommercialAt && LA401_0<=LeftSquareBracket)||LA401_0==LeftCurlyBracket||LA401_0==Tilde||LA401_0==RULE_DOUBLE||(LA401_0>=RULE_HEX_INT && LA401_0<=RULE_LEGACY_OCTAL_INT)||LA401_0==RULE_SCIENTIFIC_INT||LA401_0==RULE_IDENTIFIER||LA401_0==RULE_STRING||(LA401_0>=RULE_TEMPLATE_HEAD && LA401_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA401_0==RULE_INT) ) {
                    	        alt401=1;
                    	    }
                    	    switch (alt401) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_136);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_137);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop402;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSXParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        		setInTemplateSegment();
            
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSXParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSXParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateHead_return retval = new InternalN4JSXParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTail_return retval = new InternalN4JSXParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddle_return retval = new InternalN4JSXParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLiteral_return retval = new InternalN4JSXParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;



            
        try {
            {
            int alt404=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt404=1;
                }
                break;
            case False:
            case True:
                {
                alt404=2;
                }
                break;
            case RULE_STRING:
                {
                alt404=3;
                }
                break;
            case Null:
                {
                alt404=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt404=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);

                throw nvae;
            }

            switch (alt404) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNullLiteral_return retval = new InternalN4JSXParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;


            
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBooleanLiteral_return retval = new InternalN4JSXParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;


            
        try {
            {
            {
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==True) ) {
                alt405=1;
            }
            else if ( (LA405_0==False) ) {
                alt405=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 405, 0, input);

                throw nvae;
            }
            switch (alt405) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleStringLiteral_return retval = new InternalN4JSXParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteral_return retval = new InternalN4JSXParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSXParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;



            
        try {
            {
            int alt406=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt406=1;
                }
                break;
            case RULE_INT:
                {
                alt406=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt406=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt406=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt406=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt406=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt406=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleDoubleLiteral_return retval = new InternalN4JSXParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleIntLiteral_return retval = new InternalN4JSXParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleOctalIntLiteral_return retval = new InternalN4JSXParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSXParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleHexIntLiteral_return retval = new InternalN4JSXParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBinaryIntLiteral_return retval = new InternalN4JSXParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleScientificIntLiteral_return retval = new InternalN4JSXParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSXParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteralAsString_return retval = new InternalN4JSXParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);


            
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierOrThis_return retval = new InternalN4JSXParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;


            
        try {
            {
            int alt407=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt407=1;
                }
                break;
            case This:
                {
                alt407=2;
                }
                break;
            case Promisify:
                {
                alt407=3;
                }
                break;
            case Target:
                {
                alt407=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);

                throw nvae;
            }

            switch (alt407) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationName_return retval = new InternalN4JSXParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;


            
        try {
            {
            int alt408=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt408=1;
                }
                break;
            case This:
                {
                alt408=2;
                }
                break;
            case Target:
                {
                alt408=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }

            switch (alt408) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSXParser.ruleREGEX_LITERAL_return retval = new InternalN4JSXParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        		setInRegularExpression();
            
        try {
            {
            {
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==Solidus) ) {
                alt409=1;
            }
            else if ( (LA409_0==SolidusEqualsSign) ) {
                alt409=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 409, 0, input);

                throw nvae;
            }
            switch (alt409) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1()); 
                    }

                    }
                    break;

            }
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==RULE_REGEX_TAIL) ) {
                alt410=1;
            }
            switch (alt410) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTailLiteral_return retval = new InternalN4JSXParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==RULE_TEMPLATE_END) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSXParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSXParser.ruleSemi_return retval = new InternalN4JSXParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        		int marker = input.mark();
        		promoteEOL();
            
        try {
            int alt412=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt412=1;
                }
                break;
            case EOF:
                {
                alt412=2;
                }
                break;
            case RULE_EOL:
                {
                alt412=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt412=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt412=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 412, 0, input);

                throw nvae;
            }

            switch (alt412) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSXParser.ruleNoLineTerminator_return retval = new InternalN4JSXParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;


            
        try {
            {
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==RULE_NO_LINE_TERMINATOR) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotation_return retval = new InternalN4JSXParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return retval = new InternalN4JSXParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSXParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSXParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_105);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt416=2;
            alt416 = dfa416.predict(input);
            switch (alt416) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0()); 
                    }

                    }
                    int alt415=2;
                    int LA415_0 = input.LA(1);

                    if ( ((LA415_0>=Intersection && LA415_0<=Constructor)||LA415_0==Promisify||LA415_0==Target||LA415_0==Await||LA415_0==False||LA415_0==Union||LA415_0==This||(LA415_0>=Null && LA415_0<=Void)||LA415_0==SolidusEqualsSign||LA415_0==LeftParenthesis||LA415_0==Solidus||LA415_0==QuestionMark||LA415_0==LeftSquareBracket||LA415_0==LeftCurlyBracket||LA415_0==Tilde||LA415_0==RULE_DOUBLE||(LA415_0>=RULE_HEX_INT && LA415_0<=RULE_LEGACY_OCTAL_INT)||LA415_0==RULE_SCIENTIFIC_INT||LA415_0==RULE_IDENTIFIER||LA415_0==RULE_STRING||LA415_0==RULE_INT) ) {
                        alt415=1;
                    }
                    switch (alt415) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop414:
                            do {
                                int alt414=2;
                                int LA414_0 = input.LA(1);

                                if ( (LA414_0==Comma) ) {
                                    alt414=1;
                                }


                                switch (alt414) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_141); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop414;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationArgument_return retval = new InternalN4JSXParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;



            
        try {
            {
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==False||LA417_0==Null||LA417_0==True||LA417_0==SolidusEqualsSign||LA417_0==Solidus||LA417_0==RULE_DOUBLE||(LA417_0>=RULE_HEX_INT && LA417_0<=RULE_LEGACY_OCTAL_INT)||LA417_0==RULE_SCIENTIFIC_INT||LA417_0==RULE_STRING||LA417_0==RULE_INT) ) {
                alt417=1;
            }
            else if ( ((LA417_0>=Intersection && LA417_0<=Constructor)||LA417_0==Promisify||LA417_0==Target||LA417_0==Await||LA417_0==Union||LA417_0==This||LA417_0==This_1||(LA417_0>=Type && LA417_0<=Void)||LA417_0==LeftParenthesis||LA417_0==QuestionMark||LA417_0==LeftSquareBracket||LA417_0==LeftCurlyBracket||LA417_0==Tilde||LA417_0==RULE_IDENTIFIER) ) {
                alt417=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 417, 0, input);

                throw nvae;
            }
            switch (alt417) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSXParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSXParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationList_return retval = new InternalN4JSXParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_142);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2()); 
            }

            }


            }


            }


            }
            loop418:
            do {
                int alt418=2;
                int LA418_0 = input.LA(1);

                if ( (LA418_0==CommercialAt) ) {
                    alt418=1;
                }


                switch (alt418) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop418;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionAnnotationList_return retval = new InternalN4JSXParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt419=0;
            loop419:
            do {
                int alt419=2;
                int LA419_0 = input.LA(1);

                if ( (LA419_0==CommercialAt) ) {
                    alt419=1;
                }


                switch (alt419) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt419 >= 1 ) break loop419;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(419, input);
                        throw eee;
                }
                cnt419++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt420=0;
            loop420:
            do {
                int alt420=2;
                int LA420_0 = input.LA(1);

                if ( (LA420_0==CommercialAt) ) {
                    alt420=1;
                }


                switch (alt420) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt420 >= 1 ) break loop420;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(420, input);
                        throw eee;
                }
                cnt420++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSXParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt421=0;
            loop421:
            do {
                int alt421=2;
                int LA421_0 = input.LA(1);

                if ( (LA421_0==CommercialAt) ) {
                    alt421=1;
                }


                switch (alt421) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt421 >= 1 ) break loop421;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(421, input);
                        throw eee;
                }
                cnt421++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSXParser.ruleTypeReferenceName_return retval = new InternalN4JSXParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;


            
        try {
            {
            int alt422=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt422=1;
                }
                break;
            case This:
                {
                alt422=2;
                }
                break;
            case Await:
                {
                alt422=3;
                }
                break;
            case Promisify:
                {
                alt422=4;
                }
                break;
            case Target:
                {
                alt422=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt422=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 422, 0, input);

                throw nvae;
            }

            switch (alt422) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_13); if (state.failed) return ;
            int alt423=2;
            int LA423_0 = input.LA(1);

            if ( (LA423_0==FullStop) ) {
                alt423=1;
            }
            switch (alt423) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_143); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0()); 
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassDeclaration_return retval = new InternalN4JSXParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop424:
            do {
                int alt424=2;
                int LA424_0 = input.LA(1);

                if ( ((LA424_0>=Protected && LA424_0<=Abstract)||LA424_0==External||(LA424_0>=Private && LA424_0<=Project)||LA424_0==Public||LA424_0==Static||LA424_0==Const) ) {
                    alt424=1;
                }


                switch (alt424) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_20);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop424;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2()); 
            }
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( (LA425_0==Tilde) ) {
                alt425=1;
            }
            switch (alt425) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( ((LA426_0>=Intersection && LA426_0<=Constructor)||(LA426_0>=Promisify && LA426_0<=Abstract)||LA426_0==External||(LA426_0>=Private && LA426_0<=Project)||LA426_0==Public||LA426_0==Static||LA426_0==Target||(LA426_0>=Async && LA426_0<=Await)||LA426_0==Union||(LA426_0>=Yield && LA426_0<=This)||LA426_0==From||LA426_0==Type||(LA426_0>=Get && LA426_0<=Let)||(LA426_0>=Out && LA426_0<=Set)||LA426_0==As||LA426_0==Of||LA426_0==RULE_IDENTIFIER) ) {
                alt426=1;
            }
            else if ( (LA426_0==Implements) ) {
                int LA426_2 = input.LA(2);

                if ( (LA426_2==Implements||LA426_2==Extends||LA426_2==LessThanSign||LA426_2==LeftCurlyBracket) ) {
                    alt426=1;
                }
            }
            switch (alt426) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==LessThanSign) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt428=2;
            int LA428_0 = input.LA(1);

            if ( (LA428_0==Implements||LA428_0==Extends) ) {
                alt428=1;
            }
            switch (alt428) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSXParser.ruleMembers_return retval = new InternalN4JSXParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop429:
            do {
                int alt429=2;
                int LA429_0 = input.LA(1);

                if ( ((LA429_0>=Intersection && LA429_0<=With)||(LA429_0>=For && LA429_0<=Var)||(LA429_0>=As && LA429_0<=Of)||LA429_0==LeftParenthesis||LA429_0==Asterisk||LA429_0==LessThanSign||(LA429_0>=QuestionMark && LA429_0<=LeftSquareBracket)||LA429_0==LeftCurlyBracket||LA429_0==Tilde||LA429_0==RULE_DOUBLE||LA429_0==RULE_HEX_INT||LA429_0==RULE_OCTAL_INT||LA429_0==RULE_SCIENTIFIC_INT||LA429_0==RULE_IDENTIFIER||LA429_0==RULE_STRING||LA429_0==RULE_INT) ) {
                    alt429=1;
                }


                switch (alt429) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop429;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSXParser.norm1_Members_return retval = new InternalN4JSXParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop430:
            do {
                int alt430=2;
                int LA430_0 = input.LA(1);

                if ( ((LA430_0>=Intersection && LA430_0<=With)||(LA430_0>=For && LA430_0<=Var)||(LA430_0>=As && LA430_0<=Of)||LA430_0==LeftParenthesis||LA430_0==Asterisk||LA430_0==LessThanSign||(LA430_0>=QuestionMark && LA430_0<=LeftSquareBracket)||LA430_0==LeftCurlyBracket||LA430_0==Tilde||LA430_0==RULE_DOUBLE||LA430_0==RULE_HEX_INT||LA430_0==RULE_OCTAL_INT||LA430_0==RULE_SCIENTIFIC_INT||LA430_0==RULE_IDENTIFIER||LA430_0==RULE_STRING||LA430_0==RULE_INT) ) {
                    alt430=1;
                }


                switch (alt430) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop430;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.ruleClassExtendsClause_return retval = new InternalN4JSXParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt434=2;
            int LA434_0 = input.LA(1);

            if ( (LA434_0==Extends) ) {
                alt434=1;
            }
            else if ( (LA434_0==Implements) ) {
                alt434=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 434, 0, input);

                throw nvae;
            }
            switch (alt434) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt433=2;
                    int LA433_0 = input.LA(1);

                    if ( (LA433_0==Void) && (synpred255_InternalN4JSXParser())) {
                        alt433=1;
                    }
                    else if ( (LA433_0==This) ) {
                        int LA433_2 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt433=1;
                        }
                        else if ( (true) ) {
                            alt433=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 433, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA433_0==Await) ) {
                        int LA433_3 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt433=1;
                        }
                        else if ( (true) ) {
                            alt433=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 433, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA433_0==Promisify) ) {
                        int LA433_4 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt433=1;
                        }
                        else if ( (true) ) {
                            alt433=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 433, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA433_0==Target) ) {
                        int LA433_5 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt433=1;
                        }
                        else if ( (true) ) {
                            alt433=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 433, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA433_0==RULE_IDENTIFIER) ) {
                        int LA433_6 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt433=1;
                        }
                        else if ( (true) ) {
                            alt433=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 433, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA433_0>=Intersection && LA433_0<=Implements)||(LA433_0>=Interface && LA433_0<=Abstract)||(LA433_0>=External && LA433_0<=Function)||(LA433_0>=Private && LA433_0<=Project)||LA433_0==Public||LA433_0==Static||LA433_0==Async||LA433_0==Class||(LA433_0>=False && LA433_0<=Super)||LA433_0==Union||LA433_0==Yield||(LA433_0>=From && LA433_0<=Type)||(LA433_0>=Get && LA433_0<=Set)||LA433_0==SolidusEqualsSign||LA433_0==As||LA433_0==Of||LA433_0==LeftParenthesis||LA433_0==Solidus||LA433_0==LessThanSign||(LA433_0>=CommercialAt && LA433_0<=LeftSquareBracket)||LA433_0==LeftCurlyBracket||LA433_0==RULE_DOUBLE||(LA433_0>=RULE_HEX_INT && LA433_0<=RULE_LEGACY_OCTAL_INT)||LA433_0==RULE_SCIENTIFIC_INT||LA433_0==RULE_STRING||(LA433_0>=RULE_TEMPLATE_HEAD && LA433_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA433_0==RULE_INT) ) {
                        alt433=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 433, 0, input);

                        throw nvae;
                    }
                    switch (alt433) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt432=2;
                            int LA432_0 = input.LA(1);

                            if ( (LA432_0==Implements||LA432_0==Extends) ) {
                                alt432=1;
                            }
                            switch (alt432) {
                                case 1 :
                                    {
                                    int alt431=2;
                                    int LA431_0 = input.LA(1);

                                    if ( (LA431_0==Implements) ) {
                                        alt431=1;
                                    }
                                    else if ( (LA431_0==Extends) ) {
                                        alt431=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 431, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt431) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.norm1_ClassExtendsClause_return retval = new InternalN4JSXParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==Extends) ) {
                alt438=1;
            }
            else if ( (LA438_0==Implements) ) {
                alt438=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;
            }
            switch (alt438) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt437=2;
                    int LA437_0 = input.LA(1);

                    if ( (LA437_0==Void) && (synpred256_InternalN4JSXParser())) {
                        alt437=1;
                    }
                    else if ( (LA437_0==This) ) {
                        int LA437_2 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Await) ) {
                        int LA437_3 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Promisify) ) {
                        int LA437_4 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Target) ) {
                        int LA437_5 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==RULE_IDENTIFIER) ) {
                        int LA437_6 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA437_0>=Intersection && LA437_0<=Implements)||(LA437_0>=Interface && LA437_0<=Abstract)||(LA437_0>=External && LA437_0<=Function)||(LA437_0>=Private && LA437_0<=Project)||LA437_0==Public||LA437_0==Static||LA437_0==Async||LA437_0==Class||(LA437_0>=False && LA437_0<=Super)||LA437_0==Union||(LA437_0>=From && LA437_0<=Type)||(LA437_0>=Get && LA437_0<=Set)||LA437_0==SolidusEqualsSign||LA437_0==As||LA437_0==Of||LA437_0==LeftParenthesis||LA437_0==Solidus||LA437_0==LessThanSign||(LA437_0>=CommercialAt && LA437_0<=LeftSquareBracket)||LA437_0==LeftCurlyBracket||LA437_0==RULE_DOUBLE||(LA437_0>=RULE_HEX_INT && LA437_0<=RULE_LEGACY_OCTAL_INT)||LA437_0==RULE_SCIENTIFIC_INT||LA437_0==RULE_STRING||(LA437_0>=RULE_TEMPLATE_HEAD && LA437_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA437_0==RULE_INT) ) {
                        alt437=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 437, 0, input);

                        throw nvae;
                    }
                    switch (alt437) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt436=2;
                            int LA436_0 = input.LA(1);

                            if ( (LA436_0==Implements||LA436_0==Extends) ) {
                                alt436=1;
                            }
                            switch (alt436) {
                                case 1 :
                                    {
                                    int alt435=2;
                                    int LA435_0 = input.LA(1);

                                    if ( (LA435_0==Implements) ) {
                                        alt435=1;
                                    }
                                    else if ( (LA435_0==Extends) ) {
                                        alt435=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 435, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt435) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleClassImplementsList_return retval = new InternalN4JSXParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_148);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0()); 
            }

            }


            }
            loop440:
            do {
                int alt440=2;
                int LA440_0 = input.LA(1);

                if ( (LA440_0==Implements||LA440_0==Extends||LA440_0==Comma) ) {
                    alt440=1;
                }


                switch (alt440) {
            	case 1 :
            	    {
            	    int alt439=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt439=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt439=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt439=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 439, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt439) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_148);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop440;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassExpression_return retval = new InternalN4JSXParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( ((LA441_0>=Intersection && LA441_0<=Constructor)||(LA441_0>=Promisify && LA441_0<=Abstract)||LA441_0==External||(LA441_0>=Private && LA441_0<=Project)||LA441_0==Public||LA441_0==Static||LA441_0==Target||(LA441_0>=Async && LA441_0<=Await)||LA441_0==Union||(LA441_0>=Yield && LA441_0<=This)||LA441_0==From||LA441_0==Type||(LA441_0>=Get && LA441_0<=Let)||(LA441_0>=Out && LA441_0<=Set)||LA441_0==As||LA441_0==Of||LA441_0==RULE_IDENTIFIER) ) {
                alt441=1;
            }
            else if ( (LA441_0==Implements) ) {
                int LA441_2 = input.LA(2);

                if ( (LA441_2==Implements||LA441_2==Extends||LA441_2==LeftCurlyBracket) ) {
                    alt441=1;
                }
            }
            switch (alt441) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==Implements||LA442_0==Extends) ) {
                alt442=1;
            }
            switch (alt442) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_N4ClassExpression_return retval = new InternalN4JSXParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( ((LA443_0>=Intersection && LA443_0<=Constructor)||(LA443_0>=Promisify && LA443_0<=Abstract)||LA443_0==External||(LA443_0>=Private && LA443_0<=Project)||LA443_0==Public||LA443_0==Static||LA443_0==Target||(LA443_0>=Async && LA443_0<=Await)||LA443_0==Union||LA443_0==This||LA443_0==From||LA443_0==Type||(LA443_0>=Get && LA443_0<=Let)||(LA443_0>=Out && LA443_0<=Set)||LA443_0==As||LA443_0==Of||LA443_0==RULE_IDENTIFIER) ) {
                alt443=1;
            }
            else if ( (LA443_0==Implements) ) {
                int LA443_2 = input.LA(2);

                if ( (LA443_2==Implements||LA443_2==Extends||LA443_2==LeftCurlyBracket) ) {
                    alt443=1;
                }
            }
            switch (alt443) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt444=2;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==Implements||LA444_0==Extends) ) {
                alt444=1;
            }
            switch (alt444) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSXParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop445:
            do {
                int alt445=2;
                int LA445_0 = input.LA(1);

                if ( ((LA445_0>=Protected && LA445_0<=Abstract)||LA445_0==External||(LA445_0>=Private && LA445_0<=Project)||LA445_0==Public||LA445_0==Static||LA445_0==Const) ) {
                    alt445=1;
                }


                switch (alt445) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_23);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop445;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2()); 
            }
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==Tilde) ) {
                alt446=1;
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( ((LA447_0>=Intersection && LA447_0<=Constructor)||(LA447_0>=Promisify && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Target||(LA447_0>=Async && LA447_0<=Await)||LA447_0==Union||(LA447_0>=Yield && LA447_0<=This)||LA447_0==From||LA447_0==Type||(LA447_0>=Get && LA447_0<=Let)||(LA447_0>=Out && LA447_0<=Set)||LA447_0==As||LA447_0==Of||LA447_0==RULE_IDENTIFIER) ) {
                alt447=1;
            }
            else if ( (LA447_0==Implements) ) {
                int LA447_2 = input.LA(2);

                if ( (LA447_2==Implements||LA447_2==Extends||LA447_2==LessThanSign||LA447_2==LeftCurlyBracket) ) {
                    alt447=1;
                }
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==LessThanSign) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==Implements||LA449_0==Extends) ) {
                alt449=1;
            }
            switch (alt449) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleInterfaceImplementsList_return retval = new InternalN4JSXParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==Extends) ) {
                alt450=1;
            }
            else if ( (LA450_0==Implements) ) {
                alt450=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 450, 0, input);

                throw nvae;
            }
            switch (alt450) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_148);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1()); 
            }

            }


            }
            loop452:
            do {
                int alt452=2;
                int LA452_0 = input.LA(1);

                if ( (LA452_0==Implements||LA452_0==Extends||LA452_0==Comma) ) {
                    alt452=1;
                }


                switch (alt452) {
            	case 1 :
            	    {
            	    int alt451=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt451=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt451=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt451=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 451, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt451) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_148);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop452;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumDeclaration_return retval = new InternalN4JSXParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop453:
            do {
                int alt453=2;
                int LA453_0 = input.LA(1);

                if ( ((LA453_0>=Protected && LA453_0<=Abstract)||LA453_0==External||(LA453_0>=Private && LA453_0<=Project)||LA453_0==Public||LA453_0==Static||LA453_0==Const) ) {
                    alt453=1;
                }


                switch (alt453) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_24);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop453;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2()); 
            }
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( ((LA454_0>=Intersection && LA454_0<=Implements)||(LA454_0>=Promisify && LA454_0<=Abstract)||LA454_0==External||(LA454_0>=Private && LA454_0<=Project)||LA454_0==Public||LA454_0==Static||LA454_0==Target||(LA454_0>=Async && LA454_0<=Await)||LA454_0==Union||(LA454_0>=Yield && LA454_0<=This)||LA454_0==From||LA454_0==Type||(LA454_0>=Get && LA454_0<=Let)||(LA454_0>=Out && LA454_0<=Set)||LA454_0==As||LA454_0==Of||LA454_0==RULE_IDENTIFIER) ) {
                alt454=1;
            }
            switch (alt454) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==Promisify||LA456_0==Target||LA456_0==This||LA456_0==RULE_IDENTIFIER) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0()); 
                    }

                    }


                    }
                    loop455:
                    do {
                        int alt455=2;
                        int LA455_0 = input.LA(1);

                        if ( (LA455_0==Comma) ) {
                            alt455=1;
                        }


                        switch (alt455) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop455;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumLiteral_return retval = new InternalN4JSXParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt457=2;
            int LA457_0 = input.LA(1);

            if ( (LA457_0==Colon) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt458=6;
            alt458 = dfa458.predict(input);
            switch (alt458) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt459=6;
            alt459 = dfa459.predict(input);
            switch (alt459) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_151);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt471=4;
            alt471 = dfa471.predict(input);
            switch (alt471) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop460:
                    do {
                        int alt460=2;
                        int LA460_0 = input.LA(1);

                        if ( ((LA460_0>=Protected && LA460_0<=Abstract)||LA460_0==External||(LA460_0>=Private && LA460_0<=Project)||LA460_0==Public||LA460_0==Static||LA460_0==Const) ) {
                            alt460=1;
                        }


                        switch (alt460) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop460;
                        }
                    } while (true);

                    pushFollow(FOLLOW_153);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt461=2;
                    alt461 = dfa461.predict(input);
                    switch (alt461) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt462=2;
                    int LA462_0 = input.LA(1);

                    if ( (LA462_0==Semicolon) ) {
                        alt462=1;
                    }
                    switch (alt462) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop463:
                    do {
                        int alt463=2;
                        int LA463_0 = input.LA(1);

                        if ( ((LA463_0>=Protected && LA463_0<=Abstract)||LA463_0==External||(LA463_0>=Private && LA463_0<=Project)||LA463_0==Public||LA463_0==Static||LA463_0==Const) ) {
                            alt463=1;
                        }


                        switch (alt463) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_154);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop463;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt464=2;
                    alt464 = dfa464.predict(input);
                    switch (alt464) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt465=2;
                    int LA465_0 = input.LA(1);

                    if ( (LA465_0==Semicolon) ) {
                        alt465=1;
                    }
                    switch (alt465) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop466:
                    do {
                        int alt466=2;
                        alt466 = dfa466.predict(input);
                        switch (alt466) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop466;
                        }
                    } while (true);
                    int alt467=2;
                    int LA467_0 = input.LA(1);

                    if ( (LA467_0==LessThanSign) ) {
                        alt467=1;
                    }
                    switch (alt467) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt468=2;
                    alt468 = dfa468.predict(input);
                    switch (alt468) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==Asterisk) ) {
                        alt469=1;
                    }
                    else if ( ((LA469_0>=Intersection && LA469_0<=With)||(LA469_0>=For && LA469_0<=Var)||(LA469_0>=As && LA469_0<=Of)||LA469_0==LeftSquareBracket||LA469_0==RULE_DOUBLE||LA469_0==RULE_HEX_INT||LA469_0==RULE_OCTAL_INT||LA469_0==RULE_SCIENTIFIC_INT||LA469_0==RULE_IDENTIFIER||LA469_0==RULE_STRING||LA469_0==RULE_INT) ) {
                        alt469=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 469, 0, input);

                        throw nvae;
                    }
                    switch (alt469) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt470=2;
                    int LA470_0 = input.LA(1);

                    if ( (LA470_0==Semicolon) ) {
                        alt470=1;
                    }
                    switch (alt470) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_151);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt483=4;
            alt483 = dfa483.predict(input);
            switch (alt483) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop472:
                    do {
                        int alt472=2;
                        int LA472_0 = input.LA(1);

                        if ( ((LA472_0>=Protected && LA472_0<=Abstract)||LA472_0==External||(LA472_0>=Private && LA472_0<=Project)||LA472_0==Public||LA472_0==Static||LA472_0==Const) ) {
                            alt472=1;
                        }


                        switch (alt472) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop472;
                        }
                    } while (true);

                    pushFollow(FOLLOW_153);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt473=2;
                    alt473 = dfa473.predict(input);
                    switch (alt473) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt474=2;
                    int LA474_0 = input.LA(1);

                    if ( (LA474_0==Semicolon) ) {
                        alt474=1;
                    }
                    switch (alt474) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop475:
                    do {
                        int alt475=2;
                        int LA475_0 = input.LA(1);

                        if ( ((LA475_0>=Protected && LA475_0<=Abstract)||LA475_0==External||(LA475_0>=Private && LA475_0<=Project)||LA475_0==Public||LA475_0==Static||LA475_0==Const) ) {
                            alt475=1;
                        }


                        switch (alt475) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_154);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop475;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt476=2;
                    alt476 = dfa476.predict(input);
                    switch (alt476) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt477=2;
                    int LA477_0 = input.LA(1);

                    if ( (LA477_0==Semicolon) ) {
                        alt477=1;
                    }
                    switch (alt477) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop478:
                    do {
                        int alt478=2;
                        alt478 = dfa478.predict(input);
                        switch (alt478) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop478;
                        }
                    } while (true);
                    int alt479=2;
                    int LA479_0 = input.LA(1);

                    if ( (LA479_0==LessThanSign) ) {
                        alt479=1;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt480=2;
                    alt480 = dfa480.predict(input);
                    switch (alt480) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt481=2;
                    int LA481_0 = input.LA(1);

                    if ( (LA481_0==Asterisk) ) {
                        alt481=1;
                    }
                    else if ( ((LA481_0>=Intersection && LA481_0<=With)||(LA481_0>=For && LA481_0<=Var)||(LA481_0>=As && LA481_0<=Of)||LA481_0==LeftSquareBracket||LA481_0==RULE_DOUBLE||LA481_0==RULE_HEX_INT||LA481_0==RULE_OCTAL_INT||LA481_0==RULE_SCIENTIFIC_INT||LA481_0==RULE_IDENTIFIER||LA481_0==RULE_STRING||LA481_0==RULE_INT) ) {
                        alt481=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 481, 0, input);

                        throw nvae;
                    }
                    switch (alt481) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt482=2;
                    int LA482_0 = input.LA(1);

                    if ( (LA482_0==Semicolon) ) {
                        alt482=1;
                    }
                    switch (alt482) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSXParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop484:
            do {
                int alt484=2;
                alt484 = dfa484.predict(input);
                switch (alt484) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop484;
                }
            } while (true);
            int alt485=2;
            alt485 = dfa485.predict(input);
            switch (alt485) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_155);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt486=2;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==Colon) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    {
                    pushFollow(FOLLOW_156);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt487=2;
            int LA487_0 = input.LA(1);

            if ( (LA487_0==EqualsSign) ) {
                alt487=1;
            }
            switch (alt487) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSXParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop488:
            do {
                int alt488=2;
                alt488 = dfa488.predict(input);
                switch (alt488) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop488;
                }
            } while (true);
            int alt489=2;
            alt489 = dfa489.predict(input);
            switch (alt489) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_155);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==Colon) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    pushFollow(FOLLOW_156);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==EqualsSign) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4FieldDeclaration_return retval = new InternalN4JSXParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSXParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MethodDeclaration_return retval = new InternalN4JSXParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop492:
            do {
                int alt492=2;
                alt492 = dfa492.predict(input);
                switch (alt492) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop492;
                }
            } while (true);
            int alt493=2;
            int LA493_0 = input.LA(1);

            if ( (LA493_0==LessThanSign) ) {
                alt493=1;
            }
            switch (alt493) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt494=2;
            alt494 = dfa494.predict(input);
            switch (alt494) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt495=2;
            int LA495_0 = input.LA(1);

            if ( (LA495_0==Asterisk) ) {
                alt495=1;
            }
            else if ( ((LA495_0>=Intersection && LA495_0<=With)||(LA495_0>=For && LA495_0<=Var)||(LA495_0>=As && LA495_0<=Of)||LA495_0==LeftSquareBracket||LA495_0==RULE_DOUBLE||LA495_0==RULE_HEX_INT||LA495_0==RULE_OCTAL_INT||LA495_0==RULE_SCIENTIFIC_INT||LA495_0==RULE_IDENTIFIER||LA495_0==RULE_STRING||LA495_0==RULE_INT) ) {
                alt495=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 495, 0, input);

                throw nvae;
            }
            switch (alt495) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt496=2;
            int LA496_0 = input.LA(1);

            if ( (LA496_0==Semicolon) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSXParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop497:
            do {
                int alt497=2;
                alt497 = dfa497.predict(input);
                switch (alt497) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop497;
                }
            } while (true);
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==LessThanSign) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt499=2;
            alt499 = dfa499.predict(input);
            switch (alt499) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Asterisk) ) {
                alt500=1;
            }
            else if ( ((LA500_0>=Intersection && LA500_0<=With)||(LA500_0>=For && LA500_0<=Var)||(LA500_0>=As && LA500_0<=Of)||LA500_0==LeftSquareBracket||LA500_0==RULE_DOUBLE||LA500_0==RULE_HEX_INT||LA500_0==RULE_OCTAL_INT||LA500_0==RULE_SCIENTIFIC_INT||LA500_0==RULE_IDENTIFIER||LA500_0==RULE_STRING||LA500_0==RULE_INT) ) {
                alt500=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 500, 0, input);

                throw nvae;
            }
            switch (alt500) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt501=2;
            int LA501_0 = input.LA(1);

            if ( (LA501_0==Semicolon) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==Semicolon) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==Semicolon) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==LeftCurlyBracket) && (synpred287_InternalN4JSXParser())) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==LeftCurlyBracket) && (synpred288_InternalN4JSXParser())) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==Colon) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_157);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt507=2;
            alt507 = dfa507.predict(input);
            switch (alt507) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==Colon) ) {
                alt508=1;
            }
            switch (alt508) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_157);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt509=2;
            alt509 = dfa509.predict(input);
            switch (alt509) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4GetterDeclaration_return retval = new InternalN4JSXParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop510:
            do {
                int alt510=2;
                int LA510_0 = input.LA(1);

                if ( ((LA510_0>=Protected && LA510_0<=Abstract)||LA510_0==External||(LA510_0>=Private && LA510_0<=Project)||LA510_0==Public||LA510_0==Static||LA510_0==Const) ) {
                    alt510=1;
                }


                switch (alt510) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop510;
                }
            } while (true);

            pushFollow(FOLLOW_153);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt511=2;
            alt511 = dfa511.predict(input);
            switch (alt511) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==Semicolon) ) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop513:
            do {
                int alt513=2;
                int LA513_0 = input.LA(1);

                if ( ((LA513_0>=Protected && LA513_0<=Abstract)||LA513_0==External||(LA513_0>=Private && LA513_0<=Project)||LA513_0==Public||LA513_0==Static||LA513_0==Const) ) {
                    alt513=1;
                }


                switch (alt513) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop513;
                }
            } while (true);

            pushFollow(FOLLOW_153);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt514=2;
            alt514 = dfa514.predict(input);
            switch (alt514) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==Semicolon) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSXParser.ruleGetterHeader_return retval = new InternalN4JSXParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( ((LA516_0>=Intersection && LA516_0<=Constructor)||LA516_0==Promisify||LA516_0==Target||LA516_0==Await||LA516_0==Union||LA516_0==This||LA516_0==This_1||(LA516_0>=Type && LA516_0<=Void)||LA516_0==QuestionMark||LA516_0==LeftCurlyBracket||LA516_0==Tilde||LA516_0==RULE_IDENTIFIER) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    pushFollow(FOLLOW_159);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==Colon) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_GetterHeader_return retval = new InternalN4JSXParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( ((LA518_0>=Intersection && LA518_0<=Constructor)||LA518_0==Promisify||LA518_0==Target||LA518_0==Await||LA518_0==Union||LA518_0==This||LA518_0==This_1||(LA518_0>=Type && LA518_0<=Void)||LA518_0==QuestionMark||LA518_0==LeftCurlyBracket||LA518_0==Tilde||LA518_0==RULE_IDENTIFIER) ) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    pushFollow(FOLLOW_159);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==Colon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4SetterDeclaration_return retval = new InternalN4JSXParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop520:
            do {
                int alt520=2;
                int LA520_0 = input.LA(1);

                if ( ((LA520_0>=Protected && LA520_0<=Abstract)||LA520_0==External||(LA520_0>=Private && LA520_0<=Project)||LA520_0==Public||LA520_0==Static||LA520_0==Const) ) {
                    alt520=1;
                }


                switch (alt520) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop520;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt521=2;
            alt521 = dfa521.predict(input);
            switch (alt521) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt522=2;
            int LA522_0 = input.LA(1);

            if ( (LA522_0==Semicolon) ) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop523:
            do {
                int alt523=2;
                int LA523_0 = input.LA(1);

                if ( ((LA523_0>=Protected && LA523_0<=Abstract)||LA523_0==External||(LA523_0>=Private && LA523_0<=Project)||LA523_0==Public||LA523_0==Static||LA523_0==Const) ) {
                    alt523=1;
                }


                switch (alt523) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop523;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt524=2;
            alt524 = dfa524.predict(input);
            switch (alt524) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==Semicolon) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleBindingPattern_return retval = new InternalN4JSXParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==LeftCurlyBracket) ) {
                alt526=1;
            }
            else if ( (LA526_0==LeftSquareBracket) ) {
                alt526=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 526, 0, input);

                throw nvae;
            }
            switch (alt526) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingPattern_return retval = new InternalN4JSXParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt527=2;
            int LA527_0 = input.LA(1);

            if ( (LA527_0==LeftCurlyBracket) ) {
                alt527=1;
            }
            else if ( (LA527_0==LeftSquareBracket) ) {
                alt527=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 527, 0, input);

                throw nvae;
            }
            switch (alt527) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleObjectBindingPattern_return retval = new InternalN4JSXParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt529=2;
            int LA529_0 = input.LA(1);

            if ( ((LA529_0>=Intersection && LA529_0<=With)||(LA529_0>=For && LA529_0<=Var)||(LA529_0>=As && LA529_0<=Of)||(LA529_0>=CommercialAt && LA529_0<=LeftSquareBracket)||LA529_0==RULE_DOUBLE||LA529_0==RULE_HEX_INT||LA529_0==RULE_OCTAL_INT||LA529_0==RULE_SCIENTIFIC_INT||LA529_0==RULE_IDENTIFIER||LA529_0==RULE_STRING||LA529_0==RULE_INT) ) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop528:
                    do {
                        int alt528=2;
                        int LA528_0 = input.LA(1);

                        if ( (LA528_0==Comma) ) {
                            alt528=1;
                        }


                        switch (alt528) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop528;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSXParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( ((LA531_0>=Intersection && LA531_0<=With)||(LA531_0>=For && LA531_0<=Var)||(LA531_0>=As && LA531_0<=Of)||(LA531_0>=CommercialAt && LA531_0<=LeftSquareBracket)||LA531_0==RULE_DOUBLE||LA531_0==RULE_HEX_INT||LA531_0==RULE_OCTAL_INT||LA531_0==RULE_SCIENTIFIC_INT||LA531_0==RULE_IDENTIFIER||LA531_0==RULE_STRING||LA531_0==RULE_INT) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop530:
                    do {
                        int alt530=2;
                        int LA530_0 = input.LA(1);

                        if ( (LA530_0==Comma) ) {
                            alt530=1;
                        }


                        switch (alt530) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop530;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleArrayBindingPattern_return retval = new InternalN4JSXParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop532:
            do {
                int alt532=2;
                int LA532_0 = input.LA(1);

                if ( (LA532_0==Comma) ) {
                    alt532=1;
                }


                switch (alt532) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop532;
                }
            } while (true);
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( ((LA537_0>=Intersection && LA537_0<=Implements)||(LA537_0>=Promisify && LA537_0<=Abstract)||LA537_0==External||(LA537_0>=Private && LA537_0<=Project)||LA537_0==Public||LA537_0==Static||LA537_0==Target||(LA537_0>=Async && LA537_0<=Await)||LA537_0==Union||(LA537_0>=Yield && LA537_0<=This)||LA537_0==From||LA537_0==Type||LA537_0==FullStopFullStopFullStop||(LA537_0>=Get && LA537_0<=Let)||(LA537_0>=Out && LA537_0<=Set)||LA537_0==As||LA537_0==Of||(LA537_0>=CommercialAt && LA537_0<=LeftSquareBracket)||LA537_0==LeftCurlyBracket||LA537_0==RULE_IDENTIFIER) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop534:
                    do {
                        int alt534=2;
                        alt534 = dfa534.predict(input);
                        switch (alt534) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop533:
                    	    do {
                    	        int alt533=2;
                    	        int LA533_0 = input.LA(1);

                    	        if ( (LA533_0==Comma) ) {
                    	            alt533=1;
                    	        }


                    	        switch (alt533) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop533;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop534;
                        }
                    } while (true);
                    int alt536=2;
                    int LA536_0 = input.LA(1);

                    if ( (LA536_0==Comma) ) {
                        alt536=1;
                    }
                    switch (alt536) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop535:
                            do {
                                int alt535=2;
                                int LA535_0 = input.LA(1);

                                if ( (LA535_0==Comma) ) {
                                    alt535=1;
                                }


                                switch (alt535) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop535;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSXParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop538:
            do {
                int alt538=2;
                int LA538_0 = input.LA(1);

                if ( (LA538_0==Comma) ) {
                    alt538=1;
                }


                switch (alt538) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop538;
                }
            } while (true);
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( ((LA543_0>=Intersection && LA543_0<=Implements)||(LA543_0>=Promisify && LA543_0<=Abstract)||LA543_0==External||(LA543_0>=Private && LA543_0<=Project)||LA543_0==Public||LA543_0==Static||LA543_0==Target||(LA543_0>=Async && LA543_0<=Await)||LA543_0==Union||LA543_0==This||LA543_0==From||LA543_0==Type||LA543_0==FullStopFullStopFullStop||(LA543_0>=Get && LA543_0<=Let)||(LA543_0>=Out && LA543_0<=Set)||LA543_0==As||LA543_0==Of||(LA543_0>=CommercialAt && LA543_0<=LeftSquareBracket)||LA543_0==LeftCurlyBracket||LA543_0==RULE_IDENTIFIER) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop540:
                    do {
                        int alt540=2;
                        alt540 = dfa540.predict(input);
                        switch (alt540) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop539:
                    	    do {
                    	        int alt539=2;
                    	        int LA539_0 = input.LA(1);

                    	        if ( (LA539_0==Comma) ) {
                    	            alt539=1;
                    	        }


                    	        switch (alt539) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop539;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop540;
                        }
                    } while (true);
                    int alt542=2;
                    int LA542_0 = input.LA(1);

                    if ( (LA542_0==Comma) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop541:
                            do {
                                int alt541=2;
                                int LA541_0 = input.LA(1);

                                if ( (LA541_0==Comma) ) {
                                    alt541=1;
                                }


                                switch (alt541) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop541;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSXParser.ruleBindingProperty_return retval = new InternalN4JSXParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt544=2;
            alt544 = dfa544.predict(input);
            switch (alt544) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingProperty_return retval = new InternalN4JSXParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt545=2;
            alt545 = dfa545.predict(input);
            switch (alt545) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.ruleSingleNameBinding_return retval = new InternalN4JSXParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_SingleNameBinding_return retval = new InternalN4JSXParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElement_return retval = new InternalN4JSXParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( (LA547_0==LeftCurlyBracket) && (synpred305_InternalN4JSXParser())) {
                alt547=1;
            }
            else if ( (LA547_0==LeftSquareBracket) && (synpred305_InternalN4JSXParser())) {
                alt547=1;
            }
            else if ( ((LA547_0>=Intersection && LA547_0<=Implements)||(LA547_0>=Promisify && LA547_0<=Abstract)||LA547_0==External||(LA547_0>=Private && LA547_0<=Project)||LA547_0==Public||LA547_0==Static||LA547_0==Target||(LA547_0>=Async && LA547_0<=Await)||LA547_0==Union||(LA547_0>=Yield && LA547_0<=This)||LA547_0==From||LA547_0==Type||(LA547_0>=Get && LA547_0<=Let)||(LA547_0>=Out && LA547_0<=Set)||LA547_0==As||LA547_0==Of||LA547_0==CommercialAt||LA547_0==RULE_IDENTIFIER) ) {
                alt547=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 547, 0, input);

                throw nvae;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt546=2;
                    int LA546_0 = input.LA(1);

                    if ( (LA546_0==EqualsSign) ) {
                        alt546=1;
                    }
                    switch (alt546) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElement_return retval = new InternalN4JSXParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==LeftCurlyBracket) && (synpred306_InternalN4JSXParser())) {
                alt549=1;
            }
            else if ( (LA549_0==LeftSquareBracket) && (synpred306_InternalN4JSXParser())) {
                alt549=1;
            }
            else if ( ((LA549_0>=Intersection && LA549_0<=Implements)||(LA549_0>=Promisify && LA549_0<=Abstract)||LA549_0==External||(LA549_0>=Private && LA549_0<=Project)||LA549_0==Public||LA549_0==Static||LA549_0==Target||(LA549_0>=Async && LA549_0<=Await)||LA549_0==Union||LA549_0==This||LA549_0==From||LA549_0==Type||(LA549_0>=Get && LA549_0<=Let)||(LA549_0>=Out && LA549_0<=Set)||LA549_0==As||LA549_0==Of||LA549_0==CommercialAt||LA549_0==RULE_IDENTIFIER) ) {
                alt549=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 549, 0, input);

                throw nvae;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt548=2;
                    int LA548_0 = input.LA(1);

                    if ( (LA548_0==EqualsSign) ) {
                        alt548=1;
                    }
                    switch (alt548) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingRestElement_return retval = new InternalN4JSXParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt550=2;
            int LA550_0 = input.LA(1);

            if ( (LA550_0==FullStopFullStopFullStop) ) {
                alt550=1;
            }
            switch (alt550) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt552=2;
            int LA552_0 = input.LA(1);

            if ( (LA552_0==LeftCurlyBracket) && (synpred307_InternalN4JSXParser())) {
                alt552=1;
            }
            else if ( (LA552_0==LeftSquareBracket) && (synpred307_InternalN4JSXParser())) {
                alt552=1;
            }
            else if ( ((LA552_0>=Intersection && LA552_0<=Implements)||(LA552_0>=Promisify && LA552_0<=Abstract)||LA552_0==External||(LA552_0>=Private && LA552_0<=Project)||LA552_0==Public||LA552_0==Static||LA552_0==Target||(LA552_0>=Async && LA552_0<=Await)||LA552_0==Union||(LA552_0>=Yield && LA552_0<=This)||LA552_0==From||LA552_0==Type||(LA552_0>=Get && LA552_0<=Let)||(LA552_0>=Out && LA552_0<=Set)||LA552_0==As||LA552_0==Of||LA552_0==CommercialAt||LA552_0==RULE_IDENTIFIER) ) {
                alt552=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 552, 0, input);

                throw nvae;
            }
            switch (alt552) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt551=2;
                    int LA551_0 = input.LA(1);

                    if ( (LA551_0==EqualsSign) ) {
                        alt551=1;
                    }
                    switch (alt551) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingRestElement_return retval = new InternalN4JSXParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt553=2;
            int LA553_0 = input.LA(1);

            if ( (LA553_0==FullStopFullStopFullStop) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt555=2;
            int LA555_0 = input.LA(1);

            if ( (LA555_0==LeftCurlyBracket) && (synpred308_InternalN4JSXParser())) {
                alt555=1;
            }
            else if ( (LA555_0==LeftSquareBracket) && (synpred308_InternalN4JSXParser())) {
                alt555=1;
            }
            else if ( ((LA555_0>=Intersection && LA555_0<=Implements)||(LA555_0>=Promisify && LA555_0<=Abstract)||LA555_0==External||(LA555_0>=Private && LA555_0<=Project)||LA555_0==Public||LA555_0==Static||LA555_0==Target||(LA555_0>=Async && LA555_0<=Await)||LA555_0==Union||LA555_0==This||LA555_0==From||LA555_0==Type||(LA555_0>=Get && LA555_0<=Let)||(LA555_0>=Out && LA555_0<=Set)||LA555_0==As||LA555_0==Of||LA555_0==CommercialAt||LA555_0==RULE_IDENTIFIER) ) {
                alt555=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);

                throw nvae;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt554=2;
                    int LA554_0 = input.LA(1);

                    if ( (LA554_0==EqualsSign) ) {
                        alt554=1;
                    }
                    switch (alt554) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_11); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSXParser.ruleElision_return retval = new InternalN4JSXParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt556=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt556=1;
                }
                break;
            case RULE_STRING:
                {
                alt556=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt556=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt556=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 556, 0, input);

                throw nvae;
            }

            switch (alt556) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt557=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt557=1;
                }
                break;
            case RULE_STRING:
                {
                alt557=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt557=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt557=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 557, 0, input);

                throw nvae;
            }

            switch (alt557) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_11); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRef_return retval = new InternalN4JSXParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpression_return retval = new InternalN4JSXParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSXParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==VerticalLine) ) {
                alt559=1;
            }
            switch (alt559) {
                case 1 :
                    {
                    int cnt558=0;
                    loop558:
                    do {
                        int alt558=2;
                        int LA558_0 = input.LA(1);

                        if ( (LA558_0==VerticalLine) ) {
                            alt558=1;
                        }


                        switch (alt558) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_126);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt558 >= 1 ) break loop558;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(558, input);
                                throw eee;
                        }
                        cnt558++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSXParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt561=2;
            int LA561_0 = input.LA(1);

            if ( (LA561_0==Ampersand) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    int cnt560=0;
                    loop560:
                    do {
                        int alt560=2;
                        int LA560_0 = input.LA(1);

                        if ( (LA560_0==Ampersand) ) {
                            alt560=1;
                        }


                        switch (alt560) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_124);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt560 >= 1 ) break loop560;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(560, input);
                                throw eee;
                        }
                        cnt560++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryTypeExpression_return retval = new InternalN4JSXParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;



            
        try {
            {
            int alt562=4;
            alt562 = dfa562.predict(input);
            switch (alt562) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1()); 
                    }
                    pushFollow(FOLLOW_75);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3()); 
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_75);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRef_return retval = new InternalN4JSXParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt564=2;
            int LA564_0 = input.LA(1);

            if ( ((LA564_0>=Intersection && LA564_0<=Constructor)||LA564_0==Promisify||LA564_0==Target||LA564_0==Await||LA564_0==Union||LA564_0==This||LA564_0==This_1||(LA564_0>=Type && LA564_0<=Void)||LA564_0==LeftCurlyBracket||LA564_0==Tilde||LA564_0==RULE_IDENTIFIER) ) {
                alt564=1;
            }
            else if ( (LA564_0==QuestionMark) ) {
                alt564=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 564, 0, input);

                throw nvae;
            }
            switch (alt564) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_165);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt563=2;
                    int LA563_0 = input.LA(1);

                    if ( (LA563_0==QuestionMark) ) {
                        int LA563_1 = input.LA(2);

                        if ( (synpred310_InternalN4JSXParser()) ) {
                            alt563=1;
                        }
                    }
                    switch (alt563) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt567=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt567=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt567=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt567=3;
                }
                break;
            case Union:
                {
                alt567=4;
                }
                break;
            case Intersection:
                {
                alt567=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 567, 0, input);

                throw nvae;
            }

            switch (alt567) {
                case 1 :
                    {
                    {
                    int alt565=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt565=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA565_4 = input.LA(3);

                            if ( (LA565_4==This_1) ) {
                                alt565=2;
                            }
                            else if ( (LA565_4==Promisify||LA565_4==Target||LA565_4==Await||LA565_4==This||LA565_4==Void||LA565_4==RULE_IDENTIFIER) ) {
                                alt565=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 565, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA565_5 = input.LA(3);

                            if ( (LA565_5==This_1) ) {
                                alt565=2;
                            }
                            else if ( (LA565_5==Promisify||LA565_5==Target||LA565_5==Await||LA565_5==This||LA565_5==Void||LA565_5==RULE_IDENTIFIER) ) {
                                alt565=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 565, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt565=1;
                            }
                            break;
                        case This_1:
                            {
                            alt565=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 565, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt565=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 565, 0, input);

                        throw nvae;
                    }

                    switch (alt565) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_48);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_48);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt566=2;
                    alt566 = dfa566.predict(input);
                    switch (alt566) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt568=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt568=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt568=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt568=3;
                }
                break;
            case Union:
                {
                alt568=4;
                }
                break;
            case Intersection:
                {
                alt568=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 568, 0, input);

                throw nvae;
            }

            switch (alt568) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefForCast_return retval = new InternalN4JSXParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;



            
        try {
            {
            int alt569=8;
            alt569 = dfa569.predict(input);
            switch (alt569) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_2 = null;



            
        try {
            {
            int alt570=3;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==Promisify||LA570_0==Target||LA570_0==Await||LA570_0==This||LA570_0==Void||LA570_0==RULE_IDENTIFIER) ) {
                alt570=1;
            }
            else if ( (LA570_0==This_1) ) {
                alt570=2;
            }
            else if ( (LA570_0==QuestionMark) && (synpred312_InternalN4JSXParser())) {
                alt570=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 570, 0, input);

                throw nvae;
            }
            switch (alt570) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRef_return retval = new InternalN4JSXParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt571=2;
            int LA571_0 = input.LA(1);

            if ( (LA571_0==This_1) ) {
                alt571=1;
            }
            else if ( (LA571_0==Tilde) ) {
                alt571=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 571, 0, input);

                throw nvae;
            }
            switch (alt571) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefNominal_return retval = new InternalN4JSXParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefStructural_return retval = new InternalN4JSXParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_166);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1()); 
            }
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( (LA572_0==With) ) {
                int LA572_1 = input.LA(2);

                if ( (LA572_1==LeftCurlyBracket) ) {
                    alt572=1;
                }
            }
            switch (alt572) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==CommercialAt) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0()); 
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1()); 
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4()); 
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3()); 
            }
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==LessThanSign) ) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1()); 
                    }

                    }


                    }
                    loop574:
                    do {
                        int alt574=2;
                        int LA574_0 = input.LA(1);

                        if ( (LA574_0==Comma) ) {
                            alt574=1;
                        }


                        switch (alt574) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop574;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3()); 
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7()); 
            }
            int alt576=2;
            int LA576_0 = input.LA(1);

            if ( (LA576_0==Colon) ) {
                alt576=1;
            }
            switch (alt576) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3()); 
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( ((LA578_0>=Intersection && LA578_0<=Implements)||(LA578_0>=Promisify && LA578_0<=Abstract)||LA578_0==External||(LA578_0>=Private && LA578_0<=Project)||LA578_0==Public||LA578_0==Static||LA578_0==Target||(LA578_0>=Async && LA578_0<=Await)||LA578_0==Union||(LA578_0>=Yield && LA578_0<=This)||LA578_0==From||LA578_0==This_1||(LA578_0>=Type && LA578_0<=Void)||LA578_0==FullStopFullStopFullStop||(LA578_0>=Get && LA578_0<=Let)||(LA578_0>=Out && LA578_0<=Set)||LA578_0==As||LA578_0==Of||LA578_0==LeftParenthesis||LA578_0==QuestionMark||LA578_0==LeftSquareBracket||LA578_0==LeftCurlyBracket||LA578_0==Tilde||LA578_0==RULE_IDENTIFIER) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0()); 
                    }

                    }


                    }
                    loop577:
                    do {
                        int alt577=2;
                        int LA577_0 = input.LA(1);

                        if ( (LA577_0==Comma) ) {
                            alt577=1;
                        }


                        switch (alt577) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_173); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop577;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt579=2;
            int LA579_0 = input.LA(1);

            if ( (LA579_0==FullStopFullStopFullStop) ) {
                alt579=1;
            }
            switch (alt579) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt580=2;
            alt580 = dfa580.predict(input);
            switch (alt580) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0()); 
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);

                if ( (LA581_0==Comma) ) {
                    alt581=1;
                }


                switch (alt581) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop581;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop582:
            do {
                int alt582=2;
                int LA582_0 = input.LA(1);

                if ( (LA582_0==Comma) ) {
                    alt582=1;
                }


                switch (alt582) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop582;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRef_return retval = new InternalN4JSXParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt583=2;
            int LA583_0 = input.LA(1);

            if ( (LA583_0==Promisify||LA583_0==Target||LA583_0==Await||LA583_0==This||LA583_0==Void||LA583_0==RULE_IDENTIFIER) ) {
                alt583=1;
            }
            else if ( (LA583_0==Tilde) ) {
                alt583=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 583, 0, input);

                throw nvae;
            }
            switch (alt583) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_176);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0()); 
            }

            }


            }
            int alt585=2;
            alt585 = dfa585.predict(input);
            switch (alt585) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1()); 
                    }

                    }


                    }
                    loop584:
                    do {
                        int alt584=2;
                        int LA584_0 = input.LA(1);

                        if ( (LA584_0==Comma) ) {
                            alt584=1;
                        }


                        switch (alt584) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop584;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleArrayTypeRef_return retval = new InternalN4JSXParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_147);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_178);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1()); 
            }

            }


            }
            int alt587=2;
            alt587 = dfa587.predict(input);
            switch (alt587) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1()); 
                    }

                    }


                    }
                    loop586:
                    do {
                        int alt586=2;
                        int LA586_0 = input.LA(1);

                        if ( (LA586_0==Comma) ) {
                            alt586=1;
                        }


                        switch (alt586) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop586;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3()); 
                    }

                    }
                    break;

            }
            int alt588=2;
            int LA588_0 = input.LA(1);

            if ( (LA588_0==With) ) {
                int LA588_1 = input.LA(2);

                if ( (LA588_1==LeftCurlyBracket) ) {
                    alt588=1;
                }
            }
            switch (alt588) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMemberList_return retval = new InternalN4JSXParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop590:
            do {
                int alt590=2;
                int LA590_0 = input.LA(1);

                if ( ((LA590_0>=Intersection && LA590_0<=With)||(LA590_0>=For && LA590_0<=Var)||(LA590_0>=As && LA590_0<=Of)||LA590_0==LessThanSign||LA590_0==RULE_IDENTIFIER) ) {
                    alt590=1;
                }


                switch (alt590) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_180);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0()); 
            	    }

            	    }


            	    }
            	    int alt589=3;
            	    int LA589_0 = input.LA(1);

            	    if ( (LA589_0==Semicolon) ) {
            	        alt589=1;
            	    }
            	    else if ( (LA589_0==Comma) ) {
            	        alt589=2;
            	    }
            	    switch (alt589) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1()); 
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop590;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMember_return retval = new InternalN4JSXParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;



            
        try {
            {
            int alt591=4;
            alt591 = dfa591.predict(input);
            switch (alt591) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMethod_return retval = new InternalN4JSXParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt593=2;
            int LA593_0 = input.LA(1);

            if ( (LA593_0==LessThanSign) ) {
                alt593=1;
            }
            switch (alt593) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1()); 
                    }

                    }


                    }
                    loop592:
                    do {
                        int alt592=2;
                        int LA592_0 = input.LA(1);

                        if ( (LA592_0==Comma) ) {
                            alt592=1;
                        }


                        switch (alt592) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop592;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2()); 
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3()); 
            }

            }


            }

            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2()); 
            }
            int alt594=2;
            int LA594_0 = input.LA(1);

            if ( (LA594_0==Colon) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSXParser.ruleTStructField_return retval = new InternalN4JSXParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt595=2;
            int LA595_0 = input.LA(1);

            if ( (LA595_0==Colon) ) {
                alt595=1;
            }
            switch (alt595) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructGetter_return retval = new InternalN4JSXParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2()); 
            }
            int alt596=2;
            int LA596_0 = input.LA(1);

            if ( (LA596_0==Colon) ) {
                alt596=1;
            }
            switch (alt596) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructSetter_return retval = new InternalN4JSXParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;


            
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0()); 
            }
            int alt597=3;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==Tilde) ) {
                alt597=1;
            }
            else if ( (LA597_0==RULE_STRUCTMODSUFFIX) ) {
                alt597=2;
            }
            switch (alt597) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;


            
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;



            
        try {
            {
            {
            int alt598=2;
            int LA598_0 = input.LA(1);

            if ( (LA598_0==Type) ) {
                alt598=1;
            }
            else if ( (LA598_0==Constructor) ) {
                alt598=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);

                throw nvae;
            }
            switch (alt598) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_12);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgument_return retval = new InternalN4JSXParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;



            
        try {
            {
            int alt599=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA599_1 = input.LA(2);

                if ( (synpred322_InternalN4JSXParser()) ) {
                    alt599=1;
                }
                else if ( (true) ) {
                    alt599=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 599, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt599=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt599=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 599, 0, input);

                throw nvae;
            }

            switch (alt599) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSXParser.ruleWildcard_return retval = new InternalN4JSXParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1()); 
            }

            }


            }
            int alt600=3;
            int LA600_0 = input.LA(1);

            if ( (LA600_0==Extends) ) {
                alt600=1;
            }
            else if ( (LA600_0==Super) ) {
                alt600=2;
            }
            switch (alt600) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSXParser.ruleWildcardNewNotation_return retval = new InternalN4JSXParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt601=2;
            int LA601_0 = input.LA(1);

            if ( (LA601_0==Out) ) {
                alt601=1;
            }
            else if ( (LA601_0==In) ) {
                alt601=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }
            switch (alt601) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSXParser.ruleUndefModifierToken_return retval = new InternalN4JSXParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;


            
        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifier_return retval = new InternalN4JSXParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;


            
        try {
            {
            int alt602=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt602=1;
                }
                break;
            case Yield:
                {
                alt602=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt602=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }

            switch (alt602) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifier_return retval = new InternalN4JSXParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt603=2;
            int LA603_0 = input.LA(1);

            if ( (LA603_0==RULE_IDENTIFIER) ) {
                alt603=1;
            }
            else if ( ((LA603_0>=Intersection && LA603_0<=Implements)||(LA603_0>=Promisify && LA603_0<=Abstract)||LA603_0==External||(LA603_0>=Private && LA603_0<=Project)||LA603_0==Public||LA603_0==Static||LA603_0==Target||(LA603_0>=Async && LA603_0<=Await)||LA603_0==Union||LA603_0==This||LA603_0==From||LA603_0==Type||(LA603_0>=Get && LA603_0<=Let)||(LA603_0>=Out && LA603_0<=Set)||LA603_0==As||LA603_0==Of) ) {
                alt603=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }
            switch (alt603) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierName_return retval = new InternalN4JSXParser.ruleIdentifierName_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt604=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt604=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt604=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt604=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;


            
        try {
            {
            int alt605=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt605=1;
                }
                break;
            case Case:
                {
                alt605=2;
                }
                break;
            case Catch:
                {
                alt605=3;
                }
                break;
            case Class:
                {
                alt605=4;
                }
                break;
            case Const:
                {
                alt605=5;
                }
                break;
            case Continue:
                {
                alt605=6;
                }
                break;
            case Debugger:
                {
                alt605=7;
                }
                break;
            case Default:
                {
                alt605=8;
                }
                break;
            case Delete:
                {
                alt605=9;
                }
                break;
            case Do:
                {
                alt605=10;
                }
                break;
            case Else:
                {
                alt605=11;
                }
                break;
            case Export:
                {
                alt605=12;
                }
                break;
            case Extends:
                {
                alt605=13;
                }
                break;
            case Finally:
                {
                alt605=14;
                }
                break;
            case For:
                {
                alt605=15;
                }
                break;
            case Function:
                {
                alt605=16;
                }
                break;
            case If:
                {
                alt605=17;
                }
                break;
            case Import:
                {
                alt605=18;
                }
                break;
            case In:
                {
                alt605=19;
                }
                break;
            case Instanceof:
                {
                alt605=20;
                }
                break;
            case New:
                {
                alt605=21;
                }
                break;
            case Return:
                {
                alt605=22;
                }
                break;
            case Super:
                {
                alt605=23;
                }
                break;
            case Switch:
                {
                alt605=24;
                }
                break;
            case This_1:
                {
                alt605=25;
                }
                break;
            case Throw:
                {
                alt605=26;
                }
                break;
            case Try:
                {
                alt605=27;
                }
                break;
            case Typeof:
                {
                alt605=28;
                }
                break;
            case Var:
                {
                alt605=29;
                }
                break;
            case Void:
                {
                alt605=30;
                }
                break;
            case While:
                {
                alt605=31;
                }
                break;
            case With:
                {
                alt605=32;
                }
                break;
            case Yield:
                {
                alt605=33;
                }
                break;
            case Null:
                {
                alt605=34;
                }
                break;
            case True:
                {
                alt605=35;
                }
                break;
            case False:
                {
                alt605=36;
                }
                break;
            case Enum:
                {
                alt605=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }

            switch (alt605) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24()); 
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25()); 
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26()); 
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27()); 
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28()); 
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29()); 
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30()); 
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31()); 
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32()); 
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33()); 
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34()); 
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35()); 
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;


            
        try {
            {
            int alt606=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt606=1;
                }
                break;
            case Set:
                {
                alt606=2;
                }
                break;
            case Let:
                {
                alt606=3;
                }
                break;
            case Project:
                {
                alt606=4;
                }
                break;
            case External:
                {
                alt606=5;
                }
                break;
            case Abstract:
                {
                alt606=6;
                }
                break;
            case Static:
                {
                alt606=7;
                }
                break;
            case As:
                {
                alt606=8;
                }
                break;
            case From:
                {
                alt606=9;
                }
                break;
            case Constructor:
                {
                alt606=10;
                }
                break;
            case Of:
                {
                alt606=11;
                }
                break;
            case Target:
                {
                alt606=12;
                }
                break;
            case Type:
                {
                alt606=13;
                }
                break;
            case Union:
                {
                alt606=14;
                }
                break;
            case Intersection:
                {
                alt606=15;
                }
                break;
            case This:
                {
                alt606=16;
                }
                break;
            case Promisify:
                {
                alt606=17;
                }
                break;
            case Await:
                {
                alt606=18;
                }
                break;
            case Async:
                {
                alt606=19;
                }
                break;
            case Implements:
                {
                alt606=20;
                }
                break;
            case Interface:
                {
                alt606=21;
                }
                break;
            case Private:
                {
                alt606=22;
                }
                break;
            case Protected:
                {
                alt606=23;
                }
                break;
            case Public:
                {
                alt606=24;
                }
                break;
            case Out:
                {
                alt606=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }

            switch (alt606) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt607=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt607=1;
                }
                break;
            case Const:
                {
                alt607=2;
                }
                break;
            case Let:
                {
                alt607=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);

                throw nvae;
            }

            switch (alt607) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( (LA608_0==PlusSignPlusSign) ) {
                alt608=1;
            }
            else if ( (LA608_0==HyphenMinusHyphenMinus) ) {
                alt608=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 608, 0, input);

                throw nvae;
            }
            switch (alt608) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt609=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt609=1;
                }
                break;
            case Void:
                {
                alt609=2;
                }
                break;
            case Typeof:
                {
                alt609=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt609=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt609=5;
                }
                break;
            case PlusSign:
                {
                alt609=6;
                }
                break;
            case HyphenMinus:
                {
                alt609=7;
                }
                break;
            case Tilde:
                {
                alt609=8;
                }
                break;
            case ExclamationMark:
                {
                alt609=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 609, 0, input);

                throw nvae;
            }

            switch (alt609) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt610=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt610=1;
                }
                break;
            case Solidus:
                {
                alt610=2;
                }
                break;
            case PercentSign:
                {
                alt610=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);

                throw nvae;
            }

            switch (alt610) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( (LA611_0==PlusSign) ) {
                alt611=1;
            }
            else if ( (LA611_0==HyphenMinus) ) {
                alt611=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 611, 0, input);

                throw nvae;
            }
            switch (alt611) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt612=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt612=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt612=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt612=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt612=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 612, 0, input);

                throw nvae;
            }

            switch (alt612) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt613=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt613=1;
                }
                break;
            case Project:
                {
                alt613=2;
                }
                break;
            case Protected:
                {
                alt613=3;
                }
                break;
            case Public:
                {
                alt613=4;
                }
                break;
            case External:
                {
                alt613=5;
                }
                break;
            case Abstract:
                {
                alt613=6;
                }
                break;
            case Static:
                {
                alt613=7;
                }
                break;
            case Const:
                {
                alt613=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 613, 0, input);

                throw nvae;
            }

            switch (alt613) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred2_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred3_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred4_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop614:
        do {
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( ((LA614_0>=Protected && LA614_0<=Abstract)||LA614_0==External||(LA614_0>=Private && LA614_0<=Project)||LA614_0==Public||LA614_0==Static||LA614_0==Const) ) {
                alt614=1;
            }


            switch (alt614) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop614;
            }
        } while (true);

        match(input,Class,FOLLOW_184); if (state.failed) return ;
        int alt615=2;
        int LA615_0 = input.LA(1);

        if ( (LA615_0==Tilde) ) {
            alt615=1;
        }
        switch (alt615) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt616=2;
        int LA616_0 = input.LA(1);

        if ( ((LA616_0>=Intersection && LA616_0<=Implements)||(LA616_0>=Promisify && LA616_0<=Abstract)||LA616_0==External||(LA616_0>=Private && LA616_0<=Project)||LA616_0==Public||LA616_0==Static||LA616_0==Target||(LA616_0>=Async && LA616_0<=Await)||LA616_0==Union||(LA616_0>=Yield && LA616_0<=This)||LA616_0==From||LA616_0==Type||(LA616_0>=Get && LA616_0<=Let)||(LA616_0>=Out && LA616_0<=Set)||LA616_0==As||LA616_0==Of||LA616_0==RULE_IDENTIFIER) ) {
            alt616=1;
        }
        switch (alt616) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred5_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop617:
        do {
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( ((LA617_0>=Protected && LA617_0<=Abstract)||LA617_0==External||(LA617_0>=Private && LA617_0<=Project)||LA617_0==Public||LA617_0==Static||LA617_0==Const) ) {
                alt617=1;
            }


            switch (alt617) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop617;
            }
        } while (true);

        match(input,Interface,FOLLOW_184); if (state.failed) return ;
        int alt618=2;
        int LA618_0 = input.LA(1);

        if ( (LA618_0==Tilde) ) {
            alt618=1;
        }
        switch (alt618) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt619=2;
        int LA619_0 = input.LA(1);

        if ( ((LA619_0>=Intersection && LA619_0<=Implements)||(LA619_0>=Promisify && LA619_0<=Abstract)||LA619_0==External||(LA619_0>=Private && LA619_0<=Project)||LA619_0==Public||LA619_0==Static||LA619_0==Target||(LA619_0>=Async && LA619_0<=Await)||LA619_0==Union||(LA619_0>=Yield && LA619_0<=This)||LA619_0==From||LA619_0==Type||(LA619_0>=Get && LA619_0<=Let)||(LA619_0>=Out && LA619_0<=Set)||LA619_0==As||LA619_0==Of||LA619_0==RULE_IDENTIFIER) ) {
            alt619=1;
        }
        switch (alt619) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop620:
        do {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( ((LA620_0>=Protected && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Const) ) {
                alt620=1;
            }


            switch (alt620) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop620;
            }
        } while (true);

        match(input,Enum,FOLLOW_185); if (state.failed) return ;
        int alt621=2;
        int LA621_0 = input.LA(1);

        if ( ((LA621_0>=Intersection && LA621_0<=Implements)||(LA621_0>=Promisify && LA621_0<=Abstract)||LA621_0==External||(LA621_0>=Private && LA621_0<=Project)||LA621_0==Public||LA621_0==Static||LA621_0==Target||(LA621_0>=Async && LA621_0<=Await)||LA621_0==Union||(LA621_0>=Yield && LA621_0<=This)||LA621_0==From||LA621_0==Type||(LA621_0>=Get && LA621_0<=Let)||(LA621_0>=Out && LA621_0<=Set)||LA621_0==As||LA621_0==Of||LA621_0==RULE_IDENTIFIER) ) {
            alt621=1;
        }
        switch (alt621) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred8_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop622:
        do {
            int alt622=2;
            int LA622_0 = input.LA(1);

            if ( ((LA622_0>=Protected && LA622_0<=Abstract)||LA622_0==External||(LA622_0>=Private && LA622_0<=Project)||LA622_0==Public||LA622_0==Static||LA622_0==Const) ) {
                alt622=1;
            }


            switch (alt622) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop622;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred10_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred11_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred12_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred13_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop623:
        do {
            int alt623=2;
            int LA623_0 = input.LA(1);

            if ( ((LA623_0>=Protected && LA623_0<=Abstract)||LA623_0==External||(LA623_0>=Private && LA623_0<=Project)||LA623_0==Public||LA623_0==Static||LA623_0==Const) ) {
                alt623=1;
            }


            switch (alt623) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop623;
            }
        } while (true);

        match(input,Class,FOLLOW_184); if (state.failed) return ;
        int alt624=2;
        int LA624_0 = input.LA(1);

        if ( (LA624_0==Tilde) ) {
            alt624=1;
        }
        switch (alt624) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt625=2;
        int LA625_0 = input.LA(1);

        if ( ((LA625_0>=Intersection && LA625_0<=Implements)||(LA625_0>=Promisify && LA625_0<=Abstract)||LA625_0==External||(LA625_0>=Private && LA625_0<=Project)||LA625_0==Public||LA625_0==Static||LA625_0==Target||(LA625_0>=Async && LA625_0<=Await)||LA625_0==Union||(LA625_0>=Yield && LA625_0<=This)||LA625_0==From||LA625_0==Type||(LA625_0>=Get && LA625_0<=Let)||(LA625_0>=Out && LA625_0<=Set)||LA625_0==As||LA625_0==Of||LA625_0==RULE_IDENTIFIER) ) {
            alt625=1;
        }
        switch (alt625) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop626:
        do {
            int alt626=2;
            int LA626_0 = input.LA(1);

            if ( ((LA626_0>=Protected && LA626_0<=Abstract)||LA626_0==External||(LA626_0>=Private && LA626_0<=Project)||LA626_0==Public||LA626_0==Static||LA626_0==Const) ) {
                alt626=1;
            }


            switch (alt626) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop626;
            }
        } while (true);

        match(input,Interface,FOLLOW_184); if (state.failed) return ;
        int alt627=2;
        int LA627_0 = input.LA(1);

        if ( (LA627_0==Tilde) ) {
            alt627=1;
        }
        switch (alt627) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt628=2;
        int LA628_0 = input.LA(1);

        if ( ((LA628_0>=Intersection && LA628_0<=Implements)||(LA628_0>=Promisify && LA628_0<=Abstract)||LA628_0==External||(LA628_0>=Private && LA628_0<=Project)||LA628_0==Public||LA628_0==Static||LA628_0==Target||(LA628_0>=Async && LA628_0<=Await)||LA628_0==Union||(LA628_0>=Yield && LA628_0<=This)||LA628_0==From||LA628_0==Type||(LA628_0>=Get && LA628_0<=Let)||(LA628_0>=Out && LA628_0<=Set)||LA628_0==As||LA628_0==Of||LA628_0==RULE_IDENTIFIER) ) {
            alt628=1;
        }
        switch (alt628) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred15_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop629:
        do {
            int alt629=2;
            int LA629_0 = input.LA(1);

            if ( ((LA629_0>=Protected && LA629_0<=Abstract)||LA629_0==External||(LA629_0>=Private && LA629_0<=Project)||LA629_0==Public||LA629_0==Static||LA629_0==Const) ) {
                alt629=1;
            }


            switch (alt629) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop629;
            }
        } while (true);

        match(input,Enum,FOLLOW_185); if (state.failed) return ;
        int alt630=2;
        int LA630_0 = input.LA(1);

        if ( ((LA630_0>=Intersection && LA630_0<=Implements)||(LA630_0>=Promisify && LA630_0<=Abstract)||LA630_0==External||(LA630_0>=Private && LA630_0<=Project)||LA630_0==Public||LA630_0==Static||LA630_0==Target||(LA630_0>=Async && LA630_0<=Await)||LA630_0==Union||(LA630_0>=Yield && LA630_0<=This)||LA630_0==From||LA630_0==Type||(LA630_0>=Get && LA630_0<=Let)||(LA630_0>=Out && LA630_0<=Set)||LA630_0==As||LA630_0==Of||LA630_0==RULE_IDENTIFIER) ) {
            alt630=1;
        }
        switch (alt630) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred19_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred27_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred28_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred37_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred38_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred41_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred42_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred45_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred46_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred51_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred52_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred55_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred56_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop662:
        do {
            int alt662=2;
            int LA662_0 = input.LA(1);

            if ( ((LA662_0>=Protected && LA662_0<=Abstract)||LA662_0==External||(LA662_0>=Private && LA662_0<=Project)||LA662_0==Public||LA662_0==Static||LA662_0==Const) ) {
                alt662=1;
            }


            switch (alt662) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop662;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred58_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred60_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop663:
        do {
            int alt663=2;
            int LA663_0 = input.LA(1);

            if ( ((LA663_0>=Protected && LA663_0<=Abstract)||LA663_0==External||(LA663_0>=Private && LA663_0<=Project)||LA663_0==Public||LA663_0==Static||LA663_0==Const) ) {
                alt663=1;
            }


            switch (alt663) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop663;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred62_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred63_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred64_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred67_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred71_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred72_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred81_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred82_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred83_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred84_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred85_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==Colon) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred86_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( (LA665_0==Colon) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred87_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt666=2;
        int LA666_0 = input.LA(1);

        if ( (LA666_0==Colon) ) {
            alt666=1;
        }
        switch (alt666) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred88_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt667=2;
        int LA667_0 = input.LA(1);

        if ( (LA667_0==Colon) ) {
            alt667=1;
        }
        switch (alt667) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred89_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred90_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred93_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred94_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred95_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred96_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred97_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred98_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred99_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt668=2;
        int LA668_0 = input.LA(1);

        if ( (LA668_0==In) ) {
            alt668=1;
        }
        else if ( (LA668_0==Of) ) {
            alt668=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 668, 0, input);

            throw nvae;
        }
        switch (alt668) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt669=2;
        int LA669_0 = input.LA(1);

        if ( ((LA669_0>=Intersection && LA669_0<=Implements)||(LA669_0>=Promisify && LA669_0<=Abstract)||(LA669_0>=External && LA669_0<=Function)||(LA669_0>=Private && LA669_0<=Delete)||LA669_0==Public||LA669_0==Static||(LA669_0>=Target && LA669_0<=Await)||LA669_0==Class||(LA669_0>=False && LA669_0<=Super)||LA669_0==Union||(LA669_0>=Yield && LA669_0<=This)||(LA669_0>=From && LA669_0<=Void)||(LA669_0>=Get && LA669_0<=Set)||LA669_0==PlusSignPlusSign||LA669_0==HyphenMinusHyphenMinus||LA669_0==SolidusEqualsSign||LA669_0==As||LA669_0==Of||LA669_0==ExclamationMark||LA669_0==LeftParenthesis||LA669_0==PlusSign||LA669_0==HyphenMinus||LA669_0==Solidus||LA669_0==LessThanSign||(LA669_0>=CommercialAt && LA669_0<=LeftSquareBracket)||LA669_0==LeftCurlyBracket||LA669_0==Tilde||LA669_0==RULE_DOUBLE||(LA669_0>=RULE_HEX_INT && LA669_0<=RULE_LEGACY_OCTAL_INT)||LA669_0==RULE_SCIENTIFIC_INT||LA669_0==RULE_IDENTIFIER||LA669_0==RULE_STRING||(LA669_0>=RULE_TEMPLATE_HEAD && LA669_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA669_0==RULE_INT) ) {
            alt669=1;
        }
        switch (alt669) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred100_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred101_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_11); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred102_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred103_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt670=2;
        int LA670_0 = input.LA(1);

        if ( (LA670_0==In) ) {
            alt670=1;
        }
        else if ( (LA670_0==Of) ) {
            alt670=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 670, 0, input);

            throw nvae;
        }
        switch (alt670) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt671=2;
        int LA671_0 = input.LA(1);

        if ( ((LA671_0>=Intersection && LA671_0<=Implements)||(LA671_0>=Promisify && LA671_0<=Abstract)||(LA671_0>=External && LA671_0<=Function)||(LA671_0>=Private && LA671_0<=Delete)||LA671_0==Public||LA671_0==Static||(LA671_0>=Target && LA671_0<=Await)||LA671_0==Class||(LA671_0>=False && LA671_0<=Super)||LA671_0==Union||(LA671_0>=Yield && LA671_0<=This)||(LA671_0>=From && LA671_0<=Void)||(LA671_0>=Get && LA671_0<=Set)||LA671_0==PlusSignPlusSign||LA671_0==HyphenMinusHyphenMinus||LA671_0==SolidusEqualsSign||LA671_0==As||LA671_0==Of||LA671_0==ExclamationMark||LA671_0==LeftParenthesis||LA671_0==PlusSign||LA671_0==HyphenMinus||LA671_0==Solidus||LA671_0==LessThanSign||(LA671_0>=CommercialAt && LA671_0<=LeftSquareBracket)||LA671_0==LeftCurlyBracket||LA671_0==Tilde||LA671_0==RULE_DOUBLE||(LA671_0>=RULE_HEX_INT && LA671_0<=RULE_LEGACY_OCTAL_INT)||LA671_0==RULE_SCIENTIFIC_INT||LA671_0==RULE_IDENTIFIER||LA671_0==RULE_STRING||(LA671_0>=RULE_TEMPLATE_HEAD && LA671_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA671_0==RULE_INT) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred104_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred111_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred114_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred115_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt672=2;
        alt672 = dfa672.predict(input);
        switch (alt672) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred122_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt673=2;
        int LA673_0 = input.LA(1);

        if ( (LA673_0==LessThanSign) ) {
            alt673=1;
        }
        switch (alt673) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt674=2;
        alt674 = dfa674.predict(input);
        switch (alt674) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt675=2;
        int LA675_0 = input.LA(1);

        if ( (LA675_0==Asterisk) ) {
            alt675=1;
        }
        else if ( ((LA675_0>=Intersection && LA675_0<=With)||(LA675_0>=For && LA675_0<=Var)||(LA675_0>=As && LA675_0<=Of)||LA675_0==LeftSquareBracket||LA675_0==RULE_DOUBLE||LA675_0==RULE_HEX_INT||LA675_0==RULE_OCTAL_INT||LA675_0==RULE_SCIENTIFIC_INT||LA675_0==RULE_IDENTIFIER||LA675_0==RULE_STRING||LA675_0==RULE_INT) ) {
            alt675=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 675, 0, input);

            throw nvae;
        }
        switch (alt675) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred123_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt676=2;
        alt676 = dfa676.predict(input);
        switch (alt676) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred124_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred126_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt677=2;
        int LA677_0 = input.LA(1);

        if ( (LA677_0==LessThanSign) ) {
            alt677=1;
        }
        switch (alt677) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt678=2;
        alt678 = dfa678.predict(input);
        switch (alt678) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt679=2;
        int LA679_0 = input.LA(1);

        if ( (LA679_0==Asterisk) ) {
            alt679=1;
        }
        else if ( ((LA679_0>=Intersection && LA679_0<=With)||(LA679_0>=For && LA679_0<=Var)||(LA679_0>=As && LA679_0<=Of)||LA679_0==LeftSquareBracket||LA679_0==RULE_DOUBLE||LA679_0==RULE_HEX_INT||LA679_0==RULE_OCTAL_INT||LA679_0==RULE_SCIENTIFIC_INT||LA679_0==RULE_IDENTIFIER||LA679_0==RULE_STRING||LA679_0==RULE_INT) ) {
            alt679=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 679, 0, input);

            throw nvae;
        }
        switch (alt679) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred127_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt680=2;
        alt680 = dfa680.predict(input);
        switch (alt680) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred133_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt681=2;
        int LA681_0 = input.LA(1);

        if ( (LA681_0==LessThanSign) ) {
            alt681=1;
        }
        switch (alt681) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt682=2;
        alt682 = dfa682.predict(input);
        switch (alt682) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt683=2;
        int LA683_0 = input.LA(1);

        if ( (LA683_0==Asterisk) ) {
            alt683=1;
        }
        else if ( ((LA683_0>=Intersection && LA683_0<=With)||(LA683_0>=For && LA683_0<=Var)||(LA683_0>=As && LA683_0<=Of)||LA683_0==LeftSquareBracket||LA683_0==RULE_DOUBLE||LA683_0==RULE_HEX_INT||LA683_0==RULE_OCTAL_INT||LA683_0==RULE_SCIENTIFIC_INT||LA683_0==RULE_IDENTIFIER||LA683_0==RULE_STRING||LA683_0==RULE_INT) ) {
            alt683=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 683, 0, input);

            throw nvae;
        }
        switch (alt683) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt684=2;
        alt684 = dfa684.predict(input);
        switch (alt684) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt685=2;
        int LA685_0 = input.LA(1);

        if ( (LA685_0==LessThanSign) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt686=2;
        alt686 = dfa686.predict(input);
        switch (alt686) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt687=2;
        int LA687_0 = input.LA(1);

        if ( (LA687_0==Asterisk) ) {
            alt687=1;
        }
        else if ( ((LA687_0>=Intersection && LA687_0<=With)||(LA687_0>=For && LA687_0<=Var)||(LA687_0>=As && LA687_0<=Of)||LA687_0==LeftSquareBracket||LA687_0==RULE_DOUBLE||LA687_0==RULE_HEX_INT||LA687_0==RULE_OCTAL_INT||LA687_0==RULE_SCIENTIFIC_INT||LA687_0==RULE_IDENTIFIER||LA687_0==RULE_STRING||LA687_0==RULE_INT) ) {
            alt687=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 687, 0, input);

            throw nvae;
        }
        switch (alt687) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred163_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred164_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred165_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred166_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred167_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred168_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred169_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred170_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred171_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred172_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred173_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred174_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred175_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred178_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred179_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred180_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred181_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred185_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_11);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred187_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred189_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred191_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred192_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred193_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred216_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred217_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred218_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred219_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred220_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred221_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred222_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt702=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt702=1;
            }
            break;
        case Async:
            {
            int LA702_2 = input.LA(2);

            if ( (LA702_2==EqualsSignGreaterThanSign) ) {
                alt702=3;
            }
            else if ( (LA702_2==RULE_NO_LINE_TERMINATOR) && (synpred221_InternalN4JSXParser())) {
                alt702=2;
            }
            else if ( (LA702_2==LeftParenthesis) && (synpred221_InternalN4JSXParser())) {
                alt702=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 702, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt702=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 702, 0, input);

            throw nvae;
        }

        switch (alt702) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt697=2;
                int LA697_0 = input.LA(1);

                if ( ((LA697_0>=Intersection && LA697_0<=Implements)||(LA697_0>=Promisify && LA697_0<=Abstract)||LA697_0==External||(LA697_0>=Private && LA697_0<=Project)||LA697_0==Public||LA697_0==Static||LA697_0==Target||(LA697_0>=Async && LA697_0<=Await)||LA697_0==Union||(LA697_0>=Yield && LA697_0<=This)||LA697_0==From||LA697_0==This_1||(LA697_0>=Type && LA697_0<=Void)||LA697_0==FullStopFullStopFullStop||(LA697_0>=Get && LA697_0<=Let)||(LA697_0>=Out && LA697_0<=Set)||LA697_0==As||LA697_0==Of||(LA697_0>=QuestionMark && LA697_0<=LeftSquareBracket)||LA697_0==LeftCurlyBracket||LA697_0==Tilde||LA697_0==RULE_IDENTIFIER) ) {
                    alt697=1;
                }
                switch (alt697) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop696:
                        do {
                            int alt696=2;
                            int LA696_0 = input.LA(1);

                            if ( (LA696_0==Comma) ) {
                                alt696=1;
                            }


                            switch (alt696) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop696;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt698=2;
                int LA698_0 = input.LA(1);

                if ( (LA698_0==Colon) ) {
                    alt698=1;
                }
                switch (alt698) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt700=2;
                int LA700_0 = input.LA(1);

                if ( ((LA700_0>=Intersection && LA700_0<=Implements)||(LA700_0>=Promisify && LA700_0<=Abstract)||LA700_0==External||(LA700_0>=Private && LA700_0<=Project)||LA700_0==Public||LA700_0==Static||LA700_0==Target||(LA700_0>=Async && LA700_0<=Await)||LA700_0==Union||(LA700_0>=Yield && LA700_0<=This)||LA700_0==From||LA700_0==This_1||(LA700_0>=Type && LA700_0<=Void)||LA700_0==FullStopFullStopFullStop||(LA700_0>=Get && LA700_0<=Let)||(LA700_0>=Out && LA700_0<=Set)||LA700_0==As||LA700_0==Of||(LA700_0>=QuestionMark && LA700_0<=LeftSquareBracket)||LA700_0==LeftCurlyBracket||LA700_0==Tilde||LA700_0==RULE_IDENTIFIER) ) {
                    alt700=1;
                }
                switch (alt700) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop699:
                        do {
                            int alt699=2;
                            int LA699_0 = input.LA(1);

                            if ( (LA699_0==Comma) ) {
                                alt699=1;
                            }


                            switch (alt699) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop699;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt701=2;
                int LA701_0 = input.LA(1);

                if ( (LA701_0==Colon) ) {
                    alt701=1;
                }
                switch (alt701) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred223_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt709=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt709=1;
            }
            break;
        case Async:
            {
            int LA709_2 = input.LA(2);

            if ( (LA709_2==RULE_NO_LINE_TERMINATOR) && (synpred226_InternalN4JSXParser())) {
                alt709=2;
            }
            else if ( (LA709_2==LeftParenthesis) && (synpred226_InternalN4JSXParser())) {
                alt709=2;
            }
            else if ( (LA709_2==EqualsSignGreaterThanSign) ) {
                alt709=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 709, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt709=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 709, 0, input);

            throw nvae;
        }

        switch (alt709) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt704=2;
                int LA704_0 = input.LA(1);

                if ( ((LA704_0>=Intersection && LA704_0<=Implements)||(LA704_0>=Promisify && LA704_0<=Abstract)||LA704_0==External||(LA704_0>=Private && LA704_0<=Project)||LA704_0==Public||LA704_0==Static||LA704_0==Target||(LA704_0>=Async && LA704_0<=Await)||LA704_0==Union||(LA704_0>=Yield && LA704_0<=This)||LA704_0==From||LA704_0==This_1||(LA704_0>=Type && LA704_0<=Void)||LA704_0==FullStopFullStopFullStop||(LA704_0>=Get && LA704_0<=Let)||(LA704_0>=Out && LA704_0<=Set)||LA704_0==As||LA704_0==Of||(LA704_0>=QuestionMark && LA704_0<=LeftSquareBracket)||LA704_0==LeftCurlyBracket||LA704_0==Tilde||LA704_0==RULE_IDENTIFIER) ) {
                    alt704=1;
                }
                switch (alt704) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop703:
                        do {
                            int alt703=2;
                            int LA703_0 = input.LA(1);

                            if ( (LA703_0==Comma) ) {
                                alt703=1;
                            }


                            switch (alt703) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop703;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt705=2;
                int LA705_0 = input.LA(1);

                if ( (LA705_0==Colon) ) {
                    alt705=1;
                }
                switch (alt705) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt707=2;
                int LA707_0 = input.LA(1);

                if ( ((LA707_0>=Intersection && LA707_0<=Implements)||(LA707_0>=Promisify && LA707_0<=Abstract)||LA707_0==External||(LA707_0>=Private && LA707_0<=Project)||LA707_0==Public||LA707_0==Static||LA707_0==Target||(LA707_0>=Async && LA707_0<=Await)||LA707_0==Union||(LA707_0>=Yield && LA707_0<=This)||LA707_0==From||LA707_0==This_1||(LA707_0>=Type && LA707_0<=Void)||LA707_0==FullStopFullStopFullStop||(LA707_0>=Get && LA707_0<=Let)||(LA707_0>=Out && LA707_0<=Set)||LA707_0==As||LA707_0==Of||(LA707_0>=QuestionMark && LA707_0<=LeftSquareBracket)||LA707_0==LeftCurlyBracket||LA707_0==Tilde||LA707_0==RULE_IDENTIFIER) ) {
                    alt707=1;
                }
                switch (alt707) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop706:
                        do {
                            int alt706=2;
                            int LA706_0 = input.LA(1);

                            if ( (LA706_0==Comma) ) {
                                alt706=1;
                            }


                            switch (alt706) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop706;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt708=2;
                int LA708_0 = input.LA(1);

                if ( (LA708_0==Colon) ) {
                    alt708=1;
                }
                switch (alt708) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt716=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt716=1;
            }
            break;
        case Async:
            {
            int LA716_2 = input.LA(2);

            if ( (LA716_2==EqualsSignGreaterThanSign) ) {
                alt716=3;
            }
            else if ( (LA716_2==RULE_NO_LINE_TERMINATOR) && (synpred231_InternalN4JSXParser())) {
                alt716=2;
            }
            else if ( (LA716_2==LeftParenthesis) && (synpred231_InternalN4JSXParser())) {
                alt716=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 716, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt716=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 716, 0, input);

            throw nvae;
        }

        switch (alt716) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt711=2;
                int LA711_0 = input.LA(1);

                if ( ((LA711_0>=Intersection && LA711_0<=Implements)||(LA711_0>=Promisify && LA711_0<=Abstract)||LA711_0==External||(LA711_0>=Private && LA711_0<=Project)||LA711_0==Public||LA711_0==Static||LA711_0==Target||(LA711_0>=Async && LA711_0<=Await)||LA711_0==Union||LA711_0==This||LA711_0==From||LA711_0==This_1||(LA711_0>=Type && LA711_0<=Void)||LA711_0==FullStopFullStopFullStop||(LA711_0>=Get && LA711_0<=Let)||(LA711_0>=Out && LA711_0<=Set)||LA711_0==As||LA711_0==Of||(LA711_0>=QuestionMark && LA711_0<=LeftSquareBracket)||LA711_0==LeftCurlyBracket||LA711_0==Tilde||LA711_0==RULE_IDENTIFIER) ) {
                    alt711=1;
                }
                switch (alt711) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop710:
                        do {
                            int alt710=2;
                            int LA710_0 = input.LA(1);

                            if ( (LA710_0==Comma) ) {
                                alt710=1;
                            }


                            switch (alt710) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop710;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt712=2;
                int LA712_0 = input.LA(1);

                if ( (LA712_0==Colon) ) {
                    alt712=1;
                }
                switch (alt712) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt714=2;
                int LA714_0 = input.LA(1);

                if ( ((LA714_0>=Intersection && LA714_0<=Implements)||(LA714_0>=Promisify && LA714_0<=Abstract)||LA714_0==External||(LA714_0>=Private && LA714_0<=Project)||LA714_0==Public||LA714_0==Static||LA714_0==Target||(LA714_0>=Async && LA714_0<=Await)||LA714_0==Union||LA714_0==This||LA714_0==From||LA714_0==This_1||(LA714_0>=Type && LA714_0<=Void)||LA714_0==FullStopFullStopFullStop||(LA714_0>=Get && LA714_0<=Let)||(LA714_0>=Out && LA714_0<=Set)||LA714_0==As||LA714_0==Of||(LA714_0>=QuestionMark && LA714_0<=LeftSquareBracket)||LA714_0==LeftCurlyBracket||LA714_0==Tilde||LA714_0==RULE_IDENTIFIER) ) {
                    alt714=1;
                }
                switch (alt714) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop713:
                        do {
                            int alt713=2;
                            int LA713_0 = input.LA(1);

                            if ( (LA713_0==Comma) ) {
                                alt713=1;
                            }


                            switch (alt713) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop713;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt715=2;
                int LA715_0 = input.LA(1);

                if ( (LA715_0==Colon) ) {
                    alt715=1;
                }
                switch (alt715) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred234_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt723=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt723=1;
            }
            break;
        case Async:
            {
            int LA723_2 = input.LA(2);

            if ( (LA723_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSXParser())) {
                alt723=2;
            }
            else if ( (LA723_2==LeftParenthesis) && (synpred236_InternalN4JSXParser())) {
                alt723=2;
            }
            else if ( (LA723_2==EqualsSignGreaterThanSign) ) {
                alt723=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 723, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt723=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 723, 0, input);

            throw nvae;
        }

        switch (alt723) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt718=2;
                int LA718_0 = input.LA(1);

                if ( ((LA718_0>=Intersection && LA718_0<=Implements)||(LA718_0>=Promisify && LA718_0<=Abstract)||LA718_0==External||(LA718_0>=Private && LA718_0<=Project)||LA718_0==Public||LA718_0==Static||LA718_0==Target||(LA718_0>=Async && LA718_0<=Await)||LA718_0==Union||LA718_0==This||LA718_0==From||LA718_0==This_1||(LA718_0>=Type && LA718_0<=Void)||LA718_0==FullStopFullStopFullStop||(LA718_0>=Get && LA718_0<=Let)||(LA718_0>=Out && LA718_0<=Set)||LA718_0==As||LA718_0==Of||(LA718_0>=QuestionMark && LA718_0<=LeftSquareBracket)||LA718_0==LeftCurlyBracket||LA718_0==Tilde||LA718_0==RULE_IDENTIFIER) ) {
                    alt718=1;
                }
                switch (alt718) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop717:
                        do {
                            int alt717=2;
                            int LA717_0 = input.LA(1);

                            if ( (LA717_0==Comma) ) {
                                alt717=1;
                            }


                            switch (alt717) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop717;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt719=2;
                int LA719_0 = input.LA(1);

                if ( (LA719_0==Colon) ) {
                    alt719=1;
                }
                switch (alt719) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt721=2;
                int LA721_0 = input.LA(1);

                if ( ((LA721_0>=Intersection && LA721_0<=Implements)||(LA721_0>=Promisify && LA721_0<=Abstract)||LA721_0==External||(LA721_0>=Private && LA721_0<=Project)||LA721_0==Public||LA721_0==Static||LA721_0==Target||(LA721_0>=Async && LA721_0<=Await)||LA721_0==Union||LA721_0==This||LA721_0==From||LA721_0==This_1||(LA721_0>=Type && LA721_0<=Void)||LA721_0==FullStopFullStopFullStop||(LA721_0>=Get && LA721_0<=Let)||(LA721_0>=Out && LA721_0<=Set)||LA721_0==As||LA721_0==Of||(LA721_0>=QuestionMark && LA721_0<=LeftSquareBracket)||LA721_0==LeftCurlyBracket||LA721_0==Tilde||LA721_0==RULE_IDENTIFIER) ) {
                    alt721=1;
                }
                switch (alt721) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop720:
                        do {
                            int alt720=2;
                            int LA720_0 = input.LA(1);

                            if ( (LA720_0==Comma) ) {
                                alt720=1;
                            }


                            switch (alt720) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop720;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt722=2;
                int LA722_0 = input.LA(1);

                if ( (LA722_0==Colon) ) {
                    alt722=1;
                }
                switch (alt722) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred241_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred251_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred255_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop732:
        do {
            int alt732=2;
            int LA732_0 = input.LA(1);

            if ( ((LA732_0>=Protected && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Const) ) {
                alt732=1;
            }


            switch (alt732) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop732;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred260_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop733:
        do {
            int alt733=2;
            int LA733_0 = input.LA(1);

            if ( ((LA733_0>=Protected && LA733_0<=Abstract)||LA733_0==External||(LA733_0>=Private && LA733_0<=Project)||LA733_0==Public||LA733_0==Static||LA733_0==Const) ) {
                alt733=1;
            }


            switch (alt733) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop733;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred261_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop734:
        do {
            int alt734=2;
            alt734 = dfa734.predict(input);
            switch (alt734) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop734;
            }
        } while (true);
        int alt735=2;
        int LA735_0 = input.LA(1);

        if ( (LA735_0==LessThanSign) ) {
            alt735=1;
        }
        switch (alt735) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt736=2;
        alt736 = dfa736.predict(input);
        switch (alt736) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt737=2;
        int LA737_0 = input.LA(1);

        if ( (LA737_0==Asterisk) ) {
            alt737=1;
        }
        else if ( ((LA737_0>=Intersection && LA737_0<=With)||(LA737_0>=For && LA737_0<=Var)||(LA737_0>=As && LA737_0<=Of)||LA737_0==LeftSquareBracket||LA737_0==RULE_DOUBLE||LA737_0==RULE_HEX_INT||LA737_0==RULE_OCTAL_INT||LA737_0==RULE_SCIENTIFIC_INT||LA737_0==RULE_IDENTIFIER||LA737_0==RULE_STRING||LA737_0==RULE_INT) ) {
            alt737=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 737, 0, input);

            throw nvae;
        }
        switch (alt737) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred262_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop738:
        do {
            int alt738=2;
            int LA738_0 = input.LA(1);

            if ( ((LA738_0>=Protected && LA738_0<=Abstract)||LA738_0==External||(LA738_0>=Private && LA738_0<=Project)||LA738_0==Public||LA738_0==Static||LA738_0==Const) ) {
                alt738=1;
            }


            switch (alt738) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop738;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred263_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop739:
        do {
            int alt739=2;
            int LA739_0 = input.LA(1);

            if ( ((LA739_0>=Protected && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Const) ) {
                alt739=1;
            }


            switch (alt739) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop739;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred264_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop740:
        do {
            int alt740=2;
            alt740 = dfa740.predict(input);
            switch (alt740) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop740;
            }
        } while (true);
        int alt741=2;
        int LA741_0 = input.LA(1);

        if ( (LA741_0==LessThanSign) ) {
            alt741=1;
        }
        switch (alt741) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt742=2;
        alt742 = dfa742.predict(input);
        switch (alt742) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt743=2;
        int LA743_0 = input.LA(1);

        if ( (LA743_0==Asterisk) ) {
            alt743=1;
        }
        else if ( ((LA743_0>=Intersection && LA743_0<=With)||(LA743_0>=For && LA743_0<=Var)||(LA743_0>=As && LA743_0<=Of)||LA743_0==LeftSquareBracket||LA743_0==RULE_DOUBLE||LA743_0==RULE_HEX_INT||LA743_0==RULE_OCTAL_INT||LA743_0==RULE_SCIENTIFIC_INT||LA743_0==RULE_IDENTIFIER||LA743_0==RULE_STRING||LA743_0==RULE_INT) ) {
            alt743=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 743, 0, input);

            throw nvae;
        }
        switch (alt743) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred265_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop744:
        do {
            int alt744=2;
            int LA744_0 = input.LA(1);

            if ( ((LA744_0>=Protected && LA744_0<=Abstract)||LA744_0==External||(LA744_0>=Private && LA744_0<=Project)||LA744_0==Public||LA744_0==Static||LA744_0==Const) ) {
                alt744=1;
            }


            switch (alt744) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop744;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred267_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop745:
        do {
            int alt745=2;
            int LA745_0 = input.LA(1);

            if ( ((LA745_0>=Protected && LA745_0<=Abstract)||LA745_0==External||(LA745_0>=Private && LA745_0<=Project)||LA745_0==Public||LA745_0==Static||LA745_0==Const) ) {
                alt745=1;
            }


            switch (alt745) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop745;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred269_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred270_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop746:
        do {
            int alt746=2;
            alt746 = dfa746.predict(input);
            switch (alt746) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop746;
            }
        } while (true);
        int alt747=2;
        int LA747_0 = input.LA(1);

        if ( (LA747_0==LessThanSign) ) {
            alt747=1;
        }
        switch (alt747) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt748=2;
        alt748 = dfa748.predict(input);
        switch (alt748) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt749=2;
        int LA749_0 = input.LA(1);

        if ( (LA749_0==Asterisk) ) {
            alt749=1;
        }
        else if ( ((LA749_0>=Intersection && LA749_0<=With)||(LA749_0>=For && LA749_0<=Var)||(LA749_0>=As && LA749_0<=Of)||LA749_0==LeftSquareBracket||LA749_0==RULE_DOUBLE||LA749_0==RULE_HEX_INT||LA749_0==RULE_OCTAL_INT||LA749_0==RULE_SCIENTIFIC_INT||LA749_0==RULE_IDENTIFIER||LA749_0==RULE_STRING||LA749_0==RULE_INT) ) {
            alt749=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 749, 0, input);

            throw nvae;
        }
        switch (alt749) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred273_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop750:
        do {
            int alt750=2;
            int LA750_0 = input.LA(1);

            if ( ((LA750_0>=Protected && LA750_0<=Abstract)||LA750_0==External||(LA750_0>=Private && LA750_0<=Project)||LA750_0==Public||LA750_0==Static||LA750_0==Const) ) {
                alt750=1;
            }


            switch (alt750) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop750;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred274_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop751:
        do {
            int alt751=2;
            int LA751_0 = input.LA(1);

            if ( ((LA751_0>=Protected && LA751_0<=Abstract)||LA751_0==External||(LA751_0>=Private && LA751_0<=Project)||LA751_0==Public||LA751_0==Static||LA751_0==Const) ) {
                alt751=1;
            }


            switch (alt751) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop751;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop752:
        do {
            int alt752=2;
            alt752 = dfa752.predict(input);
            switch (alt752) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop752;
            }
        } while (true);
        int alt753=2;
        int LA753_0 = input.LA(1);

        if ( (LA753_0==LessThanSign) ) {
            alt753=1;
        }
        switch (alt753) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt754=2;
        alt754 = dfa754.predict(input);
        switch (alt754) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt755=2;
        int LA755_0 = input.LA(1);

        if ( (LA755_0==Asterisk) ) {
            alt755=1;
        }
        else if ( ((LA755_0>=Intersection && LA755_0<=With)||(LA755_0>=For && LA755_0<=Var)||(LA755_0>=As && LA755_0<=Of)||LA755_0==LeftSquareBracket||LA755_0==RULE_DOUBLE||LA755_0==RULE_HEX_INT||LA755_0==RULE_OCTAL_INT||LA755_0==RULE_SCIENTIFIC_INT||LA755_0==RULE_IDENTIFIER||LA755_0==RULE_STRING||LA755_0==RULE_INT) ) {
            alt755=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 755, 0, input);

            throw nvae;
        }
        switch (alt755) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred287_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred288_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred292_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred303_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred304_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred306_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred307_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred308_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred309_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return ;
        pushFollow(FOLLOW_75);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_62); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred310_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred311_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred315_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred316_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred317_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred318_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt769=2;
        int LA769_0 = input.LA(1);

        if ( (LA769_0==LessThanSign) ) {
            alt769=1;
        }
        switch (alt769) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_28); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_29);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop768:
                do {
                    int alt768=2;
                    int LA768_0 = input.LA(1);

                    if ( (LA768_0==Comma) ) {
                        alt768=1;
                    }


                    switch (alt768) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_28); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_29);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop768;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_64);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred263_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA206 dfa206 = new DFA206(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA224 dfa224 = new DFA224(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA208 dfa208 = new DFA208(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA248 dfa248 = new DFA248(this);
    protected DFA247 dfa247 = new DFA247(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA257 dfa257 = new DFA257(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA278 dfa278 = new DFA278(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA284 dfa284 = new DFA284(this);
    protected DFA288 dfa288 = new DFA288(this);
    protected DFA292 dfa292 = new DFA292(this);
    protected DFA295 dfa295 = new DFA295(this);
    protected DFA296 dfa296 = new DFA296(this);
    protected DFA297 dfa297 = new DFA297(this);
    protected DFA299 dfa299 = new DFA299(this);
    protected DFA317 dfa317 = new DFA317(this);
    protected DFA323 dfa323 = new DFA323(this);
    protected DFA336 dfa336 = new DFA336(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA340 dfa340 = new DFA340(this);
    protected DFA341 dfa341 = new DFA341(this);
    protected DFA342 dfa342 = new DFA342(this);
    protected DFA343 dfa343 = new DFA343(this);
    protected DFA375 dfa375 = new DFA375(this);
    protected DFA374 dfa374 = new DFA374(this);
    protected DFA377 dfa377 = new DFA377(this);
    protected DFA376 dfa376 = new DFA376(this);
    protected DFA379 dfa379 = new DFA379(this);
    protected DFA378 dfa378 = new DFA378(this);
    protected DFA381 dfa381 = new DFA381(this);
    protected DFA380 dfa380 = new DFA380(this);
    protected DFA383 dfa383 = new DFA383(this);
    protected DFA385 dfa385 = new DFA385(this);
    protected DFA416 dfa416 = new DFA416(this);
    protected DFA458 dfa458 = new DFA458(this);
    protected DFA459 dfa459 = new DFA459(this);
    protected DFA471 dfa471 = new DFA471(this);
    protected DFA461 dfa461 = new DFA461(this);
    protected DFA464 dfa464 = new DFA464(this);
    protected DFA466 dfa466 = new DFA466(this);
    protected DFA468 dfa468 = new DFA468(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA473 dfa473 = new DFA473(this);
    protected DFA476 dfa476 = new DFA476(this);
    protected DFA478 dfa478 = new DFA478(this);
    protected DFA480 dfa480 = new DFA480(this);
    protected DFA484 dfa484 = new DFA484(this);
    protected DFA485 dfa485 = new DFA485(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA489 dfa489 = new DFA489(this);
    protected DFA492 dfa492 = new DFA492(this);
    protected DFA494 dfa494 = new DFA494(this);
    protected DFA497 dfa497 = new DFA497(this);
    protected DFA499 dfa499 = new DFA499(this);
    protected DFA507 dfa507 = new DFA507(this);
    protected DFA509 dfa509 = new DFA509(this);
    protected DFA511 dfa511 = new DFA511(this);
    protected DFA514 dfa514 = new DFA514(this);
    protected DFA521 dfa521 = new DFA521(this);
    protected DFA524 dfa524 = new DFA524(this);
    protected DFA534 dfa534 = new DFA534(this);
    protected DFA540 dfa540 = new DFA540(this);
    protected DFA544 dfa544 = new DFA544(this);
    protected DFA545 dfa545 = new DFA545(this);
    protected DFA562 dfa562 = new DFA562(this);
    protected DFA566 dfa566 = new DFA566(this);
    protected DFA569 dfa569 = new DFA569(this);
    protected DFA580 dfa580 = new DFA580(this);
    protected DFA585 dfa585 = new DFA585(this);
    protected DFA587 dfa587 = new DFA587(this);
    protected DFA591 dfa591 = new DFA591(this);
    protected DFA672 dfa672 = new DFA672(this);
    protected DFA674 dfa674 = new DFA674(this);
    protected DFA676 dfa676 = new DFA676(this);
    protected DFA678 dfa678 = new DFA678(this);
    protected DFA680 dfa680 = new DFA680(this);
    protected DFA682 dfa682 = new DFA682(this);
    protected DFA684 dfa684 = new DFA684(this);
    protected DFA686 dfa686 = new DFA686(this);
    protected DFA734 dfa734 = new DFA734(this);
    protected DFA736 dfa736 = new DFA736(this);
    protected DFA740 dfa740 = new DFA740(this);
    protected DFA742 dfa742 = new DFA742(this);
    protected DFA746 dfa746 = new DFA746(this);
    protected DFA748 dfa748 = new DFA748(this);
    protected DFA752 dfa752 = new DFA752(this);
    protected DFA754 dfa754 = new DFA754(this);
    static final String dfa_1s = "\41\uffff";
    static final String dfa_2s = "\4\uffff\1\3\34\uffff";
    static final String dfa_3s = "\1\4\3\uffff\1\7\1\4\12\uffff\1\133\1\uffff\1\142\1\133\3\142\3\133\1\uffff\2\4\1\10\2\4\1\133";
    static final String dfa_4s = "\1\u0095\3\uffff\1\u0099\1\176\12\uffff\1\176\1\uffff\10\176\1\uffff\6\176";
    static final String dfa_5s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\15\1\16\2\14\1\uffff\1\4\10\uffff\1\5\6\uffff";
    static final String dfa_6s = "\4\uffff\1\0\34\uffff}>";
    static final String[] dfa_7s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\26\1\22\1\21\1\uffff\1\30\3\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\23\1\uffff\1\21\1\31\7\uffff\1\25\1\uffff\1\21\1\27\3\uffff\1\21\1\uffff\1\32\1\uffff\1\24\1\32\6\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\5\uffff\1\32\14\uffff\1\32\1\uffff\1\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\32\3\uffff\2\32\1\uffff\1\33\1\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\36\17\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\37\17\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\17\uffff\1\21\27\uffff\1\40",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\1\uffff\2\32\3\uffff\1\32\3\uffff\1\32\7\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\17\uffff\1\21\7\uffff\1\21\17\uffff\1\32",
            "\1\32\23\uffff\1\32\2\uffff\1\32\12\uffff\1\32\5\uffff\1\32\2\uffff\1\32\2\uffff\1\21\62\uffff\1\32\24\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21"
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "88:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= ruleParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= ruleArrayLiteral | ObjectLiteralParserRuleCall_7= ruleObjectLiteral | ParenExpressionParserRuleCall_8= ruleParenExpression | AnnotatedExpressionParserRuleCall_9= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= ruleN4ClassExpression | TemplateLiteralParserRuleCall_13= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA3_4==RULE_NO_LINE_TERMINATOR) && (synpred1_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA3_4==Function) && (synpred1_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA3_4==EOF||LA3_4==Instanceof||LA3_4==ExclamationMarkEqualsSignEqualsSign||(LA3_4>=LessThanSignLessThanSignEqualsSign && LA3_4<=EqualsSignEqualsSignEqualsSign)||(LA3_4>=ExclamationMarkEqualsSign && LA3_4<=EqualsSignEqualsSign)||LA3_4==GreaterThanSignEqualsSign||(LA3_4>=CircumflexAccentEqualsSign && LA3_4<=As)||(LA3_4>=In && LA3_4<=VerticalLineVerticalLine)||(LA3_4>=PercentSign && LA3_4<=QuestionMark)||(LA3_4>=LeftSquareBracket && LA3_4<=RightCurlyBracket)||(LA3_4>=RULE_TEMPLATE_HEAD && LA3_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_4==RULE_ML_COMMENT||LA3_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_8s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\26\1\22\1\21\1\uffff\1\30\3\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\23\1\uffff\1\21\1\31\7\uffff\1\25\1\uffff\1\21\1\27\3\uffff\1\21\1\uffff\1\32\1\uffff\1\24\1\32\6\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\5\uffff\1\32\14\uffff\1\32\1\uffff\1\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\32\3\uffff\2\32\1\uffff\1\33\1\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\36\17\uffff\1\21",
            "\2\21\4\uffff\1\21\5\uffff\1\37\17\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\17\uffff\1\21\27\uffff\1\40",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\7\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\17\uffff\1\21\7\uffff\1\21\17\uffff\1\32",
            "\1\32\23\uffff\1\32\2\uffff\1\32\12\uffff\1\32\5\uffff\1\32\2\uffff\1\32\2\uffff\1\21\62\uffff\1\32\24\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21"
    };
    static final short[][] dfa_8 = unpackEncodedStringArray(dfa_8s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_8;
        }
        public String getDescription() {
            return "134:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | JSXElementParserRuleCall_3= ruleJSXElement | ParameterizedCallExpressionParserRuleCall_4= norm1_ParameterizedCallExpression | LiteralParserRuleCall_5= ruleLiteral | ArrayLiteralParserRuleCall_6= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_7= norm1_ObjectLiteral | ParenExpressionParserRuleCall_8= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_9= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_10= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_11= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_12= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_13= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_4==RULE_NO_LINE_TERMINATOR) && (synpred2_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA4_4==Function) && (synpred2_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA4_4==EOF||LA4_4==Instanceof||LA4_4==ExclamationMarkEqualsSignEqualsSign||(LA4_4>=LessThanSignLessThanSignEqualsSign && LA4_4<=EqualsSignEqualsSignEqualsSign)||(LA4_4>=ExclamationMarkEqualsSign && LA4_4<=EqualsSignEqualsSign)||LA4_4==GreaterThanSignEqualsSign||(LA4_4>=CircumflexAccentEqualsSign && LA4_4<=As)||(LA4_4>=In && LA4_4<=VerticalLineVerticalLine)||(LA4_4>=PercentSign && LA4_4<=QuestionMark)||(LA4_4>=LeftSquareBracket && LA4_4<=RightCurlyBracket)||(LA4_4>=RULE_TEMPLATE_HEAD && LA4_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA4_4==RULE_ML_COMMENT||LA4_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_9s = "\123\uffff";
    static final String dfa_10s = "\1\4\13\0\107\uffff";
    static final String dfa_11s = "\1\u0095\13\0\107\uffff";
    static final String dfa_12s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_13s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_14s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = dfa_9;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "426:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_0 = input.LA(1);

                         
                        int index12_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA12_0>=9 && LA12_0<=106 && (s=T2S.M_0[LA12_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA12_0==Enum) && (synpred6_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA12_0==Import) ) {s = 13;}

                        else if ( (LA12_0==Export) ) {s = 14;}

                        else if ( ((LA12_0>=Intersection && LA12_0<=Implements)||LA12_0==Promisify||(LA12_0>=Continue && LA12_0<=Debugger)||LA12_0==Function||LA12_0==Delete||LA12_0==Return||(LA12_0>=Switch && LA12_0<=Break)||(LA12_0>=False && LA12_0<=This)||(LA12_0>=From && LA12_0<=With)||(LA12_0>=For && LA12_0<=Var)||LA12_0==PlusSignPlusSign||LA12_0==HyphenMinusHyphenMinus||LA12_0==SolidusEqualsSign||(LA12_0>=As && LA12_0<=If)||LA12_0==Of||LA12_0==ExclamationMark||LA12_0==LeftParenthesis||LA12_0==PlusSign||LA12_0==HyphenMinus||LA12_0==Solidus||(LA12_0>=Semicolon && LA12_0<=LessThanSign)||LA12_0==LeftSquareBracket||LA12_0==LeftCurlyBracket||LA12_0==Tilde||LA12_0==RULE_DOUBLE||(LA12_0>=RULE_HEX_INT && LA12_0<=RULE_LEGACY_OCTAL_INT)||LA12_0==RULE_SCIENTIFIC_INT||LA12_0==RULE_IDENTIFIER||LA12_0==RULE_STRING||(LA12_0>=RULE_TEMPLATE_HEAD && LA12_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA12_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index12_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_1 = input.LA(1);

                         
                        int index12_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_15s = "\17\uffff";
    static final String dfa_16s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_17s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_18s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_19s = "\1\2\2\uffff\1\7\1\0\1\3\1\5\1\10\1\1\1\4\1\6\4\uffff}>";
    static final String[] dfa_20s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[][] dfa_20 = unpackEncodedStringArray(dfa_20s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_16;
            this.max = dfa_17;
            this.accept = dfa_18;
            this.special = dfa_19;
            this.transition = dfa_20;
        }
        public String getDescription() {
            return "503:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_4==Enum) ) {s = 14;}

                        else if ( (LA25_4==Private) ) {s = 3;}

                        else if ( (LA25_4==Project) ) {s = 4;}

                        else if ( (LA25_4==Protected) ) {s = 5;}

                        else if ( (LA25_4==Public) ) {s = 6;}

                        else if ( (LA25_4==External) ) {s = 7;}

                        else if ( (LA25_4==Abstract) ) {s = 8;}

                        else if ( (LA25_4==Static) ) {s = 9;}

                        else if ( (LA25_4==Const) ) {s = 10;}

                        else if ( (LA25_4==Interface||LA25_4==Class) ) {s = 13;}

                        else if ( (LA25_4==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_4==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_8==Enum) ) {s = 14;}

                        else if ( (LA25_8==Private) ) {s = 3;}

                        else if ( (LA25_8==Project) ) {s = 4;}

                        else if ( (LA25_8==Protected) ) {s = 5;}

                        else if ( (LA25_8==Public) ) {s = 6;}

                        else if ( (LA25_8==External) ) {s = 7;}

                        else if ( (LA25_8==Abstract) ) {s = 8;}

                        else if ( (LA25_8==Static) ) {s = 9;}

                        else if ( (LA25_8==Const) ) {s = 10;}

                        else if ( (LA25_8==Interface||LA25_8==Class) ) {s = 13;}

                        else if ( (LA25_8==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_8==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_0 = input.LA(1);

                         
                        int index25_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA25_0>=10 && LA25_0<=35 && (s=T2S.M_1[LA25_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA25_0==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_0==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_0==Interface||LA25_0==Class) ) {s = 13;}

                        else if ( (LA25_0==Enum) ) {s = 14;}

                         
                        input.seek(index25_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_5==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_5==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_5==Private) ) {s = 3;}

                        else if ( (LA25_5==Project) ) {s = 4;}

                        else if ( (LA25_5==Protected) ) {s = 5;}

                        else if ( (LA25_5==Public) ) {s = 6;}

                        else if ( (LA25_5==External) ) {s = 7;}

                        else if ( (LA25_5==Abstract) ) {s = 8;}

                        else if ( (LA25_5==Static) ) {s = 9;}

                        else if ( (LA25_5==Const) ) {s = 10;}

                        else if ( (LA25_5==Interface||LA25_5==Class) ) {s = 13;}

                        else if ( (LA25_5==Enum) ) {s = 14;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_9==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_9==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_9==Private) ) {s = 3;}

                        else if ( (LA25_9==Project) ) {s = 4;}

                        else if ( (LA25_9==Protected) ) {s = 5;}

                        else if ( (LA25_9==Public) ) {s = 6;}

                        else if ( (LA25_9==External) ) {s = 7;}

                        else if ( (LA25_9==Abstract) ) {s = 8;}

                        else if ( (LA25_9==Static) ) {s = 9;}

                        else if ( (LA25_9==Const) ) {s = 10;}

                        else if ( (LA25_9==Interface||LA25_9==Class) ) {s = 13;}

                        else if ( (LA25_9==Enum) ) {s = 14;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_6==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_6==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_6==Private) ) {s = 3;}

                        else if ( (LA25_6==Project) ) {s = 4;}

                        else if ( (LA25_6==Protected) ) {s = 5;}

                        else if ( (LA25_6==Public) ) {s = 6;}

                        else if ( (LA25_6==External) ) {s = 7;}

                        else if ( (LA25_6==Abstract) ) {s = 8;}

                        else if ( (LA25_6==Static) ) {s = 9;}

                        else if ( (LA25_6==Const) ) {s = 10;}

                        else if ( (LA25_6==Interface||LA25_6==Class) ) {s = 13;}

                        else if ( (LA25_6==Enum) ) {s = 14;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_10==Interface||LA25_10==Class) ) {s = 13;}

                        else if ( (LA25_10==Private) ) {s = 3;}

                        else if ( (LA25_10==Project) ) {s = 4;}

                        else if ( (LA25_10==Protected) ) {s = 5;}

                        else if ( (LA25_10==Public) ) {s = 6;}

                        else if ( (LA25_10==External) ) {s = 7;}

                        else if ( (LA25_10==Abstract) ) {s = 8;}

                        else if ( (LA25_10==Static) ) {s = 9;}

                        else if ( (LA25_10==Const) ) {s = 10;}

                        else if ( (LA25_10==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_10==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_10==Enum) ) {s = 14;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_3==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_3==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_3==Private) ) {s = 3;}

                        else if ( (LA25_3==Project) ) {s = 4;}

                        else if ( (LA25_3==Protected) ) {s = 5;}

                        else if ( (LA25_3==Public) ) {s = 6;}

                        else if ( (LA25_3==External) ) {s = 7;}

                        else if ( (LA25_3==Abstract) ) {s = 8;}

                        else if ( (LA25_3==Static) ) {s = 9;}

                        else if ( (LA25_3==Const) ) {s = 10;}

                        else if ( (LA25_3==Interface||LA25_3==Class) ) {s = 13;}

                        else if ( (LA25_3==Enum) ) {s = 14;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_7==Interface||LA25_7==Class) ) {s = 13;}

                        else if ( (LA25_7==Private) ) {s = 3;}

                        else if ( (LA25_7==Project) ) {s = 4;}

                        else if ( (LA25_7==Protected) ) {s = 5;}

                        else if ( (LA25_7==Public) ) {s = 6;}

                        else if ( (LA25_7==External) ) {s = 7;}

                        else if ( (LA25_7==Abstract) ) {s = 8;}

                        else if ( (LA25_7==Static) ) {s = 9;}

                        else if ( (LA25_7==Const) ) {s = 10;}

                        else if ( (LA25_7==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA25_7==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA25_7==Enum) ) {s = 14;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_21s = "\13\uffff";
    static final String dfa_22s = "\11\11\2\uffff";
    static final String dfa_23s = "\11\43\2\uffff";
    static final String dfa_24s = "\11\uffff\1\1\1\2";
    static final String dfa_25s = "\13\uffff}>";
    static final String[] dfa_26s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "520:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_27s = "\101\uffff";
    static final String dfa_28s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_29s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_30s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_31s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_32s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "653:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_0 = input.LA(1);

                         
                        int index28_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA28_0==CommercialAt) ) {s = 1;}

                        else if ( (LA28_0==Private) ) {s = 2;}

                        else if ( (LA28_0==Project) ) {s = 3;}

                        else if ( (LA28_0==Protected) ) {s = 4;}

                        else if ( (LA28_0==Public) ) {s = 5;}

                        else if ( (LA28_0==External) ) {s = 6;}

                        else if ( (LA28_0==Abstract) ) {s = 7;}

                        else if ( (LA28_0==Static) ) {s = 8;}

                        else if ( (LA28_0==Const) && (synpred11_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA28_0==Class) ) {s = 10;}

                        else if ( (LA28_0==Interface) ) {s = 11;}

                        else if ( (LA28_0==Enum) && (synpred11_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA28_0==Async) ) {s = 13;}

                        else if ( (LA28_0==Function) ) {s = 14;}

                        else if ( (LA28_0==Var) && (synpred11_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA28_0==Let) ) {s = 16;}

                        else if ( ((LA28_0>=Intersection && LA28_0<=Implements)||LA28_0==Promisify||LA28_0==Delete||(LA28_0>=Target && LA28_0<=Typeof)||LA28_0==Await||(LA28_0>=False && LA28_0<=Super)||LA28_0==Union||(LA28_0>=Yield && LA28_0<=This)||(LA28_0>=From && LA28_0<=Void)||LA28_0==Get||(LA28_0>=New && LA28_0<=Set)||LA28_0==PlusSignPlusSign||LA28_0==HyphenMinusHyphenMinus||LA28_0==SolidusEqualsSign||LA28_0==As||LA28_0==Of||LA28_0==ExclamationMark||LA28_0==LeftParenthesis||LA28_0==PlusSign||LA28_0==HyphenMinus||LA28_0==Solidus||LA28_0==LessThanSign||LA28_0==LeftSquareBracket||LA28_0==LeftCurlyBracket||LA28_0==Tilde||LA28_0==RULE_DOUBLE||(LA28_0>=RULE_HEX_INT && LA28_0<=RULE_LEGACY_OCTAL_INT)||LA28_0==RULE_SCIENTIFIC_INT||LA28_0==RULE_IDENTIFIER||LA28_0==RULE_STRING||(LA28_0>=RULE_TEMPLATE_HEAD && LA28_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA28_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index28_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA28_3 = input.LA(1);

                         
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA28_4 = input.LA(1);

                         
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA28_5 = input.LA(1);

                         
                        int index28_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA28_6 = input.LA(1);

                         
                        int index28_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA28_7 = input.LA(1);

                         
                        int index28_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA28_8 = input.LA(1);

                         
                        int index28_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA28_10 = input.LA(1);

                         
                        int index28_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA28_11 = input.LA(1);

                         
                        int index28_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA28_13 = input.LA(1);

                         
                        int index28_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA28_14 = input.LA(1);

                         
                        int index28_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA28_16 = input.LA(1);

                         
                        int index28_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index28_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_33s = "\67\uffff";
    static final String dfa_34s = "\17\uffff\11\16\37\uffff";
    static final String dfa_35s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\4\1\17\37\uffff";
    static final String dfa_36s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_37s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_38s = "\1\20\1\uffff\1\11\1\16\1\7\1\10\1\2\1\13\1\17\1\14\5\uffff\1\5\1\1\1\12\1\0\1\15\1\6\1\3\1\4\40\uffff}>";
    static final String[] dfa_39s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\26\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\27\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final char[] dfa_36 = DFA.unpackEncodedStringToUnsignedChars(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[][] dfa_39 = unpackEncodedStringArray(dfa_39s);

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_33;
            this.eof = dfa_34;
            this.min = dfa_35;
            this.max = dfa_36;
            this.accept = dfa_37;
            this.special = dfa_38;
            this.transition = dfa_39;
        }
        public String getDescription() {
            return "766:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_18 = input.LA(1);

                         
                        int index34_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_18==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_18==Private) ) {s = 2;}

                        else if ( (LA34_18==Project) ) {s = 3;}

                        else if ( (LA34_18==Protected) ) {s = 4;}

                        else if ( (LA34_18==Public) ) {s = 5;}

                        else if ( (LA34_18==External) ) {s = 6;}

                        else if ( (LA34_18==Abstract) ) {s = 7;}

                        else if ( (LA34_18==Static) ) {s = 8;}

                        else if ( (LA34_18==Const) ) {s = 9;}

                        else if ( (LA34_18==EOF||LA34_18==Let||LA34_18==Var||LA34_18==Comma||(LA34_18>=Colon && LA34_18<=Semicolon)||LA34_18==EqualsSign||LA34_18==RightCurlyBracket||LA34_18==RULE_ML_COMMENT||LA34_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_18==Function||LA34_18==Async) ) {s = 13;}

                        else if ( (LA34_18==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_18==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                         
                        input.seek(index34_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_16 = input.LA(1);

                         
                        int index34_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_16==EOF||LA34_16==Let||LA34_16==Var||LA34_16==Comma||(LA34_16>=Colon && LA34_16<=Semicolon)||LA34_16==EqualsSign||LA34_16==RightCurlyBracket||LA34_16==RULE_ML_COMMENT||LA34_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_16==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_16==Private) ) {s = 2;}

                        else if ( (LA34_16==Project) ) {s = 3;}

                        else if ( (LA34_16==Protected) ) {s = 4;}

                        else if ( (LA34_16==Public) ) {s = 5;}

                        else if ( (LA34_16==External) ) {s = 6;}

                        else if ( (LA34_16==Abstract) ) {s = 7;}

                        else if ( (LA34_16==Static) ) {s = 8;}

                        else if ( (LA34_16==Const) ) {s = 9;}

                        else if ( (LA34_16==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_16==Function||LA34_16==Async) ) {s = 13;}

                        else if ( (LA34_16==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_6 = input.LA(1);

                         
                        int index34_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_6==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_6==Private) ) {s = 2;}

                        else if ( (LA34_6==Project) ) {s = 3;}

                        else if ( (LA34_6==Protected) ) {s = 4;}

                        else if ( (LA34_6==Public) ) {s = 5;}

                        else if ( (LA34_6==External) ) {s = 6;}

                        else if ( (LA34_6==Abstract) ) {s = 7;}

                        else if ( (LA34_6==Static) ) {s = 8;}

                        else if ( (LA34_6==Const) ) {s = 9;}

                        else if ( (LA34_6==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_6==Let||LA34_6==Var) ) {s = 14;}

                        else if ( (LA34_6==Function||LA34_6==Async) ) {s = 13;}

                        else if ( (LA34_6==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_21 = input.LA(1);

                         
                        int index34_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_21==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_21==Private) ) {s = 2;}

                        else if ( (LA34_21==Project) ) {s = 3;}

                        else if ( (LA34_21==Protected) ) {s = 4;}

                        else if ( (LA34_21==Public) ) {s = 5;}

                        else if ( (LA34_21==External) ) {s = 6;}

                        else if ( (LA34_21==Abstract) ) {s = 7;}

                        else if ( (LA34_21==Static) ) {s = 8;}

                        else if ( (LA34_21==Const) ) {s = 9;}

                        else if ( (LA34_21==EOF||LA34_21==Let||LA34_21==Var||LA34_21==Comma||(LA34_21>=Colon && LA34_21<=Semicolon)||LA34_21==EqualsSign||LA34_21==RightCurlyBracket||LA34_21==RULE_ML_COMMENT||LA34_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_21==Function||LA34_21==Async) ) {s = 13;}

                        else if ( (LA34_21==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_21==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                         
                        input.seek(index34_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_22 = input.LA(1);

                         
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA34_22>=4 && LA34_22<=126 && (s=T2S.M_2[LA34_22-(4)])>=0) && (synpred14_InternalN4JSXParser())) { /* 31 cases */ }
                        else if ( (LA34_22==EOF||LA34_22==Comma||(LA34_22>=Colon && LA34_22<=Semicolon)||LA34_22==EqualsSign||LA34_22==RightCurlyBracket||LA34_22==RULE_ML_COMMENT||LA34_22==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_15==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_15==Private) ) {s = 2;}

                        else if ( (LA34_15==Project) ) {s = 3;}

                        else if ( (LA34_15==Protected) ) {s = 4;}

                        else if ( (LA34_15==Public) ) {s = 5;}

                        else if ( (LA34_15==External) ) {s = 6;}

                        else if ( (LA34_15==Abstract) ) {s = 7;}

                        else if ( (LA34_15==Static) ) {s = 8;}

                        else if ( (LA34_15==Const) ) {s = 9;}

                        else if ( (LA34_15==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_15==EOF||LA34_15==Let||LA34_15==Var||LA34_15==Comma||(LA34_15>=Colon && LA34_15<=Semicolon)||LA34_15==EqualsSign||LA34_15==RightCurlyBracket||LA34_15==RULE_ML_COMMENT||LA34_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_15==Function||LA34_15==Async) ) {s = 13;}

                        else if ( (LA34_15==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_20 = input.LA(1);

                         
                        int index34_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_20==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_20==Private) ) {s = 2;}

                        else if ( (LA34_20==Project) ) {s = 3;}

                        else if ( (LA34_20==Protected) ) {s = 4;}

                        else if ( (LA34_20==Public) ) {s = 5;}

                        else if ( (LA34_20==External) ) {s = 6;}

                        else if ( (LA34_20==Abstract) ) {s = 7;}

                        else if ( (LA34_20==Static) ) {s = 8;}

                        else if ( (LA34_20==Const) ) {s = 9;}

                        else if ( (LA34_20==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_20==EOF||LA34_20==Let||LA34_20==Var||LA34_20==Comma||(LA34_20>=Colon && LA34_20<=Semicolon)||LA34_20==EqualsSign||LA34_20==RightCurlyBracket||LA34_20==RULE_ML_COMMENT||LA34_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_20==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_20==Function||LA34_20==Async) ) {s = 13;}

                         
                        input.seek(index34_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA34_4 = input.LA(1);

                         
                        int index34_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_4==Function||LA34_4==Async) ) {s = 13;}

                        else if ( (LA34_4==Private) ) {s = 2;}

                        else if ( (LA34_4==Project) ) {s = 3;}

                        else if ( (LA34_4==Protected) ) {s = 4;}

                        else if ( (LA34_4==Public) ) {s = 5;}

                        else if ( (LA34_4==External) ) {s = 6;}

                        else if ( (LA34_4==Abstract) ) {s = 7;}

                        else if ( (LA34_4==Static) ) {s = 8;}

                        else if ( (LA34_4==Const) ) {s = 9;}

                        else if ( (LA34_4==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_4==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_4==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_4==Let||LA34_4==Var) ) {s = 14;}

                         
                        input.seek(index34_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA34_5 = input.LA(1);

                         
                        int index34_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_5==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_5==Private) ) {s = 2;}

                        else if ( (LA34_5==Project) ) {s = 3;}

                        else if ( (LA34_5==Protected) ) {s = 4;}

                        else if ( (LA34_5==Public) ) {s = 5;}

                        else if ( (LA34_5==External) ) {s = 6;}

                        else if ( (LA34_5==Abstract) ) {s = 7;}

                        else if ( (LA34_5==Static) ) {s = 8;}

                        else if ( (LA34_5==Const) ) {s = 9;}

                        else if ( (LA34_5==Let||LA34_5==Var) ) {s = 14;}

                        else if ( (LA34_5==Function||LA34_5==Async) ) {s = 13;}

                        else if ( (LA34_5==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_5==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                         
                        input.seek(index34_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA34_2 = input.LA(1);

                         
                        int index34_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_2==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_2==Private) ) {s = 2;}

                        else if ( (LA34_2==Project) ) {s = 3;}

                        else if ( (LA34_2==Protected) ) {s = 4;}

                        else if ( (LA34_2==Public) ) {s = 5;}

                        else if ( (LA34_2==External) ) {s = 6;}

                        else if ( (LA34_2==Abstract) ) {s = 7;}

                        else if ( (LA34_2==Static) ) {s = 8;}

                        else if ( (LA34_2==Const) ) {s = 9;}

                        else if ( (LA34_2==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_2==Let||LA34_2==Var) ) {s = 14;}

                        else if ( (LA34_2==Function||LA34_2==Async) ) {s = 13;}

                        else if ( (LA34_2==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA34_17 = input.LA(1);

                         
                        int index34_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_17==Function||LA34_17==Async) ) {s = 13;}

                        else if ( (LA34_17==Private) ) {s = 2;}

                        else if ( (LA34_17==Project) ) {s = 3;}

                        else if ( (LA34_17==Protected) ) {s = 4;}

                        else if ( (LA34_17==Public) ) {s = 5;}

                        else if ( (LA34_17==External) ) {s = 6;}

                        else if ( (LA34_17==Abstract) ) {s = 7;}

                        else if ( (LA34_17==Static) ) {s = 8;}

                        else if ( (LA34_17==Const) ) {s = 9;}

                        else if ( (LA34_17==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_17==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_17==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_17==EOF||LA34_17==Let||LA34_17==Var||LA34_17==Comma||(LA34_17>=Colon && LA34_17<=Semicolon)||LA34_17==EqualsSign||LA34_17==RightCurlyBracket||LA34_17==RULE_ML_COMMENT||LA34_17==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index34_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA34_7 = input.LA(1);

                         
                        int index34_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_7==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_7==Private) ) {s = 2;}

                        else if ( (LA34_7==Project) ) {s = 3;}

                        else if ( (LA34_7==Protected) ) {s = 4;}

                        else if ( (LA34_7==Public) ) {s = 5;}

                        else if ( (LA34_7==External) ) {s = 6;}

                        else if ( (LA34_7==Abstract) ) {s = 7;}

                        else if ( (LA34_7==Static) ) {s = 8;}

                        else if ( (LA34_7==Const) ) {s = 9;}

                        else if ( (LA34_7==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_7==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_7==Let||LA34_7==Var) ) {s = 14;}

                        else if ( (LA34_7==Function||LA34_7==Async) ) {s = 13;}

                         
                        input.seek(index34_7);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_9==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        
                        else if ((LA34_9>=9 && LA34_9<=35 && (s=T2S.M_3[LA34_9-(9)])>=0)) { /* 10 cases */ }
                        else if ( ((LA34_9>=Intersection && LA34_9<=Implements)||LA34_9==Promisify||LA34_9==Target||LA34_9==Await||LA34_9==Union||(LA34_9>=Yield && LA34_9<=This)||LA34_9==From||LA34_9==Type||(LA34_9>=Get && LA34_9<=Let)||(LA34_9>=Out && LA34_9<=Set)||LA34_9==Var||LA34_9==As||LA34_9==Of||(LA34_9>=CommercialAt && LA34_9<=LeftSquareBracket)||LA34_9==LeftCurlyBracket||LA34_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA34_9==Async) ) {s = 23;}

                        else if ( (LA34_9==Function) ) {s = 13;}

                        else if ( (LA34_9==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA34_19 = input.LA(1);

                         
                        int index34_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_19==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_19==Private) ) {s = 2;}

                        else if ( (LA34_19==Project) ) {s = 3;}

                        else if ( (LA34_19==Protected) ) {s = 4;}

                        else if ( (LA34_19==Public) ) {s = 5;}

                        else if ( (LA34_19==External) ) {s = 6;}

                        else if ( (LA34_19==Abstract) ) {s = 7;}

                        else if ( (LA34_19==Static) ) {s = 8;}

                        else if ( (LA34_19==Const) ) {s = 9;}

                        else if ( (LA34_19==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_19==EOF||LA34_19==Let||LA34_19==Var||LA34_19==Comma||(LA34_19>=Colon && LA34_19<=Semicolon)||LA34_19==EqualsSign||LA34_19==RightCurlyBracket||LA34_19==RULE_ML_COMMENT||LA34_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA34_19==Function||LA34_19==Async) ) {s = 13;}

                        else if ( (LA34_19==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_19);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA34_3 = input.LA(1);

                         
                        int index34_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_3==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_3==Private) ) {s = 2;}

                        else if ( (LA34_3==Project) ) {s = 3;}

                        else if ( (LA34_3==Protected) ) {s = 4;}

                        else if ( (LA34_3==Public) ) {s = 5;}

                        else if ( (LA34_3==External) ) {s = 6;}

                        else if ( (LA34_3==Abstract) ) {s = 7;}

                        else if ( (LA34_3==Static) ) {s = 8;}

                        else if ( (LA34_3==Const) ) {s = 9;}

                        else if ( (LA34_3==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_3==Let||LA34_3==Var) ) {s = 14;}

                        else if ( (LA34_3==Function||LA34_3==Async) ) {s = 13;}

                        else if ( (LA34_3==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index34_3);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA34_8 = input.LA(1);

                         
                        int index34_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_8==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_8==Private) ) {s = 2;}

                        else if ( (LA34_8==Project) ) {s = 3;}

                        else if ( (LA34_8==Protected) ) {s = 4;}

                        else if ( (LA34_8==Public) ) {s = 5;}

                        else if ( (LA34_8==External) ) {s = 6;}

                        else if ( (LA34_8==Abstract) ) {s = 7;}

                        else if ( (LA34_8==Static) ) {s = 8;}

                        else if ( (LA34_8==Const) ) {s = 9;}

                        else if ( (LA34_8==Let||LA34_8==Var) ) {s = 14;}

                        else if ( (LA34_8==Function||LA34_8==Async) ) {s = 13;}

                        else if ( (LA34_8==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_8==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                         
                        input.seek(index34_8);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA34_0 = input.LA(1);

                         
                        int index34_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_0==CommercialAt) && (synpred12_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA34_0==Private) ) {s = 2;}

                        else if ( (LA34_0==Project) ) {s = 3;}

                        else if ( (LA34_0==Protected) ) {s = 4;}

                        else if ( (LA34_0==Public) ) {s = 5;}

                        else if ( (LA34_0==External) ) {s = 6;}

                        else if ( (LA34_0==Abstract) ) {s = 7;}

                        else if ( (LA34_0==Static) ) {s = 8;}

                        else if ( (LA34_0==Const) ) {s = 9;}

                        else if ( (LA34_0==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA34_0==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA34_0==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA34_0==Function||LA34_0==Async) ) {s = 13;}

                        else if ( (LA34_0==Let||LA34_0==Var) ) {s = 14;}

                         
                        input.seek(index34_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_40s = "\26\uffff";
    static final String dfa_41s = "\15\uffff\11\12";
    static final String dfa_42s = "\10\11\1\4\4\uffff\7\11\1\17\1\4";
    static final String dfa_43s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_44s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_45s = "\26\uffff}>";
    static final String[] dfa_46s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\1\uffff\1\12\1\uffff\1\24\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_40;
            this.eof = dfa_41;
            this.min = dfa_42;
            this.max = dfa_43;
            this.accept = dfa_44;
            this.special = dfa_45;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "841:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_47s = "\14\uffff";
    static final String dfa_48s = "\4\uffff\10\1";
    static final String dfa_49s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_50s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_51s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_52s = "\14\uffff}>";
    static final String[] dfa_53s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final char[] dfa_50 = DFA.unpackEncodedStringToUnsignedChars(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[][] dfa_53 = unpackEncodedStringArray(dfa_53s);

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_53;
        }
        public String getDescription() {
            return "()* loopback of 848:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "867:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_54s = "\36\uffff";
    static final String dfa_55s = "\1\uffff\33\35\2\uffff";
    static final String dfa_56s = "\1\4\33\122\2\uffff";
    static final String dfa_57s = "\1\176\33\160\2\uffff";
    static final String dfa_58s = "\34\uffff\1\2\1\1";
    static final String dfa_59s = "\36\uffff}>";
    static final String[] dfa_60s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[][] dfa_60 = unpackEncodedStringArray(dfa_60s);

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_54;
            this.eof = dfa_55;
            this.min = dfa_56;
            this.max = dfa_57;
            this.accept = dfa_58;
            this.special = dfa_59;
            this.transition = dfa_60;
        }
        public String getDescription() {
            return "1034:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_61s = "\134\uffff";
    static final String dfa_62s = "\1\2\1\uffff\1\7\4\uffff\1\133\124\uffff";
    static final String dfa_63s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_64s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_65s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\124\1";
    static final String dfa_66s = "\1\0\1\2\1\1\2\uffff\1\4\1\uffff\1\3\124\uffff}>";
    static final String[] dfa_67s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\uffff\1\76\7\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\10\uffff\1\63",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final char[] dfa_64 = DFA.unpackEncodedStringToUnsignedChars(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[][] dfa_67 = unpackEncodedStringArray(dfa_67s);

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_66;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "1151:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_0 = input.LA(1);

                         
                        int index60_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA60_0==Semicolon) ) {s = 1;}

                        else if ( (LA60_0==EOF) ) {s = 2;}

                        else if ( (LA60_0==RULE_EOL) && (synpred19_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA60_0==RULE_ML_COMMENT) && (synpred19_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA60_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA60_0>=Intersection && LA60_0<=Implements)||(LA60_0>=Promisify && LA60_0<=Default)||(LA60_0>=Private && LA60_0<=Break)||(LA60_0>=Class && LA60_0<=With)||(LA60_0>=For && LA60_0<=Var)||LA60_0==PlusSignPlusSign||LA60_0==HyphenMinusHyphenMinus||LA60_0==SolidusEqualsSign||(LA60_0>=As && LA60_0<=If)||LA60_0==Of||LA60_0==ExclamationMark||LA60_0==LeftParenthesis||LA60_0==PlusSign||LA60_0==HyphenMinus||LA60_0==Solidus||LA60_0==LessThanSign||(LA60_0>=CommercialAt && LA60_0<=LeftSquareBracket)||LA60_0==LeftCurlyBracket||LA60_0==Tilde||LA60_0==RULE_DOUBLE||(LA60_0>=RULE_HEX_INT && LA60_0<=RULE_LEGACY_OCTAL_INT)||LA60_0==RULE_SCIENTIFIC_INT||LA60_0==RULE_IDENTIFIER||LA60_0==RULE_STRING||(LA60_0>=RULE_TEMPLATE_HEAD && LA60_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA60_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index60_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA60_2==EOF) ) {s = 7;}

                        
                        else if ((LA60_2>=-1 && LA60_2<=149 && (s=T2S.M_4[LA60_2-(-1)])>=0) && (synpred19_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_1 = input.LA(1);

                         
                        int index60_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index60_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA60_7 = input.LA(1);

                         
                        int index60_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA60_7==EOF) && (synpred19_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index60_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA60_5 = input.LA(1);

                         
                        int index60_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index60_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_68s = "\130\uffff";
    static final String dfa_69s = "\1\2\127\uffff";
    static final String dfa_70s = "\1\4\1\0\126\uffff";
    static final String dfa_71s = "\1\u0099\1\0\126\uffff";
    static final String dfa_72s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_73s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_74s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[][] dfa_74 = unpackEncodedStringArray(dfa_74s);

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1386:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_1 = input.LA(1);

                         
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1403:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_75s = "\77\uffff";
    static final String dfa_76s = "\1\4\1\0\75\uffff";
    static final String dfa_77s = "\1\u0095\1\0\75\uffff";
    static final String dfa_78s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_79s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_80s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final short[][] dfa_80 = unpackEncodedStringArray(dfa_80s);

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1709:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);

                         
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1843:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_1 = input.LA(1);

                         
                        int index98_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index98_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1977:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_1 = input.LA(1);

                         
                        int index106_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index106_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "2111:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_1 = input.LA(1);

                         
                        int index114_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index114_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_81s = "\44\uffff";
    static final String dfa_82s = "\1\4\1\0\42\uffff";
    static final String dfa_83s = "\1\176\1\0\42\uffff";
    static final String dfa_84s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_85s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_86s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "2462:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_0 = input.LA(1);

                         
                        int index133_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA133_0==LeftSquareBracket) && (synpred51_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA133_0>=Intersection && LA133_0<=Implements)||(LA133_0>=Promisify && LA133_0<=Abstract)||LA133_0==External||(LA133_0>=Private && LA133_0<=Project)||LA133_0==Public||LA133_0==Static||LA133_0==Target||(LA133_0>=Async && LA133_0<=Await)||LA133_0==Union||(LA133_0>=Yield && LA133_0<=This)||LA133_0==From||LA133_0==This_1||(LA133_0>=Type && LA133_0<=Void)||LA133_0==FullStopFullStopFullStop||(LA133_0>=Get && LA133_0<=Let)||(LA133_0>=Out && LA133_0<=Set)||LA133_0==As||LA133_0==Of||(LA133_0>=QuestionMark && LA133_0<=CommercialAt)||LA133_0==Tilde||LA133_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index133_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_1 = input.LA(1);

                         
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_87s = "\2\uffff\11\13\1\uffff";
    static final String dfa_88s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_89s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_90s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_91s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[][] dfa_91 = unpackEncodedStringArray(dfa_91s);

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_91;
        }
        public String getDescription() {
            return "2475:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_92s = "\43\uffff";
    static final String dfa_93s = "\1\4\1\0\41\uffff";
    static final String dfa_94s = "\1\176\1\0\41\uffff";
    static final String dfa_95s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_96s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_97s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[][] dfa_97 = unpackEncodedStringArray(dfa_97s);

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_93;
            this.max = dfa_94;
            this.accept = dfa_95;
            this.special = dfa_96;
            this.transition = dfa_97;
        }
        public String getDescription() {
            return "2504:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_0 = input.LA(1);

                         
                        int index139_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA139_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA139_0==LeftSquareBracket) && (synpred52_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA139_0>=Intersection && LA139_0<=Implements)||(LA139_0>=Promisify && LA139_0<=Abstract)||LA139_0==External||(LA139_0>=Private && LA139_0<=Project)||LA139_0==Public||LA139_0==Static||LA139_0==Target||(LA139_0>=Async && LA139_0<=Await)||LA139_0==Union||LA139_0==This||LA139_0==From||LA139_0==This_1||(LA139_0>=Type && LA139_0<=Void)||LA139_0==FullStopFullStopFullStop||(LA139_0>=Get && LA139_0<=Let)||(LA139_0>=Out && LA139_0<=Set)||LA139_0==As||LA139_0==Of||(LA139_0>=QuestionMark && LA139_0<=CommercialAt)||LA139_0==Tilde||LA139_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index139_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_98s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "2517:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_99s = "\120\uffff";
    static final String dfa_100s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_101s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_102s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_103s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_104s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\12\1\35\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\40\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final char[] dfa_101 = DFA.unpackEncodedStringToUnsignedChars(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final short[][] dfa_104 = unpackEncodedStringArray(dfa_104s);

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_100;
            this.max = dfa_101;
            this.accept = dfa_102;
            this.special = dfa_103;
            this.transition = dfa_104;
        }
        public String getDescription() {
            return "2629:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_0 = input.LA(1);

                         
                        int index143_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA143_0>=10 && LA143_0<=110 && (s=T2S.M_5[LA143_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA143_0==Var) && (synpred57_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA143_0>=4 && LA143_0<=126 && (s=T2S.M_6[LA143_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA143_0==Delete||LA143_0==Typeof||LA143_0==Class||(LA143_0>=False && LA143_0<=Super)||(LA143_0>=Null && LA143_0<=True)||LA143_0==Void||LA143_0==New||LA143_0==PlusSignPlusSign||LA143_0==HyphenMinusHyphenMinus||LA143_0==SolidusEqualsSign||LA143_0==ExclamationMark||LA143_0==LeftParenthesis||LA143_0==PlusSign||LA143_0==HyphenMinus||LA143_0==Solidus||LA143_0==LessThanSign||(LA143_0>=CommercialAt && LA143_0<=LeftSquareBracket)||LA143_0==Tilde||LA143_0==RULE_DOUBLE||(LA143_0>=RULE_HEX_INT && LA143_0<=RULE_LEGACY_OCTAL_INT)||LA143_0==RULE_SCIENTIFIC_INT||LA143_0==RULE_STRING||(LA143_0>=RULE_TEMPLATE_HEAD && LA143_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA143_0==RULE_INT) ) {s = 33;}

                        else if ( (LA143_0==If) ) {s = 65;}

                        else if ( (LA143_0==While||LA143_0==For||LA143_0==Do) ) {s = 66;}

                        else if ( (LA143_0==Continue) ) {s = 69;}

                        else if ( (LA143_0==Break) ) {s = 70;}

                        else if ( (LA143_0==Return) ) {s = 71;}

                        else if ( (LA143_0==With) ) {s = 72;}

                        else if ( (LA143_0==Switch) ) {s = 73;}

                        else if ( (LA143_0==Throw) ) {s = 74;}

                        else if ( (LA143_0==Try) ) {s = 75;}

                        else if ( (LA143_0==Debugger) ) {s = 76;}

                         
                        input.seek(index143_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA143_4 = input.LA(1);

                         
                        int index143_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA143_5 = input.LA(1);

                         
                        int index143_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA143_6 = input.LA(1);

                         
                        int index143_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA143_7 = input.LA(1);

                         
                        int index143_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA143_8 = input.LA(1);

                         
                        int index143_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA143_9 = input.LA(1);

                         
                        int index143_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index143_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA143_10 = input.LA(1);

                         
                        int index143_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA143_11 = input.LA(1);

                         
                        int index143_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA143_13 = input.LA(1);

                         
                        int index143_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA143_15 = input.LA(1);

                         
                        int index143_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA143_16 = input.LA(1);

                         
                        int index143_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA143_17 = input.LA(1);

                         
                        int index143_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA143_23 = input.LA(1);

                         
                        int index143_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA143_24 = input.LA(1);

                         
                        int index143_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA143_25 = input.LA(1);

                         
                        int index143_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA143_26 = input.LA(1);

                         
                        int index143_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA143_27 = input.LA(1);

                         
                        int index143_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA143_28 = input.LA(1);

                         
                        int index143_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA143_29 = input.LA(1);

                         
                        int index143_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA143_30 = input.LA(1);

                         
                        int index143_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA143_31 = input.LA(1);

                         
                        int index143_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA143_32 = input.LA(1);

                         
                        int index143_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index143_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_105s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_106s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_107s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_108s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_109s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\12\1\34\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\37\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[][] dfa_109 = unpackEncodedStringArray(dfa_109s);

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "2687:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_0 = input.LA(1);

                         
                        int index144_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA144_0>=10 && LA144_0<=110 && (s=T2S.M_5[LA144_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA144_0==Var) && (synpred61_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA144_0>=4 && LA144_0<=126 && (s=T2S.M_8[LA144_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA144_0==Delete||LA144_0==Typeof||LA144_0==Class||(LA144_0>=False && LA144_0<=Super)||LA144_0==Yield||(LA144_0>=Null && LA144_0<=True)||LA144_0==Void||LA144_0==New||LA144_0==PlusSignPlusSign||LA144_0==HyphenMinusHyphenMinus||LA144_0==SolidusEqualsSign||LA144_0==ExclamationMark||LA144_0==LeftParenthesis||LA144_0==PlusSign||LA144_0==HyphenMinus||LA144_0==Solidus||LA144_0==LessThanSign||(LA144_0>=CommercialAt && LA144_0<=LeftSquareBracket)||LA144_0==Tilde||LA144_0==RULE_DOUBLE||(LA144_0>=RULE_HEX_INT && LA144_0<=RULE_LEGACY_OCTAL_INT)||LA144_0==RULE_SCIENTIFIC_INT||LA144_0==RULE_STRING||(LA144_0>=RULE_TEMPLATE_HEAD && LA144_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA144_0==RULE_INT) ) {s = 32;}

                        else if ( (LA144_0==If) ) {s = 65;}

                        else if ( (LA144_0==While||LA144_0==For||LA144_0==Do) ) {s = 66;}

                        else if ( (LA144_0==Continue) ) {s = 69;}

                        else if ( (LA144_0==Break) ) {s = 70;}

                        else if ( (LA144_0==Return) ) {s = 71;}

                        else if ( (LA144_0==With) ) {s = 72;}

                        else if ( (LA144_0==Switch) ) {s = 73;}

                        else if ( (LA144_0==Throw) ) {s = 74;}

                        else if ( (LA144_0==Try) ) {s = 75;}

                        else if ( (LA144_0==Debugger) ) {s = 76;}

                         
                        input.seek(index144_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA144_2 = input.LA(1);

                         
                        int index144_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA144_4 = input.LA(1);

                         
                        int index144_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA144_5 = input.LA(1);

                         
                        int index144_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA144_6 = input.LA(1);

                         
                        int index144_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA144_7 = input.LA(1);

                         
                        int index144_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA144_8 = input.LA(1);

                         
                        int index144_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA144_9 = input.LA(1);

                         
                        int index144_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index144_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA144_10 = input.LA(1);

                         
                        int index144_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA144_11 = input.LA(1);

                         
                        int index144_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA144_13 = input.LA(1);

                         
                        int index144_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA144_15 = input.LA(1);

                         
                        int index144_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA144_16 = input.LA(1);

                         
                        int index144_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA144_17 = input.LA(1);

                         
                        int index144_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA144_18 = input.LA(1);

                         
                        int index144_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA144_19 = input.LA(1);

                         
                        int index144_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA144_20 = input.LA(1);

                         
                        int index144_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA144_21 = input.LA(1);

                         
                        int index144_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA144_22 = input.LA(1);

                         
                        int index144_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA144_23 = input.LA(1);

                         
                        int index144_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA144_24 = input.LA(1);

                         
                        int index144_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA144_25 = input.LA(1);

                         
                        int index144_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA144_26 = input.LA(1);

                         
                        int index144_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA144_27 = input.LA(1);

                         
                        int index144_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA144_28 = input.LA(1);

                         
                        int index144_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA144_29 = input.LA(1);

                         
                        int index144_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA144_30 = input.LA(1);

                         
                        int index144_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA144_31 = input.LA(1);

                         
                        int index144_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index144_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_110s = "\116\uffff";
    static final String dfa_111s = "\1\4\1\0\114\uffff";
    static final String dfa_112s = "\1\u0095\1\0\114\uffff";
    static final String dfa_113s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_114s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_115s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "2751:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "2771:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_53;
        }
        public String getDescription() {
            return "()* loopback of 2861:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_116s = "\35\uffff";
    static final String dfa_117s = "\1\4\34\uffff";
    static final String dfa_118s = "\1\176\34\uffff";
    static final String dfa_119s = "\1\uffff\33\2\1\1";
    static final String dfa_120s = "\1\0\34\uffff}>";
    static final String[] dfa_121s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final char[] dfa_118 = DFA.unpackEncodedStringToUnsignedChars(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final short[][] dfa_121 = unpackEncodedStringArray(dfa_121s);

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3303:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_0 = input.LA(1);

                         
                        int index161_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA161_0>=4 && LA161_0<=126 && (s=T2S.M_9[LA161_0-(4)])>=0) && (synpred81_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA161_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index161_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3332:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_0 = input.LA(1);

                         
                        int index163_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA163_0>=4 && LA163_0<=126 && (s=T2S.M_9[LA163_0-(4)])>=0) && (synpred82_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA163_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index163_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\34\uffff";
    static final String dfa_123s = "\1\4\33\uffff";
    static final String dfa_124s = "\1\176\33\uffff";
    static final String dfa_125s = "\1\uffff\32\2\1\1";
    static final String dfa_126s = "\1\0\33\uffff}>";
    static final String[] dfa_127s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[][] dfa_127 = unpackEncodedStringArray(dfa_127s);

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3361:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_0 = input.LA(1);

                         
                        int index165_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA165_0>=4 && LA165_0<=126 && (s=T2S.M_11[LA165_0-(4)])>=0) && (synpred83_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA165_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index165_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3390:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_0 = input.LA(1);

                         
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA167_0>=4 && LA167_0<=126 && (s=T2S.M_11[LA167_0-(4)])>=0) && (synpred84_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA167_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3419:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_0 = input.LA(1);

                         
                        int index169_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA169_0>=4 && LA169_0<=126 && (s=T2S.M_9[LA169_0-(4)])>=0) && (synpred85_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA169_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index169_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3449:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_0 = input.LA(1);

                         
                        int index172_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA172_0>=4 && LA172_0<=126 && (s=T2S.M_9[LA172_0-(4)])>=0) && (synpred86_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA172_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index172_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3479:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_0 = input.LA(1);

                         
                        int index175_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA175_0>=4 && LA175_0<=126 && (s=T2S.M_11[LA175_0-(4)])>=0) && (synpred87_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA175_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index175_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3509:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA178_0 = input.LA(1);

                         
                        int index178_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA178_0>=4 && LA178_0<=126 && (s=T2S.M_11[LA178_0-(4)])>=0) && (synpred88_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA178_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index178_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 178, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_128s = "\1\1\1\4\1\3\2\uffff\1\2\1\uffff\1\0\124\uffff}>";
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_128;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "3852:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_7 = input.LA(1);

                         
                        int index187_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_7==EOF) && (synpred95_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index187_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_0 = input.LA(1);

                         
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_0==Semicolon) ) {s = 1;}

                        else if ( (LA187_0==EOF) ) {s = 2;}

                        else if ( (LA187_0==RULE_EOL) && (synpred95_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA187_0==RULE_ML_COMMENT) && (synpred95_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA187_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Default)||(LA187_0>=Private && LA187_0<=Break)||(LA187_0>=Class && LA187_0<=With)||(LA187_0>=For && LA187_0<=Var)||LA187_0==PlusSignPlusSign||LA187_0==HyphenMinusHyphenMinus||LA187_0==SolidusEqualsSign||(LA187_0>=As && LA187_0<=If)||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA187_5 = input.LA(1);

                         
                        int index187_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index187_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA187_2 = input.LA(1);

                         
                        int index187_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_2==EOF) ) {s = 7;}

                        
                        else if ((LA187_2>=-1 && LA187_2<=149 && (s=T2S.M_4[LA187_2-(-1)])>=0) && (synpred95_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index187_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA187_1 = input.LA(1);

                         
                        int index187_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index187_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_129s = "\102\uffff";
    static final String dfa_130s = "\1\4\1\0\100\uffff";
    static final String dfa_131s = "\1\u0095\1\0\100\uffff";
    static final String dfa_132s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_133s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_134s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final char[] dfa_130 = DFA.unpackEncodedStringToUnsignedChars(dfa_130s);
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[][] dfa_134 = unpackEncodedStringArray(dfa_134s);

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = dfa_129;
            this.eof = dfa_129;
            this.min = dfa_130;
            this.max = dfa_131;
            this.accept = dfa_132;
            this.special = dfa_133;
            this.transition = dfa_134;
        }
        public String getDescription() {
            return "3950:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA206_1 = input.LA(1);

                         
                        int index206_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index206_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 206, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_135s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_136s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_137s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_138s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_139s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final char[] dfa_136 = DFA.unpackEncodedStringToUnsignedChars(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[] dfa_138 = DFA.unpackEncodedString(dfa_138s);
    static final short[][] dfa_139 = unpackEncodedStringArray(dfa_139s);

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_135;
            this.max = dfa_136;
            this.accept = dfa_137;
            this.special = dfa_138;
            this.transition = dfa_139;
        }
        public String getDescription() {
            return "3981:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA205_0 = input.LA(1);

                         
                        int index205_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA205_0==Var) && (synpred98_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA205_0==Const) && (synpred98_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA205_0==Let) ) {s = 3;}

                        else if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||LA205_0==Public||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||LA205_0==Get||(LA205_0>=New && LA205_0<=Set)||LA205_0==PlusSignPlusSign||LA205_0==HyphenMinusHyphenMinus||LA205_0==SolidusEqualsSign||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {s = 4;}

                        else if ( (LA205_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index205_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA205_3 = input.LA(1);

                         
                        int index205_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index205_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_140s = "\40\uffff";
    static final String dfa_141s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_142s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_143s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_144s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_145s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final char[] dfa_141 = DFA.unpackEncodedStringToUnsignedChars(dfa_141s);
    static final char[] dfa_142 = DFA.unpackEncodedStringToUnsignedChars(dfa_142s);
    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[][] dfa_145 = unpackEncodedStringArray(dfa_145s);

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_140;
            this.eof = dfa_140;
            this.min = dfa_141;
            this.max = dfa_142;
            this.accept = dfa_143;
            this.special = dfa_144;
            this.transition = dfa_145;
        }
        public String getDescription() {
            return "3988:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_30 = input.LA(1);

                         
                        int index197_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index197_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_29 = input.LA(1);

                         
                        int index197_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index197_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_146s = "\1\4\76\uffff";
    static final String dfa_147s = "\1\u0095\76\uffff";
    static final String dfa_148s = "\1\uffff\75\1\1\2";
    static final String dfa_149s = "\1\0\76\uffff}>";
    static final String[] dfa_150s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\61\3\uffff\1\32\1\12\1\65\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final char[] dfa_147 = DFA.unpackEncodedStringToUnsignedChars(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_146;
            this.max = dfa_147;
            this.accept = dfa_148;
            this.special = dfa_149;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "4132:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_0 = input.LA(1);

                         
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA190_0>=4 && LA190_0<=149 && (s=T2S.M_18[LA190_0-(4)])>=0) && (synpred100_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA190_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA224 extends DFA {

        public DFA224(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 224;
            this.eot = dfa_129;
            this.eof = dfa_129;
            this.min = dfa_130;
            this.max = dfa_131;
            this.accept = dfa_132;
            this.special = dfa_133;
            this.transition = dfa_134;
        }
        public String getDescription() {
            return "4295:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA224_1 = input.LA(1);

                         
                        int index224_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index224_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 224, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_135;
            this.max = dfa_136;
            this.accept = dfa_137;
            this.special = dfa_138;
            this.transition = dfa_139;
        }
        public String getDescription() {
            return "4326:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA223_0 = input.LA(1);

                         
                        int index223_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA223_0==Var) && (synpred102_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA223_0==Const) && (synpred102_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA223_0==Let) ) {s = 3;}

                        else if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||(LA223_0>=External && LA223_0<=Function)||(LA223_0>=Private && LA223_0<=Delete)||LA223_0==Public||LA223_0==Static||(LA223_0>=Target && LA223_0<=Await)||LA223_0==Class||(LA223_0>=False && LA223_0<=Super)||LA223_0==Union||(LA223_0>=Yield && LA223_0<=This)||(LA223_0>=From && LA223_0<=Void)||LA223_0==Get||(LA223_0>=New && LA223_0<=Set)||LA223_0==PlusSignPlusSign||LA223_0==HyphenMinusHyphenMinus||LA223_0==SolidusEqualsSign||LA223_0==As||LA223_0==Of||LA223_0==ExclamationMark||LA223_0==LeftParenthesis||LA223_0==PlusSign||LA223_0==HyphenMinus||LA223_0==Solidus||LA223_0==LessThanSign||(LA223_0>=CommercialAt && LA223_0<=LeftSquareBracket)||LA223_0==LeftCurlyBracket||LA223_0==Tilde||LA223_0==RULE_DOUBLE||(LA223_0>=RULE_HEX_INT && LA223_0<=RULE_LEGACY_OCTAL_INT)||LA223_0==RULE_SCIENTIFIC_INT||LA223_0==RULE_IDENTIFIER||LA223_0==RULE_STRING||(LA223_0>=RULE_TEMPLATE_HEAD && LA223_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA223_0==RULE_INT) ) {s = 4;}

                        else if ( (LA223_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index223_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA223_3 = input.LA(1);

                         
                        int index223_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index223_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 223, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\37\uffff";
    static final String dfa_152s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_153s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_154s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_155s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_156s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final char[] dfa_153 = DFA.unpackEncodedStringToUnsignedChars(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_153;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "4333:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_29 = input.LA(1);

                         
                        int index215_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index215_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA215_28 = input.LA(1);

                         
                        int index215_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index215_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_157s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_157 = unpackEncodedStringArray(dfa_157s);

    class DFA208 extends DFA {

        public DFA208(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 208;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_146;
            this.max = dfa_147;
            this.accept = dfa_148;
            this.special = dfa_149;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "4477:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA208_0 = input.LA(1);

                         
                        int index208_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA208_0>=4 && LA208_0<=149 && (s=T2S.M_19[LA208_0-(4)])>=0) && (synpred104_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA208_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index208_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 208, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_158s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_159s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_160s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_161s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_162s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\22\uffff\1\36\1\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "5298:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA246_0 = input.LA(1);

                         
                        int index246_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA246_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA246_0==LeftSquareBracket) && (synpred111_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA246_0>=4 && LA246_0<=126 && (s=T2S.M_20[LA246_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA246_0==This_1||LA246_0==Void||LA246_0==QuestionMark||LA246_0==Tilde) ) {s = 30;}

                         
                        input.seek(index246_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA246_1 = input.LA(1);

                         
                        int index246_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA246_3 = input.LA(1);

                         
                        int index246_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA246_4 = input.LA(1);

                         
                        int index246_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA246_5 = input.LA(1);

                         
                        int index246_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA246_6 = input.LA(1);

                         
                        int index246_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA246_7 = input.LA(1);

                         
                        int index246_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA246_8 = input.LA(1);

                         
                        int index246_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA246_9 = input.LA(1);

                         
                        int index246_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA246_10 = input.LA(1);

                         
                        int index246_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA246_11 = input.LA(1);

                         
                        int index246_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA246_12 = input.LA(1);

                         
                        int index246_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA246_13 = input.LA(1);

                         
                        int index246_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA246_14 = input.LA(1);

                         
                        int index246_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA246_15 = input.LA(1);

                         
                        int index246_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA246_16 = input.LA(1);

                         
                        int index246_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA246_17 = input.LA(1);

                         
                        int index246_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA246_18 = input.LA(1);

                         
                        int index246_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA246_19 = input.LA(1);

                         
                        int index246_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA246_20 = input.LA(1);

                         
                        int index246_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA246_21 = input.LA(1);

                         
                        int index246_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA246_22 = input.LA(1);

                         
                        int index246_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA246_23 = input.LA(1);

                         
                        int index246_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA246_24 = input.LA(1);

                         
                        int index246_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA246_25 = input.LA(1);

                         
                        int index246_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA246_26 = input.LA(1);

                         
                        int index246_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA246_27 = input.LA(1);

                         
                        int index246_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA246_28 = input.LA(1);

                         
                        int index246_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA246_29 = input.LA(1);

                         
                        int index246_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index246_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 246, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_163s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_163 = unpackEncodedStringArray(dfa_163s);

    class DFA245 extends DFA {

        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_163;
        }
        public String getDescription() {
            return "5319:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_164s = "\42\uffff";
    static final String dfa_165s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_166s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_167s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_168s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_169s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\22\uffff\1\35\1\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA248 extends DFA {

        public DFA248(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 248;
            this.eot = dfa_164;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "5336:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA248_0 = input.LA(1);

                         
                        int index248_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA248_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA248_0==LeftSquareBracket) && (synpred114_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA248_0>=4 && LA248_0<=126 && (s=T2S.M_21[LA248_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA248_0==This_1||LA248_0==Void||LA248_0==QuestionMark||LA248_0==Tilde) ) {s = 29;}

                         
                        input.seek(index248_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA248_1 = input.LA(1);

                         
                        int index248_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA248_3 = input.LA(1);

                         
                        int index248_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA248_4 = input.LA(1);

                         
                        int index248_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA248_5 = input.LA(1);

                         
                        int index248_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA248_6 = input.LA(1);

                         
                        int index248_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA248_7 = input.LA(1);

                         
                        int index248_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA248_8 = input.LA(1);

                         
                        int index248_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA248_9 = input.LA(1);

                         
                        int index248_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA248_10 = input.LA(1);

                         
                        int index248_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA248_11 = input.LA(1);

                         
                        int index248_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA248_12 = input.LA(1);

                         
                        int index248_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA248_13 = input.LA(1);

                         
                        int index248_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA248_14 = input.LA(1);

                         
                        int index248_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA248_15 = input.LA(1);

                         
                        int index248_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA248_16 = input.LA(1);

                         
                        int index248_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA248_17 = input.LA(1);

                         
                        int index248_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA248_18 = input.LA(1);

                         
                        int index248_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA248_19 = input.LA(1);

                         
                        int index248_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA248_20 = input.LA(1);

                         
                        int index248_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA248_21 = input.LA(1);

                         
                        int index248_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA248_22 = input.LA(1);

                         
                        int index248_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA248_23 = input.LA(1);

                         
                        int index248_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA248_24 = input.LA(1);

                         
                        int index248_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA248_25 = input.LA(1);

                         
                        int index248_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA248_26 = input.LA(1);

                         
                        int index248_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA248_27 = input.LA(1);

                         
                        int index248_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA248_28 = input.LA(1);

                         
                        int index248_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index248_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 248, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA247 extends DFA {

        public DFA247(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "5357:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5571:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA257 extends DFA {

        public DFA257(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 257;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5612:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\115\uffff";
    static final String dfa_178s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_179s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_180s = "\1\uffff\1\1\105\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_181s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_182s = {
            "\1\16\1\13\1\76\1\43\1\5\1\77\1\101\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\100\1\66\1\30\1\33\1\41\1\102\1\45\1\71\1\47\1\6\1\52\1\75\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\12\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\103\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\5\uffff\1\111\1\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5773:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA269_0 = input.LA(1);

                         
                        int index269_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA269_0>=4 && LA269_0<=129 && (s=T2S.M_22[LA269_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA269_0==RULE_DOUBLE||LA269_0==RULE_HEX_INT||LA269_0==RULE_OCTAL_INT||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_INT) ) {s = 69;}

                        else if ( (LA269_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA269_0==LessThanSign) && (synpred122_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA269_0==Asterisk) && (synpred122_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA269_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index269_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA269_2 = input.LA(1);

                         
                        int index269_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA269_3 = input.LA(1);

                         
                        int index269_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA269_4 = input.LA(1);

                         
                        int index269_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA269_5 = input.LA(1);

                         
                        int index269_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA269_6 = input.LA(1);

                         
                        int index269_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA269_7 = input.LA(1);

                         
                        int index269_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA269_8 = input.LA(1);

                         
                        int index269_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA269_9 = input.LA(1);

                         
                        int index269_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA269_10 = input.LA(1);

                         
                        int index269_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA269_11 = input.LA(1);

                         
                        int index269_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA269_12 = input.LA(1);

                         
                        int index269_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA269_13 = input.LA(1);

                         
                        int index269_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA269_14 = input.LA(1);

                         
                        int index269_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA269_15 = input.LA(1);

                         
                        int index269_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA269_16 = input.LA(1);

                         
                        int index269_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA269_17 = input.LA(1);

                         
                        int index269_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA269_18 = input.LA(1);

                         
                        int index269_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA269_19 = input.LA(1);

                         
                        int index269_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA269_20 = input.LA(1);

                         
                        int index269_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA269_21 = input.LA(1);

                         
                        int index269_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA269_22 = input.LA(1);

                         
                        int index269_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA269_23 = input.LA(1);

                         
                        int index269_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA269_24 = input.LA(1);

                         
                        int index269_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA269_25 = input.LA(1);

                         
                        int index269_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA269_26 = input.LA(1);

                         
                        int index269_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA269_27 = input.LA(1);

                         
                        int index269_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA269_28 = input.LA(1);

                         
                        int index269_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA269_29 = input.LA(1);

                         
                        int index269_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA269_30 = input.LA(1);

                         
                        int index269_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA269_31 = input.LA(1);

                         
                        int index269_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA269_32 = input.LA(1);

                         
                        int index269_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA269_33 = input.LA(1);

                         
                        int index269_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA269_34 = input.LA(1);

                         
                        int index269_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA269_35 = input.LA(1);

                         
                        int index269_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA269_36 = input.LA(1);

                         
                        int index269_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA269_37 = input.LA(1);

                         
                        int index269_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA269_38 = input.LA(1);

                         
                        int index269_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA269_39 = input.LA(1);

                         
                        int index269_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA269_40 = input.LA(1);

                         
                        int index269_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA269_41 = input.LA(1);

                         
                        int index269_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA269_42 = input.LA(1);

                         
                        int index269_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA269_43 = input.LA(1);

                         
                        int index269_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA269_44 = input.LA(1);

                         
                        int index269_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA269_45 = input.LA(1);

                         
                        int index269_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA269_46 = input.LA(1);

                         
                        int index269_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA269_47 = input.LA(1);

                         
                        int index269_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA269_48 = input.LA(1);

                         
                        int index269_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA269_49 = input.LA(1);

                         
                        int index269_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA269_50 = input.LA(1);

                         
                        int index269_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA269_51 = input.LA(1);

                         
                        int index269_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA269_52 = input.LA(1);

                         
                        int index269_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred121_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA269_53 = input.LA(1);

                         
                        int index269_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA269_54 = input.LA(1);

                         
                        int index269_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA269_55 = input.LA(1);

                         
                        int index269_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA269_56 = input.LA(1);

                         
                        int index269_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA269_57 = input.LA(1);

                         
                        int index269_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA269_58 = input.LA(1);

                         
                        int index269_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA269_59 = input.LA(1);

                         
                        int index269_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA269_60 = input.LA(1);

                         
                        int index269_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA269_61 = input.LA(1);

                         
                        int index269_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA269_62 = input.LA(1);

                         
                        int index269_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA269_63 = input.LA(1);

                         
                        int index269_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA269_64 = input.LA(1);

                         
                        int index269_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA269_65 = input.LA(1);

                         
                        int index269_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA269_66 = input.LA(1);

                         
                        int index269_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA269_67 = input.LA(1);

                         
                        int index269_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA269_68 = input.LA(1);

                         
                        int index269_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA269_69 = input.LA(1);

                         
                        int index269_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA269_70 = input.LA(1);

                         
                        int index269_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 269, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5959:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA270_0 = input.LA(1);

                         
                        int index270_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA270_0>=4 && LA270_0<=129 && (s=T2S.M_22[LA270_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA270_0==RULE_DOUBLE||LA270_0==RULE_HEX_INT||LA270_0==RULE_OCTAL_INT||LA270_0==RULE_SCIENTIFIC_INT||LA270_0==RULE_INT) ) {s = 69;}

                        else if ( (LA270_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA270_0==LessThanSign) && (synpred126_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA270_0==Asterisk) && (synpred126_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA270_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index270_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA270_2 = input.LA(1);

                         
                        int index270_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA270_3 = input.LA(1);

                         
                        int index270_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA270_4 = input.LA(1);

                         
                        int index270_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA270_5 = input.LA(1);

                         
                        int index270_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA270_6 = input.LA(1);

                         
                        int index270_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA270_7 = input.LA(1);

                         
                        int index270_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA270_8 = input.LA(1);

                         
                        int index270_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA270_9 = input.LA(1);

                         
                        int index270_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA270_10 = input.LA(1);

                         
                        int index270_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA270_11 = input.LA(1);

                         
                        int index270_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA270_12 = input.LA(1);

                         
                        int index270_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA270_13 = input.LA(1);

                         
                        int index270_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA270_14 = input.LA(1);

                         
                        int index270_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA270_15 = input.LA(1);

                         
                        int index270_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA270_16 = input.LA(1);

                         
                        int index270_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA270_17 = input.LA(1);

                         
                        int index270_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA270_18 = input.LA(1);

                         
                        int index270_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA270_19 = input.LA(1);

                         
                        int index270_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA270_20 = input.LA(1);

                         
                        int index270_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA270_21 = input.LA(1);

                         
                        int index270_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA270_22 = input.LA(1);

                         
                        int index270_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA270_23 = input.LA(1);

                         
                        int index270_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA270_24 = input.LA(1);

                         
                        int index270_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA270_25 = input.LA(1);

                         
                        int index270_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA270_26 = input.LA(1);

                         
                        int index270_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA270_27 = input.LA(1);

                         
                        int index270_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA270_28 = input.LA(1);

                         
                        int index270_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA270_29 = input.LA(1);

                         
                        int index270_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA270_30 = input.LA(1);

                         
                        int index270_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA270_31 = input.LA(1);

                         
                        int index270_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA270_32 = input.LA(1);

                         
                        int index270_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA270_33 = input.LA(1);

                         
                        int index270_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA270_34 = input.LA(1);

                         
                        int index270_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA270_35 = input.LA(1);

                         
                        int index270_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA270_36 = input.LA(1);

                         
                        int index270_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA270_37 = input.LA(1);

                         
                        int index270_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA270_38 = input.LA(1);

                         
                        int index270_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA270_39 = input.LA(1);

                         
                        int index270_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA270_40 = input.LA(1);

                         
                        int index270_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA270_41 = input.LA(1);

                         
                        int index270_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA270_42 = input.LA(1);

                         
                        int index270_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA270_43 = input.LA(1);

                         
                        int index270_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA270_44 = input.LA(1);

                         
                        int index270_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA270_45 = input.LA(1);

                         
                        int index270_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA270_46 = input.LA(1);

                         
                        int index270_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA270_47 = input.LA(1);

                         
                        int index270_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA270_48 = input.LA(1);

                         
                        int index270_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA270_49 = input.LA(1);

                         
                        int index270_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA270_50 = input.LA(1);

                         
                        int index270_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA270_51 = input.LA(1);

                         
                        int index270_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA270_52 = input.LA(1);

                         
                        int index270_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred125_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA270_53 = input.LA(1);

                         
                        int index270_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA270_54 = input.LA(1);

                         
                        int index270_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA270_55 = input.LA(1);

                         
                        int index270_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA270_56 = input.LA(1);

                         
                        int index270_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA270_57 = input.LA(1);

                         
                        int index270_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA270_58 = input.LA(1);

                         
                        int index270_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA270_59 = input.LA(1);

                         
                        int index270_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA270_60 = input.LA(1);

                         
                        int index270_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA270_61 = input.LA(1);

                         
                        int index270_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA270_62 = input.LA(1);

                         
                        int index270_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA270_63 = input.LA(1);

                         
                        int index270_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA270_64 = input.LA(1);

                         
                        int index270_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA270_65 = input.LA(1);

                         
                        int index270_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA270_66 = input.LA(1);

                         
                        int index270_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA270_67 = input.LA(1);

                         
                        int index270_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA270_68 = input.LA(1);

                         
                        int index270_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA270_69 = input.LA(1);

                         
                        int index270_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index270_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA270_70 = input.LA(1);

                         
                        int index270_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index270_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 270, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\114\uffff";
    static final String dfa_184s = "\1\4\105\0\6\uffff";
    static final String dfa_185s = "\1\u0095\105\0\6\uffff";
    static final String dfa_186s = "\106\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_187s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\12\1\75\1\42\1\4\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\5\1\51\1\74\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\11\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA278 extends DFA {

        public DFA278(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 278;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6152:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA278_0 = input.LA(1);

                         
                        int index278_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA278_0>=4 && LA278_0<=129 && (s=T2S.M_24[LA278_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA278_0==RULE_DOUBLE||LA278_0==RULE_HEX_INT||LA278_0==RULE_OCTAL_INT||LA278_0==RULE_SCIENTIFIC_INT||LA278_0==RULE_INT) ) {s = 68;}

                        else if ( (LA278_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA278_0==LessThanSign) && (synpred133_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA278_0==Asterisk) && (synpred133_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA278_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index278_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA278_1 = input.LA(1);

                         
                        int index278_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA278_2 = input.LA(1);

                         
                        int index278_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA278_3 = input.LA(1);

                         
                        int index278_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA278_4 = input.LA(1);

                         
                        int index278_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA278_5 = input.LA(1);

                         
                        int index278_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA278_6 = input.LA(1);

                         
                        int index278_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA278_7 = input.LA(1);

                         
                        int index278_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA278_8 = input.LA(1);

                         
                        int index278_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA278_9 = input.LA(1);

                         
                        int index278_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA278_10 = input.LA(1);

                         
                        int index278_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA278_11 = input.LA(1);

                         
                        int index278_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA278_12 = input.LA(1);

                         
                        int index278_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA278_13 = input.LA(1);

                         
                        int index278_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA278_14 = input.LA(1);

                         
                        int index278_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA278_15 = input.LA(1);

                         
                        int index278_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA278_16 = input.LA(1);

                         
                        int index278_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA278_17 = input.LA(1);

                         
                        int index278_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA278_18 = input.LA(1);

                         
                        int index278_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA278_19 = input.LA(1);

                         
                        int index278_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA278_20 = input.LA(1);

                         
                        int index278_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA278_21 = input.LA(1);

                         
                        int index278_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA278_22 = input.LA(1);

                         
                        int index278_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA278_23 = input.LA(1);

                         
                        int index278_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA278_24 = input.LA(1);

                         
                        int index278_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA278_25 = input.LA(1);

                         
                        int index278_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA278_26 = input.LA(1);

                         
                        int index278_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA278_27 = input.LA(1);

                         
                        int index278_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA278_28 = input.LA(1);

                         
                        int index278_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA278_29 = input.LA(1);

                         
                        int index278_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA278_30 = input.LA(1);

                         
                        int index278_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA278_31 = input.LA(1);

                         
                        int index278_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA278_32 = input.LA(1);

                         
                        int index278_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA278_33 = input.LA(1);

                         
                        int index278_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA278_34 = input.LA(1);

                         
                        int index278_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA278_35 = input.LA(1);

                         
                        int index278_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA278_36 = input.LA(1);

                         
                        int index278_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA278_37 = input.LA(1);

                         
                        int index278_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA278_38 = input.LA(1);

                         
                        int index278_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA278_39 = input.LA(1);

                         
                        int index278_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA278_40 = input.LA(1);

                         
                        int index278_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA278_41 = input.LA(1);

                         
                        int index278_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA278_42 = input.LA(1);

                         
                        int index278_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA278_43 = input.LA(1);

                         
                        int index278_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA278_44 = input.LA(1);

                         
                        int index278_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA278_45 = input.LA(1);

                         
                        int index278_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA278_46 = input.LA(1);

                         
                        int index278_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA278_47 = input.LA(1);

                         
                        int index278_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA278_48 = input.LA(1);

                         
                        int index278_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA278_49 = input.LA(1);

                         
                        int index278_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA278_50 = input.LA(1);

                         
                        int index278_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA278_51 = input.LA(1);

                         
                        int index278_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred130_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA278_52 = input.LA(1);

                         
                        int index278_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA278_53 = input.LA(1);

                         
                        int index278_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA278_54 = input.LA(1);

                         
                        int index278_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA278_55 = input.LA(1);

                         
                        int index278_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA278_56 = input.LA(1);

                         
                        int index278_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA278_57 = input.LA(1);

                         
                        int index278_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA278_58 = input.LA(1);

                         
                        int index278_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA278_59 = input.LA(1);

                         
                        int index278_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA278_60 = input.LA(1);

                         
                        int index278_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA278_61 = input.LA(1);

                         
                        int index278_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA278_62 = input.LA(1);

                         
                        int index278_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA278_63 = input.LA(1);

                         
                        int index278_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA278_64 = input.LA(1);

                         
                        int index278_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA278_65 = input.LA(1);

                         
                        int index278_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA278_66 = input.LA(1);

                         
                        int index278_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA278_67 = input.LA(1);

                         
                        int index278_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA278_68 = input.LA(1);

                         
                        int index278_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index278_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA278_69 = input.LA(1);

                         
                        int index278_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index278_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 278, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\16\uffff";
    static final String dfa_190s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_191s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_192s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_193s = "\16\uffff}>";
    static final String[] dfa_194s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA271 extends DFA {

        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6161:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_195s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_196s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6417:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_199s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA276 extends DFA {

        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6442:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6468:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA286_0 = input.LA(1);

                         
                        int index286_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA286_0>=4 && LA286_0<=129 && (s=T2S.M_24[LA286_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA286_0==RULE_DOUBLE||LA286_0==RULE_HEX_INT||LA286_0==RULE_OCTAL_INT||LA286_0==RULE_SCIENTIFIC_INT||LA286_0==RULE_INT) ) {s = 68;}

                        else if ( (LA286_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA286_0==LessThanSign) && (synpred142_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA286_0==Asterisk) && (synpred142_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA286_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index286_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA286_1 = input.LA(1);

                         
                        int index286_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA286_2 = input.LA(1);

                         
                        int index286_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA286_3 = input.LA(1);

                         
                        int index286_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA286_4 = input.LA(1);

                         
                        int index286_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA286_5 = input.LA(1);

                         
                        int index286_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA286_6 = input.LA(1);

                         
                        int index286_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA286_7 = input.LA(1);

                         
                        int index286_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA286_8 = input.LA(1);

                         
                        int index286_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA286_9 = input.LA(1);

                         
                        int index286_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA286_10 = input.LA(1);

                         
                        int index286_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA286_11 = input.LA(1);

                         
                        int index286_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA286_12 = input.LA(1);

                         
                        int index286_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA286_13 = input.LA(1);

                         
                        int index286_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA286_14 = input.LA(1);

                         
                        int index286_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA286_15 = input.LA(1);

                         
                        int index286_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA286_16 = input.LA(1);

                         
                        int index286_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA286_17 = input.LA(1);

                         
                        int index286_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA286_18 = input.LA(1);

                         
                        int index286_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA286_19 = input.LA(1);

                         
                        int index286_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA286_20 = input.LA(1);

                         
                        int index286_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA286_21 = input.LA(1);

                         
                        int index286_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA286_22 = input.LA(1);

                         
                        int index286_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA286_23 = input.LA(1);

                         
                        int index286_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA286_24 = input.LA(1);

                         
                        int index286_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA286_25 = input.LA(1);

                         
                        int index286_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA286_26 = input.LA(1);

                         
                        int index286_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA286_27 = input.LA(1);

                         
                        int index286_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA286_28 = input.LA(1);

                         
                        int index286_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA286_29 = input.LA(1);

                         
                        int index286_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA286_30 = input.LA(1);

                         
                        int index286_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA286_31 = input.LA(1);

                         
                        int index286_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA286_32 = input.LA(1);

                         
                        int index286_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA286_33 = input.LA(1);

                         
                        int index286_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA286_34 = input.LA(1);

                         
                        int index286_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA286_35 = input.LA(1);

                         
                        int index286_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA286_36 = input.LA(1);

                         
                        int index286_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA286_37 = input.LA(1);

                         
                        int index286_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA286_38 = input.LA(1);

                         
                        int index286_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA286_39 = input.LA(1);

                         
                        int index286_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA286_40 = input.LA(1);

                         
                        int index286_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA286_41 = input.LA(1);

                         
                        int index286_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA286_42 = input.LA(1);

                         
                        int index286_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA286_43 = input.LA(1);

                         
                        int index286_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA286_44 = input.LA(1);

                         
                        int index286_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA286_45 = input.LA(1);

                         
                        int index286_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA286_46 = input.LA(1);

                         
                        int index286_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA286_47 = input.LA(1);

                         
                        int index286_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA286_48 = input.LA(1);

                         
                        int index286_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA286_49 = input.LA(1);

                         
                        int index286_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA286_50 = input.LA(1);

                         
                        int index286_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA286_51 = input.LA(1);

                         
                        int index286_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred139_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA286_52 = input.LA(1);

                         
                        int index286_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA286_53 = input.LA(1);

                         
                        int index286_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA286_54 = input.LA(1);

                         
                        int index286_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA286_55 = input.LA(1);

                         
                        int index286_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA286_56 = input.LA(1);

                         
                        int index286_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA286_57 = input.LA(1);

                         
                        int index286_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA286_58 = input.LA(1);

                         
                        int index286_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA286_59 = input.LA(1);

                         
                        int index286_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA286_60 = input.LA(1);

                         
                        int index286_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA286_61 = input.LA(1);

                         
                        int index286_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA286_62 = input.LA(1);

                         
                        int index286_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA286_63 = input.LA(1);

                         
                        int index286_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA286_64 = input.LA(1);

                         
                        int index286_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA286_65 = input.LA(1);

                         
                        int index286_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA286_66 = input.LA(1);

                         
                        int index286_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA286_67 = input.LA(1);

                         
                        int index286_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA286_68 = input.LA(1);

                         
                        int index286_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index286_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA286_69 = input.LA(1);

                         
                        int index286_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index286_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 286, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA279 extends DFA {

        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6477:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA281 extends DFA {

        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6733:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA284 extends DFA {

        public DFA284(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 284;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "6758:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA288 extends DFA {

        public DFA288(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 288;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6811:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA292 extends DFA {

        public DFA292(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 292;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6869:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA295 extends DFA {

        public DFA295(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 295;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6920:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6954:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA297 extends DFA {

        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6985:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA299 extends DFA {

        public DFA299(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 299;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "7010:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_201s = "\70\uffff";
    static final String dfa_202s = "\2\4\66\uffff";
    static final String dfa_203s = "\2\u0095\66\uffff";
    static final String dfa_204s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_205s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_206s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[][] dfa_206 = unpackEncodedStringArray(dfa_206s);

    class DFA317 extends DFA {

        public DFA317(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 317;
            this.eot = dfa_201;
            this.eof = dfa_201;
            this.min = dfa_202;
            this.max = dfa_203;
            this.accept = dfa_204;
            this.special = dfa_205;
            this.transition = dfa_206;
        }
        public String getDescription() {
            return "7778:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA317_1 = input.LA(1);

                         
                        int index317_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_1==FullStop) && (synpred165_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA317_1>=4 && LA317_1<=149 && (s=T2S.M_26[LA317_1-(4)])>=0) && (synpred166_InternalN4JSXParser())) { /* 53 cases */ }
                        input.seek(index317_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 317, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_207s = "\2\4\65\uffff";
    static final String dfa_208s = "\2\u0095\65\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_210s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);

    class DFA323 extends DFA {

        public DFA323(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 323;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "7836:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA323_1 = input.LA(1);

                         
                        int index323_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA323_1==FullStop) && (synpred169_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA323_1>=4 && LA323_1<=149 && (s=T2S.M_27[LA323_1-(4)])>=0) && (synpred170_InternalN4JSXParser())) { /* 52 cases */ }
                        input.seek(index323_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 323, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\103\uffff";
    static final String dfa_213s = "\1\1\102\uffff";
    static final String dfa_214s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_215s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_216s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_217s = "\1\0\3\uffff\1\1\76\uffff}>";
    static final String[] dfa_218s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final char[] dfa_214 = DFA.unpackEncodedStringToUnsignedChars(dfa_214s);
    static final char[] dfa_215 = DFA.unpackEncodedStringToUnsignedChars(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[][] dfa_218 = unpackEncodedStringArray(dfa_218s);

    class DFA336 extends DFA {

        public DFA336(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 336;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_214;
            this.max = dfa_215;
            this.accept = dfa_216;
            this.special = dfa_217;
            this.transition = dfa_218;
        }
        public String getDescription() {
            return "()* loopback of 8241:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA336_0 = input.LA(1);

                         
                        int index336_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_0==EOF||LA336_0==Instanceof||LA336_0==ExclamationMarkEqualsSignEqualsSign||(LA336_0>=LessThanSignLessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSignEqualsSign)||(LA336_0>=ExclamationMarkEqualsSign && LA336_0<=AsteriskEqualsSign)||LA336_0==PlusSignEqualsSign||(LA336_0>=HyphenMinusEqualsSign && LA336_0<=SolidusEqualsSign)||(LA336_0>=LessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSign)||LA336_0==GreaterThanSignEqualsSign||LA336_0==CircumflexAccentEqualsSign||(LA336_0>=In && LA336_0<=VerticalLineVerticalLine)||LA336_0==Ampersand||LA336_0==RightParenthesis||LA336_0==Comma||(LA336_0>=Colon && LA336_0<=EqualsSign)||LA336_0==QuestionMark||(LA336_0>=RightSquareBracket && LA336_0<=CircumflexAccent)||(LA336_0>=VerticalLine && LA336_0<=RightCurlyBracket)||LA336_0==RULE_ML_COMMENT||LA336_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA336_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA336_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index336_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA336_4 = input.LA(1);

                         
                        int index336_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA336_4>=4 && LA336_4<=149 && (s=T2S.M_28[LA336_4-(4)])>=0) && (synpred181_InternalN4JSXParser())) { /* 63 cases */ }
                        input.seek(index336_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 336, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_219s = "\1\1\101\uffff";
    static final String dfa_220s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_221s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_222s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_223s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_224s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[][] dfa_224 = unpackEncodedStringArray(dfa_224s);

    class DFA337 extends DFA {

        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = dfa_129;
            this.eof = dfa_219;
            this.min = dfa_220;
            this.max = dfa_221;
            this.accept = dfa_222;
            this.special = dfa_223;
            this.transition = dfa_224;
        }
        public String getDescription() {
            return "()* loopback of 8270:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA337_4 = input.LA(1);

                         
                        int index337_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA337_4>=4 && LA337_4<=149 && (s=T2S.M_29[LA337_4-(4)])>=0) && (synpred182_InternalN4JSXParser())) { /* 62 cases */ }
                        input.seek(index337_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA337_0 = input.LA(1);

                         
                        int index337_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_0==EOF||LA337_0==Instanceof||LA337_0==ExclamationMarkEqualsSignEqualsSign||(LA337_0>=LessThanSignLessThanSignEqualsSign && LA337_0<=EqualsSignEqualsSignEqualsSign)||(LA337_0>=ExclamationMarkEqualsSign && LA337_0<=AsteriskEqualsSign)||LA337_0==PlusSignEqualsSign||(LA337_0>=HyphenMinusEqualsSign && LA337_0<=SolidusEqualsSign)||(LA337_0>=LessThanSignEqualsSign && LA337_0<=EqualsSignEqualsSign)||LA337_0==GreaterThanSignEqualsSign||LA337_0==CircumflexAccentEqualsSign||(LA337_0>=In && LA337_0<=VerticalLineVerticalLine)||LA337_0==Ampersand||LA337_0==RightParenthesis||LA337_0==Comma||(LA337_0>=Colon && LA337_0<=EqualsSign)||LA337_0==QuestionMark||(LA337_0>=RightSquareBracket && LA337_0<=CircumflexAccent)||(LA337_0>=VerticalLine && LA337_0<=RightCurlyBracket)||LA337_0==RULE_ML_COMMENT||LA337_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA337_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA337_0==LessThanSignLessThanSign) && (synpred182_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index337_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 337, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_225s = "\104\uffff";
    static final String dfa_226s = "\1\1\103\uffff";
    static final String dfa_227s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_228s = "\1\160\1\uffff\1\u0095\101\uffff";
    static final String dfa_229s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_230s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_231s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[][] dfa_231 = unpackEncodedStringArray(dfa_231s);

    class DFA340 extends DFA {

        public DFA340(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 340;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_228;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_231;
        }
        public String getDescription() {
            return "()* loopback of 8336:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA340_2 = input.LA(1);

                         
                        int index340_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA340_2==GreaterThanSignEqualsSign||LA340_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA340_2==New) && (synpred183_InternalN4JSXParser())) {s = 7;}

                        else if ( (LA340_2==This_1) && (synpred183_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA340_2==Super) && (synpred183_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA340_2==RULE_IDENTIFIER) && (synpred183_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA340_2==Yield) && (synpred183_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA340_2==Get) && (synpred183_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA340_2==Set) && (synpred183_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA340_2==Let) && (synpred183_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA340_2==Project) && (synpred183_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA340_2==External) && (synpred183_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA340_2==Abstract) && (synpred183_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA340_2==Static) && (synpred183_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA340_2==As) && (synpred183_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA340_2==From) && (synpred183_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA340_2==Constructor) && (synpred183_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA340_2==Of) && (synpred183_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA340_2==Target) && (synpred183_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA340_2==Type) && (synpred183_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA340_2==Union) && (synpred183_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA340_2==Intersection) && (synpred183_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA340_2==This) && (synpred183_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA340_2==Promisify) && (synpred183_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA340_2==Await) && (synpred183_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA340_2==Async) && (synpred183_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA340_2==Implements) && (synpred183_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA340_2==Interface) && (synpred183_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA340_2==Private) && (synpred183_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA340_2==Protected) && (synpred183_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA340_2==Public) && (synpred183_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA340_2==Out) && (synpred183_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA340_2==LessThanSign) && (synpred183_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA340_2==RULE_DOUBLE) && (synpred183_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA340_2==RULE_INT) && (synpred183_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA340_2==RULE_BINARY_INT) && (synpred183_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA340_2==RULE_OCTAL_INT) && (synpred183_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA340_2==RULE_LEGACY_OCTAL_INT) && (synpred183_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA340_2==RULE_HEX_INT) && (synpred183_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA340_2==RULE_SCIENTIFIC_INT) && (synpred183_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA340_2==True) && (synpred183_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA340_2==False) && (synpred183_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA340_2==RULE_STRING) && (synpred183_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA340_2==Null) && (synpred183_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA340_2==Solidus) && (synpred183_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA340_2==SolidusEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA340_2==LeftSquareBracket) && (synpred183_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA340_2==LeftCurlyBracket) && (synpred183_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA340_2==LeftParenthesis) && (synpred183_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA340_2==CommercialAt) && (synpred183_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA340_2==Function) && (synpred183_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA340_2==Class) && (synpred183_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA340_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred183_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA340_2==RULE_TEMPLATE_HEAD) && (synpred183_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA340_2==Delete) && (synpred183_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA340_2==Void) && (synpred183_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA340_2==Typeof) && (synpred183_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA340_2==PlusSignPlusSign) && (synpred183_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA340_2==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA340_2==PlusSign) && (synpred183_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA340_2==HyphenMinus) && (synpred183_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA340_2==Tilde) && (synpred183_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA340_2==ExclamationMark) && (synpred183_InternalN4JSXParser())) {s = 67;}

                         
                        input.seek(index340_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA340_0 = input.LA(1);

                         
                        int index340_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA340_0==EOF||LA340_0==ExclamationMarkEqualsSignEqualsSign||(LA340_0>=LessThanSignLessThanSignEqualsSign && LA340_0<=EqualsSignEqualsSignEqualsSign)||(LA340_0>=ExclamationMarkEqualsSign && LA340_0<=AsteriskEqualsSign)||LA340_0==PlusSignEqualsSign||(LA340_0>=HyphenMinusEqualsSign && LA340_0<=SolidusEqualsSign)||LA340_0==EqualsSignEqualsSign||LA340_0==CircumflexAccentEqualsSign||(LA340_0>=In && LA340_0<=VerticalLineVerticalLine)||LA340_0==Ampersand||LA340_0==Comma||LA340_0==Semicolon||LA340_0==EqualsSign||LA340_0==QuestionMark||LA340_0==CircumflexAccent||(LA340_0>=VerticalLine && LA340_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA340_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA340_0==LessThanSign) && (synpred183_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA340_0==LessThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA340_0==GreaterThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA340_0==Instanceof) && (synpred183_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index340_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 340, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_232s = "\105\uffff";
    static final String dfa_233s = "\1\1\104\uffff";
    static final String dfa_234s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_235s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_236s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_237s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_238s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[][] dfa_238 = unpackEncodedStringArray(dfa_238s);

    class DFA341 extends DFA {

        public DFA341(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 341;
            this.eot = dfa_232;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_235;
            this.accept = dfa_236;
            this.special = dfa_237;
            this.transition = dfa_238;
        }
        public String getDescription() {
            return "()* loopback of 8521:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA341_0 = input.LA(1);

                         
                        int index341_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA341_0==EOF||LA341_0==ExclamationMarkEqualsSignEqualsSign||(LA341_0>=LessThanSignLessThanSignEqualsSign && LA341_0<=EqualsSignEqualsSignEqualsSign)||(LA341_0>=ExclamationMarkEqualsSign && LA341_0<=AsteriskEqualsSign)||LA341_0==PlusSignEqualsSign||(LA341_0>=HyphenMinusEqualsSign && LA341_0<=SolidusEqualsSign)||LA341_0==EqualsSignEqualsSign||LA341_0==CircumflexAccentEqualsSign||(LA341_0>=VerticalLineEqualsSign && LA341_0<=VerticalLineVerticalLine)||LA341_0==Ampersand||LA341_0==RightParenthesis||LA341_0==Comma||(LA341_0>=Colon && LA341_0<=Semicolon)||LA341_0==EqualsSign||LA341_0==QuestionMark||(LA341_0>=RightSquareBracket && LA341_0<=CircumflexAccent)||(LA341_0>=VerticalLine && LA341_0<=RightCurlyBracket)||LA341_0==RULE_ML_COMMENT||LA341_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA341_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA341_0==LessThanSign) && (synpred185_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA341_0==LessThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA341_0==GreaterThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA341_0==Instanceof) && (synpred185_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA341_0==In) && (synpred185_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index341_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA341_2 = input.LA(1);

                         
                        int index341_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA341_2>=4 && LA341_2<=149 && (s=T2S.M_30[LA341_2-(4)])>=0) && (synpred185_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA341_2==GreaterThanSignEqualsSign||LA341_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index341_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 341, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_239s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_240s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_241s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_242s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_243s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[][] dfa_243 = unpackEncodedStringArray(dfa_243s);

    class DFA342 extends DFA {

        public DFA342(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 342;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_239;
            this.max = dfa_240;
            this.accept = dfa_241;
            this.special = dfa_242;
            this.transition = dfa_243;
        }
        public String getDescription() {
            return "()* loopback of 8706:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA342_2 = input.LA(1);

                         
                        int index342_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA342_2>=4 && LA342_2<=149 && (s=T2S.M_31[LA342_2-(4)])>=0) && (synpred187_InternalN4JSXParser())) { /* 60 cases */ }
                        else if ( (LA342_2==GreaterThanSignEqualsSign||LA342_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index342_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA342_0 = input.LA(1);

                         
                        int index342_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_0==EOF||LA342_0==ExclamationMarkEqualsSignEqualsSign||(LA342_0>=LessThanSignLessThanSignEqualsSign && LA342_0<=EqualsSignEqualsSignEqualsSign)||(LA342_0>=ExclamationMarkEqualsSign && LA342_0<=AsteriskEqualsSign)||LA342_0==PlusSignEqualsSign||(LA342_0>=HyphenMinusEqualsSign && LA342_0<=SolidusEqualsSign)||LA342_0==EqualsSignEqualsSign||LA342_0==CircumflexAccentEqualsSign||(LA342_0>=In && LA342_0<=VerticalLineVerticalLine)||LA342_0==Ampersand||LA342_0==Comma||LA342_0==Semicolon||LA342_0==EqualsSign||LA342_0==QuestionMark||LA342_0==CircumflexAccent||LA342_0==VerticalLine) ) {s = 1;}

                        else if ( (LA342_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA342_0==LessThanSign) && (synpred187_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA342_0==LessThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA342_0==GreaterThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA342_0==Instanceof) && (synpred187_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index342_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 342, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_244s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String dfa_245s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_246s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[][] dfa_246 = unpackEncodedStringArray(dfa_246s);

    class DFA343 extends DFA {

        public DFA343(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 343;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_244;
            this.accept = dfa_229;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "()* loopback of 8888:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA343_0 = input.LA(1);

                         
                        int index343_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA343_0==EOF||LA343_0==ExclamationMarkEqualsSignEqualsSign||(LA343_0>=LessThanSignLessThanSignEqualsSign && LA343_0<=EqualsSignEqualsSignEqualsSign)||(LA343_0>=ExclamationMarkEqualsSign && LA343_0<=AsteriskEqualsSign)||LA343_0==PlusSignEqualsSign||(LA343_0>=HyphenMinusEqualsSign && LA343_0<=SolidusEqualsSign)||LA343_0==EqualsSignEqualsSign||LA343_0==CircumflexAccentEqualsSign||(LA343_0>=VerticalLineEqualsSign && LA343_0<=VerticalLineVerticalLine)||LA343_0==Ampersand||LA343_0==RightParenthesis||LA343_0==Comma||(LA343_0>=Colon && LA343_0<=Semicolon)||LA343_0==EqualsSign||LA343_0==QuestionMark||(LA343_0>=RightSquareBracket && LA343_0<=CircumflexAccent)||(LA343_0>=VerticalLine && LA343_0<=RightCurlyBracket)||LA343_0==RULE_ML_COMMENT||LA343_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA343_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA343_0==LessThanSign) && (synpred189_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA343_0==LessThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA343_0==GreaterThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA343_0==Instanceof) && (synpred189_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA343_0==In) && (synpred189_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index343_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA343_2 = input.LA(1);

                         
                        int index343_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA343_2==GreaterThanSignEqualsSign||LA343_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA343_2==New) && (synpred189_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA343_2==This_1) && (synpred189_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA343_2==Super) && (synpred189_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA343_2==RULE_IDENTIFIER) && (synpred189_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA343_2==Get) && (synpred189_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA343_2==Set) && (synpred189_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA343_2==Let) && (synpred189_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA343_2==Project) && (synpred189_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA343_2==External) && (synpred189_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA343_2==Abstract) && (synpred189_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA343_2==Static) && (synpred189_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA343_2==As) && (synpred189_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA343_2==From) && (synpred189_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA343_2==Constructor) && (synpred189_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA343_2==Of) && (synpred189_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA343_2==Target) && (synpred189_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA343_2==Type) && (synpred189_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA343_2==Union) && (synpred189_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA343_2==Intersection) && (synpred189_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA343_2==This) && (synpred189_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA343_2==Promisify) && (synpred189_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA343_2==Await) && (synpred189_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA343_2==Async) && (synpred189_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA343_2==Implements) && (synpred189_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA343_2==Interface) && (synpred189_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA343_2==Private) && (synpred189_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA343_2==Protected) && (synpred189_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA343_2==Public) && (synpred189_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA343_2==Out) && (synpred189_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA343_2==LessThanSign) && (synpred189_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA343_2==RULE_DOUBLE) && (synpred189_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA343_2==RULE_INT) && (synpred189_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA343_2==RULE_BINARY_INT) && (synpred189_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA343_2==RULE_OCTAL_INT) && (synpred189_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA343_2==RULE_LEGACY_OCTAL_INT) && (synpred189_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA343_2==RULE_HEX_INT) && (synpred189_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA343_2==RULE_SCIENTIFIC_INT) && (synpred189_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA343_2==True) && (synpred189_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA343_2==False) && (synpred189_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA343_2==RULE_STRING) && (synpred189_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA343_2==Null) && (synpred189_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA343_2==Solidus) && (synpred189_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA343_2==SolidusEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA343_2==LeftSquareBracket) && (synpred189_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA343_2==LeftCurlyBracket) && (synpred189_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA343_2==LeftParenthesis) && (synpred189_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA343_2==CommercialAt) && (synpred189_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA343_2==Function) && (synpred189_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA343_2==Class) && (synpred189_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA343_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred189_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA343_2==RULE_TEMPLATE_HEAD) && (synpred189_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA343_2==Delete) && (synpred189_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA343_2==Void) && (synpred189_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA343_2==Typeof) && (synpred189_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA343_2==PlusSignPlusSign) && (synpred189_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA343_2==HyphenMinusHyphenMinus) && (synpred189_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA343_2==PlusSign) && (synpred189_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA343_2==HyphenMinus) && (synpred189_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA343_2==Tilde) && (synpred189_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA343_2==ExclamationMark) && (synpred189_InternalN4JSXParser())) {s = 67;}

                         
                        input.seek(index343_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 343, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_247s = "\1\4\35\0\43\uffff";
    static final String dfa_248s = "\1\u0095\35\0\43\uffff";
    static final String dfa_249s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_250s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_251s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[][] dfa_251 = unpackEncodedStringArray(dfa_251s);

    class DFA375 extends DFA {

        public DFA375(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 375;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "9990:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA375_1 = input.LA(1);

                         
                        int index375_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA375_2 = input.LA(1);

                         
                        int index375_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA375_3 = input.LA(1);

                         
                        int index375_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA375_4 = input.LA(1);

                         
                        int index375_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA375_5 = input.LA(1);

                         
                        int index375_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA375_6 = input.LA(1);

                         
                        int index375_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA375_7 = input.LA(1);

                         
                        int index375_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA375_8 = input.LA(1);

                         
                        int index375_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA375_9 = input.LA(1);

                         
                        int index375_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA375_10 = input.LA(1);

                         
                        int index375_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA375_11 = input.LA(1);

                         
                        int index375_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA375_12 = input.LA(1);

                         
                        int index375_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA375_13 = input.LA(1);

                         
                        int index375_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA375_14 = input.LA(1);

                         
                        int index375_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA375_15 = input.LA(1);

                         
                        int index375_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA375_16 = input.LA(1);

                         
                        int index375_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA375_17 = input.LA(1);

                         
                        int index375_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA375_18 = input.LA(1);

                         
                        int index375_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA375_19 = input.LA(1);

                         
                        int index375_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA375_20 = input.LA(1);

                         
                        int index375_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA375_21 = input.LA(1);

                         
                        int index375_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA375_22 = input.LA(1);

                         
                        int index375_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA375_23 = input.LA(1);

                         
                        int index375_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA375_24 = input.LA(1);

                         
                        int index375_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA375_25 = input.LA(1);

                         
                        int index375_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA375_26 = input.LA(1);

                         
                        int index375_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA375_27 = input.LA(1);

                         
                        int index375_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA375_28 = input.LA(1);

                         
                        int index375_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA375_29 = input.LA(1);

                         
                        int index375_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 375, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_252s = "\1\14\15\uffff";
    static final String dfa_253s = "\1\67\13\0\2\uffff";
    static final String dfa_254s = "\1\160\13\0\2\uffff";
    static final String dfa_255s = "\14\uffff\1\2\1\1";
    static final String dfa_256s = "\1\uffff\1\6\1\3\1\0\1\11\1\7\1\4\1\1\1\2\1\12\1\10\1\5\2\uffff}>";
    static final String[] dfa_257s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final char[] dfa_254 = DFA.unpackEncodedStringToUnsignedChars(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final short[][] dfa_257 = unpackEncodedStringArray(dfa_257s);

    class DFA374 extends DFA {

        public DFA374(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 374;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_254;
            this.accept = dfa_255;
            this.special = dfa_256;
            this.transition = dfa_257;
        }
        public String getDescription() {
            return "10052:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA374_3 = input.LA(1);

                         
                        int index374_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA374_7 = input.LA(1);

                         
                        int index374_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA374_8 = input.LA(1);

                         
                        int index374_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA374_2 = input.LA(1);

                         
                        int index374_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA374_6 = input.LA(1);

                         
                        int index374_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA374_11 = input.LA(1);

                         
                        int index374_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA374_1 = input.LA(1);

                         
                        int index374_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA374_5 = input.LA(1);

                         
                        int index374_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA374_10 = input.LA(1);

                         
                        int index374_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA374_4 = input.LA(1);

                         
                        int index374_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA374_9 = input.LA(1);

                         
                        int index374_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 374, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA377 extends DFA {

        public DFA377(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 377;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "10076:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA377_1 = input.LA(1);

                         
                        int index377_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA377_2 = input.LA(1);

                         
                        int index377_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA377_3 = input.LA(1);

                         
                        int index377_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA377_4 = input.LA(1);

                         
                        int index377_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA377_5 = input.LA(1);

                         
                        int index377_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA377_6 = input.LA(1);

                         
                        int index377_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA377_7 = input.LA(1);

                         
                        int index377_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA377_8 = input.LA(1);

                         
                        int index377_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA377_9 = input.LA(1);

                         
                        int index377_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA377_10 = input.LA(1);

                         
                        int index377_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA377_11 = input.LA(1);

                         
                        int index377_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA377_12 = input.LA(1);

                         
                        int index377_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA377_13 = input.LA(1);

                         
                        int index377_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA377_14 = input.LA(1);

                         
                        int index377_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA377_15 = input.LA(1);

                         
                        int index377_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA377_16 = input.LA(1);

                         
                        int index377_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA377_17 = input.LA(1);

                         
                        int index377_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA377_18 = input.LA(1);

                         
                        int index377_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA377_19 = input.LA(1);

                         
                        int index377_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA377_20 = input.LA(1);

                         
                        int index377_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA377_21 = input.LA(1);

                         
                        int index377_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA377_22 = input.LA(1);

                         
                        int index377_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA377_23 = input.LA(1);

                         
                        int index377_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA377_24 = input.LA(1);

                         
                        int index377_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA377_25 = input.LA(1);

                         
                        int index377_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA377_26 = input.LA(1);

                         
                        int index377_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA377_27 = input.LA(1);

                         
                        int index377_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA377_28 = input.LA(1);

                         
                        int index377_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA377_29 = input.LA(1);

                         
                        int index377_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index377_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 377, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_258s = "\1\u0099\13\0\2\uffff";
    static final String dfa_259s = "\1\uffff\1\4\1\0\1\11\1\7\1\5\1\1\1\12\1\3\1\10\1\6\1\2\2\uffff}>";
    static final String[] dfa_260s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[][] dfa_260 = unpackEncodedStringArray(dfa_260s);

    class DFA376 extends DFA {

        public DFA376(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 376;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_258;
            this.accept = dfa_255;
            this.special = dfa_259;
            this.transition = dfa_260;
        }
        public String getDescription() {
            return "10138:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA376_2 = input.LA(1);

                         
                        int index376_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA376_6 = input.LA(1);

                         
                        int index376_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA376_11 = input.LA(1);

                         
                        int index376_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA376_8 = input.LA(1);

                         
                        int index376_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA376_1 = input.LA(1);

                         
                        int index376_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA376_5 = input.LA(1);

                         
                        int index376_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA376_10 = input.LA(1);

                         
                        int index376_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA376_4 = input.LA(1);

                         
                        int index376_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA376_9 = input.LA(1);

                         
                        int index376_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA376_3 = input.LA(1);

                         
                        int index376_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA376_7 = input.LA(1);

                         
                        int index376_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index376_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 376, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_261s = "\1\4\34\0\44\uffff";
    static final String dfa_262s = "\1\u0095\34\0\44\uffff";
    static final String dfa_263s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_264s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_265s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[] dfa_264 = DFA.unpackEncodedString(dfa_264s);
    static final short[][] dfa_265 = unpackEncodedStringArray(dfa_265s);

    class DFA379 extends DFA {

        public DFA379(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 379;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_261;
            this.max = dfa_262;
            this.accept = dfa_263;
            this.special = dfa_264;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "10162:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA379_1 = input.LA(1);

                         
                        int index379_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA379_2 = input.LA(1);

                         
                        int index379_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA379_3 = input.LA(1);

                         
                        int index379_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA379_4 = input.LA(1);

                         
                        int index379_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA379_5 = input.LA(1);

                         
                        int index379_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA379_6 = input.LA(1);

                         
                        int index379_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA379_7 = input.LA(1);

                         
                        int index379_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA379_8 = input.LA(1);

                         
                        int index379_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA379_9 = input.LA(1);

                         
                        int index379_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA379_10 = input.LA(1);

                         
                        int index379_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA379_11 = input.LA(1);

                         
                        int index379_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA379_12 = input.LA(1);

                         
                        int index379_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA379_13 = input.LA(1);

                         
                        int index379_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA379_14 = input.LA(1);

                         
                        int index379_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA379_15 = input.LA(1);

                         
                        int index379_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA379_16 = input.LA(1);

                         
                        int index379_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA379_17 = input.LA(1);

                         
                        int index379_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA379_18 = input.LA(1);

                         
                        int index379_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA379_19 = input.LA(1);

                         
                        int index379_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA379_20 = input.LA(1);

                         
                        int index379_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA379_21 = input.LA(1);

                         
                        int index379_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA379_22 = input.LA(1);

                         
                        int index379_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA379_23 = input.LA(1);

                         
                        int index379_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA379_24 = input.LA(1);

                         
                        int index379_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA379_25 = input.LA(1);

                         
                        int index379_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA379_26 = input.LA(1);

                         
                        int index379_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA379_27 = input.LA(1);

                         
                        int index379_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA379_28 = input.LA(1);

                         
                        int index379_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index379_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 379, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_266s = "\1\150\13\0\2\uffff";
    static final String dfa_267s = "\1\uffff\1\6\1\0\1\7\1\1\1\10\1\2\1\11\1\3\1\4\1\12\1\5\2\uffff}>";
    static final String[] dfa_268s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_266 = DFA.unpackEncodedStringToUnsignedChars(dfa_266s);
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[][] dfa_268 = unpackEncodedStringArray(dfa_268s);

    class DFA378 extends DFA {

        public DFA378(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 378;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_266;
            this.accept = dfa_255;
            this.special = dfa_267;
            this.transition = dfa_268;
        }
        public String getDescription() {
            return "10226:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA378_2 = input.LA(1);

                         
                        int index378_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA378_4 = input.LA(1);

                         
                        int index378_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA378_6 = input.LA(1);

                         
                        int index378_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA378_8 = input.LA(1);

                         
                        int index378_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_8);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA378_9 = input.LA(1);

                         
                        int index378_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA378_11 = input.LA(1);

                         
                        int index378_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA378_1 = input.LA(1);

                         
                        int index378_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA378_3 = input.LA(1);

                         
                        int index378_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA378_5 = input.LA(1);

                         
                        int index378_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA378_7 = input.LA(1);

                         
                        int index378_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA378_10 = input.LA(1);

                         
                        int index378_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index378_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 378, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA381 extends DFA {

        public DFA381(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 381;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_261;
            this.max = dfa_262;
            this.accept = dfa_263;
            this.special = dfa_264;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "10250:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA381_1 = input.LA(1);

                         
                        int index381_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA381_2 = input.LA(1);

                         
                        int index381_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA381_3 = input.LA(1);

                         
                        int index381_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA381_4 = input.LA(1);

                         
                        int index381_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA381_5 = input.LA(1);

                         
                        int index381_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA381_6 = input.LA(1);

                         
                        int index381_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA381_7 = input.LA(1);

                         
                        int index381_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA381_8 = input.LA(1);

                         
                        int index381_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA381_9 = input.LA(1);

                         
                        int index381_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA381_10 = input.LA(1);

                         
                        int index381_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA381_11 = input.LA(1);

                         
                        int index381_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA381_12 = input.LA(1);

                         
                        int index381_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA381_13 = input.LA(1);

                         
                        int index381_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA381_14 = input.LA(1);

                         
                        int index381_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA381_15 = input.LA(1);

                         
                        int index381_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA381_16 = input.LA(1);

                         
                        int index381_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA381_17 = input.LA(1);

                         
                        int index381_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA381_18 = input.LA(1);

                         
                        int index381_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA381_19 = input.LA(1);

                         
                        int index381_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA381_20 = input.LA(1);

                         
                        int index381_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA381_21 = input.LA(1);

                         
                        int index381_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA381_22 = input.LA(1);

                         
                        int index381_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA381_23 = input.LA(1);

                         
                        int index381_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA381_24 = input.LA(1);

                         
                        int index381_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA381_25 = input.LA(1);

                         
                        int index381_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA381_26 = input.LA(1);

                         
                        int index381_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA381_27 = input.LA(1);

                         
                        int index381_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA381_28 = input.LA(1);

                         
                        int index381_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index381_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 381, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_269s = "\1\uffff\1\0\1\6\1\1\1\7\1\2\1\10\1\3\1\5\1\11\1\4\1\12\2\uffff}>";
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);

    class DFA380 extends DFA {

        public DFA380(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 380;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_258;
            this.accept = dfa_255;
            this.special = dfa_269;
            this.transition = dfa_260;
        }
        public String getDescription() {
            return "10314:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA380_1 = input.LA(1);

                         
                        int index380_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA380_3 = input.LA(1);

                         
                        int index380_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA380_5 = input.LA(1);

                         
                        int index380_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA380_7 = input.LA(1);

                         
                        int index380_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA380_10 = input.LA(1);

                         
                        int index380_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA380_8 = input.LA(1);

                         
                        int index380_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA380_2 = input.LA(1);

                         
                        int index380_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA380_4 = input.LA(1);

                         
                        int index380_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA380_6 = input.LA(1);

                         
                        int index380_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA380_9 = input.LA(1);

                         
                        int index380_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA380_11 = input.LA(1);

                         
                        int index380_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index380_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 380, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_270s = "\1\76\113\uffff";
    static final String dfa_271s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_272s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_273s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_274s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_275s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final char[] dfa_271 = DFA.unpackEncodedStringToUnsignedChars(dfa_271s);
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final short[][] dfa_275 = unpackEncodedStringArray(dfa_275s);

    class DFA383 extends DFA {

        public DFA383(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 383;
            this.eot = dfa_183;
            this.eof = dfa_270;
            this.min = dfa_271;
            this.max = dfa_272;
            this.accept = dfa_273;
            this.special = dfa_274;
            this.transition = dfa_275;
        }
        public String getDescription() {
            return "10357:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA383_0 = input.LA(1);

                         
                        int index383_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA383_0>=5 && LA383_0<=126 && (s=T2S.M_32[LA383_0-(5)])>=0) && (synpred240_InternalN4JSXParser())) { /* 15 cases */ }
                        else if ( (LA383_0==Of) ) {s = 16;}

                        
                        else if ((LA383_0>=4 && LA383_0<=149 && (s=T2S.M_33[LA383_0-(4)])>=0) && (synpred240_InternalN4JSXParser())) { /* 30 cases */ }
                        else if ( (LA383_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA383_0>=15 && LA383_0<=140 && (s=T2S.M_34[LA383_0-(15)])>=0) && (synpred240_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA383_0==EOF||LA383_0==LessThanSignLessThanSignEqualsSign||LA383_0==PercentSignEqualsSign||(LA383_0>=AmpersandEqualsSign && LA383_0<=AsteriskEqualsSign)||LA383_0==PlusSignEqualsSign||LA383_0==HyphenMinusEqualsSign||LA383_0==CircumflexAccentEqualsSign||LA383_0==In||LA383_0==VerticalLineEqualsSign||LA383_0==Comma||LA383_0==Semicolon||(LA383_0>=EqualsSign && LA383_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index383_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA383_16 = input.LA(1);

                         
                        int index383_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index383_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA383_46 = input.LA(1);

                         
                        int index383_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index383_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 383, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_276s = "\121\uffff";
    static final String dfa_277s = "\1\76\120\uffff";
    static final String dfa_278s = "\1\4\55\uffff\1\0\42\uffff";
    static final String dfa_279s = "\1\u0099\55\uffff\1\0\42\uffff";
    static final String dfa_280s = "\1\uffff\55\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_281s = "\1\0\55\uffff\1\1\42\uffff}>";
    static final String[] dfa_282s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_276 = DFA.unpackEncodedString(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final char[] dfa_278 = DFA.unpackEncodedStringToUnsignedChars(dfa_278s);
    static final char[] dfa_279 = DFA.unpackEncodedStringToUnsignedChars(dfa_279s);
    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final short[][] dfa_282 = unpackEncodedStringArray(dfa_282s);

    class DFA385 extends DFA {

        public DFA385(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 385;
            this.eot = dfa_276;
            this.eof = dfa_277;
            this.min = dfa_278;
            this.max = dfa_279;
            this.accept = dfa_280;
            this.special = dfa_281;
            this.transition = dfa_282;
        }
        public String getDescription() {
            return "10436:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA385_0 = input.LA(1);

                         
                        int index385_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA385_0>=4 && LA385_0<=149 && (s=T2S.M_35[LA385_0-(4)])>=0) && (synpred242_InternalN4JSXParser())) { /* 45 cases */ }
                        else if ( (LA385_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA385_0>=15 && LA385_0<=140 && (s=T2S.M_34[LA385_0-(15)])>=0) && (synpred242_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA385_0==EOF||LA385_0==LessThanSignLessThanSignEqualsSign||LA385_0==PercentSignEqualsSign||(LA385_0>=AmpersandEqualsSign && LA385_0<=AsteriskEqualsSign)||LA385_0==PlusSignEqualsSign||LA385_0==HyphenMinusEqualsSign||LA385_0==CircumflexAccentEqualsSign||LA385_0==VerticalLineEqualsSign||LA385_0==RightParenthesis||LA385_0==Comma||(LA385_0>=Colon && LA385_0<=Semicolon)||(LA385_0>=EqualsSign && LA385_0<=GreaterThanSign)||LA385_0==RightSquareBracket||LA385_0==RightCurlyBracket||LA385_0==RULE_ML_COMMENT||LA385_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index385_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA385_46 = input.LA(1);

                         
                        int index385_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index385_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 385, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_283s = "\136\uffff";
    static final String dfa_284s = "\1\2\135\uffff";
    static final String dfa_285s = "\1\4\1\0\134\uffff";
    static final String dfa_286s = "\1\u0095\1\0\134\uffff";
    static final String dfa_287s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_288s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_289s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final char[] dfa_285 = DFA.unpackEncodedStringToUnsignedChars(dfa_285s);
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final short[] dfa_287 = DFA.unpackEncodedString(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[][] dfa_289 = unpackEncodedStringArray(dfa_289s);

    class DFA416 extends DFA {

        public DFA416(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 416;
            this.eot = dfa_283;
            this.eof = dfa_284;
            this.min = dfa_285;
            this.max = dfa_286;
            this.accept = dfa_287;
            this.special = dfa_288;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "11568:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA416_1 = input.LA(1);

                         
                        int index416_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSXParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index416_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 416, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_290s = "\1\4\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_291s = "\1\u0095\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_292s = "\1\uffff\1\1\30\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_293s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\4\uffff}>";
    static final String[] dfa_294s = {
            "\1\26\1\23\1\103\1\57\1\15\1\104\1\4\1\7\1\41\1\42\1\6\1\53\1\43\1\50\1\51\1\2\1\3\1\44\1\47\1\55\1\5\1\61\1\10\1\63\1\16\1\66\1\34\1\14\1\35\1\37\1\40\1\11\1\75\1\62\1\64\1\25\1\70\1\72\1\13\1\36\1\46\1\76\1\101\1\73\1\21\1\74\1\22\1\12\1\71\4\uffff\1\52\1\30\1\77\1\60\1\105\1\31\1\65\1\67\21\uffff\1\100\1\45\1\54\1\56\1\102\5\uffff\1\111\1\uffff\1\33\7\uffff\1\32\2\uffff\1\27\1\1\1\110\2\uffff\1\24\2\uffff\1\20\3\uffff\1\107\1\uffff\1\107\1\uffff\1\107\2\uffff\1\107\1\uffff\1\17\2\uffff\1\106\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final char[] dfa_291 = DFA.unpackEncodedStringToUnsignedChars(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[][] dfa_294 = unpackEncodedStringArray(dfa_294s);

    class DFA458 extends DFA {

        public DFA458(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 458;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_290;
            this.max = dfa_291;
            this.accept = dfa_292;
            this.special = dfa_293;
            this.transition = dfa_294;
        }
        public String getDescription() {
            return "12196:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA458_0 = input.LA(1);

                         
                        int index458_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA458_0>=4 && LA458_0<=126 && (s=T2S.M_37[LA458_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA458_0==LessThanSign) && (synpred261_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA458_0==Asterisk) && (synpred261_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA458_0>=6 && LA458_0<=129 && (s=T2S.M_38[LA458_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA458_0==RULE_DOUBLE||LA458_0==RULE_HEX_INT||LA458_0==RULE_OCTAL_INT||LA458_0==RULE_SCIENTIFIC_INT||LA458_0==RULE_INT) ) {s = 71;}

                        else if ( (LA458_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA458_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index458_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA458_2 = input.LA(1);

                         
                        int index458_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA458_3 = input.LA(1);

                         
                        int index458_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA458_4 = input.LA(1);

                         
                        int index458_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA458_5 = input.LA(1);

                         
                        int index458_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA458_6 = input.LA(1);

                         
                        int index458_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA458_7 = input.LA(1);

                         
                        int index458_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA458_8 = input.LA(1);

                         
                        int index458_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA458_9 = input.LA(1);

                         
                        int index458_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA458_10 = input.LA(1);

                         
                        int index458_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA458_11 = input.LA(1);

                         
                        int index458_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA458_12 = input.LA(1);

                         
                        int index458_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA458_13 = input.LA(1);

                         
                        int index458_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA458_14 = input.LA(1);

                         
                        int index458_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA458_15 = input.LA(1);

                         
                        int index458_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA458_16 = input.LA(1);

                         
                        int index458_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA458_17 = input.LA(1);

                         
                        int index458_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA458_18 = input.LA(1);

                         
                        int index458_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA458_19 = input.LA(1);

                         
                        int index458_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA458_20 = input.LA(1);

                         
                        int index458_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA458_21 = input.LA(1);

                         
                        int index458_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA458_22 = input.LA(1);

                         
                        int index458_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA458_23 = input.LA(1);

                         
                        int index458_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA458_24 = input.LA(1);

                         
                        int index458_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA458_25 = input.LA(1);

                         
                        int index458_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA458_28 = input.LA(1);

                         
                        int index458_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA458_29 = input.LA(1);

                         
                        int index458_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA458_30 = input.LA(1);

                         
                        int index458_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA458_31 = input.LA(1);

                         
                        int index458_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA458_32 = input.LA(1);

                         
                        int index458_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA458_33 = input.LA(1);

                         
                        int index458_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA458_34 = input.LA(1);

                         
                        int index458_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA458_35 = input.LA(1);

                         
                        int index458_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA458_36 = input.LA(1);

                         
                        int index458_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA458_37 = input.LA(1);

                         
                        int index458_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA458_38 = input.LA(1);

                         
                        int index458_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA458_39 = input.LA(1);

                         
                        int index458_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA458_40 = input.LA(1);

                         
                        int index458_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA458_41 = input.LA(1);

                         
                        int index458_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA458_42 = input.LA(1);

                         
                        int index458_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA458_43 = input.LA(1);

                         
                        int index458_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA458_44 = input.LA(1);

                         
                        int index458_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA458_45 = input.LA(1);

                         
                        int index458_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA458_46 = input.LA(1);

                         
                        int index458_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA458_47 = input.LA(1);

                         
                        int index458_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA458_48 = input.LA(1);

                         
                        int index458_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA458_49 = input.LA(1);

                         
                        int index458_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA458_50 = input.LA(1);

                         
                        int index458_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA458_51 = input.LA(1);

                         
                        int index458_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA458_52 = input.LA(1);

                         
                        int index458_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA458_53 = input.LA(1);

                         
                        int index458_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA458_54 = input.LA(1);

                         
                        int index458_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA458_55 = input.LA(1);

                         
                        int index458_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA458_56 = input.LA(1);

                         
                        int index458_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA458_57 = input.LA(1);

                         
                        int index458_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA458_58 = input.LA(1);

                         
                        int index458_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA458_59 = input.LA(1);

                         
                        int index458_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA458_60 = input.LA(1);

                         
                        int index458_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA458_61 = input.LA(1);

                         
                        int index458_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA458_62 = input.LA(1);

                         
                        int index458_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA458_63 = input.LA(1);

                         
                        int index458_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA458_64 = input.LA(1);

                         
                        int index458_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA458_65 = input.LA(1);

                         
                        int index458_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA458_66 = input.LA(1);

                         
                        int index458_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA458_67 = input.LA(1);

                         
                        int index458_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA458_68 = input.LA(1);

                         
                        int index458_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA458_69 = input.LA(1);

                         
                        int index458_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA458_70 = input.LA(1);

                         
                        int index458_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA458_71 = input.LA(1);

                         
                        int index458_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA458_72 = input.LA(1);

                         
                        int index458_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 458, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA459 extends DFA {

        public DFA459(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 459;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_290;
            this.max = dfa_291;
            this.accept = dfa_292;
            this.special = dfa_293;
            this.transition = dfa_294;
        }
        public String getDescription() {
            return "12381:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA459_0 = input.LA(1);

                         
                        int index459_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA459_0>=4 && LA459_0<=126 && (s=T2S.M_37[LA459_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA459_0==LessThanSign) && (synpred264_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA459_0==Asterisk) && (synpred264_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA459_0>=6 && LA459_0<=129 && (s=T2S.M_38[LA459_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA459_0==RULE_DOUBLE||LA459_0==RULE_HEX_INT||LA459_0==RULE_OCTAL_INT||LA459_0==RULE_SCIENTIFIC_INT||LA459_0==RULE_INT) ) {s = 71;}

                        else if ( (LA459_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA459_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index459_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA459_2 = input.LA(1);

                         
                        int index459_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA459_3 = input.LA(1);

                         
                        int index459_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA459_4 = input.LA(1);

                         
                        int index459_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA459_5 = input.LA(1);

                         
                        int index459_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA459_6 = input.LA(1);

                         
                        int index459_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA459_7 = input.LA(1);

                         
                        int index459_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA459_8 = input.LA(1);

                         
                        int index459_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA459_9 = input.LA(1);

                         
                        int index459_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA459_10 = input.LA(1);

                         
                        int index459_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA459_11 = input.LA(1);

                         
                        int index459_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA459_12 = input.LA(1);

                         
                        int index459_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA459_13 = input.LA(1);

                         
                        int index459_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA459_14 = input.LA(1);

                         
                        int index459_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA459_15 = input.LA(1);

                         
                        int index459_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA459_16 = input.LA(1);

                         
                        int index459_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA459_17 = input.LA(1);

                         
                        int index459_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA459_18 = input.LA(1);

                         
                        int index459_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA459_19 = input.LA(1);

                         
                        int index459_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA459_20 = input.LA(1);

                         
                        int index459_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA459_21 = input.LA(1);

                         
                        int index459_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA459_22 = input.LA(1);

                         
                        int index459_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA459_23 = input.LA(1);

                         
                        int index459_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA459_24 = input.LA(1);

                         
                        int index459_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA459_25 = input.LA(1);

                         
                        int index459_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA459_28 = input.LA(1);

                         
                        int index459_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA459_29 = input.LA(1);

                         
                        int index459_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA459_30 = input.LA(1);

                         
                        int index459_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA459_31 = input.LA(1);

                         
                        int index459_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA459_32 = input.LA(1);

                         
                        int index459_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA459_33 = input.LA(1);

                         
                        int index459_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA459_34 = input.LA(1);

                         
                        int index459_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA459_35 = input.LA(1);

                         
                        int index459_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA459_36 = input.LA(1);

                         
                        int index459_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA459_37 = input.LA(1);

                         
                        int index459_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA459_38 = input.LA(1);

                         
                        int index459_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA459_39 = input.LA(1);

                         
                        int index459_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA459_40 = input.LA(1);

                         
                        int index459_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA459_41 = input.LA(1);

                         
                        int index459_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA459_42 = input.LA(1);

                         
                        int index459_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA459_43 = input.LA(1);

                         
                        int index459_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA459_44 = input.LA(1);

                         
                        int index459_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA459_45 = input.LA(1);

                         
                        int index459_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA459_46 = input.LA(1);

                         
                        int index459_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA459_47 = input.LA(1);

                         
                        int index459_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA459_48 = input.LA(1);

                         
                        int index459_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA459_49 = input.LA(1);

                         
                        int index459_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA459_50 = input.LA(1);

                         
                        int index459_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA459_51 = input.LA(1);

                         
                        int index459_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA459_52 = input.LA(1);

                         
                        int index459_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA459_53 = input.LA(1);

                         
                        int index459_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA459_54 = input.LA(1);

                         
                        int index459_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA459_55 = input.LA(1);

                         
                        int index459_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA459_56 = input.LA(1);

                         
                        int index459_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA459_57 = input.LA(1);

                         
                        int index459_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA459_58 = input.LA(1);

                         
                        int index459_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA459_59 = input.LA(1);

                         
                        int index459_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA459_60 = input.LA(1);

                         
                        int index459_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA459_61 = input.LA(1);

                         
                        int index459_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA459_62 = input.LA(1);

                         
                        int index459_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA459_63 = input.LA(1);

                         
                        int index459_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA459_64 = input.LA(1);

                         
                        int index459_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA459_65 = input.LA(1);

                         
                        int index459_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA459_66 = input.LA(1);

                         
                        int index459_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA459_67 = input.LA(1);

                         
                        int index459_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA459_68 = input.LA(1);

                         
                        int index459_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA459_69 = input.LA(1);

                         
                        int index459_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA459_70 = input.LA(1);

                         
                        int index459_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA459_71 = input.LA(1);

                         
                        int index459_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA459_72 = input.LA(1);

                         
                        int index459_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index459_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 459, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_295s = "\113\uffff";
    static final String dfa_296s = "\1\4\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_297s = "\1\u0095\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_298s = "\31\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_299s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\3\uffff}>";
    static final String[] dfa_300s = {
            "\1\25\1\22\1\102\1\56\1\14\1\103\1\3\1\6\1\40\1\41\1\5\1\52\1\42\1\47\1\50\1\1\1\2\1\43\1\46\1\54\1\4\1\60\1\7\1\62\1\15\1\65\1\33\1\13\1\34\1\36\1\37\1\10\1\74\1\61\1\63\1\24\1\67\1\71\1\12\1\35\1\45\1\75\1\100\1\72\1\20\1\73\1\21\1\11\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\7\uffff\1\32\7\uffff\1\31\2\uffff\1\26\1\uffff\1\107\2\uffff\1\23\2\uffff\1\17\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\16\2\uffff\1\105\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);

    class DFA471 extends DFA {

        public DFA471(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 471;
            this.eot = dfa_295;
            this.eof = dfa_295;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "12573:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA471_0 = input.LA(1);

                         
                        int index471_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA471_0>=4 && LA471_0<=126 && (s=T2S.M_41[LA471_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA471_0==LessThanSign) && (synpred270_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA471_0==Asterisk) && (synpred270_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA471_0>=6 && LA471_0<=129 && (s=T2S.M_42[LA471_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA471_0==RULE_DOUBLE||LA471_0==RULE_HEX_INT||LA471_0==RULE_OCTAL_INT||LA471_0==RULE_SCIENTIFIC_INT||LA471_0==RULE_INT) ) {s = 70;}

                        else if ( (LA471_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index471_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA471_1 = input.LA(1);

                         
                        int index471_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA471_2 = input.LA(1);

                         
                        int index471_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA471_3 = input.LA(1);

                         
                        int index471_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA471_4 = input.LA(1);

                         
                        int index471_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA471_5 = input.LA(1);

                         
                        int index471_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA471_6 = input.LA(1);

                         
                        int index471_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA471_7 = input.LA(1);

                         
                        int index471_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA471_8 = input.LA(1);

                         
                        int index471_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA471_9 = input.LA(1);

                         
                        int index471_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA471_10 = input.LA(1);

                         
                        int index471_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA471_11 = input.LA(1);

                         
                        int index471_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA471_12 = input.LA(1);

                         
                        int index471_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA471_13 = input.LA(1);

                         
                        int index471_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA471_14 = input.LA(1);

                         
                        int index471_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA471_15 = input.LA(1);

                         
                        int index471_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA471_16 = input.LA(1);

                         
                        int index471_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA471_17 = input.LA(1);

                         
                        int index471_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA471_18 = input.LA(1);

                         
                        int index471_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA471_19 = input.LA(1);

                         
                        int index471_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA471_20 = input.LA(1);

                         
                        int index471_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA471_21 = input.LA(1);

                         
                        int index471_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA471_22 = input.LA(1);

                         
                        int index471_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA471_23 = input.LA(1);

                         
                        int index471_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA471_24 = input.LA(1);

                         
                        int index471_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA471_27 = input.LA(1);

                         
                        int index471_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA471_28 = input.LA(1);

                         
                        int index471_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA471_29 = input.LA(1);

                         
                        int index471_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA471_30 = input.LA(1);

                         
                        int index471_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA471_31 = input.LA(1);

                         
                        int index471_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA471_32 = input.LA(1);

                         
                        int index471_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA471_33 = input.LA(1);

                         
                        int index471_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA471_34 = input.LA(1);

                         
                        int index471_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA471_35 = input.LA(1);

                         
                        int index471_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA471_36 = input.LA(1);

                         
                        int index471_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA471_37 = input.LA(1);

                         
                        int index471_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA471_38 = input.LA(1);

                         
                        int index471_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA471_39 = input.LA(1);

                         
                        int index471_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA471_40 = input.LA(1);

                         
                        int index471_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA471_41 = input.LA(1);

                         
                        int index471_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA471_42 = input.LA(1);

                         
                        int index471_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA471_43 = input.LA(1);

                         
                        int index471_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA471_44 = input.LA(1);

                         
                        int index471_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA471_45 = input.LA(1);

                         
                        int index471_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA471_46 = input.LA(1);

                         
                        int index471_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA471_47 = input.LA(1);

                         
                        int index471_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA471_48 = input.LA(1);

                         
                        int index471_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA471_49 = input.LA(1);

                         
                        int index471_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA471_50 = input.LA(1);

                         
                        int index471_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA471_51 = input.LA(1);

                         
                        int index471_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA471_52 = input.LA(1);

                         
                        int index471_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA471_53 = input.LA(1);

                         
                        int index471_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA471_54 = input.LA(1);

                         
                        int index471_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA471_55 = input.LA(1);

                         
                        int index471_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA471_56 = input.LA(1);

                         
                        int index471_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA471_57 = input.LA(1);

                         
                        int index471_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA471_58 = input.LA(1);

                         
                        int index471_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA471_59 = input.LA(1);

                         
                        int index471_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA471_60 = input.LA(1);

                         
                        int index471_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA471_61 = input.LA(1);

                         
                        int index471_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA471_62 = input.LA(1);

                         
                        int index471_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA471_63 = input.LA(1);

                         
                        int index471_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA471_64 = input.LA(1);

                         
                        int index471_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA471_65 = input.LA(1);

                         
                        int index471_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA471_66 = input.LA(1);

                         
                        int index471_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA471_67 = input.LA(1);

                         
                        int index471_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA471_68 = input.LA(1);

                         
                        int index471_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA471_69 = input.LA(1);

                         
                        int index471_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA471_70 = input.LA(1);

                         
                        int index471_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA471_71 = input.LA(1);

                         
                        int index471_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index471_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 471, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\1\2\115\uffff";
    static final String[] dfa_302s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_301 = DFA.unpackEncodedString(dfa_301s);
    static final short[][] dfa_302 = unpackEncodedStringArray(dfa_302s);

    class DFA461 extends DFA {

        public DFA461(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 461;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "12582:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA461_1 = input.LA(1);

                         
                        int index461_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index461_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 461, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA464 extends DFA {

        public DFA464(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 464;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "12804:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA464_1 = input.LA(1);

                         
                        int index464_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index464_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 464, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_303s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_304s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_305s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_306s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_303 = DFA.unpackEncodedStringToUnsignedChars(dfa_303s);
    static final char[] dfa_304 = DFA.unpackEncodedStringToUnsignedChars(dfa_304s);
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[][] dfa_306 = unpackEncodedStringArray(dfa_306s);

    class DFA466 extends DFA {

        public DFA466(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 466;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 12832:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA468 extends DFA {

        public DFA468(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 468;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12837:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_295;
            this.eof = dfa_295;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "12874:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA483_0 = input.LA(1);

                         
                        int index483_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA483_0>=4 && LA483_0<=126 && (s=T2S.M_41[LA483_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA483_0==LessThanSign) && (synpred278_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA483_0==Asterisk) && (synpred278_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA483_0>=6 && LA483_0<=129 && (s=T2S.M_42[LA483_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA483_0==RULE_DOUBLE||LA483_0==RULE_HEX_INT||LA483_0==RULE_OCTAL_INT||LA483_0==RULE_SCIENTIFIC_INT||LA483_0==RULE_INT) ) {s = 70;}

                        else if ( (LA483_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index483_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA483_1 = input.LA(1);

                         
                        int index483_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA483_2 = input.LA(1);

                         
                        int index483_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA483_3 = input.LA(1);

                         
                        int index483_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA483_4 = input.LA(1);

                         
                        int index483_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA483_5 = input.LA(1);

                         
                        int index483_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA483_6 = input.LA(1);

                         
                        int index483_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA483_7 = input.LA(1);

                         
                        int index483_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA483_8 = input.LA(1);

                         
                        int index483_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA483_9 = input.LA(1);

                         
                        int index483_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA483_10 = input.LA(1);

                         
                        int index483_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA483_11 = input.LA(1);

                         
                        int index483_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA483_12 = input.LA(1);

                         
                        int index483_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA483_13 = input.LA(1);

                         
                        int index483_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA483_14 = input.LA(1);

                         
                        int index483_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA483_15 = input.LA(1);

                         
                        int index483_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA483_16 = input.LA(1);

                         
                        int index483_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA483_17 = input.LA(1);

                         
                        int index483_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA483_18 = input.LA(1);

                         
                        int index483_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA483_19 = input.LA(1);

                         
                        int index483_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA483_20 = input.LA(1);

                         
                        int index483_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA483_21 = input.LA(1);

                         
                        int index483_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA483_22 = input.LA(1);

                         
                        int index483_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA483_23 = input.LA(1);

                         
                        int index483_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA483_24 = input.LA(1);

                         
                        int index483_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA483_27 = input.LA(1);

                         
                        int index483_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA483_28 = input.LA(1);

                         
                        int index483_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA483_29 = input.LA(1);

                         
                        int index483_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA483_30 = input.LA(1);

                         
                        int index483_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA483_31 = input.LA(1);

                         
                        int index483_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA483_32 = input.LA(1);

                         
                        int index483_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA483_33 = input.LA(1);

                         
                        int index483_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA483_34 = input.LA(1);

                         
                        int index483_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA483_35 = input.LA(1);

                         
                        int index483_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA483_36 = input.LA(1);

                         
                        int index483_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA483_37 = input.LA(1);

                         
                        int index483_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA483_38 = input.LA(1);

                         
                        int index483_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA483_39 = input.LA(1);

                         
                        int index483_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA483_40 = input.LA(1);

                         
                        int index483_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA483_41 = input.LA(1);

                         
                        int index483_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA483_42 = input.LA(1);

                         
                        int index483_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA483_43 = input.LA(1);

                         
                        int index483_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA483_44 = input.LA(1);

                         
                        int index483_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA483_45 = input.LA(1);

                         
                        int index483_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA483_46 = input.LA(1);

                         
                        int index483_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA483_47 = input.LA(1);

                         
                        int index483_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA483_48 = input.LA(1);

                         
                        int index483_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA483_49 = input.LA(1);

                         
                        int index483_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA483_50 = input.LA(1);

                         
                        int index483_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA483_51 = input.LA(1);

                         
                        int index483_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA483_52 = input.LA(1);

                         
                        int index483_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA483_53 = input.LA(1);

                         
                        int index483_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA483_54 = input.LA(1);

                         
                        int index483_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA483_55 = input.LA(1);

                         
                        int index483_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA483_56 = input.LA(1);

                         
                        int index483_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA483_57 = input.LA(1);

                         
                        int index483_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA483_58 = input.LA(1);

                         
                        int index483_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA483_59 = input.LA(1);

                         
                        int index483_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA483_60 = input.LA(1);

                         
                        int index483_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA483_61 = input.LA(1);

                         
                        int index483_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA483_62 = input.LA(1);

                         
                        int index483_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA483_63 = input.LA(1);

                         
                        int index483_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA483_64 = input.LA(1);

                         
                        int index483_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA483_65 = input.LA(1);

                         
                        int index483_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA483_66 = input.LA(1);

                         
                        int index483_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA483_67 = input.LA(1);

                         
                        int index483_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA483_68 = input.LA(1);

                         
                        int index483_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA483_69 = input.LA(1);

                         
                        int index483_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA483_70 = input.LA(1);

                         
                        int index483_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA483_71 = input.LA(1);

                         
                        int index483_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index483_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 483, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_307s = "\1\4\1\0\113\uffff";
    static final String dfa_308s = "\1\u0095\1\0\113\uffff";
    static final String dfa_309s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_310s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_311s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);

    class DFA473 extends DFA {

        public DFA473(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 473;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "12883:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA473_1 = input.LA(1);

                         
                        int index473_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index473_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 473, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA476 extends DFA {

        public DFA476(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 476;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "13105:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA476_1 = input.LA(1);

                         
                        int index476_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index476_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 476, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA478 extends DFA {

        public DFA478(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 478;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 13133:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA480 extends DFA {

        public DFA480(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 480;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13138:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_312s = "\2\uffff\10\1\1\uffff";
    static final String dfa_313s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_314s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\22\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_312 = DFA.unpackEncodedString(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[][] dfa_314 = unpackEncodedStringArray(dfa_314s);

    class DFA484 extends DFA {

        public DFA484(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 484;
            this.eot = dfa_21;
            this.eof = dfa_312;
            this.min = dfa_303;
            this.max = dfa_313;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_314;
        }
        public String getDescription() {
            return "()* loopback of 13174:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_315s = "\1\uffff\6\15\1\uffff\5\15\1\uffff";
    static final String dfa_316s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff";
    static final String[] dfa_317s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            ""
    };
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final char[] dfa_316 = DFA.unpackEncodedStringToUnsignedChars(dfa_316s);
    static final short[][] dfa_317 = unpackEncodedStringArray(dfa_317s);

    class DFA485 extends DFA {

        public DFA485(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 485;
            this.eot = dfa_189;
            this.eof = dfa_315;
            this.min = dfa_190;
            this.max = dfa_316;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_317;
        }
        public String getDescription() {
            return "13178:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_21;
            this.eof = dfa_312;
            this.min = dfa_303;
            this.max = dfa_313;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_314;
        }
        public String getDescription() {
            return "()* loopback of 13202:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA489 extends DFA {

        public DFA489(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 489;
            this.eot = dfa_189;
            this.eof = dfa_315;
            this.min = dfa_190;
            this.max = dfa_316;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_317;
        }
        public String getDescription() {
            return "13206:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA492 extends DFA {

        public DFA492(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 492;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 13289:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA494 extends DFA {

        public DFA494(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 494;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13294:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA497 extends DFA {

        public DFA497(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 497;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 13349:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA499 extends DFA {

        public DFA499(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 499;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13354:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA507 extends DFA {

        public DFA507(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 507;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "13464:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA507_1 = input.LA(1);

                         
                        int index507_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index507_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 507, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA509 extends DFA {

        public DFA509(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 509;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "13487:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA509_1 = input.LA(1);

                         
                        int index509_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index509_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 509, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA511 extends DFA {

        public DFA511(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 511;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "13519:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA511_1 = input.LA(1);

                         
                        int index511_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index511_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 511, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA514 extends DFA {

        public DFA514(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 514;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "13546:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA514_1 = input.LA(1);

                         
                        int index514_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index514_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 514, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA521 extends DFA {

        public DFA521(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 521;
            this.eot = dfa_110;
            this.eof = dfa_301;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_302;
        }
        public String getDescription() {
            return "13953:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA521_1 = input.LA(1);

                         
                        int index521_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index521_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 521, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA524 extends DFA {

        public DFA524(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 524;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_307;
            this.max = dfa_308;
            this.accept = dfa_309;
            this.special = dfa_310;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "14186:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA524_1 = input.LA(1);

                         
                        int index524_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index524_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 524, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_318s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_319s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final short[][] dfa_319 = unpackEncodedStringArray(dfa_319s);

    class DFA534 extends DFA {

        public DFA534(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 534;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_318;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_319;
        }
        public String getDescription() {
            return "()* loopback of 14307:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_320s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_320 = unpackEncodedStringArray(dfa_320s);

    class DFA540 extends DFA {

        public DFA540(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 540;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_318;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_320;
        }
        public String getDescription() {
            return "()* loopback of 14343:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_321s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_322s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_323s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_324s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_325s = "\1\33\1\21\40\uffff\1\6\4\uffff\1\12\1\16\1\22\1\25\1\30\1\0\1\3\1\7\1\13\1\17\1\23\1\26\1\31\1\1\1\4\1\10\1\14\1\20\1\24\1\27\1\32\1\2\1\5\1\11\1\15\5\uffff}>";
    static final String[] dfa_326s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final char[] dfa_322 = DFA.unpackEncodedStringToUnsignedChars(dfa_322s);
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final short[] dfa_324 = DFA.unpackEncodedString(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);

    class DFA544 extends DFA {

        public DFA544(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 544;
            this.eot = dfa_232;
            this.eof = dfa_321;
            this.min = dfa_322;
            this.max = dfa_323;
            this.accept = dfa_324;
            this.special = dfa_325;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "14376:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA544_44 = input.LA(1);

                         
                        int index544_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_44==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_44==EOF||LA544_44==Comma||LA544_44==EqualsSign||LA544_44==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_44);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA544_52 = input.LA(1);

                         
                        int index544_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_52==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_52==EOF||LA544_52==Comma||LA544_52==EqualsSign||LA544_52==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_52);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA544_60 = input.LA(1);

                         
                        int index544_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_60==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_60==EOF||LA544_60==Comma||LA544_60==EqualsSign||LA544_60==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_60);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA544_45 = input.LA(1);

                         
                        int index544_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_45==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_45==EOF||LA544_45==Comma||LA544_45==EqualsSign||LA544_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_45);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA544_53 = input.LA(1);

                         
                        int index544_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_53==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_53==EOF||LA544_53==Comma||LA544_53==EqualsSign||LA544_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_53);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA544_61 = input.LA(1);

                         
                        int index544_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_61==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_61==EOF||LA544_61==Comma||LA544_61==EqualsSign||LA544_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_61);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA544_34 = input.LA(1);

                         
                        int index544_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_34==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_34==EOF||LA544_34==Comma||LA544_34==EqualsSign||LA544_34==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_34);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA544_46 = input.LA(1);

                         
                        int index544_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_46==EOF||LA544_46==Comma||LA544_46==EqualsSign||LA544_46==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_46==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA544_54 = input.LA(1);

                         
                        int index544_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_54==EOF||LA544_54==Comma||LA544_54==EqualsSign||LA544_54==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_54==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_54);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA544_62 = input.LA(1);

                         
                        int index544_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_62==EOF||LA544_62==Comma||LA544_62==EqualsSign||LA544_62==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_62==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_62);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA544_39 = input.LA(1);

                         
                        int index544_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_39==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_39==EOF||LA544_39==Comma||LA544_39==EqualsSign||LA544_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_39);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA544_47 = input.LA(1);

                         
                        int index544_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_47==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_47==EOF||LA544_47==Comma||LA544_47==EqualsSign||LA544_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_47);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA544_55 = input.LA(1);

                         
                        int index544_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_55==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_55==EOF||LA544_55==Comma||LA544_55==EqualsSign||LA544_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA544_63 = input.LA(1);

                         
                        int index544_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_63==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_63==EOF||LA544_63==Comma||LA544_63==EqualsSign||LA544_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_63);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA544_40 = input.LA(1);

                         
                        int index544_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_40==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_40==EOF||LA544_40==Comma||LA544_40==EqualsSign||LA544_40==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_40);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA544_48 = input.LA(1);

                         
                        int index544_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_48==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_48==EOF||LA544_48==Comma||LA544_48==EqualsSign||LA544_48==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA544_56 = input.LA(1);

                         
                        int index544_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_56==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_56==EOF||LA544_56==Comma||LA544_56==EqualsSign||LA544_56==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_56);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA544_1 = input.LA(1);

                         
                        int index544_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_1==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_1==EOF||LA544_1==Comma||LA544_1==EqualsSign||LA544_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_1);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA544_41 = input.LA(1);

                         
                        int index544_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_41==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_41==EOF||LA544_41==Comma||LA544_41==EqualsSign||LA544_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_41);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA544_49 = input.LA(1);

                         
                        int index544_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_49==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_49==EOF||LA544_49==Comma||LA544_49==EqualsSign||LA544_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_49);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA544_57 = input.LA(1);

                         
                        int index544_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_57==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_57==EOF||LA544_57==Comma||LA544_57==EqualsSign||LA544_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA544_42 = input.LA(1);

                         
                        int index544_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_42==EOF||LA544_42==Comma||LA544_42==EqualsSign||LA544_42==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_42==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_42);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA544_50 = input.LA(1);

                         
                        int index544_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_50==EOF||LA544_50==Comma||LA544_50==EqualsSign||LA544_50==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_50==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_50);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA544_58 = input.LA(1);

                         
                        int index544_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_58==EOF||LA544_58==Comma||LA544_58==EqualsSign||LA544_58==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_58==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_58);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA544_43 = input.LA(1);

                         
                        int index544_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_43==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_43==EOF||LA544_43==Comma||LA544_43==EqualsSign||LA544_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_43);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA544_51 = input.LA(1);

                         
                        int index544_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_51==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_51==EOF||LA544_51==Comma||LA544_51==EqualsSign||LA544_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_51);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA544_59 = input.LA(1);

                         
                        int index544_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_59==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_59==EOF||LA544_59==Comma||LA544_59==EqualsSign||LA544_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_59);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA544_0 = input.LA(1);

                         
                        int index544_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA544_0>=7 && LA544_0<=126 && (s=T2S.M_45[LA544_0-(7)])>=0) && (synpred303_InternalN4JSXParser())) { /* 33 cases */ }
                        else if ( (LA544_0==Yield) ) {s = 34;}

                        else if ( (LA544_0==Null) && (synpred303_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA544_0==True) && (synpred303_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA544_0==False) && (synpred303_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA544_0==Enum) && (synpred303_InternalN4JSXParser())) {s = 38;}

                        
                        else if ((LA544_0>=4 && LA544_0<=86 && (s=T2S.M_46[LA544_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA544_0==RULE_STRING) && (synpred303_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA544_0==RULE_DOUBLE||LA544_0==RULE_HEX_INT||LA544_0==RULE_OCTAL_INT||LA544_0==RULE_SCIENTIFIC_INT||LA544_0==RULE_INT) && (synpred303_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA544_0==LeftSquareBracket) && (synpred303_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA544_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index544_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 544, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_327s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_328s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_329s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_330s = "\1\27\1\12\45\uffff\1\3\1\7\1\13\1\16\1\21\1\24\1\30\1\0\1\4\1\10\1\14\1\17\1\22\1\25\1\31\1\1\1\5\1\11\1\15\1\20\1\23\1\26\1\32\1\2\1\6\5\uffff}>";
    static final String[] dfa_331s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_327 = DFA.unpackEncodedStringToUnsignedChars(dfa_327s);
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final short[] dfa_330 = DFA.unpackEncodedString(dfa_330s);
    static final short[][] dfa_331 = unpackEncodedStringArray(dfa_331s);

    class DFA545 extends DFA {

        public DFA545(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 545;
            this.eot = dfa_232;
            this.eof = dfa_232;
            this.min = dfa_327;
            this.max = dfa_328;
            this.accept = dfa_329;
            this.special = dfa_330;
            this.transition = dfa_331;
        }
        public String getDescription() {
            return "14407:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA545_46 = input.LA(1);

                         
                        int index545_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_46==Comma||LA545_46==EqualsSign||LA545_46==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_46==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_46);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA545_54 = input.LA(1);

                         
                        int index545_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_54==Comma||LA545_54==EqualsSign||LA545_54==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_54==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_54);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA545_62 = input.LA(1);

                         
                        int index545_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_62==Comma||LA545_62==EqualsSign||LA545_62==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_62==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_62);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA545_39 = input.LA(1);

                         
                        int index545_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_39==Comma||LA545_39==EqualsSign||LA545_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_39==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA545_47 = input.LA(1);

                         
                        int index545_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_47==Comma||LA545_47==EqualsSign||LA545_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_47==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA545_55 = input.LA(1);

                         
                        int index545_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_55==Comma||LA545_55==EqualsSign||LA545_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_55==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA545_63 = input.LA(1);

                         
                        int index545_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_63==Comma||LA545_63==EqualsSign||LA545_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_63==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_63);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA545_40 = input.LA(1);

                         
                        int index545_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_40==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_40==Comma||LA545_40==EqualsSign||LA545_40==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA545_48 = input.LA(1);

                         
                        int index545_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_48==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_48==Comma||LA545_48==EqualsSign||LA545_48==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA545_56 = input.LA(1);

                         
                        int index545_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_56==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_56==Comma||LA545_56==EqualsSign||LA545_56==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA545_1 = input.LA(1);

                         
                        int index545_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_1==Comma||LA545_1==EqualsSign||LA545_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_1==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_1);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA545_41 = input.LA(1);

                         
                        int index545_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_41==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_41==Comma||LA545_41==EqualsSign||LA545_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_41);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA545_49 = input.LA(1);

                         
                        int index545_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_49==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_49==Comma||LA545_49==EqualsSign||LA545_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_49);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA545_57 = input.LA(1);

                         
                        int index545_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_57==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_57==Comma||LA545_57==EqualsSign||LA545_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA545_42 = input.LA(1);

                         
                        int index545_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_42==Comma||LA545_42==EqualsSign||LA545_42==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_42==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_42);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA545_50 = input.LA(1);

                         
                        int index545_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_50==Comma||LA545_50==EqualsSign||LA545_50==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_50==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_50);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA545_58 = input.LA(1);

                         
                        int index545_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_58==Comma||LA545_58==EqualsSign||LA545_58==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_58==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA545_43 = input.LA(1);

                         
                        int index545_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_43==Comma||LA545_43==EqualsSign||LA545_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_43==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA545_51 = input.LA(1);

                         
                        int index545_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_51==Comma||LA545_51==EqualsSign||LA545_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_51==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_51);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA545_59 = input.LA(1);

                         
                        int index545_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_59==Comma||LA545_59==EqualsSign||LA545_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA545_59==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index545_59);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA545_44 = input.LA(1);

                         
                        int index545_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_44==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_44==Comma||LA545_44==EqualsSign||LA545_44==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_44);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA545_52 = input.LA(1);

                         
                        int index545_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_52==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_52==Comma||LA545_52==EqualsSign||LA545_52==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_52);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA545_60 = input.LA(1);

                         
                        int index545_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_60==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_60==Comma||LA545_60==EqualsSign||LA545_60==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA545_0 = input.LA(1);

                         
                        int index545_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA545_0>=7 && LA545_0<=126 && (s=T2S.M_47[LA545_0-(7)])>=0) && (synpred304_InternalN4JSXParser())) { /* 38 cases */ }
                        
                        else if ((LA545_0>=4 && LA545_0<=86 && (s=T2S.M_46[LA545_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA545_0==RULE_STRING) && (synpred304_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA545_0==RULE_DOUBLE||LA545_0==RULE_HEX_INT||LA545_0==RULE_OCTAL_INT||LA545_0==RULE_SCIENTIFIC_INT||LA545_0==RULE_INT) && (synpred304_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA545_0==LeftSquareBracket) && (synpred304_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA545_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index545_0);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA545_45 = input.LA(1);

                         
                        int index545_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_45==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_45==Comma||LA545_45==EqualsSign||LA545_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_45);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA545_53 = input.LA(1);

                         
                        int index545_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_53==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_53==Comma||LA545_53==EqualsSign||LA545_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_53);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA545_61 = input.LA(1);

                         
                        int index545_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA545_61==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA545_61==Comma||LA545_61==EqualsSign||LA545_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index545_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 545, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_332s = "\23\uffff";
    static final String dfa_333s = "\1\4\1\0\21\uffff";
    static final String dfa_334s = "\1\176\1\0\21\uffff";
    static final String dfa_335s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_336s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_337s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\14\uffff\1\3\1\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_332 = DFA.unpackEncodedString(dfa_332s);
    static final char[] dfa_333 = DFA.unpackEncodedStringToUnsignedChars(dfa_333s);
    static final char[] dfa_334 = DFA.unpackEncodedStringToUnsignedChars(dfa_334s);
    static final short[] dfa_335 = DFA.unpackEncodedString(dfa_335s);
    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[][] dfa_337 = unpackEncodedStringArray(dfa_337s);

    class DFA562 extends DFA {

        public DFA562(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 562;
            this.eot = dfa_332;
            this.eof = dfa_332;
            this.min = dfa_333;
            this.max = dfa_334;
            this.accept = dfa_335;
            this.special = dfa_336;
            this.transition = dfa_337;
        }
        public String getDescription() {
            return "14822:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA562_1 = input.LA(1);

                         
                        int index562_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSXParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index562_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 562, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_338s = "\174\uffff";
    static final String dfa_339s = "\1\2\173\uffff";
    static final String dfa_340s = "\1\4\1\0\172\uffff";
    static final String dfa_341s = "\1\u0099\1\0\172\uffff";
    static final String dfa_342s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_343s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_344s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_338 = DFA.unpackEncodedString(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final char[] dfa_340 = DFA.unpackEncodedStringToUnsignedChars(dfa_340s);
    static final char[] dfa_341 = DFA.unpackEncodedStringToUnsignedChars(dfa_341s);
    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final short[] dfa_343 = DFA.unpackEncodedString(dfa_343s);
    static final short[][] dfa_344 = unpackEncodedStringArray(dfa_344s);

    class DFA566 extends DFA {

        public DFA566(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 566;
            this.eot = dfa_338;
            this.eof = dfa_339;
            this.min = dfa_340;
            this.max = dfa_341;
            this.accept = dfa_342;
            this.special = dfa_343;
            this.transition = dfa_344;
        }
        public String getDescription() {
            return "14913:2: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA566_1 = input.LA(1);

                         
                        int index566_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index566_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 566, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_345s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_346s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_347s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_348s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_345 = DFA.unpackEncodedStringToUnsignedChars(dfa_345s);
    static final char[] dfa_346 = DFA.unpackEncodedStringToUnsignedChars(dfa_346s);
    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final short[][] dfa_348 = unpackEncodedStringArray(dfa_348s);

    class DFA569 extends DFA {

        public DFA569(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 569;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_345;
            this.max = dfa_346;
            this.accept = dfa_347;
            this.special = dfa_52;
            this.transition = dfa_348;
        }
        public String getDescription() {
            return "14978:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_349s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_350s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_351s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_352s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_353s = "\1\2\1\6\12\uffff\1\10\1\uffff\1\11\1\0\1\7\1\1\1\5\1\3\1\4\11\uffff}>";
    static final String[] dfa_354s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final char[] dfa_350 = DFA.unpackEncodedStringToUnsignedChars(dfa_350s);
    static final char[] dfa_351 = DFA.unpackEncodedStringToUnsignedChars(dfa_351s);
    static final short[] dfa_352 = DFA.unpackEncodedString(dfa_352s);
    static final short[] dfa_353 = DFA.unpackEncodedString(dfa_353s);
    static final short[][] dfa_354 = unpackEncodedStringArray(dfa_354s);

    class DFA580 extends DFA {

        public DFA580(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 580;
            this.eot = dfa_54;
            this.eof = dfa_349;
            this.min = dfa_350;
            this.max = dfa_351;
            this.accept = dfa_352;
            this.special = dfa_353;
            this.transition = dfa_354;
        }
        public String getDescription() {
            return "15201:3: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA580_15 = input.LA(1);

                         
                        int index580_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_15==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA580_15==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index580_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA580_17 = input.LA(1);

                         
                        int index580_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA580_17==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index580_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA580_0 = input.LA(1);

                         
                        int index580_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA580_0>=11 && LA580_0<=126 && (s=T2S.M_49[LA580_0-(11)])>=0) && (synpred313_InternalN4JSXParser())) { /* 11 cases */ }
                        else if ( (LA580_0==Constructor) ) {s = 12;}

                        else if ( (LA580_0==Of) && (synpred313_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA580_0==Target) ) {s = 14;}

                        else if ( (LA580_0==Type) ) {s = 15;}

                        else if ( (LA580_0==Union) ) {s = 16;}

                        else if ( (LA580_0==Intersection) ) {s = 17;}

                        else if ( (LA580_0==This) ) {s = 18;}

                        else if ( (LA580_0==Promisify) ) {s = 19;}

                        else if ( (LA580_0==Await) ) {s = 20;}

                        else if ( (LA580_0==Async) && (synpred313_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA580_0==Implements) && (synpred313_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA580_0==Interface) && (synpred313_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA580_0==Private) && (synpred313_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA580_0==Protected) && (synpred313_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA580_0==Public) && (synpred313_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA580_0==Out) && (synpred313_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA580_0==This_1||LA580_0==Void||LA580_0==LeftParenthesis||LA580_0==QuestionMark||LA580_0==LeftSquareBracket||LA580_0==LeftCurlyBracket||LA580_0==Tilde) ) {s = 28;}

                         
                        input.seek(index580_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA580_19 = input.LA(1);

                         
                        int index580_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_19==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA580_19==EOF||LA580_19==Ampersand||LA580_19==RightParenthesis||(LA580_19>=PlusSign && LA580_19<=Comma)||LA580_19==LessThanSign||LA580_19==QuestionMark||LA580_19==VerticalLine) ) {s = 28;}

                         
                        input.seek(index580_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA580_20 = input.LA(1);

                         
                        int index580_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_20==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA580_20==EOF||LA580_20==Ampersand||LA580_20==RightParenthesis||(LA580_20>=PlusSign && LA580_20<=Comma)||LA580_20==LessThanSign||LA580_20==QuestionMark||LA580_20==VerticalLine) ) {s = 28;}

                         
                        input.seek(index580_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA580_18 = input.LA(1);

                         
                        int index580_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_18==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA580_18==EOF||LA580_18==Ampersand||LA580_18==RightParenthesis||(LA580_18>=PlusSign && LA580_18<=Comma)||LA580_18==LessThanSign||LA580_18==QuestionMark||LA580_18==VerticalLine) ) {s = 28;}

                         
                        input.seek(index580_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA580_1 = input.LA(1);

                         
                        int index580_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_1==EOF||LA580_1==Ampersand||LA580_1==RightParenthesis||(LA580_1>=PlusSign && LA580_1<=Comma)||LA580_1==FullStop||LA580_1==LessThanSign||LA580_1==QuestionMark||LA580_1==VerticalLine) ) {s = 28;}

                        else if ( (LA580_1==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index580_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA580_16 = input.LA(1);

                         
                        int index580_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_16==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA580_16==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index580_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA580_12 = input.LA(1);

                         
                        int index580_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_12==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA580_12==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index580_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA580_14 = input.LA(1);

                         
                        int index580_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA580_14==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA580_14==EOF||LA580_14==Ampersand||LA580_14==RightParenthesis||(LA580_14>=PlusSign && LA580_14<=Comma)||LA580_14==LessThanSign||LA580_14==QuestionMark||LA580_14==VerticalLine) ) {s = 28;}

                         
                        input.seek(index580_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 580, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_355s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_355 = unpackEncodedStringArray(dfa_355s);

    class DFA585 extends DFA {

        public DFA585(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 585;
            this.eot = dfa_338;
            this.eof = dfa_339;
            this.min = dfa_340;
            this.max = dfa_341;
            this.accept = dfa_342;
            this.special = dfa_343;
            this.transition = dfa_355;
        }
        public String getDescription() {
            return "15320:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA585_1 = input.LA(1);

                         
                        int index585_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index585_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 585, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA587 extends DFA {

        public DFA587(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 587;
            this.eot = dfa_338;
            this.eof = dfa_339;
            this.min = dfa_340;
            this.max = dfa_341;
            this.accept = dfa_342;
            this.special = dfa_343;
            this.transition = dfa_355;
        }
        public String getDescription() {
            return "15388:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA587_1 = input.LA(1);

                         
                        int index587_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index587_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 587, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_356s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_357s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_358s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_359s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_360s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_356 = DFA.unpackEncodedStringToUnsignedChars(dfa_356s);
    static final char[] dfa_357 = DFA.unpackEncodedStringToUnsignedChars(dfa_357s);
    static final short[] dfa_358 = DFA.unpackEncodedString(dfa_358s);
    static final short[] dfa_359 = DFA.unpackEncodedString(dfa_359s);
    static final short[][] dfa_360 = unpackEncodedStringArray(dfa_360s);

    class DFA591 extends DFA {

        public DFA591(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 591;
            this.eot = dfa_225;
            this.eof = dfa_225;
            this.min = dfa_356;
            this.max = dfa_357;
            this.accept = dfa_358;
            this.special = dfa_359;
            this.transition = dfa_360;
        }
        public String getDescription() {
            return "15441:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA591_0 = input.LA(1);

                         
                        int index591_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA591_0==Get) ) {s = 1;}

                        else if ( (LA591_0==Set) ) {s = 2;}

                        else if ( (LA591_0==LessThanSign) && (synpred318_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA591_0>=4 && LA591_0<=126 && (s=T2S.M_50[LA591_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index591_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA591_1 = input.LA(1);

                         
                        int index591_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA591_2 = input.LA(1);

                         
                        int index591_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSXParser()) ) {s = 67;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA591_4 = input.LA(1);

                         
                        int index591_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA591_5 = input.LA(1);

                         
                        int index591_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA591_6 = input.LA(1);

                         
                        int index591_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA591_7 = input.LA(1);

                         
                        int index591_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA591_8 = input.LA(1);

                         
                        int index591_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA591_9 = input.LA(1);

                         
                        int index591_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA591_10 = input.LA(1);

                         
                        int index591_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA591_11 = input.LA(1);

                         
                        int index591_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA591_12 = input.LA(1);

                         
                        int index591_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA591_13 = input.LA(1);

                         
                        int index591_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA591_14 = input.LA(1);

                         
                        int index591_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA591_15 = input.LA(1);

                         
                        int index591_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA591_16 = input.LA(1);

                         
                        int index591_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA591_17 = input.LA(1);

                         
                        int index591_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA591_18 = input.LA(1);

                         
                        int index591_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA591_19 = input.LA(1);

                         
                        int index591_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA591_20 = input.LA(1);

                         
                        int index591_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA591_21 = input.LA(1);

                         
                        int index591_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA591_22 = input.LA(1);

                         
                        int index591_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA591_23 = input.LA(1);

                         
                        int index591_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA591_24 = input.LA(1);

                         
                        int index591_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA591_25 = input.LA(1);

                         
                        int index591_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA591_26 = input.LA(1);

                         
                        int index591_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA591_27 = input.LA(1);

                         
                        int index591_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA591_28 = input.LA(1);

                         
                        int index591_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA591_29 = input.LA(1);

                         
                        int index591_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA591_30 = input.LA(1);

                         
                        int index591_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA591_31 = input.LA(1);

                         
                        int index591_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA591_32 = input.LA(1);

                         
                        int index591_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA591_33 = input.LA(1);

                         
                        int index591_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA591_34 = input.LA(1);

                         
                        int index591_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA591_35 = input.LA(1);

                         
                        int index591_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA591_36 = input.LA(1);

                         
                        int index591_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA591_37 = input.LA(1);

                         
                        int index591_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA591_38 = input.LA(1);

                         
                        int index591_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA591_39 = input.LA(1);

                         
                        int index591_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA591_40 = input.LA(1);

                         
                        int index591_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA591_41 = input.LA(1);

                         
                        int index591_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA591_42 = input.LA(1);

                         
                        int index591_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA591_43 = input.LA(1);

                         
                        int index591_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA591_44 = input.LA(1);

                         
                        int index591_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA591_45 = input.LA(1);

                         
                        int index591_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA591_46 = input.LA(1);

                         
                        int index591_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA591_47 = input.LA(1);

                         
                        int index591_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA591_48 = input.LA(1);

                         
                        int index591_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA591_49 = input.LA(1);

                         
                        int index591_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA591_50 = input.LA(1);

                         
                        int index591_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA591_51 = input.LA(1);

                         
                        int index591_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA591_52 = input.LA(1);

                         
                        int index591_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA591_53 = input.LA(1);

                         
                        int index591_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA591_54 = input.LA(1);

                         
                        int index591_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA591_55 = input.LA(1);

                         
                        int index591_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA591_56 = input.LA(1);

                         
                        int index591_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA591_57 = input.LA(1);

                         
                        int index591_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA591_58 = input.LA(1);

                         
                        int index591_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA591_59 = input.LA(1);

                         
                        int index591_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA591_60 = input.LA(1);

                         
                        int index591_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA591_61 = input.LA(1);

                         
                        int index591_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA591_62 = input.LA(1);

                         
                        int index591_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA591_63 = input.LA(1);

                         
                        int index591_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA591_64 = input.LA(1);

                         
                        int index591_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index591_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 591, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA672 extends DFA {

        public DFA672(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 672;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5775:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA674 extends DFA {

        public DFA674(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 674;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "5923:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA676 extends DFA {

        public DFA676(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 676;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5961:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA678 extends DFA {

        public DFA678(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 678;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6109:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA680 extends DFA {

        public DFA680(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 680;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6152:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA682 extends DFA {

        public DFA682(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 682;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6395:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA684 extends DFA {

        public DFA684(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 684;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6468:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA686 extends DFA {

        public DFA686(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 686;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6711:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA734 extends DFA {

        public DFA734(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 734;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 12343:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA736 extends DFA {

        public DFA736(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 736;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12347:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA740 extends DFA {

        public DFA740(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 740;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 12528:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA742 extends DFA {

        public DFA742(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 742;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12532:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA746 extends DFA {

        public DFA746(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 746;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 12811:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA748 extends DFA {

        public DFA748(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 748;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12815:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA752 extends DFA {

        public DFA752(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 752;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_303;
            this.max = dfa_304;
            this.accept = dfa_305;
            this.special = dfa_25;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "()* loopback of 13112:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA754 extends DFA {

        public DFA754(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 754;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13116:24: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x4000410800000000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000002L,0x4000400000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x000D048090000130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0020440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0000440000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002460000440000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_32;
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0000440000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x040D048895184D30L,0x4002420000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x000D048090000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 41, 36, 46, -1, 43, 47, 49, 32, -1, -1, 31, -1, -1, 53, -1, 48, 30, -1, -1, -1, 50, -1, 33, -1, 38, -1, 45, 44, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 42, -1, -1, -1, 35, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 27, 29, -1, 51, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25};
	final static int[] M_3 = { 22, 17, 20, -1, -1, 19, -1, -1, -1, -1, 15, 16, -1, -1, -1, 18, -1, 21, -1, -1, -1, -1, -1, -1, -1, 10, 9};
	final static int[] M_4 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, -1, 62, -1, -1, -1, -1, -1, -1, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_5 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_6 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_9 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_11 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_18 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 49, -1, -1, -1, 26, 10, 53, -1, -1, 28, -1, 13, -1, 18, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_19 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 49, -1, -1, -1, 25, 9, 53, -1, -1, 27, -1, 12, -1, 17, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_20 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_22 = { 14, 11, 62, 35, 5, 63, 65, 56, 21, 22, 55, 31, 23, 28, 29, 64, 54, 24, 27, 33, 66, 37, 57, 39, 6, 42, 61, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 10, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 67, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_24 = { 13, 10, 61, 34, 4, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 5, 41, 60, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 9, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_26 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_27 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_28 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_29 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, 1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_30 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_31 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 47, 8, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 10, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_32 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_33 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_34 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_35 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, -1, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_37 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_38 = { 67, 47, -1, 68, -1, -1, 33, 34, -1, 43, 35, 40, 41, -1, -1, 36, 39, 45, -1, 49, -1, 51, -1, 54, 28, -1, 29, 31, 32, -1, 61, 50, 52, -1, 56, 58, -1, 30, 38, 62, 65, 59, -1, 60, -1, -1, 57, -1, -1, -1, -1, 42, -1, 63, 48, 69, -1, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 37, 44, 46, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_41 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_42 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_45 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_46 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_47 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_50 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}