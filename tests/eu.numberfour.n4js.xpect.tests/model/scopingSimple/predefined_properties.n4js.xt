/* XPECT_SETUP eu.numberfour.n4js.tests.N4JSXpectTest END_SETUP */

var myObject : Object = new Object();
/* XPECT scope at 'myObject.|constructor' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myConstr = myObject.constructor

var myObject1 : Object = new Object();
/* XPECT scope at 'myObject1.|constructor' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
myConstr = myObject1.constructor

var myFunction : Function = function myFun(a : number, b : number) { return a + b; }
/* XPECT scope at 'myFunction.|apply' ---
	apply, arguments, bind, call, constructor, hasOwnProperty, isPrototypeOf,
	length, propertyIsEnumerable, prototype, toLocaleString, toString, valueOf
--- */
var myResult : any = myFunction.apply(null, [1, 2])

var myArray : Array<string> = new Array<string>()
/* XPECT scope at 'myArray.|concat' ---
	#iterator, concat, constructor, every, filter, forEach, hasOwnProperty,
	indexOf, isPrototypeOf, join, lastIndexOf, length, length, map, pop,
	propertyIsEnumerable, push, reduce, reduceRight, reverse, shift, slice, some, sort, splice,
	toLocaleString, toString, unshift, valueOf
--- */
var myFilledArray : Array<?> = myArray.concat("1", "2", "3")

/* XPECT scope at 'Array.|isArray' ---
	create, defineProperties, defineProperty, freeze,
	getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is, isArray, isExtensible, isFrozen,
	isSealed, keys, preventExtensions, prototype, seal
--- */
var myIsArray : boolean = Array.isArray(myFilledArray)

/* XPECT scope at 'String.|fromCharCode' ---
	create, defineProperties, defineProperty, freeze,
	fromCharCode, getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is,
	isExtensible, isFrozen, isSealed, keys, preventExtensions, prototype, seal
--- */
var myString : string = String.fromCharCode(10)
/* XPECT scope at 'myString.|charAt' ---
	#iterator, charAt, charCodeAt, concat, constructor, hasOwnProperty, indexOf,
	isPrototypeOf, lastIndexOf, length, localeCompare, match, propertyIsEnumerable,
	replace, search, slice, split, substring, toLocaleLowerCase, toLocaleString,
	toLocaleUpperCase, toLowerCase, toString, toUpperCase, trim, valueOf
--- */
var myCharacterFound : string = myString.charAt(0)

/* XPECT scope at 'myCharacterFound.|charAt' ---
	#iterator, charAt, charCodeAt, concat, constructor, hasOwnProperty, indexOf,
	isPrototypeOf, lastIndexOf, length, localeCompare, match, propertyIsEnumerable,
	replace, search, slice, split, substring, toLocaleLowerCase, toLocaleString,
	toLocaleUpperCase, toLowerCase, toString, toUpperCase, trim, valueOf
--- */
myCharacterFound = myCharacterFound.charAt(0)

/* XPECT scope at 'String.|fromCharCode' ---
create, defineProperties, defineProperty, freeze,
fromCharCode, getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is,
isExtensible, isFrozen, isSealed, keys, preventExtensions, prototype, seal
--- */
String.fromCharCode(1)

var myTrueBool : Boolean = new Boolean(true)
/* XPECT scope at 'myTrueBool.|valueOf' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myTrueBoolPrimitive : boolean = myTrueBool.valueOf()

/* XPECT scope at 'myTrueBoolPrimitive.|valueOf' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
myTrueBoolPrimitive = myTrueBoolPrimitive.valueOf()

var myMaxValue : number = Number.MAX_VALUE
/* XPECT scope at 'myMaxValue.|toFixed' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toExponential, toFixed, toLocaleString, toPrecision, toString,
	valueOf
--- */
var myFixedNumber : string = myMaxValue.toFixed()

/* XPECT scope at 'Number.|MAX_VALUE' ---
MAX_VALUE, MIN_VALUE, NEGATIVE_INFINITY, NaN, POSITIVE_INFINITY, create,
defineProperties, defineProperty, freeze, getOwnPropertyDescriptor,
getOwnPropertyNames, getPrototypeOf, is, isExtensible, isFrozen, isSealed, keys,
preventExtensions, prototype, seal
--- */
Number.MAX_VALUE

/* XPECT scope at 'Math.|abs' ---
	E, LN10, LN2, LOG10E, LOG2E, PI, SQRT1_2, SQRT2, abs, acos, asin, atan, atan2,
	ceil, cos, create, defineProperties, defineProperty, exp,
	floor, freeze, getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is,
	isExtensible, isFrozen, isSealed, keys, log, max, min, pow, preventExtensions,
	prototype, random, round, seal, sin, sqrt, tan
--- */
var myAbsNumber : number = Math.abs(1.1)

var myAbsNumberPrimitive : number = myAbsNumber.valueOf()
/* XPECT scope at 'myAbsNumberPrimitive.|toFixed' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toExponential, toFixed, toLocaleString, toPrecision, toString,
	valueOf
--- */
var myFixedNumberPrimitive : string = myAbsNumberPrimitive.toFixed()

var myDate : Date = new Date(Date.now())
/* XPECT scope at 'myDate.|getDate' ---
	constructor, getDate, getDay, getFullYear, getHours, getMilliseconds,
	getMinutes, getMonth, getSeconds, getTime, getTimezoneOffset, getUTCDate, getUTCDay,
	getUTCFullYear, getUTCHours, getUTCMilliseconds, getUTCMinutes, getUTCMonth, getUTCSeconds,
	hasOwnProperty, isPrototypeOf, propertyIsEnumerable,
	setDate, setFullYear, setHours, setMilliseconds, setMinutes, setMonth,
	setSeconds, setTime, setUTCDate, setUTCFullYear, setUTCHours, setUTCMilliseconds,
	setUTCMinutes, setUTCMonth, setUTCSeconds, toDateString, toISOString,
	toJSON, toLocaleDateString, toLocaleString, toLocaleTimeString, toString, toTimeString,
	toUTCString, valueOf
--- */
var myDateAsNumber : number = myDate.getDate()

/* XPECT scope at 'Date.|parse' ---
UTC, create, defineProperties, defineProperty, freeze,
getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is, isExtensible, isFrozen, isSealed,
keys, now, parse, preventExtensions, prototype, seal
--- */
Date.parse("04.02.2014")

var myRegexp : RegExp = new RegExp()
/* XPECT scope at 'myRegexp.|global' ---
	constructor, exec, global, hasOwnProperty, ignoreCase, isPrototypeOf,
	lastIndex, multiline, propertyIsEnumerable, source, test,
	toLocaleString, toString, valueOf
--- */
myRegexp.global

var myError : Error = new Error()
/* XPECT scope at 'myError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myErrorMessage : string = myError.message

var myEvalError : EvalError = new EvalError()
/* XPECT scope at 'myEvalError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myEvalErrorMessage : string = myEvalError.message

var myRangeError : RangeError = new RangeError()
/* XPECT scope at 'myRangeError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myRangeErrorMessage : string = myRangeError.message

var myReferenceError : ReferenceError = new ReferenceError()
/* XPECT scope at 'myReferenceError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myReferenceErrorMessage : string = myReferenceError.message

var mySyntaxError : SyntaxError = new SyntaxError()
/* XPECT scope at 'mySyntaxError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var mySyntaxErrorMessage : string = mySyntaxError.message

var myTypeError : TypeError = new TypeError()
/* XPECT scope at 'myTypeError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myTypeErrorMessage : string = myTypeError.message

var myUriError : URIError = new URIError()
/* XPECT scope at 'myUriError.|message' ---
	constructor, hasOwnProperty, isPrototypeOf, message, name,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myUriErrorMessage : string = myUriError.message

/* XPECT scope at 'JSON.|parse("bla")' ---
	create, defineProperties, defineProperty, freeze,
	getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is, isExtensible, isFrozen, isSealed,
	keys, parse, preventExtensions, prototype, seal, stringify
--- */
var myJson : any = JSON.parse("bla")
var someJson : JSON;
/* XPECT scope at 'someJson.|constructor' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
someJson.constructor

/* XPECT scope at 'JSON.|parse' ---
create, defineProperties, defineProperty, freeze,
getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is, isExtensible, isFrozen, isSealed,
keys, parse, preventExtensions, prototype, seal, stringify
--- */
JSON.parse("bla")

class MyType{}

var myTypeNamePrimitive : typeName<MyType> = "MyType"
/* XPECT scope at 'myTypeNamePrimitive.|toString' ---
	#iterator, charAt, charCodeAt, concat, constructor, hasOwnProperty, indexOf,
	isPrototypeOf, lastIndexOf, length, localeCompare, match, propertyIsEnumerable,
	replace, search, slice, split, substring, toLocaleLowerCase, toLocaleString,
	toLocaleUpperCase, toLowerCase, toString, toUpperCase, trim, valueOf
--- */
var myTypeNameStr = myTypeNamePrimitive.toString()


// make it lower case = primitive
var myPathSelectorPrimitive : pathSelector<Object> = "a/b/c[x]"
/* XPECT scope at 'myPathSelectorPrimitive.|toString' ---
	#iterator, charAt, charCodeAt, concat, constructor, hasOwnProperty, indexOf,
	isPrototypeOf, lastIndexOf, length, localeCompare, match, propertyIsEnumerable,
	replace, search, slice, split, substring, toLocaleLowerCase, toLocaleString,
	toLocaleUpperCase, toLowerCase, toString, toUpperCase, trim, valueOf
--- */
var myPathSelectorStr = myPathSelectorPrimitive.toString()


// make it lower case = primitive
var myI18NKeyPrimitive : i18nKey = "bundle.message"
/* XPECT scope at 'myI18NKeyPrimitive.|toString' ---
	#iterator, charAt, charCodeAt, concat, constructor, hasOwnProperty, indexOf,
	isPrototypeOf, lastIndexOf, length, localeCompare, match, propertyIsEnumerable,
	replace, search, slice, split, substring, toLocaleLowerCase, toLocaleString,
	toLocaleUpperCase, toLowerCase, toString, toUpperCase, trim, valueOf
--- */
var myI18NKeyStr = myI18NKeyPrimitive.toString()


var myN4Object : N4Object = new N4Object()
/* XPECT scope at 'myN4Object.|toString' ---
	constructor, hasOwnProperty, isPrototypeOf,
	propertyIsEnumerable, toLocaleString, toString, valueOf
--- */
var myN4ObjectStr = myN4Object.toString()

/* XPECT scope at 'N4Object.|isFrozen' ---
create, defineProperties, defineProperty, freeze,
getOwnPropertyDescriptor, getOwnPropertyNames, getPrototypeOf, is, isExtensible, isFrozen, isSealed,
keys, n4type, preventExtensions, prototype, seal
--- */
N4Object.isFrozen(myN4Object)

/* XPECT scope at '= |isNaN' ---
	Infinity, NaN, decodeURI, decodeURIComponent, encodeURI,
	encodeURIComponent, eval, isFinite, isNaN, parseFloat, parseInt,
	undefined, ...
--- */
var myAssignedGlobalObjectProperty : boolean = isNaN(1)

