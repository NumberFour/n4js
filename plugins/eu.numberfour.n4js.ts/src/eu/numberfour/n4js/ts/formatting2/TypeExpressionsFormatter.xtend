/*
 * generated by Xtext
 */
package eu.numberfour.n4js.ts.formatting2;

import com.google.inject.Inject
import eu.numberfour.n4js.ts.services.TypeExpressionsGrammarAccess
import eu.numberfour.n4js.ts.typeRefs.ClassifierTypeRef
import eu.numberfour.n4js.ts.typeRefs.ConstructorTypeRef
import eu.numberfour.n4js.ts.typeRefs.FunctionTypeExpression
import eu.numberfour.n4js.ts.typeRefs.IntersectionTypeExpression
import eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRef
import eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRefStructural
import eu.numberfour.n4js.ts.typeRefs.TypeArgument
import eu.numberfour.n4js.ts.typeRefs.TypeRef
import eu.numberfour.n4js.ts.typeRefs.UnionTypeExpression
import eu.numberfour.n4js.ts.typeRefs.Wildcard
import eu.numberfour.n4js.ts.types.TAnonymousFormalParameter
import eu.numberfour.n4js.ts.types.TFormalParameter
import eu.numberfour.n4js.ts.types.TStructField
import eu.numberfour.n4js.ts.types.TStructGetter
import eu.numberfour.n4js.ts.types.TStructMethod
import eu.numberfour.n4js.ts.types.TStructSetter
import eu.numberfour.n4js.ts.types.TypeVariable
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class TypeExpressionsFormatter extends AbstractFormatter2 {
	
	@Inject extension TypeExpressionsGrammarAccess

	def dispatch void format(FunctionTypeExpression functiontypeexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functiontypeexpression.getDeclaredThisType(), document);
		for (TypeVariable ownedTypeVars : functiontypeexpression.getOwnedTypeVars()) {
			format(ownedTypeVars, document);
		}
		format(functiontypeexpression.getReturnTypeRef(), document);
	}

	def dispatch void format(TAnonymousFormalParameter tanonymousformalparameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tanonymousformalparameter.getTypeRef(), document);
	}

	def dispatch void format(TFormalParameter tformalparameter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tformalparameter.getTypeRef(), document);
	}

	def dispatch void format(UnionTypeExpression uniontypeexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeRef typeRefs : uniontypeexpression.getTypeRefs()) {
			format(typeRefs, document);
		}
	}

	def dispatch void format(IntersectionTypeExpression intersectiontypeexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeRef typeRefs : intersectiontypeexpression.getTypeRefs()) {
			format(typeRefs, document);
		}
	}

	def dispatch void format(ParameterizedTypeRefStructural parameterizedtyperefstructural, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeArgument typeArgs : parameterizedtyperefstructural.getTypeArgs()) {
			format(typeArgs, document);
		}
	}

	def dispatch void format(TStructMethod tstructmethod, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeVariable typeVars : tstructmethod.getTypeVars()) {
			format(typeVars, document);
		}
		format(tstructmethod.getReturnTypeRef(), document);
	}

	def dispatch void format(TStructField tstructfield, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tstructfield.getTypeRef(), document);
	}

	def dispatch void format(TStructGetter tstructgetter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tstructgetter.getDeclaredTypeRef(), document);
	}

	def dispatch void format(TStructSetter tstructsetter, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(tstructsetter.getFpar(), document);
	}

	def dispatch void format(ParameterizedTypeRef parameterizedtyperef, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (TypeArgument typeArgs : parameterizedtyperef.getTypeArgs()) {
			format(typeArgs, document);
		}
	}

	def dispatch void format(ConstructorTypeRef constructortyperef, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(constructortyperef.getStaticTypeRef(), document);
	}

	def dispatch void format(ClassifierTypeRef classifiertyperef, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(classifiertyperef.getStaticTypeRef(), document);
	}

	def dispatch void format(Wildcard wildcard, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(wildcard.getDeclaredUpperBound(), document);
		format(wildcard.getDeclaredLowerBound(), document);
	}

	def dispatch void format(TypeVariable typevariable, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterizedTypeRef declaredUpperBounds : typevariable.getDeclaredUpperBounds()) {
			format(declaredUpperBounds, document);
		}
	}
}
