«REM»

Copyright (c) 2016 NumberFour AG.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
  NumberFour AG - Initial API and implementation

«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::emf::ecore»
«IMPORT org::eclipse::xtext::generator::parser::antlr»
«IMPORT org::eclipse::xtext::generator::parser::antlr::ex::common»
«IMPORT eu::numberfour::n4js::antlr::syntaxcoloring»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::AntlrGrammar»
«EXTENSION org::eclipse::xtext::generator::parser::antlr::ex::common::Common»
«EXTENSION org::eclipse::xtext::EcoreUtils»

«DEFINE grammar(AntlrOptions options, HighlightingFragmentHelper helper) FOR Grammar»
«FILE helper.getHighlightingParserGrammarFileName(this).asPath()+".g" SRC_GEN_UI-»
parser grammar «helper.getHighlightingParserGrammarFileName(this).toSimpleName()»;

options {
	tokenVocab=«helper.getLexerGrammarFileName(this).toSimpleName()»;
	superClass=AbstractInternalHighlightingAntlrParser;
	«IF options.backtrack-»
	backtrack=true;
	«ENDIF-»
	«IF options.memoize-»
	 memoize=true;
	«ENDIF-»
	«IF options.k>=0»
	 k=«options.k»;
	«ENDIF»
}

@header {
package «helper.getHighlightingParserGrammarFileName(this).toJavaPackage()»; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
«IF !allParserRules().allContents().typeSelect(UnorderedGroup).isEmpty && options.backtrack-»
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
«ENDIF-»
import «gaFQName()»;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;

}

@members {

«IF options.backtrack-»
/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
«ENDIF»
	private «gaSimpleName()» grammarAccess;
	 	
	public «helper.getHighlightingParserGrammarFileName(this).toSimpleName()»(TokenStream input, «gaSimpleName()» grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
	}
	
	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
	protected void promoteEOL() {} // overridden in subtype
	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
	protected void setInRegularExpression() {} // overridden in subtype
	protected void setInTemplateSegment() {} // overridden in subtype
	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re);
	}
}
«EXPAND antlrRules(options)»
«ENDFILE»
«ENDDEFINE»

«DEFINE antlrRules(AntlrOptions options) FOR Grammar»
«EXPAND rule(this, options) FOREACH allParserRules()»
«EXPAND rule(this, options) FOREACH allEnumRules()»
«ENDDEFINE»


«DEFINE rule(Grammar original, AntlrOptions options) FOR ParserRule»
«IF isCalled(original,this)»
«IF !originalElement().isDatatypeRule()»
«IF isValidEntryRule()-»
// Entry rule «entryRuleName()»
«entryRuleName()»
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
	@init { 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.originalElement().gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
	}
«ENDIF-»
	:
	«ruleName()» 
	EOF 
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»
«ENDIF-»

// Rule «originalElement().name»
«ruleName()» 
    @init {
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.originalElement().gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
    }:
    «EXPAND ebnf(original, options, true) FOR this.alternatives»
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»
«ELSE»
«IF isValidEntryRule()-»
// Entry rule «entryRuleName()»
«entryRuleName()» 
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
	@init { 
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-» 
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.originalElement().gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF-»
«ENDFOREACH-» 
		);
«ENDIF-»
	}
«ENDIF-»
	:
	«ruleName()» 
	EOF 
;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-»
«ENDIF-»

// Rule «originalElement().name»
«ruleName()» 
    @init {
«IF "REGEX_LITERAL" == originalElement().name-»
		setInRegularExpression();
«ENDIF-»
«IF "TemplateExpressionEnd" == originalElement().name-»
		setInTemplateSegment();
«ENDIF-»
«IF "Semi" == originalElement().name-»
		int marker = input.mark();
		// Promote EOL if appropriate
		promoteEOL();
«ENDIF-»
«IF definesHiddenTokens-»
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens(«FOREACH hiddenTokens AS hidden SEPARATOR ", "»"«hidden.ruleName()»"«ENDFOREACH-»);
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
		UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
«FOREACH allContents().typeSelect(UnorderedGroup) AS group ITERATOR it-»
			grammarAccess.«group.originalElement().gaRuleElementAccessor()»«IF !it.lastIteration», «ENDIF»
«ENDFOREACH-» 
		);
«ENDIF-»
    }:
   «EXPAND dataTypeEbnf(original, true) FOR this.alternatives»
    ;
«IF definesHiddenTokens || (options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty)-»
finally {
«IF definesHiddenTokens-»
	myHiddenTokenState.restore();
«ENDIF-»
«IF options.backtrack && !allContents().typeSelect(UnorderedGroup).isEmpty-»
	myUnorderedGroupState.restore();
«ENDIF-»
}
«ENDIF-» 
«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE rule(Grammar original, AntlrOptions options) FOR EnumRule»
«IF isCalled(original,this)»
// Rule «originalElement().name»
«ruleName()» 
    :
    «EXPAND ebnf(original, options, true) FOR this.alternatives»;
«ENDIF»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR EnumLiteralDeclaration-»
	«IF writeActions»«literal.originalElement().gaElementIdentifyer()»=«ENDIF»«grammar.getKeywordRuleName(literal.value)»«IF writeActions» { announce($«literal.originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }«ENDIF»
«ENDDEFINE»

«DEFINE ebnf(Grammar grammar, AntlrOptions options, boolean writeActions) FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND ebnfPredicate(grammar, options)»«EXPAND ebnf2(grammar, options, writeActions)»)«ELSE»«EXPAND ebnf2(grammar, options, writeActions)»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE ebnfPredicate(Grammar grammar, AntlrOptions options) FOR AbstractElement-»
«IF predicated() || firstSetPredicated»(«IF predicated()»«EXPAND ebnf2(grammar, options, false) FOR predicatedElement()»«ELSE»«EXPAND ebnf2(grammar, options, false) FOREACH firstSet() SEPARATOR ' | '»«ENDIF»)=>«ENDIF-»
«ENDDEFINE-»

«DEFINE dataTypeEbnf(Grammar grammar, boolean writeActions) FOR AbstractElement-»
«IF mustBeParenthesized()»(«EXPAND dataTypeEbnfPredicate(grammar)»«EXPAND dataTypeEbnf2(grammar, writeActions)»)«ELSE»«EXPAND dataTypeEbnf2(grammar, writeActions)»«ENDIF»«cardinality-»
«ENDDEFINE»

«DEFINE dataTypeEbnfPredicate(Grammar grammar) FOR AbstractElement-»
«IF predicated() || firstSetPredicated»(«IF predicated()»«EXPAND dataTypeEbnf2(grammar, false) FOR predicatedElement()»«ELSE»«EXPAND dataTypeEbnf2(grammar, false) FOREACH firstSet() SEPARATOR ' | '»«ENDIF»)=>«ENDIF-»
«ENDDEFINE-»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR Alternatives-»«EXPAND dataTypeEbnf(grammar, writeActions) FOREACH elements.reject(e | Action.isInstance(e))  SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR Group»«EXPAND dataTypeEbnf(grammar, writeActions) FOREACH elements.reject(e | Action.isInstance(e))»«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR UnorderedGroup»
«IF !writeActions-»
(«EXPAND dataTypeEbnf(grammar, writeActions) FOREACH elements.reject(e | Action.isInstance(e)) SEPARATOR '\n    |'»)*
«ELSE-»
«LET elements.reject(e | Action.isInstance(e)).reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	}
	(
		(
«FOREACH elements.reject(e | Action.isInstance(e)) AS element ITERATOR it»
			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.«originalElement().gaRuleElementAccessor()», «it.counter0»)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.«originalElement().gaRuleElementAccessor()», «it.counter0»);
	 				}
«REM»Predicate {true}=> helps to workaround an issue in the Antlr grammar processing«ENDREM»«IF true»«ENDIF-»
					({true}?=>(«EXPAND dataTypeEbnf2(grammar, writeActions) FOR element»))«IF element.isMultipleCardinality()»+«ENDIF»
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	 				}
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.«originalElement().gaRuleElementAccessor()»)}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	}
«ENDLET»
«ENDIF-»
«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR Keyword»
«IF ";" == value»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«grammar.getKeywordRuleName(value)-»«IF writeActions» { announce($«originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }«ENDIF» 
	| EOF
	| RULE_EOL
	| RULE_ML_COMMENT
	| RightCurlyBracket { forcedRewind(marker) }?
«ELSE-»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«grammar.getKeywordRuleName(value)»«IF writeActions» { announce($«originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }«ENDIF»
«ENDIF» 
«ENDDEFINE»

«DEFINE dataTypeEbnf2(Grammar grammar, boolean writeActions) FOR RuleCall-»
	«rule.ruleName()-»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR AbstractElement»ERROR «metaType.name» not matched«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR Alternatives-»«EXPAND ebnf(grammar, options, writeActions) FOREACH elements.reject(e | Action.isInstance(e)) SEPARATOR '\n    |'»«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR Group»«EXPAND ebnf(grammar, options, writeActions) FOREACH elements.reject(e | Action.isInstance(e))»«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR UnorderedGroup»
«IF !writeActions-»
(«EXPAND ebnf(grammar, options, writeActions) FOREACH elements.reject(e | Action.isInstance(e)) SEPARATOR '\n    |'»)*
«ELSE-»
«LET elements.reject(e | Action.isInstance(e)).reject(e|e.isOptionalCardinality()).size AS mandatoryContent»
(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	}
	(
		(
«FOREACH elements.reject(e | Action.isInstance(e)) AS element ITERATOR it»
			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.«originalElement().gaRuleElementAccessor()», «it.counter0»)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.«originalElement().gaRuleElementAccessor()», «it.counter0»);
	 				}
«REM»Predicate {true}=> helps to workaround an issue in the Antlr grammar processing«ENDREM»«IF true»«ENDIF-»
					({true}?=>(«EXPAND ebnf2(grammar, options, writeActions) FOR element»))«IF element.isMultipleCardinality()»+«ENDIF»
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	 				}
 				)
			)  «IF !it.lastIteration»|«ENDIF»
«ENDFOREACH»
		)«IF mandatoryContent != 0-»+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.«originalElement().gaRuleElementAccessor()»)}?«ELSE»*«ENDIF»	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.«originalElement().gaRuleElementAccessor()»);
	}
«ENDLET»
«ENDIF-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR AbstractElement-»
«ERROR "crossrefEbnf is not supported for AbstractElement"»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR Alternatives-»
	(«EXPAND crossrefEbnf(grammar, ref, writeActions) FOREACH elements.reject(e | Action.isInstance(e)) SEPARATOR '\n    |'»)
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR RuleCall-»
«EXPAND crossrefEbnf(grammar, ref, writeActions) FOR rule-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR AbstractRule-»
«ERROR "crossrefEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR ParserRule-»
«IF !originalElement().isDatatypeRule()-»
«ERROR "crossrefEbnf is not supported for ParserRule that is not a datatype rule"»
«ELSE-»
	«IF writeActions»«ref.terminal.originalElement().gaElementIdentifyer()»=«ENDIF»«ruleName()-»«IF writeActions» { announce($«ref.terminal.originalElement().gaElementIdentifyer()».start, $«ref.terminal.originalElement().gaElementIdentifyer()».stop, grammarAccess.«((Assignment)ref.eContainer()).originalElement().gaRuleElementAccessor()»); }«ENDIF»
«ENDIF-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR EnumRule-»
	«ruleName()-»
«ENDDEFINE»

«DEFINE crossrefEbnf(Grammar grammar, CrossReference ref, boolean writeActions) FOR TerminalRule-»
	«IF writeActions»«ref.terminal.originalElement().gaElementIdentifyer()»=«ENDIF»«ruleName()-»«IF writeActions» { announce($«ref.terminal.originalElement().gaElementIdentifyer()», grammarAccess.«((Assignment)ref.eContainer()).originalElement().gaRuleElementAccessor()»); }«ENDIF»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR AbstractElement-»
«EXPAND ebnf(grammar, options, writeActions)»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR Group-»
«ERROR "assignmentEbnf is not supported for Group"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR Assignment-»
«ERROR "assignmentEbnf is not supported for Assignment"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR Action-»
«ERROR "assignmentEbnf is not supported for Action"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR Alternatives-»
(
«EXPAND assignmentEbnf(grammar, assignment, options, writeActions) FOREACH elements.reject(e | Action.isInstance(e)) SEPARATOR '\n    |'»
)
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR RuleCall-»
«EXPAND assignmentEbnf(assignment, this, writeActions) FOR rule-»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call, boolean writeActions) FOR AbstractRule-»
«ERROR "assignmentEbnf is not supported for AbstractRule"»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call, boolean writeActions) FOR ParserRule-»
«IF !writeActions && "TypeRefNoTrailingLineBreak" == originalElement().name-»
	{isTypeRefNoTrailingLineBreak()}?
«ELSE-»
	«IF writeActions»«call.originalElement().gaElementIdentifyer()»=«ENDIF»«ruleName()-»«IF writeActions» { announce($«call.originalElement().gaElementIdentifyer()».start, $«call.originalElement().gaElementIdentifyer()».stop, grammarAccess.«assignment.originalElement().gaRuleElementAccessor()»); }«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call, boolean writeActions) FOR EnumRule-»
	«ruleName()-»
«ENDDEFINE»

«DEFINE assignmentEbnf(Assignment assignment, RuleCall call, boolean writeActions) FOR TerminalRule-»
	«IF writeActions»«call.originalElement().gaElementIdentifyer()»=«ENDIF»«ruleName()-»«IF writeActions» { announce($«call.originalElement().gaElementIdentifyer()», grammarAccess.«assignment.originalElement().gaRuleElementAccessor()»); }«ENDIF»
«ENDDEFINE»

«DEFINE assignmentEbnf(Grammar grammar, Assignment assignment, AntlrOptions options, boolean writeActions) FOR CrossReference-»
	«EXPAND crossrefEbnf(grammar, this, writeActions) FOR terminal-»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR Assignment»
(
«EXPAND assignmentEbnf(grammar, this, options, writeActions) FOR terminal»
)
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR CrossReference»
«ERROR "ebnf2(Grammar grammar) is not supported for CrossReference"»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR Action»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR Keyword»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«grammar.getKeywordRuleName(value)-» «IF "return" == value || "throw" == value || "break" == value || "continue" == value-»
	«IF writeActions» { promoteEOL(); announce($«originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }«ENDIF-»
«ELSE-»
	«IF writeActions» { announce($«originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE ebnf2(Grammar grammar, AntlrOptions options, boolean writeActions) FOR RuleCall-»
«IF "TypeRef" == rule.originalElement().name && AbstractRule.isInstance(eContainer().originalElement()) && "TypeRefNoTrailingLineBreak" == ((AbstractRule)eContainer().originalElement()).name-»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«rule.ruleName()-» {
		if (hasDisallowedEOL()) {
			if (state.backtracking>0) {
				state.failed=true;
			}
		}
		«IF writeActions-»
			announce($«originalElement().gaElementIdentifyer()».start, $«originalElement().gaElementIdentifyer()».stop, grammarAccess.«originalElement().gaRuleElementAccessor()»);
		«ENDIF-»
	}
«ELSEIF "LeftHandSideExpression" == rule.originalElement().name»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«rule.ruleName()-»
	«IF writeActions-»
	{
		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
			promoteEOL();
		}
		announce($«originalElement().gaElementIdentifyer()».start, $«originalElement().gaElementIdentifyer()».stop, grammarAccess.«originalElement().gaRuleElementAccessor()»);
	}
	«ENDIF-»
«ELSE-»
	«IF writeActions»«originalElement().gaElementIdentifyer()»=«ENDIF»«rule.ruleName()-»«IF TerminalRule.isInstance(rule) && writeActions-»
		{ announce($«originalElement().gaElementIdentifyer()», grammarAccess.«originalElement().gaRuleElementAccessor()»); }
	«ELSEIF ParserRule.isInstance(rule) && writeActions-»
		{ announce($«originalElement().gaElementIdentifyer()».start, $«originalElement().gaElementIdentifyer()».stop, grammarAccess.«originalElement().gaRuleElementAccessor()»); }
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»
