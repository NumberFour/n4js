/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
import NodeTestOptions from "n4/mangel/runner/node/NodeTestOptions"
import NodeTestCLI from "n4/mangel/runner/node/NodeTestCLI"
import * as child_process from "child_process"
import * as lib_fs from "fs"
import * as os from "os"
import * as lib_path from "path"
import * as n4mf_parser from "n4mf-parser"
import * as n4js_cli from "n4js-cli";
 
const MANIFEST_N4MF = "manifest.n4mf";

export function requireResolve(id): string {
    let sysObj: any+ = System;
    return sysObj["_nodeRequire"]["resolve"](id) as string;
}

export public async function createTempDir(): string {
    let prefix = lib_path.join(os.tmpdir(), "n4js-mangelhaft-");
    return await lib_fs.mkdtemp(prefix);
}

function detectProjectDir(npm: string): string {
    let p = requireResolve(`${npm}/package.json`);
    return p.substring(0, p.lastIndexOf(lib_path.sep));
}

// TODO watch for https://github.com/NumberFour/n4js/issues/167
// Remove deps from package.json then.
const coreLibs = [
    "n4js.lang",
    "eu.numberfour.mangelhaft.assert"];

const rtLibs = [
    "n4js-runtime-es2015",
    "n4js-runtime-esnext",
    "n4js-runtime-fetch",
    "n4js-runtime-n4",
    "n4js-runtime-v8",
    "n4js-runtime-node"];

// TODO: should be extracted via manifest files:
const mangelhaftNpmDeps = ["json-cycle"];
const targetPlatformStub = {
  "location" : [
    {
      "config": {
      },
      "projects": {
      },
      "repoType": "npm"
    }
  ]
};

export default public class NodeTestAPI {
    /**
     * Executes a test run (might include compilation) with the given set of test options.
     */
    public static async exec(options: NodeTestOptions): void {
        let idToManifest = new Map<string, Object>(),
            prjToManifest = new Map<string, Object>();

        async function addManifest(dir: string): void {
            let manifest = await n4mf_parser.readManifest(lib_path.join(dir, MANIFEST_N4MF));
            idToManifest.set(manifest["ProjectId"] as string, manifest);
            prjToManifest.set(dir, manifest);
        }

        for (let dir of (options.projects || [])) {
            await addManifest(dir);
        }

        for (let dir of (options.scan || [])) {
            for (let p of await lib_fs.readdir(dir)) {
                let prj = lib_path.join(dir, p),
                    stat = await lib_fs.stat(prj);

                if (stat.isDirectory() && lib_fs.existsSync(lib_path.join(prj, MANIFEST_N4MF))) {
                    await addManifest(prj);
                }
            }
        }

        // TODO remove once fixed https://github.com/NumberFour/n4js/issues/167
        for (let id of coreLibs) {
            if (!idToManifest.has(id)) {
                await addManifest(detectProjectDir(id));
            }
        }

        if (options.debug) {
            console.log("projects:", Array.from(prjToManifest.keys()));
        }

        if (options.compile) { // call n4jsc
            let n4jscTempDir = await createTempDir();
            
            if (options.testCatalog.startsWith("http://")) { // use temp file
                options.testCatalog = lib_path.join(n4jscTempDir, "catalog.json");
            }

            if (!options.targetPlatformInstallLocation) {
                options.targetPlatformInstallLocation = lib_path.join(n4jscTempDir, "targetPlatform-install");
            }

            // Mixin mangelhaft dependencies, otherwise these are not found when compiling (e.g. assert)
            // TODO: remove once fixed
            let targetPlatform: Object+ = targetPlatformStub;
            if (options.targetPlatformFile) {
                targetPlatform = JSON.parse(await lib_fs.readFile(options.targetPlatformFile, { encoding: "UTF-8" })) as Object;
            }
            let npmDeps = targetPlatform.location[0].projects as Object;
            for (let dep of mangelhaftNpmDeps) {
                if (!npmDeps[dep]) {
                    npmDeps[dep] = {};
                }
            }
            options.targetPlatformFile = lib_path.join(n4jscTempDir, "targetplatform.n4tp");
            await lib_fs.writeFile(options.targetPlatformFile, JSON.stringify(targetPlatform, null, 2), { encoding: "UTF-8" });

            // add rtlib projects just for compilation, unless given:
            let projects = Array.from(prjToManifest.keys()).concat(
                rtLibs.filter(id => !idToManifest.has(id))
                      .map(detectProjectDir));

            await n4js_cli.n4jsc({
                t: "projects",
                testCatalogFile: options.testCatalog,
                targetPlatformFile: options.targetPlatformFile,
                targetPlatformInstallLocation: options.targetPlatformInstallLocation,
                targetPlatformSkipInstall: options.targetPlatformSkipInstall,
                nodejsLocation: process.execArgv[0],
                debug: options.debug
            }, projects);
        }
        
        // spawn test runner process:
        // collect all output paths:
        let nodePath: Array<string> = [];
        for (let [dir, manifest] of prjToManifest) {
            let out = manifest["Output"] as string;
            if (out) {
                nodePath.push(lib_path.join(dir, manifest["Output"] as string, "es"));
            }
        }
        if (options.targetPlatformInstallLocation) {
            nodePath.push(lib_path.join(options.targetPlatformInstallLocation, "node_modules"));
        }
        if (process.env.NODE_PATH) { // append existing
            nodePath.push(process.env.NODE_PATH as string);
        }

        let env = Object.assign({}, process.env, {
            NODE_PATH: nodePath.join(lib_path.delimiter)
        });

        let n4type = this.n4type,
            consoleTestRunner = n4type.fqn.split(".");
        consoleTestRunner.pop();
        consoleTestRunner.pop();
        consoleTestRunner.unshift(n4type.origin);
        consoleTestRunner.push("NodeTestRunner:");

        let args = NodeTestCLI.toCommandLine(options);
        args.unshift(consoleTestRunner.join("/"));

        (options.define || []).forEach(kv => {
            let pair = kv.split("=");
            env["N4JS_RT_" + pair[0].replace(/-/g, "_")] = (pair[1] || "");
        });

        if (options.debug) {
            console.log("env:", env);
            console.log("args:", args);
        }

        await new Promise<any, any>((resolve, reject) => {
            let execArgv = process.execArgv.slice();
            if (options.inspect) {
                execArgv.push(`--inspect=${options.inspect}`, "--debug-brk");
            }
            child_process.fork(requireResolve("n4js-node/n4js-cli"), args, {
                execArgv: execArgv,
                env: env
            }).on("close", code => {
                if (code === 0) {
                    resolve(code);
                } else {
                    reject(code);
                }
            });
        });
    }
}

/* -*- mode: typescript;-*- */