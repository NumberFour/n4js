/*
 * generated by Xtext
 */
package eu.numberfour.n4js.formatting2;

import com.google.inject.Inject;
import eu.numberfour.n4js.n4JS.AbstractCaseClause;
import eu.numberfour.n4js.n4JS.AdditiveExpression;
import eu.numberfour.n4js.n4JS.Annotation;
import eu.numberfour.n4js.n4JS.AnnotationArgument;
import eu.numberfour.n4js.n4JS.AnnotationList;
import eu.numberfour.n4js.n4JS.Argument;
import eu.numberfour.n4js.n4JS.ArrayElement;
import eu.numberfour.n4js.n4JS.ArrayLiteral;
import eu.numberfour.n4js.n4JS.ArrowFunction;
import eu.numberfour.n4js.n4JS.AssignmentExpression;
import eu.numberfour.n4js.n4JS.AwaitExpression;
import eu.numberfour.n4js.n4JS.BinaryBitwiseExpression;
import eu.numberfour.n4js.n4JS.BinaryLogicalExpression;
import eu.numberfour.n4js.n4JS.BindingElement;
import eu.numberfour.n4js.n4JS.BindingPattern;
import eu.numberfour.n4js.n4JS.BindingProperty;
import eu.numberfour.n4js.n4JS.Block;
import eu.numberfour.n4js.n4JS.CaseClause;
import eu.numberfour.n4js.n4JS.CastExpression;
import eu.numberfour.n4js.n4JS.CatchBlock;
import eu.numberfour.n4js.n4JS.CatchVariable;
import eu.numberfour.n4js.n4JS.CommaExpression;
import eu.numberfour.n4js.n4JS.ConditionalExpression;
import eu.numberfour.n4js.n4JS.DefaultClause;
import eu.numberfour.n4js.n4JS.DoStatement;
import eu.numberfour.n4js.n4JS.EqualityExpression;
import eu.numberfour.n4js.n4JS.ExportDeclaration;
import eu.numberfour.n4js.n4JS.ExportSpecifier;
import eu.numberfour.n4js.n4JS.ExportedVariableBinding;
import eu.numberfour.n4js.n4JS.ExportedVariableStatement;
import eu.numberfour.n4js.n4JS.Expression;
import eu.numberfour.n4js.n4JS.ExpressionAnnotationList;
import eu.numberfour.n4js.n4JS.ExpressionStatement;
import eu.numberfour.n4js.n4JS.FinallyBlock;
import eu.numberfour.n4js.n4JS.ForStatement;
import eu.numberfour.n4js.n4JS.FormalParameter;
import eu.numberfour.n4js.n4JS.FunctionDeclaration;
import eu.numberfour.n4js.n4JS.FunctionExpression;
import eu.numberfour.n4js.n4JS.IfStatement;
import eu.numberfour.n4js.n4JS.ImportDeclaration;
import eu.numberfour.n4js.n4JS.IndexedAccessExpression;
import eu.numberfour.n4js.n4JS.LabelledStatement;
import eu.numberfour.n4js.n4JS.LiteralAnnotationArgument;
import eu.numberfour.n4js.n4JS.MultiplicativeExpression;
import eu.numberfour.n4js.n4JS.N4ClassDeclaration;
import eu.numberfour.n4js.n4JS.N4ClassExpression;
import eu.numberfour.n4js.n4JS.N4EnumDeclaration;
import eu.numberfour.n4js.n4JS.N4EnumLiteral;
import eu.numberfour.n4js.n4JS.N4FieldDeclaration;
import eu.numberfour.n4js.n4JS.N4GetterDeclaration;
import eu.numberfour.n4js.n4JS.N4InterfaceDeclaration;
import eu.numberfour.n4js.n4JS.N4MemberAnnotationList;
import eu.numberfour.n4js.n4JS.N4MethodDeclaration;
import eu.numberfour.n4js.n4JS.N4SetterDeclaration;
import eu.numberfour.n4js.n4JS.NewExpression;
import eu.numberfour.n4js.n4JS.ObjectLiteral;
import eu.numberfour.n4js.n4JS.ParameterizedCallExpression;
import eu.numberfour.n4js.n4JS.ParameterizedPropertyAccessExpression;
import eu.numberfour.n4js.n4JS.ParenExpression;
import eu.numberfour.n4js.n4JS.PostfixExpression;
import eu.numberfour.n4js.n4JS.PromisifyExpression;
import eu.numberfour.n4js.n4JS.PropertyAssignment;
import eu.numberfour.n4js.n4JS.PropertyAssignmentAnnotationList;
import eu.numberfour.n4js.n4JS.PropertyGetterDeclaration;
import eu.numberfour.n4js.n4JS.PropertyMethodDeclaration;
import eu.numberfour.n4js.n4JS.PropertyNameValuePair;
import eu.numberfour.n4js.n4JS.PropertyNameValuePairSingleName;
import eu.numberfour.n4js.n4JS.PropertySetterDeclaration;
import eu.numberfour.n4js.n4JS.RelationalExpression;
import eu.numberfour.n4js.n4JS.ReturnStatement;
import eu.numberfour.n4js.n4JS.Script;
import eu.numberfour.n4js.n4JS.ScriptElement;
import eu.numberfour.n4js.n4JS.ShiftExpression;
import eu.numberfour.n4js.n4JS.Statement;
import eu.numberfour.n4js.n4JS.SwitchStatement;
import eu.numberfour.n4js.n4JS.TaggedTemplateString;
import eu.numberfour.n4js.n4JS.TemplateLiteral;
import eu.numberfour.n4js.n4JS.ThrowStatement;
import eu.numberfour.n4js.n4JS.TryStatement;
import eu.numberfour.n4js.n4JS.TypeRefAnnotationArgument;
import eu.numberfour.n4js.n4JS.UnaryExpression;
import eu.numberfour.n4js.n4JS.VariableBinding;
import eu.numberfour.n4js.n4JS.VariableDeclarationOrBinding;
import eu.numberfour.n4js.n4JS.VariableStatement;
import eu.numberfour.n4js.n4JS.WhileStatement;
import eu.numberfour.n4js.n4JS.WithStatement;
import eu.numberfour.n4js.n4JS.YieldExpression;
import eu.numberfour.n4js.services.N4JSGrammarAccess;
import eu.numberfour.n4js.ts.formatting2.TypeExpressionsFormatter;
import eu.numberfour.n4js.ts.typeRefs.FunctionTypeExpression;
import eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRef;
import eu.numberfour.n4js.ts.types.TFormalParameter;
import eu.numberfour.n4js.ts.types.TypeVariable;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class N4JSFormatter extends TypeExpressionsFormatter {
	
	@Inject extension N4JSGrammarAccess

	def dispatch void format(Script script, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : script.getAnnotations()) {
			format(annotations, document);
		}
		for (ScriptElement scriptElements : script.getScriptElements()) {
			format(scriptElements, document);
		}
	}

	def dispatch void format(N4EnumDeclaration n4enumdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (N4EnumLiteral literals : n4enumdeclaration.getLiterals()) {
			format(literals, document);
		}
		format(n4enumdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(ExportSpecifier exportspecifier, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(exportspecifier.getElement(), document);
	}

	def dispatch void format(ExportedVariableStatement exportedvariablestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (VariableDeclarationOrBinding varDeclsOrBindings : exportedvariablestatement.getVarDeclsOrBindings()) {
			format(varDeclsOrBindings, document);
		}
		format(exportedvariablestatement.getAnnotationList(), document);
	}

	override dispatch void format(FunctionTypeExpression functiontypeexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functiontypeexpression.getDeclaredThisType(), document);
		for (TypeVariable ownedTypeVars : functiontypeexpression.getOwnedTypeVars()) {
			format(ownedTypeVars, document);
		}
		for (TFormalParameter fpars : functiontypeexpression.getFpars()) {
			format(fpars, document);
		}
		format(functiontypeexpression.getReturnTypeRef(), document);
	}

	def dispatch void format(FunctionDeclaration functiondeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functiondeclaration.getAnnotationList(), document);
	}

	def dispatch void format(ArrowFunction arrowfunction, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (FormalParameter fpars : arrowfunction.getFpars()) {
			format(fpars, document);
		}
		format(arrowfunction.getReturnTypeRef(), document);
		format(arrowfunction.getBody(), document);
	}

	def dispatch void format(Block block, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Statement statements : block.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(ExpressionStatement expressionstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(expressionstatement.getExpression(), document);
	}

	override dispatch void format(TypeVariable typevariable, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ParameterizedTypeRef declaredUpperBounds : typevariable.getDeclaredUpperBounds()) {
			format(declaredUpperBounds, document);
		}
	}

	def dispatch void format(VariableStatement variablestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (VariableDeclarationOrBinding varDeclsOrBindings : variablestatement.getVarDeclsOrBindings()) {
			format(varDeclsOrBindings, document);
		}
	}

	def dispatch void format(VariableBinding variablebinding, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(variablebinding.getPattern(), document);
		format(variablebinding.getExpression(), document);
	}

	def dispatch void format(ExportedVariableBinding exportedvariablebinding, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(exportedvariablebinding.getPattern(), document);
		format(exportedvariablebinding.getExpression(), document);
	}

	def dispatch void format(IfStatement ifstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(ifstatement.getExpression(), document);
		format(ifstatement.getIfStmt(), document);
		format(ifstatement.getElseStmt(), document);
	}

	def dispatch void format(DoStatement dostatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(dostatement.getStatement(), document);
		format(dostatement.getExpression(), document);
	}

	def dispatch void format(WhileStatement whilestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(whilestatement.getExpression(), document);
		format(whilestatement.getStatement(), document);
	}

	def dispatch void format(ForStatement forstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(forstatement.getInitExpr(), document);
		format(forstatement.getExpression(), document);
		for (VariableDeclarationOrBinding varDeclsOrBindings : forstatement.getVarDeclsOrBindings()) {
			format(varDeclsOrBindings, document);
		}
		format(forstatement.getUpdateExpr(), document);
		format(forstatement.getStatement(), document);
	}

	def dispatch void format(ReturnStatement returnstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(returnstatement.getExpression(), document);
	}

	def dispatch void format(WithStatement withstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(withstatement.getExpression(), document);
		format(withstatement.getStatement(), document);
	}

	def dispatch void format(SwitchStatement switchstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(switchstatement.getExpression(), document);
		for (AbstractCaseClause cases : switchstatement.getCases()) {
			format(cases, document);
		}
	}

	def dispatch void format(CaseClause caseclause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(caseclause.getExpression(), document);
		for (Statement statements : caseclause.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(DefaultClause defaultclause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Statement statements : defaultclause.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(LabelledStatement labelledstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(labelledstatement.getStatement(), document);
	}

	def dispatch void format(ThrowStatement throwstatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(throwstatement.getExpression(), document);
	}

	def dispatch void format(TryStatement trystatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(trystatement.getBlock(), document);
		format(trystatement.getCatch(), document);
		format(trystatement.getFinally(), document);
	}

	def dispatch void format(CatchBlock catchblock, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(catchblock.getCatchVariable(), document);
		format(catchblock.getBlock(), document);
	}

	def dispatch void format(CatchVariable catchvariable, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(catchvariable.getBindingPattern(), document);
	}

	def dispatch void format(FinallyBlock finallyblock, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(finallyblock.getBlock(), document);
	}

	def dispatch void format(ParenExpression parenexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parenexpression.getExpression(), document);
	}

	def dispatch void format(ArrayLiteral arrayliteral, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ArrayElement elements : arrayliteral.getElements()) {
			format(elements, document);
		}
	}

	def dispatch void format(ArrayElement arrayelement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(arrayelement.getExpression(), document);
	}

	def dispatch void format(ObjectLiteral objectliteral, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (PropertyAssignment propertyAssignments : objectliteral.getPropertyAssignments()) {
			format(propertyAssignments, document);
		}
	}

	def dispatch void format(PropertyNameValuePair propertynamevaluepair, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(propertynamevaluepair.getDeclaredTypeRef(), document);
		format(propertynamevaluepair.getExpression(), document);
		format(propertynamevaluepair.getAnnotationList(), document);
	}

	def dispatch void format(PropertyGetterDeclaration propertygetterdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(propertygetterdeclaration.getBody(), document);
		format(propertygetterdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(PropertySetterDeclaration propertysetterdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(propertysetterdeclaration.getFpar(), document);
		format(propertysetterdeclaration.getBody(), document);
		format(propertysetterdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(PropertyMethodDeclaration propertymethoddeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(propertymethoddeclaration.getReturnTypeRef(), document);
		format(propertymethoddeclaration.getAnnotationList(), document);
	}

	def dispatch void format(PropertyNameValuePairSingleName propertynamevaluepairsinglename, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(propertynamevaluepairsinglename.getDeclaredTypeRef(), document);
		format(propertynamevaluepairsinglename.getIdentifierRef(), document);
		format(propertynamevaluepairsinglename.getExpression(), document);
		format(propertynamevaluepairsinglename.getAnnotationList(), document);
	}

	def dispatch void format(ParameterizedCallExpression parameterizedcallexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterizedcallexpression.getTarget(), document);
	}

	def dispatch void format(TaggedTemplateString taggedtemplatestring, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(taggedtemplatestring.getTemplate(), document);
		format(taggedtemplatestring.getTarget(), document);
	}

	def dispatch void format(Argument argument, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(argument.getExpression(), document);
	}

	def dispatch void format(NewExpression newexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(newexpression.getCallee(), document);
	}

	def dispatch void format(CastExpression castexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(castexpression.getTargetTypeRef(), document);
		format(castexpression.getExpression(), document);
	}

	def dispatch void format(UnaryExpression unaryexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(unaryexpression.getExpression(), document);
	}

	def dispatch void format(MultiplicativeExpression multiplicativeexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(multiplicativeexpression.getRhs(), document);
		format(multiplicativeexpression.getLhs(), document);
	}

	def dispatch void format(AdditiveExpression additiveexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(additiveexpression.getRhs(), document);
		format(additiveexpression.getLhs(), document);
	}

	def dispatch void format(ShiftExpression shiftexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(shiftexpression.getRhs(), document);
		format(shiftexpression.getLhs(), document);
	}

	def dispatch void format(RelationalExpression relationalexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(relationalexpression.getRhs(), document);
		format(relationalexpression.getLhs(), document);
	}

	def dispatch void format(EqualityExpression equalityexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(equalityexpression.getRhs(), document);
		format(equalityexpression.getLhs(), document);
	}

	def dispatch void format(BinaryBitwiseExpression binarybitwiseexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(binarybitwiseexpression.getRhs(), document);
		format(binarybitwiseexpression.getLhs(), document);
	}

	def dispatch void format(BinaryLogicalExpression binarylogicalexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(binarylogicalexpression.getRhs(), document);
		format(binarylogicalexpression.getLhs(), document);
	}

	def dispatch void format(ConditionalExpression conditionalexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(conditionalexpression.getTrueExpression(), document);
		format(conditionalexpression.getFalseExpression(), document);
		format(conditionalexpression.getExpression(), document);
	}

	def dispatch void format(AssignmentExpression assignmentexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(assignmentexpression.getRhs(), document);
		format(assignmentexpression.getLhs(), document);
	}

	def dispatch void format(YieldExpression yieldexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(yieldexpression.getExpression(), document);
	}

	def dispatch void format(AwaitExpression awaitexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(awaitexpression.getExpression(), document);
	}

	def dispatch void format(PromisifyExpression promisifyexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(promisifyexpression.getExpression(), document);
	}

	def dispatch void format(CommaExpression commaexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression exprs : commaexpression.getExprs()) {
			format(exprs, document);
		}
	}

	def dispatch void format(TemplateLiteral templateliteral, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Expression segments : templateliteral.getSegments()) {
			format(segments, document);
		}
	}

	def dispatch void format(Annotation annotation, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AnnotationArgument args : annotation.getArgs()) {
			format(args, document);
		}
	}

	def dispatch void format(LiteralAnnotationArgument literalannotationargument, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(literalannotationargument.getLiteral(), document);
	}

	def dispatch void format(TypeRefAnnotationArgument typerefannotationargument, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(typerefannotationargument.getTypeRef(), document);
	}

	def dispatch void format(AnnotationList annotationlist, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : annotationlist.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(ExpressionAnnotationList expressionannotationlist, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : expressionannotationlist.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(PropertyAssignmentAnnotationList propertyassignmentannotationlist, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : propertyassignmentannotationlist.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(N4MemberAnnotationList n4memberannotationlist, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : n4memberannotationlist.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(N4GetterDeclaration n4getterdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4getterdeclaration.getBody(), document);
		format(n4getterdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(N4SetterDeclaration n4setterdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4setterdeclaration.getFpar(), document);
		format(n4setterdeclaration.getBody(), document);
		format(n4setterdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(BindingPattern bindingpattern, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (BindingProperty properties : bindingpattern.getProperties()) {
			format(properties, document);
		}
		for (BindingElement elements : bindingpattern.getElements()) {
			format(elements, document);
		}
	}

	def dispatch void format(BindingProperty bindingproperty, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(bindingproperty.getValue(), document);
	}

	def dispatch void format(BindingElement bindingelement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(bindingelement.getVarDecl(), document);
		format(bindingelement.getNestedPattern(), document);
		format(bindingelement.getExpression(), document);
	}

	def dispatch void format(ExportDeclaration exportdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(exportdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(ImportDeclaration importdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(importdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(N4ClassDeclaration n4classdeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4classdeclaration.getAnnotationList(), document);
	}

	def dispatch void format(N4InterfaceDeclaration n4interfacedeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4interfacedeclaration.getAnnotationList(), document);
	}

	def dispatch void format(N4ClassExpression n4classexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4classexpression.getAnnotationList(), document);
	}

	def dispatch void format(FunctionExpression functionexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(functionexpression.getAnnotationList(), document);
	}

	def dispatch void format(IndexedAccessExpression indexedaccessexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(indexedaccessexpression.getTarget(), document);
	}

	def dispatch void format(ParameterizedPropertyAccessExpression parameterizedpropertyaccessexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(parameterizedpropertyaccessexpression.getTarget(), document);
	}

	def dispatch void format(PostfixExpression postfixexpression, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(postfixexpression.getExpression(), document);
	}

	def dispatch void format(N4MethodDeclaration n4methoddeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4methoddeclaration.getAnnotationList(), document);
	}

	def dispatch void format(N4FieldDeclaration n4fielddeclaration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		format(n4fielddeclaration.getAnnotationList(), document);
	}
}
