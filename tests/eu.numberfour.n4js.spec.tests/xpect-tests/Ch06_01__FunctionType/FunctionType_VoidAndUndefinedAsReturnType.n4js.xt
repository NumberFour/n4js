/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */


function fooUndef(p: ()=>undefined ) {}
function fooVoid(p: ()=>void ) {}


// XPECT noerrors -->
fooUndef( ()=>{} )
// XPECT noerrors -->
fooUndef( ():void=>{} )
// XPECT noerrors -->
fooUndef( ()=>{ return undefined; } ) // note: this case only works because the type of the function expression is here inferred to ()=>undefined instead of ()=>any (see 3rd counter example below!)
// XPECT noerrors -->
fooUndef( ():undefined=>{ return undefined; } )


// XPECT noerrors -->
fooVoid( ()=>{} )
// XPECT noerrors -->
fooVoid( ():void=>{} )
// XPECT noerrors -->
fooVoid( ()=>{ return undefined; } )
// XPECT noerrors -->
fooVoid( ():undefined=>{ return undefined; } )



// important counter-examples:

// XPECT errors --> "{function():string} is not a subtype of {function():undefined}." at "():string => {return '';}"
fooUndef( ():string => {return '';} )

// XPECT errors --> "{function():string?} is not a subtype of {function():undefined}." at "():string? => {return '';}"
fooUndef( ():string? => {return '';} )

let fn = ()=>{ return undefined; }; // now the type of the function expression will be inferred to ()=>any
// XPECT errors --> "{function():any} is not a subtype of {function():undefined}." at "fn"
fooUndef( fn );

