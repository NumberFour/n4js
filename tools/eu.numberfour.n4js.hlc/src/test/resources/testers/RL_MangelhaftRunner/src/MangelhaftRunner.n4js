
//convenience imports just to get types and validations right
import { ITestReporter } from "ITestReporter"
import { ITestController } from "ITestController"

//convenience function
var loadModule = Function("name", "return n4.$requireSync(name);");

var marker = ">>>"
console.log(marker, 'runtime library MangelhaftRunner called');

/*Generic Mangelhaft Runner
 * This is generic mangelhaft runner that can be called on different environments,
 * e.g. NodeJS, Chrome, PahntomJS, WebView.....
 * It does not matter in which environment this gets executed, 
 * it only matters that invoking environment passes correct data
 */
export public function callMangelhaft(reportersTypes : Array<type{ITestReporter}>, data : Array<Object>) {
	
	/*Create instances of the reporters
	 * All passed reporters must adhere to the same API (interface),
	 * at this point we don't care we don't care from were they came from,
	 * or what concrete types they are, we just need to create their instances
	 * to pass them later to the TestController.
	 */
	var reporters : Array<ITestReporter> = [];
	reportersTypes.forEach(function(arg) {
		var ctor = arg as constructor{Object};
		reporters.push((new ctor() as ITestReporter));
	});
	console.log(marker, "created reporters instances");
	
	/*Create TestController
	 * Now that we have all data needed to run Mangelhaft,
	 * we load TestController (entry point to the Mangelhaft)
	 * and we trigger it with all data that needs to be provided
	 */
	var tcCTOR = (loadModule("Mangelhaft/TestController"))['TestController'] as constructor{Object};
	var testController : ITestController = new tcCTOR({reporters:reporters, testData:data}) as ITestController;
	testController.runTests();
}