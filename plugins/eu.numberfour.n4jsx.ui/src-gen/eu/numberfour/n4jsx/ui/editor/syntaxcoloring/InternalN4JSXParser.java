package eu.numberfour.n4jsx.ui.editor.syntaxcoloring; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4jsx.services.N4JSXGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSXParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSXParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSXParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSXParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSXParser.g"; }




    	private N4JSXGrammarAccess grammarAccess;
    	 	
    	public InternalN4JSXParser(TokenStream input, N4JSXGrammarAccess grammarAccess) {
    		this(input);
    		this.grammarAccess = grammarAccess;
    	}
    	
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleIDLScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIDLScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleIDLScript() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;



            
        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getIDLScriptAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getIDLScriptAccess().getScriptElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryExpression_return retval = new InternalN4JSXParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSXParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.ruleParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSXParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_13 = null;



            
        try {
            {
            int alt3=14;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_13=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_13!=null?((Token)JSXElementParserRuleCall_13.start):null), (JSXElementParserRuleCall_13!=null?((Token)JSXElementParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PrimaryExpression_return retval = new InternalN4JSXParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSXParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSXParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSXParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall_13 = null;



            
        try {
            {
            int alt4=14;
            alt4 = dfa4.predict(input);
            switch (alt4) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_13=ruleJSXElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_13!=null?((Token)JSXElementParserRuleCall_13.start):null), (JSXElementParserRuleCall_13!=null?((Token)JSXElementParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_13()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElement_return retval = new InternalN4JSXParser.ruleJSXElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleJSXAttributes_return JSXAttributesParserRuleCall_2 = null;

        InternalN4JSXParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;

        InternalN4JSXParser.ruleJSXClosingElement_return JSXClosingElementParserRuleCall_3_0_2 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_6);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_7);
            JSXAttributesParserRuleCall_2=ruleJSXAttributes();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.start):null), (JSXAttributesParserRuleCall_2!=null?((Token)JSXAttributesParserRuleCall_2.stop):null), grammarAccess.getJSXElementAccess().getJSXAttributesParserRuleCall_2()); 
            }
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==GreaterThanSign) ) {
                alt6=1;
            }
            else if ( (LA6_0==Solidus) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0()); 
                    }
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==LessThanSign) ) {
                            int LA5_1 = input.LA(2);

                            if ( ((LA5_1>=Intersection && LA5_1<=Implements)||(LA5_1>=Promisify && LA5_1<=Abstract)||LA5_1==External||(LA5_1>=Private && LA5_1<=Project)||LA5_1==Public||LA5_1==Static||LA5_1==Target||(LA5_1>=Async && LA5_1<=Await)||LA5_1==Union||(LA5_1>=Yield && LA5_1<=This)||LA5_1==From||LA5_1==Type||(LA5_1>=Get && LA5_1<=Let)||(LA5_1>=Out && LA5_1<=Set)||LA5_1==As||LA5_1==Of||LA5_1==RULE_IDENTIFIER) ) {
                                alt5=1;
                            }


                        }


                        switch (alt5) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_8);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    JSXClosingElementParserRuleCall_3_0_2=ruleJSXClosingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.start):null), (JSXClosingElementParserRuleCall_3_0_2!=null?((Token)JSXClosingElementParserRuleCall_3_0_2.stop):null), grammarAccess.getJSXElementAccess().getJSXClosingElementParserRuleCall_3_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0()); 
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXClosingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXClosingElement_return ruleJSXClosingElement() throws RecognitionException {
        InternalN4JSXParser.ruleJSXClosingElement_return retval = new InternalN4JSXParser.ruleJSXClosingElement_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token SolidusKeyword_1=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_10); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getJSXClosingElementAccess().getLessThanSignKeyword_0()); 
            }
            SolidusKeyword_1=(Token)match(input,Solidus,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SolidusKeyword_1, grammarAccess.getJSXClosingElementAccess().getSolidusKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_9);
            JsxClosingNameJSXElementNameParserRuleCall_2_0=ruleJSXElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_2_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_2_0.stop):null), grammarAccess.getJSXClosingElementAccess().getJsxClosingNameAssignment_2()); 
            }

            }


            }

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getJSXClosingElementAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSXParser.ruleJSXChild_return retval = new InternalN4JSXParser.ruleJSXChild_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElement_return JSXElementParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            JSXElementParserRuleCall=ruleJSXElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((JSXElementParserRuleCall!=null?((Token)JSXElementParserRuleCall.start):null), (JSXElementParserRuleCall!=null?((Token)JSXElementParserRuleCall.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementName_return retval = new InternalN4JSXParser.ruleJSXElementName_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSXParser.ruleJSXElementNameExpression_return retval = new InternalN4JSXParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_11);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==FullStop) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_11);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleJSXAttributes_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttributes_return ruleJSXAttributes() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttributes_return retval = new InternalN4JSXParser.ruleJSXAttributes_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_0 = null;



            
        try {
            {
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( ((LA8_0>=Intersection && LA8_0<=With)||(LA8_0>=For && LA8_0<=Var)||(LA8_0>=As && LA8_0<=Of)||LA8_0==LeftCurlyBracket||LA8_0==RULE_IDENTIFIER) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_12);
            	    JsxAttributesJSXAttributeParserRuleCall_0=ruleJSXAttribute();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributesAccess().getJsxAttributesAssignment()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXAttribute_return retval = new InternalN4JSXParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;

        InternalN4JSXParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;



            
        try {
            {
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==LeftCurlyBracket) ) {
                alt9=1;
            }
            else if ( ((LA9_0>=Intersection && LA9_0<=With)||(LA9_0>=For && LA9_0<=Var)||(LA9_0>=As && LA9_0<=Of)||LA9_0==RULE_IDENTIFIER) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSXParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0()); 
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSXParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSXParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        Token LeftCurlyBracketKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_2_1_2=null;
        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_0_0_1.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_17); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1()); 
            }
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==RULE_STRING) ) {
                alt10=1;
            }
            else if ( (LA10_0==LeftCurlyBracket) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    JsxAttributeValueStringLiteralParserRuleCall_2_0_0=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JsxAttributeValueStringLiteralParserRuleCall_2_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_2_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_2_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_2_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_2_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_2_1_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_2_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_2_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_2_1_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_2_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_2_1_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_2_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleScriptElement_return retval = new InternalN4JSXParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;



            
        try {
            {
            int alt11=7;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSXParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_18);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt24=5;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( ((LA12_0>=Protected && LA12_0<=Abstract)||LA12_0==External||(LA12_0>=Private && LA12_0<=Project)||LA12_0==Public||LA12_0==Static||LA12_0==Const) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt21=2;
                    alt21 = dfa21.predict(input);
                    switch (alt21) {
                        case 1 :
                            {
                            {
                            loop13:
                            do {
                                int alt13=2;
                                int LA13_0 = input.LA(1);

                                if ( ((LA13_0>=Protected && LA13_0<=Abstract)||LA13_0==External||(LA13_0>=Private && LA13_0<=Project)||LA13_0==Public||LA13_0==Static||LA13_0==Const) ) {
                                    alt13=1;
                                }


                                switch (alt13) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop13;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2()); 
                            }
                            int alt14=2;
                            int LA14_0 = input.LA(1);

                            if ( (LA14_0==Tilde) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4()); 
                            }

                            }


                            }
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( (LA15_0==LessThanSign) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt16=2;
                            int LA16_0 = input.LA(1);

                            if ( (LA16_0==Implements||LA16_0==Extends) ) {
                                alt16=1;
                            }
                            switch (alt16) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop17:
                            do {
                                int alt17=2;
                                int LA17_0 = input.LA(1);

                                if ( ((LA17_0>=Protected && LA17_0<=Abstract)||LA17_0==External||(LA17_0>=Private && LA17_0<=Project)||LA17_0==Public||LA17_0==Static||LA17_0==Const) ) {
                                    alt17=1;
                                }


                                switch (alt17) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop17;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2()); 
                            }
                            int alt18=2;
                            int LA18_0 = input.LA(1);

                            if ( (LA18_0==Tilde) ) {
                                alt18=1;
                            }
                            switch (alt18) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4()); 
                            }

                            }


                            }
                            int alt19=2;
                            int LA19_0 = input.LA(1);

                            if ( (LA19_0==LessThanSign) ) {
                                alt19=1;
                            }
                            switch (alt19) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt20=2;
                            int LA20_0 = input.LA(1);

                            if ( (LA20_0==Implements||LA20_0==Extends) ) {
                                alt20=1;
                            }
                            switch (alt20) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( ((LA22_0>=Protected && LA22_0<=Abstract)||LA22_0==External||(LA22_0>=Private && LA22_0<=Project)||LA22_0==Public||LA22_0==Static||LA22_0==Const) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5()); 
                    }

                    }


                    }
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==Comma) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariables_return retval = new InternalN4JSXParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1()); 
            }

            }


            }
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==Comma) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclaration_return retval = new InternalN4JSXParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleExportDeclarationImpl_return retval = new InternalN4JSXParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;



            
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_30); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0()); 
            }
            int alt28=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt28=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt28=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt28=3;
                }
                break;
            case Default:
                {
                alt28=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }

            switch (alt28) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_31); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_32);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==From) && (synpred10_InternalN4JSXParser())) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_32);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_34); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0()); 
                    }

                    }


                    }
                    int alt27=2;
                    alt27 = dfa27.predict(input);
                    switch (alt27) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_32);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportFromClause_return retval = new InternalN4JSXParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSXParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;



            
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSXParser.ruleExportClause_return retval = new InternalN4JSXParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0()); 
            }
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=Intersection && LA31_0<=Implements)||(LA31_0>=Promisify && LA31_0<=Abstract)||LA31_0==External||(LA31_0>=Private && LA31_0<=Project)||LA31_0==Public||LA31_0==Static||LA31_0==Target||(LA31_0>=Async && LA31_0<=Await)||LA31_0==Union||(LA31_0>=Yield && LA31_0<=This)||LA31_0==From||LA31_0==Type||(LA31_0>=Get && LA31_0<=Let)||(LA31_0>=Out && LA31_0<=Set)||LA31_0==As||LA31_0==Of||LA31_0==RULE_IDENTIFIER) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0()); 
                    }

                    }


                    }
                    loop29:
                    do {
                        int alt29=2;
                        int LA29_0 = input.LA(1);

                        if ( (LA29_0==Comma) ) {
                            int LA29_1 = input.LA(2);

                            if ( ((LA29_1>=Intersection && LA29_1<=Implements)||(LA29_1>=Promisify && LA29_1<=Abstract)||LA29_1==External||(LA29_1>=Private && LA29_1<=Project)||LA29_1==Public||LA29_1==Static||LA29_1==Target||(LA29_1>=Async && LA29_1<=Await)||LA29_1==Union||(LA29_1>=Yield && LA29_1<=This)||LA29_1==From||LA29_1==Type||(LA29_1>=Get && LA29_1<=Let)||(LA29_1>=Out && LA29_1<=Set)||LA29_1==As||LA29_1==Of||LA29_1==RULE_IDENTIFIER) ) {
                                alt29=1;
                            }


                        }


                        switch (alt29) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_5); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==Comma) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleExportSpecifier_return retval = new InternalN4JSXParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_37);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0()); 
            }

            }


            }
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==As) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleExportableElement_return retval = new InternalN4JSXParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;



            
        try {
            {
            int alt33=6;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSXParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSXParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_39);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt48=4;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( ((LA34_0>=Protected && LA34_0<=Abstract)||LA34_0==External||(LA34_0>=Private && LA34_0<=Project)||LA34_0==Public||LA34_0==Static||LA34_0==Const) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_19);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);

                    pushFollow(FOLLOW_19);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop35:
                    do {
                        int alt35=2;
                        alt35 = dfa35.predict(input);
                        switch (alt35) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_40);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_41);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3()); 
                    }

                    }


                    }
                    loop36:
                    do {
                        int alt36=2;
                        int LA36_0 = input.LA(1);

                        if ( (LA36_0==Comma) ) {
                            alt36=1;
                        }


                        switch (alt36) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_42);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop36;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt45=2;
                    alt45 = dfa45.predict(input);
                    switch (alt45) {
                        case 1 :
                            {
                            {
                            loop37:
                            do {
                                int alt37=2;
                                int LA37_0 = input.LA(1);

                                if ( ((LA37_0>=Protected && LA37_0<=Abstract)||LA37_0==External||(LA37_0>=Private && LA37_0<=Project)||LA37_0==Public||LA37_0==Static||LA37_0==Const) ) {
                                    alt37=1;
                                }


                                switch (alt37) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_20);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop37;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2()); 
                            }
                            int alt38=2;
                            int LA38_0 = input.LA(1);

                            if ( (LA38_0==Tilde) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4()); 
                            }

                            }


                            }
                            int alt39=2;
                            int LA39_0 = input.LA(1);

                            if ( (LA39_0==LessThanSign) ) {
                                alt39=1;
                            }
                            switch (alt39) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);

                            if ( (LA40_0==Implements||LA40_0==Extends) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop41:
                            do {
                                int alt41=2;
                                int LA41_0 = input.LA(1);

                                if ( ((LA41_0>=Protected && LA41_0<=Abstract)||LA41_0==External||(LA41_0>=Private && LA41_0<=Project)||LA41_0==Public||LA41_0==Static||LA41_0==Const) ) {
                                    alt41=1;
                                }


                                switch (alt41) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_23);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop41;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_21); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2()); 
                            }
                            int alt42=2;
                            int LA42_0 = input.LA(1);

                            if ( (LA42_0==Tilde) ) {
                                alt42=1;
                            }
                            switch (alt42) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_5);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4()); 
                            }

                            }


                            }
                            int alt43=2;
                            int LA43_0 = input.LA(1);

                            if ( (LA43_0==LessThanSign) ) {
                                alt43=1;
                            }
                            switch (alt43) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt44=2;
                            int LA44_0 = input.LA(1);

                            if ( (LA44_0==Implements||LA44_0==Extends) ) {
                                alt44=1;
                            }
                            switch (alt44) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_22);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( ((LA46_0>=Protected && LA46_0<=Abstract)||LA46_0==External||(LA46_0>=Private && LA46_0<=Project)||LA46_0==Public||LA46_0==Static||LA46_0==Const) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_24);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop46;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5()); 
                    }

                    }


                    }
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==Comma) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclaration_return retval = new InternalN4JSXParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleImportDeclarationImpl_return retval = new InternalN4JSXParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSXParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0()); 
            }
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( ((LA49_0>=Intersection && LA49_0<=Implements)||(LA49_0>=Promisify && LA49_0<=Abstract)||LA49_0==External||(LA49_0>=Private && LA49_0<=Project)||LA49_0==Public||LA49_0==Static||LA49_0==Target||(LA49_0>=Async && LA49_0<=Await)||LA49_0==Union||(LA49_0>=Yield && LA49_0<=This)||LA49_0==From||LA49_0==Type||(LA49_0>=Get && LA49_0<=Let)||(LA49_0>=Out && LA49_0<=Set)||LA49_0==As||LA49_0==Of||LA49_0==Asterisk||LA49_0==LeftCurlyBracket||LA49_0==RULE_IDENTIFIER) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    pushFollow(FOLLOW_31);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_32);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSXParser.ruleImportClause_return retval = new InternalN4JSXParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSXParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;



            
        try {
            {
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Abstract)||LA51_0==External||(LA51_0>=Private && LA51_0<=Project)||LA51_0==Public||LA51_0==Static||LA51_0==Target||(LA51_0>=Async && LA51_0<=Await)||LA51_0==Union||(LA51_0>=Yield && LA51_0<=This)||LA51_0==From||LA51_0==Type||(LA51_0>=Get && LA51_0<=Let)||(LA51_0>=Out && LA51_0<=Set)||LA51_0==As||LA51_0==Of||LA51_0==RULE_IDENTIFIER) ) {
                alt51=1;
            }
            else if ( (LA51_0==Asterisk||LA51_0==LeftCurlyBracket) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0()); 
                    }

                    }


                    }
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==Comma) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_45); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0()); 
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSXParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( (LA55_0==LeftCurlyBracket) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0()); 
                    }
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( ((LA54_0>=Intersection && LA54_0<=With)||(LA54_0>=For && LA54_0<=Var)||(LA54_0>=As && LA54_0<=Of)||LA54_0==RULE_IDENTIFIER) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_27);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==Comma) ) {
                                    int LA52_1 = input.LA(2);

                                    if ( ((LA52_1>=Intersection && LA52_1<=With)||(LA52_1>=For && LA52_1<=Var)||(LA52_1>=As && LA52_1<=Of)||LA52_1==RULE_IDENTIFIER) ) {
                                        alt52=1;
                                    }


                                }


                                switch (alt52) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_38); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_27);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);
                            int alt53=2;
                            int LA53_0 = input.LA(1);

                            if ( (LA53_0==Comma) ) {
                                alt53=1;
                            }
                            switch (alt53) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2()); 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamedImportSpecifier_return retval = new InternalN4JSXParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_47);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0()); 
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSXParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSXParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;



            
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1()); 
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_5); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3()); 
            }

            }


            }
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==PlusSign) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSXParser.ruleModuleSpecifier_return retval = new InternalN4JSXParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionDeclaration_return retval = new InternalN4JSXParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( ((LA58_0>=Protected && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Const) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionDeclaration_return retval = new InternalN4JSXParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>=Protected && LA60_0<=Abstract)||LA60_0==External||(LA60_0>=Private && LA60_0<=Project)||LA60_0==Public||LA60_0==Static||LA60_0==Const) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_49);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==Semicolon) ) {
                int LA61_1 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt61=1;
                }
            }
            else if ( (LA61_0==EOF) && (synpred22_InternalN4JSXParser())) {
                alt61=1;
            }
            else if ( (LA61_0==RULE_EOL) && (synpred22_InternalN4JSXParser())) {
                alt61=1;
            }
            else if ( (LA61_0==RULE_ML_COMMENT) && (synpred22_InternalN4JSXParser())) {
                alt61=1;
            }
            else if ( (LA61_0==RightCurlyBracket) ) {
                int LA61_5 = input.LA(2);

                if ( (synpred22_InternalN4JSXParser()) ) {
                    alt61=1;
                }
            }
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;



            
        try {
            {
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Async) ) {
                int LA62_1 = input.LA(2);

                if ( ((LA62_1>=Intersection && LA62_1<=With)||(LA62_1>=For && LA62_1<=Var)||(LA62_1>=As && LA62_1<=Of)||LA62_1==LeftSquareBracket||LA62_1==RULE_DOUBLE||LA62_1==RULE_HEX_INT||LA62_1==RULE_OCTAL_INT||LA62_1==RULE_SCIENTIFIC_INT||LA62_1==RULE_IDENTIFIER||LA62_1==RULE_STRING||LA62_1==RULE_NO_LINE_TERMINATOR||LA62_1==RULE_INT) ) {
                    alt62=1;
                }
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionImpl_return retval = new InternalN4JSXParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Asterisk) ) {
                alt63=1;
            }
            else if ( ((LA63_0>=Intersection && LA63_0<=Implements)||(LA63_0>=Promisify && LA63_0<=Abstract)||LA63_0==External||(LA63_0>=Private && LA63_0<=Project)||LA63_0==Public||LA63_0==Static||LA63_0==Target||(LA63_0>=Async && LA63_0<=Await)||LA63_0==Union||(LA63_0>=Yield && LA63_0<=This)||LA63_0==From||LA63_0==Type||(LA63_0>=Get && LA63_0<=Let)||(LA63_0>=Out && LA63_0<=Set)||LA63_0==As||LA63_0==Of||LA63_0==LeftParenthesis||LA63_0==LessThanSign||LA63_0==RULE_IDENTIFIER) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionImpl_return retval = new InternalN4JSXParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==Asterisk) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||LA64_0==This||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==LeftParenthesis||LA64_0==LessThanSign||LA64_0==RULE_IDENTIFIER) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_FunctionImpl_return retval = new InternalN4JSXParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Asterisk) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==LeftParenthesis||LA65_0==LessThanSign||LA65_0==RULE_IDENTIFIER) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionHeader_return retval = new InternalN4JSXParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==LessThanSign) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( ((LA67_0>=Intersection && LA67_0<=Implements)||(LA67_0>=Promisify && LA67_0<=Abstract)||LA67_0==External||(LA67_0>=Private && LA67_0<=Project)||LA67_0==Public||LA67_0==Static||LA67_0==Target||(LA67_0>=Async && LA67_0<=Await)||LA67_0==Union||(LA67_0>=Yield && LA67_0<=This)||LA67_0==From||LA67_0==Type||(LA67_0>=Get && LA67_0<=Let)||(LA67_0>=Out && LA67_0<=Set)||LA67_0==As||LA67_0==Of||LA67_0==RULE_IDENTIFIER) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Colon) && (synpred23_InternalN4JSXParser())) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionHeader_return retval = new InternalN4JSXParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LessThanSign) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    pushFollow(FOLLOW_52);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( ((LA70_0>=Intersection && LA70_0<=Implements)||(LA70_0>=Promisify && LA70_0<=Abstract)||LA70_0==External||(LA70_0>=Private && LA70_0<=Project)||LA70_0==Public||LA70_0==Static||LA70_0==Target||(LA70_0>=Async && LA70_0<=Await)||LA70_0==Union||LA70_0==This||LA70_0==From||LA70_0==Type||(LA70_0>=Get && LA70_0<=Let)||(LA70_0>=Out && LA70_0<=Set)||LA70_0==As||LA70_0==Of||LA70_0==RULE_IDENTIFIER) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_52);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==Colon) && (synpred24_InternalN4JSXParser())) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionHeader_return retval = new InternalN4JSXParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==LessThanSign) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( ((LA73_0>=Intersection && LA73_0<=Implements)||(LA73_0>=Promisify && LA73_0<=Abstract)||LA73_0==External||(LA73_0>=Private && LA73_0<=Project)||LA73_0==Public||LA73_0==Static||LA73_0==Target||(LA73_0>=Async && LA73_0<=Await)||LA73_0==Union||(LA73_0>=Yield && LA73_0<=This)||LA73_0==From||LA73_0==Type||(LA73_0>=Get && LA73_0<=Let)||(LA73_0>=Out && LA73_0<=Set)||LA73_0==As||LA73_0==Of||LA73_0==RULE_IDENTIFIER) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Colon) && (synpred25_InternalN4JSXParser())) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionHeader_return retval = new InternalN4JSXParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==LessThanSign) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    pushFollow(FOLLOW_53);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=Intersection && LA76_0<=Implements)||(LA76_0>=Promisify && LA76_0<=Abstract)||LA76_0==External||(LA76_0>=Private && LA76_0<=Project)||LA76_0==Public||LA76_0==Static||LA76_0==Target||(LA76_0>=Async && LA76_0<=Await)||LA76_0==Union||LA76_0==This||LA76_0==From||LA76_0==Type||(LA76_0>=Get && LA76_0<=Let)||(LA76_0>=Out && LA76_0<=Set)||LA76_0==As||LA76_0==Of||LA76_0==RULE_IDENTIFIER) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_53);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_54);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==Colon) && (synpred26_InternalN4JSXParser())) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionBody_return retval = new InternalN4JSXParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm1_FunctionBody_return retval = new InternalN4JSXParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm2_FunctionBody_return retval = new InternalN4JSXParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSXParser.norm3_FunctionBody_return retval = new InternalN4JSXParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( ((LA80_0>=Protected && LA80_0<=Abstract)||LA80_0==External||(LA80_0>=Private && LA80_0<=Project)||LA80_0==Public||LA80_0==Static||LA80_0==Const) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            pushFollow(FOLLOW_19);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSXParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( ((LA81_0>=Protected && LA81_0<=Abstract)||LA81_0==External||(LA81_0>=Private && LA81_0<=Project)||LA81_0==Public||LA81_0==Static||LA81_0==Const) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_19);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            pushFollow(FOLLOW_50);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionExpression_return retval = new InternalN4JSXParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSXParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0()); 
            }

            }


            }

            pushFollow(FOLLOW_57);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_52); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2()); 
            }

            }


            }

            pushFollow(FOLLOW_25);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowExpression_return retval = new InternalN4JSXParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt88=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt88=1;
                }
                break;
            case Async:
                {
                int LA88_2 = input.LA(2);

                if ( (LA88_2==RULE_NO_LINE_TERMINATOR) && (synpred37_InternalN4JSXParser())) {
                    alt88=2;
                }
                else if ( (LA88_2==LeftParenthesis) && (synpred37_InternalN4JSXParser())) {
                    alt88=2;
                }
                else if ( (LA88_2==EqualsSignGreaterThanSign) ) {
                    alt88=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt88=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( ((LA83_0>=Intersection && LA83_0<=Implements)||(LA83_0>=Promisify && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Target||(LA83_0>=Async && LA83_0<=Await)||LA83_0==Union||(LA83_0>=Yield && LA83_0<=This)||LA83_0==From||LA83_0==This_1||(LA83_0>=Type && LA83_0<=Void)||LA83_0==FullStopFullStopFullStop||(LA83_0>=Get && LA83_0<=Let)||(LA83_0>=Out && LA83_0<=Set)||LA83_0==As||LA83_0==Of||(LA83_0>=QuestionMark && LA83_0<=LeftSquareBracket)||LA83_0==LeftCurlyBracket||LA83_0==Tilde||LA83_0==RULE_IDENTIFIER) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop82:
                            do {
                                int alt82=2;
                                int LA82_0 = input.LA(1);

                                if ( (LA82_0==Comma) ) {
                                    alt82=1;
                                }


                                switch (alt82) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop82;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==Colon) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( ((LA86_0>=Intersection && LA86_0<=Implements)||(LA86_0>=Promisify && LA86_0<=Abstract)||LA86_0==External||(LA86_0>=Private && LA86_0<=Project)||LA86_0==Public||LA86_0==Static||LA86_0==Target||(LA86_0>=Async && LA86_0<=Await)||LA86_0==Union||(LA86_0>=Yield && LA86_0<=This)||LA86_0==From||LA86_0==This_1||(LA86_0>=Type && LA86_0<=Void)||LA86_0==FullStopFullStopFullStop||(LA86_0>=Get && LA86_0<=Let)||(LA86_0>=Out && LA86_0<=Set)||LA86_0==As||LA86_0==Of||(LA86_0>=QuestionMark && LA86_0<=LeftSquareBracket)||LA86_0==LeftCurlyBracket||LA86_0==Tilde||LA86_0==RULE_IDENTIFIER) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop85:
                            do {
                                int alt85=2;
                                int LA85_0 = input.LA(1);

                                if ( (LA85_0==Comma) ) {
                                    alt85=1;
                                }


                                switch (alt85) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop85;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==Colon) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrowExpression_return retval = new InternalN4JSXParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt96=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt96=1;
                }
                break;
            case Async:
                {
                int LA96_2 = input.LA(2);

                if ( (LA96_2==RULE_NO_LINE_TERMINATOR) && (synpred41_InternalN4JSXParser())) {
                    alt96=2;
                }
                else if ( (LA96_2==LeftParenthesis) && (synpred41_InternalN4JSXParser())) {
                    alt96=2;
                }
                else if ( (LA96_2==EqualsSignGreaterThanSign) ) {
                    alt96=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt96=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }

            switch (alt96) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( ((LA91_0>=Intersection && LA91_0<=Implements)||(LA91_0>=Promisify && LA91_0<=Abstract)||LA91_0==External||(LA91_0>=Private && LA91_0<=Project)||LA91_0==Public||LA91_0==Static||LA91_0==Target||(LA91_0>=Async && LA91_0<=Await)||LA91_0==Union||(LA91_0>=Yield && LA91_0<=This)||LA91_0==From||LA91_0==This_1||(LA91_0>=Type && LA91_0<=Void)||LA91_0==FullStopFullStopFullStop||(LA91_0>=Get && LA91_0<=Let)||(LA91_0>=Out && LA91_0<=Set)||LA91_0==As||LA91_0==Of||(LA91_0>=QuestionMark && LA91_0<=LeftSquareBracket)||LA91_0==LeftCurlyBracket||LA91_0==Tilde||LA91_0==RULE_IDENTIFIER) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop90:
                            do {
                                int alt90=2;
                                int LA90_0 = input.LA(1);

                                if ( (LA90_0==Comma) ) {
                                    alt90=1;
                                }


                                switch (alt90) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop90;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==Colon) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( ((LA94_0>=Intersection && LA94_0<=Implements)||(LA94_0>=Promisify && LA94_0<=Abstract)||LA94_0==External||(LA94_0>=Private && LA94_0<=Project)||LA94_0==Public||LA94_0==Static||LA94_0==Target||(LA94_0>=Async && LA94_0<=Await)||LA94_0==Union||(LA94_0>=Yield && LA94_0<=This)||LA94_0==From||LA94_0==This_1||(LA94_0>=Type && LA94_0<=Void)||LA94_0==FullStopFullStopFullStop||(LA94_0>=Get && LA94_0<=Let)||(LA94_0>=Out && LA94_0<=Set)||LA94_0==As||LA94_0==Of||(LA94_0>=QuestionMark && LA94_0<=LeftSquareBracket)||LA94_0==LeftCurlyBracket||LA94_0==Tilde||LA94_0==RULE_IDENTIFIER) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop93:
                            do {
                                int alt93=2;
                                int LA93_0 = input.LA(1);

                                if ( (LA93_0==Comma) ) {
                                    alt93=1;
                                }


                                switch (alt93) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop93;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==Colon) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ArrowExpression_return retval = new InternalN4JSXParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt104=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt104=1;
                }
                break;
            case Async:
                {
                int LA104_2 = input.LA(2);

                if ( (LA104_2==RULE_NO_LINE_TERMINATOR) && (synpred45_InternalN4JSXParser())) {
                    alt104=2;
                }
                else if ( (LA104_2==LeftParenthesis) && (synpred45_InternalN4JSXParser())) {
                    alt104=2;
                }
                else if ( (LA104_2==EqualsSignGreaterThanSign) ) {
                    alt104=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt104=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( ((LA99_0>=Intersection && LA99_0<=Implements)||(LA99_0>=Promisify && LA99_0<=Abstract)||LA99_0==External||(LA99_0>=Private && LA99_0<=Project)||LA99_0==Public||LA99_0==Static||LA99_0==Target||(LA99_0>=Async && LA99_0<=Await)||LA99_0==Union||LA99_0==This||LA99_0==From||LA99_0==This_1||(LA99_0>=Type && LA99_0<=Void)||LA99_0==FullStopFullStopFullStop||(LA99_0>=Get && LA99_0<=Let)||(LA99_0>=Out && LA99_0<=Set)||LA99_0==As||LA99_0==Of||(LA99_0>=QuestionMark && LA99_0<=LeftSquareBracket)||LA99_0==LeftCurlyBracket||LA99_0==Tilde||LA99_0==RULE_IDENTIFIER) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop98:
                            do {
                                int alt98=2;
                                int LA98_0 = input.LA(1);

                                if ( (LA98_0==Comma) ) {
                                    alt98=1;
                                }


                                switch (alt98) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop98;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==Colon) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( ((LA102_0>=Intersection && LA102_0<=Implements)||(LA102_0>=Promisify && LA102_0<=Abstract)||LA102_0==External||(LA102_0>=Private && LA102_0<=Project)||LA102_0==Public||LA102_0==Static||LA102_0==Target||(LA102_0>=Async && LA102_0<=Await)||LA102_0==Union||LA102_0==This||LA102_0==From||LA102_0==This_1||(LA102_0>=Type && LA102_0<=Void)||LA102_0==FullStopFullStopFullStop||(LA102_0>=Get && LA102_0<=Let)||(LA102_0>=Out && LA102_0<=Set)||LA102_0==As||LA102_0==Of||(LA102_0>=QuestionMark && LA102_0<=LeftSquareBracket)||LA102_0==LeftCurlyBracket||LA102_0==Tilde||LA102_0==RULE_IDENTIFIER) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop101:
                            do {
                                int alt101=2;
                                int LA101_0 = input.LA(1);

                                if ( (LA101_0==Comma) ) {
                                    alt101=1;
                                }


                                switch (alt101) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop101;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==Colon) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ArrowExpression_return retval = new InternalN4JSXParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSXParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt112=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt112=1;
                }
                break;
            case Async:
                {
                int LA112_2 = input.LA(2);

                if ( (LA112_2==RULE_NO_LINE_TERMINATOR) && (synpred49_InternalN4JSXParser())) {
                    alt112=2;
                }
                else if ( (LA112_2==LeftParenthesis) && (synpred49_InternalN4JSXParser())) {
                    alt112=2;
                }
                else if ( (LA112_2==EqualsSignGreaterThanSign) ) {
                    alt112=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 112, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt112=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }

            switch (alt112) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( ((LA107_0>=Intersection && LA107_0<=Implements)||(LA107_0>=Promisify && LA107_0<=Abstract)||LA107_0==External||(LA107_0>=Private && LA107_0<=Project)||LA107_0==Public||LA107_0==Static||LA107_0==Target||(LA107_0>=Async && LA107_0<=Await)||LA107_0==Union||LA107_0==This||LA107_0==From||LA107_0==This_1||(LA107_0>=Type && LA107_0<=Void)||LA107_0==FullStopFullStopFullStop||(LA107_0>=Get && LA107_0<=Let)||(LA107_0>=Out && LA107_0<=Set)||LA107_0==As||LA107_0==Of||(LA107_0>=QuestionMark && LA107_0<=LeftSquareBracket)||LA107_0==LeftCurlyBracket||LA107_0==Tilde||LA107_0==RULE_IDENTIFIER) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop106:
                            do {
                                int alt106=2;
                                int LA106_0 = input.LA(1);

                                if ( (LA106_0==Comma) ) {
                                    alt106=1;
                                }


                                switch (alt106) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop106;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Colon) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_64);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( ((LA110_0>=Intersection && LA110_0<=Implements)||(LA110_0>=Promisify && LA110_0<=Abstract)||LA110_0==External||(LA110_0>=Private && LA110_0<=Project)||LA110_0==Public||LA110_0==Static||LA110_0==Target||(LA110_0>=Async && LA110_0<=Await)||LA110_0==Union||LA110_0==This||LA110_0==From||LA110_0==This_1||(LA110_0>=Type && LA110_0<=Void)||LA110_0==FullStopFullStopFullStop||(LA110_0>=Get && LA110_0<=Let)||(LA110_0>=Out && LA110_0<=Set)||LA110_0==As||LA110_0==Of||(LA110_0>=QuestionMark && LA110_0<=LeftSquareBracket)||LA110_0==LeftCurlyBracket||LA110_0==Tilde||LA110_0==RULE_IDENTIFIER) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop109:
                            do {
                                int alt109=2;
                                int LA109_0 = input.LA(1);

                                if ( (LA109_0==Comma) ) {
                                    alt109=1;
                                }


                                switch (alt109) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop109;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==Colon) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_62);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.ruleStrictFormalParameters_return retval = new InternalN4JSXParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=Intersection && LA115_0<=Implements)||(LA115_0>=Promisify && LA115_0<=Abstract)||LA115_0==External||(LA115_0>=Private && LA115_0<=Project)||LA115_0==Public||LA115_0==Static||LA115_0==Target||(LA115_0>=Async && LA115_0<=Await)||LA115_0==Union||(LA115_0>=Yield && LA115_0<=This)||LA115_0==From||LA115_0==This_1||(LA115_0>=Type && LA115_0<=Void)||LA115_0==FullStopFullStopFullStop||(LA115_0>=Get && LA115_0<=Let)||(LA115_0>=Out && LA115_0<=Set)||LA115_0==As||LA115_0==Of||(LA115_0>=QuestionMark && LA115_0<=LeftSquareBracket)||LA115_0==LeftCurlyBracket||LA115_0==Tilde||LA115_0==RULE_IDENTIFIER) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==Comma) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSXParser.norm1_StrictFormalParameters_return retval = new InternalN4JSXParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=Intersection && LA117_0<=Implements)||(LA117_0>=Promisify && LA117_0<=Abstract)||LA117_0==External||(LA117_0>=Private && LA117_0<=Project)||LA117_0==Public||LA117_0==Static||LA117_0==Target||(LA117_0>=Async && LA117_0<=Await)||LA117_0==Union||LA117_0==This||LA117_0==From||LA117_0==This_1||(LA117_0>=Type && LA117_0<=Void)||LA117_0==FullStopFullStopFullStop||(LA117_0>=Get && LA117_0<=Let)||(LA117_0>=Out && LA117_0<=Set)||LA117_0==As||LA117_0==Of||(LA117_0>=QuestionMark && LA117_0<=LeftSquareBracket)||LA117_0==LeftCurlyBracket||LA117_0==Tilde||LA117_0==RULE_IDENTIFIER) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==Comma) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_59);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSXParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.ruleBlockMinusBraces_return retval = new InternalN4JSXParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( ((LA118_0>=Intersection && LA118_0<=Implements)||(LA118_0>=Promisify && LA118_0<=Function)||(LA118_0>=Private && LA118_0<=Delete)||(LA118_0>=Public && LA118_0<=Break)||(LA118_0>=Class && LA118_0<=This)||(LA118_0>=From && LA118_0<=With)||(LA118_0>=For && LA118_0<=Var)||LA118_0==PlusSignPlusSign||LA118_0==HyphenMinusHyphenMinus||LA118_0==SolidusEqualsSign||(LA118_0>=As && LA118_0<=If)||LA118_0==Of||LA118_0==ExclamationMark||LA118_0==LeftParenthesis||LA118_0==PlusSign||LA118_0==HyphenMinus||LA118_0==Solidus||(LA118_0>=Semicolon && LA118_0<=LessThanSign)||(LA118_0>=CommercialAt && LA118_0<=LeftSquareBracket)||LA118_0==LeftCurlyBracket||LA118_0==Tilde||LA118_0==RULE_DOUBLE||(LA118_0>=RULE_HEX_INT && LA118_0<=RULE_LEGACY_OCTAL_INT)||LA118_0==RULE_SCIENTIFIC_INT||LA118_0==RULE_IDENTIFIER||LA118_0==RULE_STRING||(LA118_0>=RULE_TEMPLATE_HEAD && LA118_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA118_0==RULE_INT) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSXParser.norm1_BlockMinusBraces_return retval = new InternalN4JSXParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( ((LA119_0>=Intersection && LA119_0<=Implements)||(LA119_0>=Promisify && LA119_0<=Function)||(LA119_0>=Private && LA119_0<=Delete)||(LA119_0>=Public && LA119_0<=Break)||(LA119_0>=Class && LA119_0<=This)||(LA119_0>=From && LA119_0<=With)||(LA119_0>=For && LA119_0<=Var)||LA119_0==PlusSignPlusSign||LA119_0==HyphenMinusHyphenMinus||LA119_0==SolidusEqualsSign||(LA119_0>=As && LA119_0<=If)||LA119_0==Of||LA119_0==ExclamationMark||LA119_0==LeftParenthesis||LA119_0==PlusSign||LA119_0==HyphenMinus||LA119_0==Solidus||(LA119_0>=Semicolon && LA119_0<=LessThanSign)||(LA119_0>=CommercialAt && LA119_0<=LeftSquareBracket)||LA119_0==LeftCurlyBracket||LA119_0==Tilde||LA119_0==RULE_DOUBLE||(LA119_0>=RULE_HEX_INT && LA119_0<=RULE_LEGACY_OCTAL_INT)||LA119_0==RULE_SCIENTIFIC_INT||LA119_0==RULE_IDENTIFIER||LA119_0==RULE_STRING||(LA119_0>=RULE_TEMPLATE_HEAD && LA119_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA119_0==RULE_INT) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSXParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSXParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSXParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedExpression_return retval = new InternalN4JSXParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==Class) ) {
                alt122=1;
            }
            else if ( (LA122_0==Function||LA122_0==Async) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( ((LA120_0>=Intersection && LA120_0<=Constructor)||(LA120_0>=Promisify && LA120_0<=Abstract)||LA120_0==External||(LA120_0>=Private && LA120_0<=Project)||LA120_0==Public||LA120_0==Static||LA120_0==Target||(LA120_0>=Async && LA120_0<=Await)||LA120_0==Union||(LA120_0>=Yield && LA120_0<=This)||LA120_0==From||LA120_0==Type||(LA120_0>=Get && LA120_0<=Let)||(LA120_0>=Out && LA120_0<=Set)||LA120_0==As||LA120_0==Of||LA120_0==RULE_IDENTIFIER) ) {
                        alt120=1;
                    }
                    else if ( (LA120_0==Implements) ) {
                        int LA120_2 = input.LA(2);

                        if ( (LA120_2==Implements||LA120_2==Extends||LA120_2==LeftCurlyBracket) ) {
                            alt120=1;
                        }
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_22);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==Implements||LA121_0==Extends) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_22);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedExpression_return retval = new InternalN4JSXParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSXParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSXParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_66);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==Class) ) {
                alt125=1;
            }
            else if ( (LA125_0==Function||LA125_0==Async) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( ((LA123_0>=Intersection && LA123_0<=Constructor)||(LA123_0>=Promisify && LA123_0<=Abstract)||LA123_0==External||(LA123_0>=Private && LA123_0<=Project)||LA123_0==Public||LA123_0==Static||LA123_0==Target||(LA123_0>=Async && LA123_0<=Await)||LA123_0==Union||LA123_0==This||LA123_0==From||LA123_0==Type||(LA123_0>=Get && LA123_0<=Let)||(LA123_0>=Out && LA123_0<=Set)||LA123_0==As||LA123_0==Of||LA123_0==RULE_IDENTIFIER) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==Implements) ) {
                        int LA123_2 = input.LA(2);

                        if ( (LA123_2==Implements||LA123_2==Extends||LA123_2==LeftCurlyBracket) ) {
                            alt123=1;
                        }
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_68);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Implements||LA124_0==Extends) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_68);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSXParser.ruleTypeVariable_return retval = new InternalN4JSXParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt126=3;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==Out) ) {
                alt126=1;
            }
            else if ( (LA126_0==In) ) {
                alt126=2;
            }
            switch (alt126) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1()); 
            }

            }


            }
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==Extends) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleFormalParameter_return retval = new InternalN4JSXParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSXParser.norm1_FormalParameter_return retval = new InternalN4JSXParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElementFragment_return retval = new InternalN4JSXParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==CommercialAt) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_71);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);
                    int alt129=2;
                    alt129 = dfa129.predict(input);
                    switch (alt129) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_72);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==FullStopFullStopFullStop) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==Colon) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_70);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==EqualsSign) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElementFragment_return retval = new InternalN4JSXParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==CommercialAt) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_71);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);
                    int alt135=2;
                    alt135 = dfa135.predict(input);
                    switch (alt135) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_72);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==FullStopFullStopFullStop) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_5); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3()); 
                    }

                    }


                    }
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==Colon) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_70);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==EqualsSign) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleColonSepTypeRef_return retval = new InternalN4JSXParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;



            
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSXParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSXParser.ruleBlock_return retval = new InternalN4JSXParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( ((LA140_0>=Intersection && LA140_0<=Implements)||(LA140_0>=Promisify && LA140_0<=Function)||(LA140_0>=Private && LA140_0<=Delete)||(LA140_0>=Public && LA140_0<=Break)||(LA140_0>=Class && LA140_0<=This)||(LA140_0>=From && LA140_0<=With)||(LA140_0>=For && LA140_0<=Var)||LA140_0==PlusSignPlusSign||LA140_0==HyphenMinusHyphenMinus||LA140_0==SolidusEqualsSign||(LA140_0>=As && LA140_0<=If)||LA140_0==Of||LA140_0==ExclamationMark||LA140_0==LeftParenthesis||LA140_0==PlusSign||LA140_0==HyphenMinus||LA140_0==Solidus||(LA140_0>=Semicolon && LA140_0<=LessThanSign)||(LA140_0>=CommercialAt && LA140_0<=LeftSquareBracket)||LA140_0==LeftCurlyBracket||LA140_0==Tilde||LA140_0==RULE_DOUBLE||(LA140_0>=RULE_HEX_INT && LA140_0<=RULE_LEGACY_OCTAL_INT)||LA140_0==RULE_SCIENTIFIC_INT||LA140_0==RULE_IDENTIFIER||LA140_0==RULE_STRING||(LA140_0>=RULE_TEMPLATE_HEAD && LA140_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA140_0==RULE_INT) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSXParser.norm1_Block_return retval = new InternalN4JSXParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Function)||(LA141_0>=Private && LA141_0<=Delete)||(LA141_0>=Public && LA141_0<=Break)||(LA141_0>=Class && LA141_0<=This)||(LA141_0>=From && LA141_0<=With)||(LA141_0>=For && LA141_0<=Var)||LA141_0==PlusSignPlusSign||LA141_0==HyphenMinusHyphenMinus||LA141_0==SolidusEqualsSign||(LA141_0>=As && LA141_0<=If)||LA141_0==Of||LA141_0==ExclamationMark||LA141_0==LeftParenthesis||LA141_0==PlusSign||LA141_0==HyphenMinus||LA141_0==Solidus||(LA141_0>=Semicolon && LA141_0<=LessThanSign)||(LA141_0>=CommercialAt && LA141_0<=LeftSquareBracket)||LA141_0==LeftCurlyBracket||LA141_0==Tilde||LA141_0==RULE_DOUBLE||(LA141_0>=RULE_HEX_INT && LA141_0<=RULE_LEGACY_OCTAL_INT)||LA141_0==RULE_SCIENTIFIC_INT||LA141_0==RULE_IDENTIFIER||LA141_0==RULE_STRING||(LA141_0>=RULE_TEMPLATE_HEAD && LA141_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA141_0==RULE_INT) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_65);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSXParser.ruleRootStatement_return retval = new InternalN4JSXParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt142=16;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_RootStatement_return retval = new InternalN4JSXParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSXParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSXParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSXParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSXParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSXParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSXParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSXParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSXParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSXParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSXParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSXParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt143=16;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSXParser.ruleStatement_return retval = new InternalN4JSXParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt144=2;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSXParser.norm1_Statement_return retval = new InternalN4JSXParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableStatement_return retval = new InternalN4JSXParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==Comma) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableStatement_return retval = new InternalN4JSXParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==Comma) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableStatement_return retval = new InternalN4JSXParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop148:
            do {
                int alt148=2;
                alt148 = dfa148.predict(input);
                switch (alt148) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_40);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_41);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_42);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3()); 
            }

            }


            }
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==Comma) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_42);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==LeftCurlyBracket) && (synpred67_InternalN4JSXParser())) {
                alt150=1;
            }
            else if ( (LA150_0==LeftSquareBracket) && (synpred67_InternalN4JSXParser())) {
                alt150=1;
            }
            else if ( ((LA150_0>=Intersection && LA150_0<=Implements)||(LA150_0>=Promisify && LA150_0<=Abstract)||LA150_0==External||(LA150_0>=Private && LA150_0<=Project)||LA150_0==Public||LA150_0==Static||LA150_0==Target||(LA150_0>=Async && LA150_0<=Await)||LA150_0==Union||(LA150_0>=Yield && LA150_0<=This)||LA150_0==From||LA150_0==Type||(LA150_0>=Get && LA150_0<=Let)||(LA150_0>=Out && LA150_0<=Set)||LA150_0==As||LA150_0==Of||LA150_0==CommercialAt||LA150_0==RULE_IDENTIFIER) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LeftCurlyBracket) && (synpred68_InternalN4JSXParser())) {
                alt151=1;
            }
            else if ( (LA151_0==LeftSquareBracket) && (synpred68_InternalN4JSXParser())) {
                alt151=1;
            }
            else if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Abstract)||LA151_0==External||(LA151_0>=Private && LA151_0<=Project)||LA151_0==Public||LA151_0==Static||LA151_0==Target||(LA151_0>=Async && LA151_0<=Await)||LA151_0==Union||(LA151_0>=Yield && LA151_0<=This)||LA151_0==From||LA151_0==Type||(LA151_0>=Get && LA151_0<=Let)||(LA151_0>=Out && LA151_0<=Set)||LA151_0==As||LA151_0==Of||LA151_0==CommercialAt||LA151_0==RULE_IDENTIFIER) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==LeftCurlyBracket) && (synpred69_InternalN4JSXParser())) {
                alt152=1;
            }
            else if ( (LA152_0==LeftSquareBracket) && (synpred69_InternalN4JSXParser())) {
                alt152=1;
            }
            else if ( ((LA152_0>=Intersection && LA152_0<=Implements)||(LA152_0>=Promisify && LA152_0<=Abstract)||LA152_0==External||(LA152_0>=Private && LA152_0<=Project)||LA152_0==Public||LA152_0==Static||LA152_0==Target||(LA152_0>=Async && LA152_0<=Await)||LA152_0==Union||LA152_0==This||LA152_0==From||LA152_0==Type||(LA152_0>=Get && LA152_0<=Let)||(LA152_0>=Out && LA152_0<=Set)||LA152_0==As||LA152_0==Of||LA152_0==CommercialAt||LA152_0==RULE_IDENTIFIER) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==LeftCurlyBracket) && (synpred70_InternalN4JSXParser())) {
                alt153=1;
            }
            else if ( (LA153_0==LeftSquareBracket) && (synpred70_InternalN4JSXParser())) {
                alt153=1;
            }
            else if ( ((LA153_0>=Intersection && LA153_0<=Implements)||(LA153_0>=Promisify && LA153_0<=Abstract)||LA153_0==External||(LA153_0>=Private && LA153_0<=Project)||LA153_0==Public||LA153_0==Static||LA153_0==Target||(LA153_0>=Async && LA153_0<=Await)||LA153_0==Union||LA153_0==This||LA153_0==From||LA153_0==Type||(LA153_0>=Get && LA153_0<=Let)||(LA153_0>=Out && LA153_0<=Set)||LA153_0==As||LA153_0==Of||LA153_0==CommercialAt||LA153_0==RULE_IDENTIFIER) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==LeftCurlyBracket) && (synpred71_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( (LA154_0==LeftSquareBracket) && (synpred71_InternalN4JSXParser())) {
                alt154=1;
            }
            else if ( ((LA154_0>=Intersection && LA154_0<=Implements)||(LA154_0>=Promisify && LA154_0<=Abstract)||LA154_0==External||(LA154_0>=Private && LA154_0<=Project)||LA154_0==Public||LA154_0==Static||LA154_0==Target||(LA154_0>=Async && LA154_0<=Await)||LA154_0==Union||(LA154_0>=Yield && LA154_0<=This)||LA154_0==From||LA154_0==Type||(LA154_0>=Get && LA154_0<=Let)||(LA154_0>=Out && LA154_0<=Set)||LA154_0==As||LA154_0==Of||LA154_0==CommercialAt||LA154_0==RULE_IDENTIFIER) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==LeftCurlyBracket) && (synpred72_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( (LA155_0==LeftSquareBracket) && (synpred72_InternalN4JSXParser())) {
                alt155=1;
            }
            else if ( ((LA155_0>=Intersection && LA155_0<=Implements)||(LA155_0>=Promisify && LA155_0<=Abstract)||LA155_0==External||(LA155_0>=Private && LA155_0<=Project)||LA155_0==Public||LA155_0==Static||LA155_0==Target||(LA155_0>=Async && LA155_0<=Await)||LA155_0==Union||LA155_0==This||LA155_0==From||LA155_0==Type||(LA155_0>=Get && LA155_0<=Let)||(LA155_0>=Out && LA155_0<=Set)||LA155_0==As||LA155_0==Of||LA155_0==CommercialAt||LA155_0==RULE_IDENTIFIER) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleVariableBinding_return retval = new InternalN4JSXParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableBinding_return retval = new InternalN4JSXParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm2_VariableBinding_return retval = new InternalN4JSXParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableBinding_return retval = new InternalN4JSXParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableBinding_return retval = new InternalN4JSXParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==EqualsSign) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableBinding_return retval = new InternalN4JSXParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==EqualsSign) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclaration_return retval = new InternalN4JSXParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclaration_return retval = new InternalN4JSXParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclaration_return retval = new InternalN4JSXParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return retval = new InternalN4JSXParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclaration_return retval = new InternalN4JSXParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return retval = new InternalN4JSXParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop160:
            do {
                int alt160=2;
                alt160 = dfa160.predict(input);
                switch (alt160) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==EqualsSign) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop162:
            do {
                int alt162=2;
                alt162 = dfa162.predict(input);
                switch (alt162) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EqualsSign) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==EqualsSign) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop166:
            do {
                int alt166=2;
                alt166 = dfa166.predict(input);
                switch (alt166) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_70);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==EqualsSign) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop168:
            do {
                int alt168=2;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==Colon) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop171:
            do {
                int alt171=2;
                alt171 = dfa171.predict(input);
                switch (alt171) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==Colon) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==EqualsSign) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop174:
            do {
                int alt174=2;
                alt174 = dfa174.predict(input);
                switch (alt174) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==Colon) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==EqualsSign) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSXParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop177:
            do {
                int alt177=2;
                alt177 = dfa177.predict(input);
                switch (alt177) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_74);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_73);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==Colon) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_70);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==EqualsSign) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSXParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LeftCurlyBracket) && (synpred89_InternalN4JSXParser())) {
                alt180=1;
            }
            else if ( (LA180_0==LeftSquareBracket) && (synpred89_InternalN4JSXParser())) {
                alt180=1;
            }
            else if ( ((LA180_0>=Intersection && LA180_0<=Implements)||(LA180_0>=Promisify && LA180_0<=Abstract)||LA180_0==External||(LA180_0>=Private && LA180_0<=Project)||LA180_0==Public||LA180_0==Static||LA180_0==Target||(LA180_0>=Async && LA180_0<=Await)||LA180_0==Union||(LA180_0>=Yield && LA180_0<=This)||LA180_0==From||LA180_0==Type||(LA180_0>=Get && LA180_0<=Let)||(LA180_0>=Out && LA180_0<=Set)||LA180_0==As||LA180_0==Of||LA180_0==CommercialAt||LA180_0==RULE_IDENTIFIER) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LeftCurlyBracket) && (synpred90_InternalN4JSXParser())) {
                alt181=1;
            }
            else if ( (LA181_0==LeftSquareBracket) && (synpred90_InternalN4JSXParser())) {
                alt181=1;
            }
            else if ( ((LA181_0>=Intersection && LA181_0<=Implements)||(LA181_0>=Promisify && LA181_0<=Abstract)||LA181_0==External||(LA181_0>=Private && LA181_0<=Project)||LA181_0==Public||LA181_0==Static||LA181_0==Target||(LA181_0>=Async && LA181_0<=Await)||LA181_0==Union||LA181_0==This||LA181_0==From||LA181_0==Type||(LA181_0>=Get && LA181_0<=Let)||(LA181_0>=Out && LA181_0<=Set)||LA181_0==As||LA181_0==Of||LA181_0==CommercialAt||LA181_0==RULE_IDENTIFIER) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableBinding_return retval = new InternalN4JSXParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSXParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSXParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_16);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSXParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSXParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSXParser.ruleEmptyStatement_return retval = new InternalN4JSXParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;


            
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionStatement_return retval = new InternalN4JSXParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ExpressionStatement_return retval = new InternalN4JSXParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIfStatement_return retval = new InternalN4JSXParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==Else) ) {
                int LA182_1 = input.LA(2);

                if ( (synpred93_InternalN4JSXParser()) ) {
                    alt182=1;
                }
            }
            switch (alt182) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IfStatement_return retval = new InternalN4JSXParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSXParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_77);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==Else) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred94_InternalN4JSXParser()) ) {
                    alt183=1;
                }
            }
            switch (alt183) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSXParser.ruleIterationStatement_return retval = new InternalN4JSXParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt184=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt184=1;
                }
                break;
            case While:
                {
                alt184=2;
                }
                break;
            case For:
                {
                alt184=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_IterationStatement_return retval = new InternalN4JSXParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt185=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt185=1;
                }
                break;
            case While:
                {
                alt185=2;
                }
                break;
            case For:
                {
                alt185=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDoStatement_return retval = new InternalN4JSXParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt186=2;
            alt186 = dfa186.predict(input);
            switch (alt186) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_DoStatement_return retval = new InternalN4JSXParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_78);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==Semicolon) ) {
                int LA187_1 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt187=1;
                }
            }
            else if ( (LA187_0==EOF) && (synpred96_InternalN4JSXParser())) {
                alt187=1;
            }
            else if ( (LA187_0==RULE_EOL) && (synpred96_InternalN4JSXParser())) {
                alt187=1;
            }
            else if ( (LA187_0==RULE_ML_COMMENT) && (synpred96_InternalN4JSXParser())) {
                alt187=1;
            }
            else if ( (LA187_0==RightCurlyBracket) ) {
                int LA187_5 = input.LA(2);

                if ( (synpred96_InternalN4JSXParser()) ) {
                    alt187=1;
                }
            }
            switch (alt187) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWhileStatement_return retval = new InternalN4JSXParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WhileStatement_return retval = new InternalN4JSXParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSXParser.ruleForStatement_return retval = new InternalN4JSXParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt205=2;
            alt205 = dfa205.predict(input);
            switch (alt205) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt204=3;
                    alt204 = dfa204.predict(input);
                    switch (alt204) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt196=2;
                            alt196 = dfa196.predict(input);
                            switch (alt196) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt188=2;
                                    int LA188_0 = input.LA(1);

                                    if ( (LA188_0==In) ) {
                                        alt188=1;
                                    }
                                    else if ( (LA188_0==Of) ) {
                                        alt188=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 188, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt188) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt189=2;
                                    alt189 = dfa189.predict(input);
                                    switch (alt189) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt195=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt195=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt195=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt195=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 195, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt195) {
                                        case 1 :
                                            {
                                            {
                                            loop190:
                                            do {
                                                int alt190=2;
                                                int LA190_0 = input.LA(1);

                                                if ( (LA190_0==Comma) ) {
                                                    alt190=1;
                                                }


                                                switch (alt190) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop190;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt191=2;
                                            int LA191_0 = input.LA(1);

                                            if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||LA191_0==Public||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||LA191_0==HyphenMinusHyphenMinus||LA191_0==SolidusEqualsSign||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {
                                                alt191=1;
                                            }
                                            switch (alt191) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt192=2;
                                            int LA192_0 = input.LA(1);

                                            if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||LA192_0==Public||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||LA192_0==HyphenMinusHyphenMinus||LA192_0==SolidusEqualsSign||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                                alt192=1;
                                            }
                                            switch (alt192) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt193=2;
                                            int LA193_0 = input.LA(1);

                                            if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||LA193_0==Public||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||LA193_0==HyphenMinusHyphenMinus||LA193_0==SolidusEqualsSign||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                                alt193=1;
                                            }
                                            switch (alt193) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt194=2;
                                            int LA194_0 = input.LA(1);

                                            if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||LA194_0==Public||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||LA194_0==HyphenMinusHyphenMinus||LA194_0==SolidusEqualsSign||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                                alt194=1;
                                            }
                                            switch (alt194) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt201=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt201=1;
                                }
                                break;
                            case In:
                                {
                                alt201=2;
                                }
                                break;
                            case Of:
                                {
                                alt201=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 201, 0, input);

                                throw nvae;
                            }

                            switch (alt201) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt197=2;
                                    int LA197_0 = input.LA(1);

                                    if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||LA197_0==Public||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||(LA197_0>=Get && LA197_0<=Set)||LA197_0==PlusSignPlusSign||LA197_0==HyphenMinusHyphenMinus||LA197_0==SolidusEqualsSign||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {
                                        alt197=1;
                                    }
                                    switch (alt197) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt198=2;
                                    int LA198_0 = input.LA(1);

                                    if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||LA198_0==Public||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||LA198_0==HyphenMinusHyphenMinus||LA198_0==SolidusEqualsSign||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                        alt198=1;
                                    }
                                    switch (alt198) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);

                                    if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||(LA199_0>=External && LA199_0<=Function)||(LA199_0>=Private && LA199_0<=Delete)||LA199_0==Public||LA199_0==Static||(LA199_0>=Target && LA199_0<=Await)||LA199_0==Class||(LA199_0>=False && LA199_0<=Super)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||(LA199_0>=From && LA199_0<=Void)||(LA199_0>=Get && LA199_0<=Set)||LA199_0==PlusSignPlusSign||LA199_0==HyphenMinusHyphenMinus||LA199_0==SolidusEqualsSign||LA199_0==As||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||LA199_0==PlusSign||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {
                                        alt199=1;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt200=2;
                                    int LA200_0 = input.LA(1);

                                    if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||LA200_0==Public||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||(LA200_0>=Get && LA200_0<=Set)||LA200_0==PlusSignPlusSign||LA200_0==HyphenMinusHyphenMinus||LA200_0==SolidusEqualsSign||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {
                                        alt200=1;
                                    }
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt202=2;
                            int LA202_0 = input.LA(1);

                            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||LA202_0==Public||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||LA202_0==HyphenMinusHyphenMinus||LA202_0==SolidusEqualsSign||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                alt202=1;
                            }
                            switch (alt202) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                alt203=1;
                            }
                            switch (alt203) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ForStatement_return retval = new InternalN4JSXParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSXParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSXParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSXParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSXParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSXParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt223=2;
            alt223 = dfa223.predict(input);
            switch (alt223) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt222=3;
                    alt222 = dfa222.predict(input);
                    switch (alt222) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt214=2;
                            alt214 = dfa214.predict(input);
                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt206=2;
                                    int LA206_0 = input.LA(1);

                                    if ( (LA206_0==In) ) {
                                        alt206=1;
                                    }
                                    else if ( (LA206_0==Of) ) {
                                        alt206=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 206, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt206) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt207=2;
                                    alt207 = dfa207.predict(input);
                                    switch (alt207) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt213=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt213=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt213=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt213=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 213, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt213) {
                                        case 1 :
                                            {
                                            {
                                            loop208:
                                            do {
                                                int alt208=2;
                                                int LA208_0 = input.LA(1);

                                                if ( (LA208_0==Comma) ) {
                                                    alt208=1;
                                                }


                                                switch (alt208) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_41); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop208;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt209=2;
                                            int LA209_0 = input.LA(1);

                                            if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||LA209_0==Public||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||LA209_0==HyphenMinusHyphenMinus||LA209_0==SolidusEqualsSign||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_HEX_INT && LA209_0<=RULE_LEGACY_OCTAL_INT)||LA209_0==RULE_SCIENTIFIC_INT||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_STRING||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_INT) ) {
                                                alt209=1;
                                            }
                                            switch (alt209) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt210=2;
                                            int LA210_0 = input.LA(1);

                                            if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||LA210_0==Public||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||LA210_0==HyphenMinusHyphenMinus||LA210_0==SolidusEqualsSign||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                                                alt210=1;
                                            }
                                            switch (alt210) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt211=2;
                                            int LA211_0 = input.LA(1);

                                            if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||LA211_0==Public||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                                alt211=1;
                                            }
                                            switch (alt211) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt212=2;
                                            int LA212_0 = input.LA(1);

                                            if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||LA212_0==Public||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                                alt212=1;
                                            }
                                            switch (alt212) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_75);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt219=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt219=1;
                                }
                                break;
                            case In:
                                {
                                alt219=2;
                                }
                                break;
                            case Of:
                                {
                                alt219=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 219, 0, input);

                                throw nvae;
                            }

                            switch (alt219) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt215=2;
                                    int LA215_0 = input.LA(1);

                                    if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||LA215_0==Public||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||(LA215_0>=Get && LA215_0<=Set)||LA215_0==PlusSignPlusSign||LA215_0==HyphenMinusHyphenMinus||LA215_0==SolidusEqualsSign||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {
                                        alt215=1;
                                    }
                                    switch (alt215) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt216=2;
                                    int LA216_0 = input.LA(1);

                                    if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||LA216_0==Public||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||LA216_0==HyphenMinusHyphenMinus||LA216_0==SolidusEqualsSign||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_HEX_INT && LA216_0<=RULE_LEGACY_OCTAL_INT)||LA216_0==RULE_SCIENTIFIC_INT||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_STRING||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_INT) ) {
                                        alt216=1;
                                    }
                                    switch (alt216) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt217=2;
                                    int LA217_0 = input.LA(1);

                                    if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||(LA217_0>=External && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||LA217_0==Public||LA217_0==Static||(LA217_0>=Target && LA217_0<=Await)||LA217_0==Class||(LA217_0>=False && LA217_0<=Super)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||(LA217_0>=From && LA217_0<=Void)||(LA217_0>=Get && LA217_0<=Set)||LA217_0==PlusSignPlusSign||LA217_0==HyphenMinusHyphenMinus||LA217_0==SolidusEqualsSign||LA217_0==As||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||LA217_0==PlusSign||LA217_0==HyphenMinus||LA217_0==Solidus||LA217_0==LessThanSign||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_HEX_INT && LA217_0<=RULE_LEGACY_OCTAL_INT)||LA217_0==RULE_SCIENTIFIC_INT||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_STRING||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_INT) ) {
                                        alt217=1;
                                    }
                                    switch (alt217) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt218=2;
                                    int LA218_0 = input.LA(1);

                                    if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||(LA218_0>=External && LA218_0<=Function)||(LA218_0>=Private && LA218_0<=Delete)||LA218_0==Public||LA218_0==Static||(LA218_0>=Target && LA218_0<=Await)||LA218_0==Class||(LA218_0>=False && LA218_0<=Super)||LA218_0==Union||(LA218_0>=Yield && LA218_0<=This)||(LA218_0>=From && LA218_0<=Void)||(LA218_0>=Get && LA218_0<=Set)||LA218_0==PlusSignPlusSign||LA218_0==HyphenMinusHyphenMinus||LA218_0==SolidusEqualsSign||LA218_0==As||LA218_0==Of||LA218_0==ExclamationMark||LA218_0==LeftParenthesis||LA218_0==PlusSign||LA218_0==HyphenMinus||LA218_0==Solidus||LA218_0==LessThanSign||(LA218_0>=CommercialAt && LA218_0<=LeftSquareBracket)||LA218_0==LeftCurlyBracket||LA218_0==Tilde||LA218_0==RULE_DOUBLE||(LA218_0>=RULE_HEX_INT && LA218_0<=RULE_LEGACY_OCTAL_INT)||LA218_0==RULE_SCIENTIFIC_INT||LA218_0==RULE_IDENTIFIER||LA218_0==RULE_STRING||(LA218_0>=RULE_TEMPLATE_HEAD && LA218_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA218_0==RULE_INT) ) {
                                        alt218=1;
                                    }
                                    switch (alt218) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_75);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt220=2;
                            int LA220_0 = input.LA(1);

                            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||(LA220_0>=External && LA220_0<=Function)||(LA220_0>=Private && LA220_0<=Delete)||LA220_0==Public||LA220_0==Static||(LA220_0>=Target && LA220_0<=Await)||LA220_0==Class||(LA220_0>=False && LA220_0<=Super)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||(LA220_0>=From && LA220_0<=Void)||(LA220_0>=Get && LA220_0<=Set)||LA220_0==PlusSignPlusSign||LA220_0==HyphenMinusHyphenMinus||LA220_0==SolidusEqualsSign||LA220_0==As||LA220_0==Of||LA220_0==ExclamationMark||LA220_0==LeftParenthesis||LA220_0==PlusSign||LA220_0==HyphenMinus||LA220_0==Solidus||LA220_0==LessThanSign||(LA220_0>=CommercialAt && LA220_0<=LeftSquareBracket)||LA220_0==LeftCurlyBracket||LA220_0==Tilde||LA220_0==RULE_DOUBLE||(LA220_0>=RULE_HEX_INT && LA220_0<=RULE_LEGACY_OCTAL_INT)||LA220_0==RULE_SCIENTIFIC_INT||LA220_0==RULE_IDENTIFIER||LA220_0==RULE_STRING||(LA220_0>=RULE_TEMPLATE_HEAD && LA220_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA220_0==RULE_INT) ) {
                                alt220=1;
                            }
                            switch (alt220) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt221=2;
                            int LA221_0 = input.LA(1);

                            if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||LA221_0==Public||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||LA221_0==HyphenMinusHyphenMinus||LA221_0==SolidusEqualsSign||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                                alt221=1;
                            }
                            switch (alt221) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_75);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleLetIdentifierRef_return retval = new InternalN4JSXParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleLetAsIdentifier_return retval = new InternalN4JSXParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;


            
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSXParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSXParser.ruleContinueStatement_return retval = new InternalN4JSXParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||LA224_0==External||(LA224_0>=Private && LA224_0<=Project)||LA224_0==Public||LA224_0==Static||LA224_0==Target||(LA224_0>=Async && LA224_0<=Await)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||LA224_0==From||LA224_0==Type||(LA224_0>=Get && LA224_0<=Let)||(LA224_0>=Out && LA224_0<=Set)||LA224_0==As||LA224_0==Of||LA224_0==RULE_IDENTIFIER) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ContinueStatement_return retval = new InternalN4JSXParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||LA225_0==External||(LA225_0>=Private && LA225_0<=Project)||LA225_0==Public||LA225_0==Static||LA225_0==Target||(LA225_0>=Async && LA225_0<=Await)||LA225_0==Union||LA225_0==This||LA225_0==From||LA225_0==Type||(LA225_0>=Get && LA225_0<=Let)||(LA225_0>=Out && LA225_0<=Set)||LA225_0==As||LA225_0==Of||LA225_0==RULE_IDENTIFIER) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSXParser.ruleBreakStatement_return retval = new InternalN4JSXParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( ((LA226_0>=Intersection && LA226_0<=Implements)||(LA226_0>=Promisify && LA226_0<=Abstract)||LA226_0==External||(LA226_0>=Private && LA226_0<=Project)||LA226_0==Public||LA226_0==Static||LA226_0==Target||(LA226_0>=Async && LA226_0<=Await)||LA226_0==Union||(LA226_0>=Yield && LA226_0<=This)||LA226_0==From||LA226_0==Type||(LA226_0>=Get && LA226_0<=Let)||(LA226_0>=Out && LA226_0<=Set)||LA226_0==As||LA226_0==Of||LA226_0==RULE_IDENTIFIER) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_BreakStatement_return retval = new InternalN4JSXParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( ((LA227_0>=Intersection && LA227_0<=Implements)||(LA227_0>=Promisify && LA227_0<=Abstract)||LA227_0==External||(LA227_0>=Private && LA227_0<=Project)||LA227_0==Public||LA227_0==Static||LA227_0==Target||(LA227_0>=Async && LA227_0<=Await)||LA227_0==Union||LA227_0==This||LA227_0==From||LA227_0==Type||(LA227_0>=Get && LA227_0<=Let)||(LA227_0>=Out && LA227_0<=Set)||LA227_0==As||LA227_0==Of||LA227_0==RULE_IDENTIFIER) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSXParser.ruleReturnStatement_return retval = new InternalN4JSXParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( ((LA228_0>=Intersection && LA228_0<=Implements)||(LA228_0>=Promisify && LA228_0<=Abstract)||(LA228_0>=External && LA228_0<=Function)||(LA228_0>=Private && LA228_0<=Delete)||LA228_0==Public||LA228_0==Static||(LA228_0>=Target && LA228_0<=Await)||LA228_0==Class||(LA228_0>=False && LA228_0<=Super)||LA228_0==Union||(LA228_0>=Yield && LA228_0<=This)||(LA228_0>=From && LA228_0<=Void)||(LA228_0>=Get && LA228_0<=Set)||LA228_0==PlusSignPlusSign||LA228_0==HyphenMinusHyphenMinus||LA228_0==SolidusEqualsSign||LA228_0==As||LA228_0==Of||LA228_0==ExclamationMark||LA228_0==LeftParenthesis||LA228_0==PlusSign||LA228_0==HyphenMinus||LA228_0==Solidus||LA228_0==LessThanSign||(LA228_0>=CommercialAt && LA228_0<=LeftSquareBracket)||LA228_0==LeftCurlyBracket||LA228_0==Tilde||LA228_0==RULE_DOUBLE||(LA228_0>=RULE_HEX_INT && LA228_0<=RULE_LEGACY_OCTAL_INT)||LA228_0==RULE_SCIENTIFIC_INT||LA228_0==RULE_IDENTIFIER||LA228_0==RULE_STRING||(LA228_0>=RULE_TEMPLATE_HEAD && LA228_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA228_0==RULE_INT) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ReturnStatement_return retval = new InternalN4JSXParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Abstract)||(LA229_0>=External && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||LA229_0==Public||LA229_0==Static||(LA229_0>=Target && LA229_0<=Await)||LA229_0==Class||(LA229_0>=False && LA229_0<=Super)||LA229_0==Union||(LA229_0>=Yield && LA229_0<=This)||(LA229_0>=From && LA229_0<=Void)||(LA229_0>=Get && LA229_0<=Set)||LA229_0==PlusSignPlusSign||LA229_0==HyphenMinusHyphenMinus||LA229_0==SolidusEqualsSign||LA229_0==As||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||LA229_0==LessThanSign||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSXParser.ruleWithStatement_return retval = new InternalN4JSXParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_WithStatement_return retval = new InternalN4JSXParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSXParser.ruleSwitchStatement_return retval = new InternalN4JSXParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==Case) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);
            int alt232=2;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==Default) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop231:
                    do {
                        int alt231=2;
                        int LA231_0 = input.LA(1);

                        if ( (LA231_0==Case) ) {
                            alt231=1;
                        }


                        switch (alt231) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop231;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_SwitchStatement_return retval = new InternalN4JSXParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSXParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSXParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==Case) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_90);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==Default) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_91);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);

                        if ( (LA234_0==Case) ) {
                            alt234=1;
                        }


                        switch (alt234) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_91);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop234;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSXParser.ruleCaseClause_return retval = new InternalN4JSXParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( ((LA236_0>=Intersection && LA236_0<=Implements)||(LA236_0>=Promisify && LA236_0<=Function)||(LA236_0>=Private && LA236_0<=Delete)||(LA236_0>=Public && LA236_0<=Break)||(LA236_0>=Class && LA236_0<=This)||(LA236_0>=From && LA236_0<=With)||(LA236_0>=For && LA236_0<=Var)||LA236_0==PlusSignPlusSign||LA236_0==HyphenMinusHyphenMinus||LA236_0==SolidusEqualsSign||(LA236_0>=As && LA236_0<=If)||LA236_0==Of||LA236_0==ExclamationMark||LA236_0==LeftParenthesis||LA236_0==PlusSign||LA236_0==HyphenMinus||LA236_0==Solidus||(LA236_0>=Semicolon && LA236_0<=LessThanSign)||(LA236_0>=CommercialAt && LA236_0<=LeftSquareBracket)||LA236_0==LeftCurlyBracket||LA236_0==Tilde||LA236_0==RULE_DOUBLE||(LA236_0>=RULE_HEX_INT && LA236_0<=RULE_LEGACY_OCTAL_INT)||LA236_0==RULE_SCIENTIFIC_INT||LA236_0==RULE_IDENTIFIER||LA236_0==RULE_STRING||(LA236_0>=RULE_TEMPLATE_HEAD && LA236_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA236_0==RULE_INT) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSXParser.norm1_CaseClause_return retval = new InternalN4JSXParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_92);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( ((LA237_0>=Intersection && LA237_0<=Implements)||(LA237_0>=Promisify && LA237_0<=Function)||(LA237_0>=Private && LA237_0<=Delete)||(LA237_0>=Public && LA237_0<=Break)||(LA237_0>=Class && LA237_0<=This)||(LA237_0>=From && LA237_0<=With)||(LA237_0>=For && LA237_0<=Var)||LA237_0==PlusSignPlusSign||LA237_0==HyphenMinusHyphenMinus||LA237_0==SolidusEqualsSign||(LA237_0>=As && LA237_0<=If)||LA237_0==Of||LA237_0==ExclamationMark||LA237_0==LeftParenthesis||LA237_0==PlusSign||LA237_0==HyphenMinus||LA237_0==Solidus||(LA237_0>=Semicolon && LA237_0<=LessThanSign)||(LA237_0>=CommercialAt && LA237_0<=LeftSquareBracket)||LA237_0==LeftCurlyBracket||LA237_0==Tilde||LA237_0==RULE_DOUBLE||(LA237_0>=RULE_HEX_INT && LA237_0<=RULE_LEGACY_OCTAL_INT)||LA237_0==RULE_SCIENTIFIC_INT||LA237_0==RULE_IDENTIFIER||LA237_0==RULE_STRING||(LA237_0>=RULE_TEMPLATE_HEAD && LA237_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA237_0==RULE_INT) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSXParser.ruleDefaultClause_return retval = new InternalN4JSXParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( ((LA238_0>=Intersection && LA238_0<=Implements)||(LA238_0>=Promisify && LA238_0<=Function)||(LA238_0>=Private && LA238_0<=Delete)||(LA238_0>=Public && LA238_0<=Break)||(LA238_0>=Class && LA238_0<=This)||(LA238_0>=From && LA238_0<=With)||(LA238_0>=For && LA238_0<=Var)||LA238_0==PlusSignPlusSign||LA238_0==HyphenMinusHyphenMinus||LA238_0==SolidusEqualsSign||(LA238_0>=As && LA238_0<=If)||LA238_0==Of||LA238_0==ExclamationMark||LA238_0==LeftParenthesis||LA238_0==PlusSign||LA238_0==HyphenMinus||LA238_0==Solidus||(LA238_0>=Semicolon && LA238_0<=LessThanSign)||(LA238_0>=CommercialAt && LA238_0<=LeftSquareBracket)||LA238_0==LeftCurlyBracket||LA238_0==Tilde||LA238_0==RULE_DOUBLE||(LA238_0>=RULE_HEX_INT && LA238_0<=RULE_LEGACY_OCTAL_INT)||LA238_0==RULE_SCIENTIFIC_INT||LA238_0==RULE_IDENTIFIER||LA238_0==RULE_STRING||(LA238_0>=RULE_TEMPLATE_HEAD && LA238_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA238_0==RULE_INT) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSXParser.norm1_DefaultClause_return retval = new InternalN4JSXParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSXParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( ((LA239_0>=Intersection && LA239_0<=Implements)||(LA239_0>=Promisify && LA239_0<=Function)||(LA239_0>=Private && LA239_0<=Delete)||(LA239_0>=Public && LA239_0<=Break)||(LA239_0>=Class && LA239_0<=This)||(LA239_0>=From && LA239_0<=With)||(LA239_0>=For && LA239_0<=Var)||LA239_0==PlusSignPlusSign||LA239_0==HyphenMinusHyphenMinus||LA239_0==SolidusEqualsSign||(LA239_0>=As && LA239_0<=If)||LA239_0==Of||LA239_0==ExclamationMark||LA239_0==LeftParenthesis||LA239_0==PlusSign||LA239_0==HyphenMinus||LA239_0==Solidus||(LA239_0>=Semicolon && LA239_0<=LessThanSign)||(LA239_0>=CommercialAt && LA239_0<=LeftSquareBracket)||LA239_0==LeftCurlyBracket||LA239_0==Tilde||LA239_0==RULE_DOUBLE||(LA239_0>=RULE_HEX_INT && LA239_0<=RULE_LEGACY_OCTAL_INT)||LA239_0==RULE_SCIENTIFIC_INT||LA239_0==RULE_IDENTIFIER||LA239_0==RULE_STRING||(LA239_0>=RULE_TEMPLATE_HEAD && LA239_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA239_0==RULE_INT) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSXParser.ruleLabelledStatement_return retval = new InternalN4JSXParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_LabelledStatement_return retval = new InternalN4JSXParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_92);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSXParser.ruleThrowStatement_return retval = new InternalN4JSXParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_ThrowStatement_return retval = new InternalN4JSXParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_32);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSXParser.ruleTryStatement_return retval = new InternalN4JSXParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==Catch) ) {
                alt241=1;
            }
            else if ( (LA241_0==Finally) ) {
                alt241=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;
            }
            switch (alt241) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==Finally) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSXParser.norm1_TryStatement_return retval = new InternalN4JSXParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSXParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_93);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==Catch) ) {
                alt243=1;
            }
            else if ( (LA243_0==Finally) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_94);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==Finally) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSXParser.ruleCatchBlock_return retval = new InternalN4JSXParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchBlock_return retval = new InternalN4JSXParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSXParser.ruleCatchVariable_return retval = new InternalN4JSXParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt245=3;
            alt245 = dfa245.predict(input);
            switch (alt245) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt244=2;
                    alt244 = dfa244.predict(input);
                    switch (alt244) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSXParser.norm1_CatchVariable_return retval = new InternalN4JSXParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;



            
        try {
            {
            int alt247=3;
            alt247 = dfa247.predict(input);
            switch (alt247) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt246=2;
                    alt246 = dfa246.predict(input);
                    switch (alt246) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_5);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSXParser.ruleFinallyBlock_return retval = new InternalN4JSXParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSXParser.norm1_FinallyBlock_return retval = new InternalN4JSXParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSXParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSXParser.ruleDebuggerStatement_return retval = new InternalN4JSXParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1()); 
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParenExpression_return retval = new InternalN4JSXParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParenExpression_return retval = new InternalN4JSXParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierRef_return retval = new InternalN4JSXParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSXParser.norm1_IdentifierRef_return retval = new InternalN4JSXParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleSuperLiteral_return retval = new InternalN4JSXParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;


            
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleThisLiteral_return retval = new InternalN4JSXParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleArrayLiteral_return retval = new InternalN4JSXParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==Comma) ) {
                    alt248=1;
                }


                switch (alt248) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( ((LA253_0>=Intersection && LA253_0<=Implements)||(LA253_0>=Promisify && LA253_0<=Abstract)||(LA253_0>=External && LA253_0<=Function)||(LA253_0>=Private && LA253_0<=Delete)||LA253_0==Public||LA253_0==Static||(LA253_0>=Target && LA253_0<=Await)||LA253_0==Class||(LA253_0>=False && LA253_0<=Super)||LA253_0==Union||(LA253_0>=Yield && LA253_0<=This)||(LA253_0>=From && LA253_0<=Void)||LA253_0==FullStopFullStopFullStop||(LA253_0>=Get && LA253_0<=Set)||LA253_0==PlusSignPlusSign||LA253_0==HyphenMinusHyphenMinus||LA253_0==SolidusEqualsSign||LA253_0==As||LA253_0==Of||LA253_0==ExclamationMark||LA253_0==LeftParenthesis||LA253_0==PlusSign||LA253_0==HyphenMinus||LA253_0==Solidus||LA253_0==LessThanSign||(LA253_0>=CommercialAt && LA253_0<=LeftSquareBracket)||LA253_0==LeftCurlyBracket||LA253_0==Tilde||LA253_0==RULE_DOUBLE||(LA253_0>=RULE_HEX_INT && LA253_0<=RULE_LEGACY_OCTAL_INT)||LA253_0==RULE_SCIENTIFIC_INT||LA253_0==RULE_IDENTIFIER||LA253_0==RULE_STRING||(LA253_0>=RULE_TEMPLATE_HEAD && LA253_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA253_0==RULE_INT) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop250:
                    do {
                        int alt250=2;
                        alt250 = dfa250.predict(input);
                        switch (alt250) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop249:
                    	    do {
                    	        int alt249=2;
                    	        int LA249_0 = input.LA(1);

                    	        if ( (LA249_0==Comma) ) {
                    	            alt249=1;
                    	        }


                    	        switch (alt249) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop249;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop250;
                        }
                    } while (true);
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==Comma) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop251:
                            do {
                                int alt251=2;
                                int LA251_0 = input.LA(1);

                                if ( (LA251_0==Comma) ) {
                                    alt251=1;
                                }


                                switch (alt251) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop251;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayLiteral_return retval = new InternalN4JSXParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==Comma) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_96);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop254;
                }
            } while (true);
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( ((LA259_0>=Intersection && LA259_0<=Implements)||(LA259_0>=Promisify && LA259_0<=Abstract)||(LA259_0>=External && LA259_0<=Function)||(LA259_0>=Private && LA259_0<=Delete)||LA259_0==Public||LA259_0==Static||(LA259_0>=Target && LA259_0<=Await)||LA259_0==Class||(LA259_0>=False && LA259_0<=Super)||LA259_0==Union||(LA259_0>=Yield && LA259_0<=This)||(LA259_0>=From && LA259_0<=Void)||LA259_0==FullStopFullStopFullStop||(LA259_0>=Get && LA259_0<=Set)||LA259_0==PlusSignPlusSign||LA259_0==HyphenMinusHyphenMinus||LA259_0==SolidusEqualsSign||LA259_0==As||LA259_0==Of||LA259_0==ExclamationMark||LA259_0==LeftParenthesis||LA259_0==PlusSign||LA259_0==HyphenMinus||LA259_0==Solidus||LA259_0==LessThanSign||(LA259_0>=CommercialAt && LA259_0<=LeftSquareBracket)||LA259_0==LeftCurlyBracket||LA259_0==Tilde||LA259_0==RULE_DOUBLE||(LA259_0>=RULE_HEX_INT && LA259_0<=RULE_LEGACY_OCTAL_INT)||LA259_0==RULE_SCIENTIFIC_INT||LA259_0==RULE_IDENTIFIER||LA259_0==RULE_STRING||(LA259_0>=RULE_TEMPLATE_HEAD && LA259_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA259_0==RULE_INT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop256:
                    do {
                        int alt256=2;
                        alt256 = dfa256.predict(input);
                        switch (alt256) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop255:
                    	    do {
                    	        int alt255=2;
                    	        int LA255_0 = input.LA(1);

                    	        if ( (LA255_0==Comma) ) {
                    	            alt255=1;
                    	        }


                    	        switch (alt255) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_98);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop255;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop256;
                        }
                    } while (true);
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==Comma) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop257:
                            do {
                                int alt257=2;
                                int LA257_0 = input.LA(1);

                                if ( (LA257_0==Comma) ) {
                                    alt257=1;
                                }


                                switch (alt257) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop257;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSXParser.ruleArrayPadding_return retval = new InternalN4JSXParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSXParser.ruleArrayElement_return retval = new InternalN4JSXParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==FullStopFullStopFullStop) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayElement_return retval = new InternalN4JSXParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==FullStopFullStopFullStop) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleObjectLiteral_return retval = new InternalN4JSXParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( ((LA264_0>=Intersection && LA264_0<=With)||(LA264_0>=For && LA264_0<=Var)||(LA264_0>=As && LA264_0<=Of)||LA264_0==LeftParenthesis||LA264_0==Asterisk||LA264_0==LessThanSign||(LA264_0>=QuestionMark && LA264_0<=LeftSquareBracket)||LA264_0==LeftCurlyBracket||LA264_0==Tilde||LA264_0==RULE_DOUBLE||LA264_0==RULE_HEX_INT||LA264_0==RULE_OCTAL_INT||LA264_0==RULE_SCIENTIFIC_INT||LA264_0==RULE_IDENTIFIER||LA264_0==RULE_STRING||LA264_0==RULE_INT) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);

                        if ( (LA262_0==Comma) ) {
                            int LA262_1 = input.LA(2);

                            if ( ((LA262_1>=Intersection && LA262_1<=With)||(LA262_1>=For && LA262_1<=Var)||(LA262_1>=As && LA262_1<=Of)||LA262_1==LeftParenthesis||LA262_1==Asterisk||LA262_1==LessThanSign||(LA262_1>=QuestionMark && LA262_1<=LeftSquareBracket)||LA262_1==LeftCurlyBracket||LA262_1==Tilde||LA262_1==RULE_DOUBLE||LA262_1==RULE_HEX_INT||LA262_1==RULE_OCTAL_INT||LA262_1==RULE_SCIENTIFIC_INT||LA262_1==RULE_IDENTIFIER||LA262_1==RULE_STRING||LA262_1==RULE_INT) ) {
                                alt262=1;
                            }


                        }


                        switch (alt262) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop262;
                        }
                    } while (true);
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==Comma) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectLiteral_return retval = new InternalN4JSXParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt267=2;
            int LA267_0 = input.LA(1);

            if ( ((LA267_0>=Intersection && LA267_0<=With)||(LA267_0>=For && LA267_0<=Var)||(LA267_0>=As && LA267_0<=Of)||LA267_0==LeftParenthesis||LA267_0==Asterisk||LA267_0==LessThanSign||(LA267_0>=QuestionMark && LA267_0<=LeftSquareBracket)||LA267_0==LeftCurlyBracket||LA267_0==Tilde||LA267_0==RULE_DOUBLE||LA267_0==RULE_HEX_INT||LA267_0==RULE_OCTAL_INT||LA267_0==RULE_SCIENTIFIC_INT||LA267_0==RULE_IDENTIFIER||LA267_0==RULE_STRING||LA267_0==RULE_INT) ) {
                alt267=1;
            }
            switch (alt267) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop265:
                    do {
                        int alt265=2;
                        int LA265_0 = input.LA(1);

                        if ( (LA265_0==Comma) ) {
                            int LA265_1 = input.LA(2);

                            if ( ((LA265_1>=Intersection && LA265_1<=With)||(LA265_1>=For && LA265_1<=Var)||(LA265_1>=As && LA265_1<=Of)||LA265_1==LeftParenthesis||LA265_1==Asterisk||LA265_1==LessThanSign||(LA265_1>=QuestionMark && LA265_1<=LeftSquareBracket)||LA265_1==LeftCurlyBracket||LA265_1==Tilde||LA265_1==RULE_DOUBLE||LA265_1==RULE_HEX_INT||LA265_1==RULE_OCTAL_INT||LA265_1==RULE_SCIENTIFIC_INT||LA265_1==RULE_IDENTIFIER||LA265_1==RULE_STRING||LA265_1==RULE_INT) ) {
                                alt265=1;
                            }


                        }


                        switch (alt265) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_100); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop265;
                        }
                    } while (true);
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==Comma) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_15); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignment_return retval = new InternalN4JSXParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt268=6;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyAssignment_return retval = new InternalN4JSXParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt269=6;
            alt269 = dfa269.predict(input);
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt277=5;
            alt277 = dfa277.predict(input);
            switch (alt277) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt270=2;
                    alt270 = dfa270.predict(input);
                    switch (alt270) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==LessThanSign) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt272=2;
                    alt272 = dfa272.predict(input);
                    switch (alt272) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt273=2;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==Asterisk) ) {
                        alt273=1;
                    }
                    else if ( ((LA273_0>=Intersection && LA273_0<=With)||(LA273_0>=For && LA273_0<=Var)||(LA273_0>=As && LA273_0<=Of)||LA273_0==LeftSquareBracket||LA273_0==RULE_DOUBLE||LA273_0==RULE_HEX_INT||LA273_0==RULE_OCTAL_INT||LA273_0==RULE_SCIENTIFIC_INT||LA273_0==RULE_IDENTIFIER||LA273_0==RULE_STRING||LA273_0==RULE_INT) ) {
                        alt273=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 273, 0, input);

                        throw nvae;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==Semicolon) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt275=2;
                    alt275 = dfa275.predict(input);
                    switch (alt275) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_70);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==EqualsSign) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSXParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_101);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt285=5;
            alt285 = dfa285.predict(input);
            switch (alt285) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt278=2;
                    alt278 = dfa278.predict(input);
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2()); 
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_25);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==LessThanSign) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt280=2;
                    alt280 = dfa280.predict(input);
                    switch (alt280) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_103);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==Asterisk) ) {
                        alt281=1;
                    }
                    else if ( ((LA281_0>=Intersection && LA281_0<=With)||(LA281_0>=For && LA281_0<=Var)||(LA281_0>=As && LA281_0<=Of)||LA281_0==LeftSquareBracket||LA281_0==RULE_DOUBLE||LA281_0==RULE_HEX_INT||LA281_0==RULE_OCTAL_INT||LA281_0==RULE_SCIENTIFIC_INT||LA281_0==RULE_IDENTIFIER||LA281_0==RULE_STRING||LA281_0==RULE_INT) ) {
                        alt281=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 281, 0, input);

                        throw nvae;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==Semicolon) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt283=2;
                    alt283 = dfa283.predict(input);
                    switch (alt283) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_5);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_70);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==EqualsSign) ) {
                        alt284=1;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSXParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==LessThanSign) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt287=2;
            alt287 = dfa287.predict(input);
            switch (alt287) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==Asterisk) ) {
                alt288=1;
            }
            else if ( ((LA288_0>=Intersection && LA288_0<=With)||(LA288_0>=For && LA288_0<=Var)||(LA288_0>=As && LA288_0<=Of)||LA288_0==LeftSquareBracket||LA288_0==RULE_DOUBLE||LA288_0==RULE_HEX_INT||LA288_0==RULE_OCTAL_INT||LA288_0==RULE_SCIENTIFIC_INT||LA288_0==RULE_IDENTIFIER||LA288_0==RULE_STRING||LA288_0==RULE_INT) ) {
                alt288=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);

                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==Semicolon) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSXParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==LessThanSign) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt291=2;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_103);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==Asterisk) ) {
                alt292=1;
            }
            else if ( ((LA292_0>=Intersection && LA292_0<=With)||(LA292_0>=For && LA292_0<=Var)||(LA292_0>=As && LA292_0<=Of)||LA292_0==LeftSquareBracket||LA292_0==RULE_DOUBLE||LA292_0==RULE_HEX_INT||LA292_0==RULE_OCTAL_INT||LA292_0==RULE_SCIENTIFIC_INT||LA292_0==RULE_IDENTIFIER||LA292_0==RULE_STRING||LA292_0==RULE_INT) ) {
                alt292=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);

                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==Semicolon) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePair_return retval = new InternalN4JSXParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt294=2;
            alt294 = dfa294.predict(input);
            switch (alt294) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSXParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt295=2;
            alt295 = dfa295.predict(input);
            switch (alt295) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_92);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt296=2;
            alt296 = dfa296.predict(input);
            switch (alt296) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_70);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==EqualsSign) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSXParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt298=2;
            alt298 = dfa298.predict(input);
            switch (alt298) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_5);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_70);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==EqualsSign) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSXParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.rulePropertySetterDeclaration_return retval = new InternalN4JSXParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSXParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedCallExpression_return retval = new InternalN4JSXParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSXParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_5);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLeftHandSideExpression_return retval = new InternalN4JSXParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==LeftParenthesis) ) {
                alt301=1;
            }
            switch (alt301) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop300:
                    do {
                        int alt300=5;
                        int LA300_0 = input.LA(1);

                        if ( (LA300_0==LeftParenthesis) ) {
                            alt300=1;
                        }
                        else if ( (LA300_0==LeftSquareBracket) ) {
                            alt300=2;
                        }
                        else if ( (LA300_0==FullStop) ) {
                            alt300=3;
                        }
                        else if ( (LA300_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred163_InternalN4JSXParser())) {
                            alt300=4;
                        }
                        else if ( (LA300_0==RULE_TEMPLATE_HEAD) && (synpred163_InternalN4JSXParser())) {
                            alt300=4;
                        }


                        switch (alt300) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop300;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSXParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_105);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==LeftParenthesis) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    pushFollow(FOLLOW_106);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop302:
                    do {
                        int alt302=5;
                        int LA302_0 = input.LA(1);

                        if ( (LA302_0==LeftParenthesis) ) {
                            alt302=1;
                        }
                        else if ( (LA302_0==LeftSquareBracket) ) {
                            alt302=2;
                        }
                        else if ( (LA302_0==FullStop) ) {
                            alt302=3;
                        }
                        else if ( (LA302_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred164_InternalN4JSXParser())) {
                            alt302=4;
                        }
                        else if ( (LA302_0==RULE_TEMPLATE_HEAD) && (synpred164_InternalN4JSXParser())) {
                            alt302=4;
                        }


                        switch (alt302) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_106);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop302;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSXParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( ((LA304_0>=Intersection && LA304_0<=Implements)||(LA304_0>=Promisify && LA304_0<=Abstract)||(LA304_0>=External && LA304_0<=Function)||(LA304_0>=Private && LA304_0<=Delete)||LA304_0==Public||LA304_0==Static||(LA304_0>=Target && LA304_0<=Await)||LA304_0==Class||(LA304_0>=False && LA304_0<=Super)||LA304_0==Union||(LA304_0>=Yield && LA304_0<=This)||(LA304_0>=From && LA304_0<=Void)||LA304_0==FullStopFullStopFullStop||(LA304_0>=Get && LA304_0<=Set)||LA304_0==PlusSignPlusSign||LA304_0==HyphenMinusHyphenMinus||LA304_0==SolidusEqualsSign||LA304_0==As||LA304_0==Of||LA304_0==ExclamationMark||LA304_0==LeftParenthesis||LA304_0==PlusSign||LA304_0==HyphenMinus||LA304_0==Solidus||LA304_0==LessThanSign||(LA304_0>=CommercialAt && LA304_0<=LeftSquareBracket)||LA304_0==LeftCurlyBracket||LA304_0==Tilde||LA304_0==RULE_DOUBLE||(LA304_0>=RULE_HEX_INT && LA304_0<=RULE_LEGACY_OCTAL_INT)||LA304_0==RULE_SCIENTIFIC_INT||LA304_0==RULE_IDENTIFIER||LA304_0==RULE_STRING||(LA304_0>=RULE_TEMPLATE_HEAD && LA304_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA304_0==RULE_INT) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSXParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSXParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( ((LA305_0>=Intersection && LA305_0<=Implements)||(LA305_0>=Promisify && LA305_0<=Abstract)||(LA305_0>=External && LA305_0<=Function)||(LA305_0>=Private && LA305_0<=Delete)||LA305_0==Public||LA305_0==Static||(LA305_0>=Target && LA305_0<=Await)||LA305_0==Class||(LA305_0>=False && LA305_0<=Super)||LA305_0==Union||(LA305_0>=Yield && LA305_0<=This)||(LA305_0>=From && LA305_0<=Void)||LA305_0==FullStopFullStopFullStop||(LA305_0>=Get && LA305_0<=Set)||LA305_0==PlusSignPlusSign||LA305_0==HyphenMinusHyphenMinus||LA305_0==SolidusEqualsSign||LA305_0==As||LA305_0==Of||LA305_0==ExclamationMark||LA305_0==LeftParenthesis||LA305_0==PlusSign||LA305_0==HyphenMinus||LA305_0==Solidus||LA305_0==LessThanSign||(LA305_0>=CommercialAt && LA305_0<=LeftSquareBracket)||LA305_0==LeftCurlyBracket||LA305_0==Tilde||LA305_0==RULE_DOUBLE||(LA305_0>=RULE_HEX_INT && LA305_0<=RULE_LEGACY_OCTAL_INT)||LA305_0==RULE_SCIENTIFIC_INT||LA305_0==RULE_IDENTIFIER||LA305_0==RULE_STRING||(LA305_0>=RULE_TEMPLATE_HEAD && LA305_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA305_0==RULE_INT) ) {
                alt305=1;
            }
            switch (alt305) {
                case 1 :
                    {
                    pushFollow(FOLLOW_75);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSXParser.ruleArguments_return retval = new InternalN4JSXParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop306:
            do {
                int alt306=2;
                int LA306_0 = input.LA(1);

                if ( (LA306_0==Comma) ) {
                    alt306=1;
                }


                switch (alt306) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop306;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSXParser.norm1_Arguments_return retval = new InternalN4JSXParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSXParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_44);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0()); 
            }

            }


            }
            loop307:
            do {
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( (LA307_0==Comma) ) {
                    alt307=1;
                }


                switch (alt307) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_108); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_44);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSXParser.ruleArgument_return retval = new InternalN4JSXParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==FullStopFullStopFullStop) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSXParser.norm1_Argument_return retval = new InternalN4JSXParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==FullStopFullStopFullStop) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArguments_return retval = new InternalN4JSXParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_29);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1()); 
            }

            }


            }
            loop310:
            do {
                int alt310=2;
                int LA310_0 = input.LA(1);

                if ( (LA310_0==Comma) ) {
                    alt310=1;
                }


                switch (alt310) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_55); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop310;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMemberExpression_return retval = new InternalN4JSXParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt316=3;
            alt316 = dfa316.predict(input);
            switch (alt316) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_111);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==LessThanSign) ) {
                        int LA311_1 = input.LA(2);

                        if ( (synpred167_InternalN4JSXParser()) ) {
                            alt311=1;
                        }
                    }
                    switch (alt311) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==LeftParenthesis) ) {
                        int LA314_1 = input.LA(2);

                        if ( (synpred168_InternalN4JSXParser()) ) {
                            alt314=1;
                        }
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt312=2;
                            int LA312_0 = input.LA(1);

                            if ( ((LA312_0>=Intersection && LA312_0<=Implements)||(LA312_0>=Promisify && LA312_0<=Abstract)||(LA312_0>=External && LA312_0<=Function)||(LA312_0>=Private && LA312_0<=Delete)||LA312_0==Public||LA312_0==Static||(LA312_0>=Target && LA312_0<=Await)||LA312_0==Class||(LA312_0>=False && LA312_0<=Super)||LA312_0==Union||(LA312_0>=Yield && LA312_0<=This)||(LA312_0>=From && LA312_0<=Void)||LA312_0==FullStopFullStopFullStop||(LA312_0>=Get && LA312_0<=Set)||LA312_0==PlusSignPlusSign||LA312_0==HyphenMinusHyphenMinus||LA312_0==SolidusEqualsSign||LA312_0==As||LA312_0==Of||LA312_0==ExclamationMark||LA312_0==LeftParenthesis||LA312_0==PlusSign||LA312_0==HyphenMinus||LA312_0==Solidus||LA312_0==LessThanSign||(LA312_0>=CommercialAt && LA312_0<=LeftSquareBracket)||LA312_0==LeftCurlyBracket||LA312_0==Tilde||LA312_0==RULE_DOUBLE||(LA312_0>=RULE_HEX_INT && LA312_0<=RULE_LEGACY_OCTAL_INT)||LA312_0==RULE_SCIENTIFIC_INT||LA312_0==RULE_IDENTIFIER||LA312_0==RULE_STRING||(LA312_0>=RULE_TEMPLATE_HEAD && LA312_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA312_0==RULE_INT) ) {
                                alt312=1;
                            }
                            switch (alt312) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_112); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop313:
                            do {
                                int alt313=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt313=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt313=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt313=3;
                                    }
                                    break;

                                }

                                switch (alt313) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop313;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop315:
                    do {
                        int alt315=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt315=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt315=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt315=3;
                            }
                            break;

                        }

                        switch (alt315) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop315;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MemberExpression_return retval = new InternalN4JSXParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSXParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSXParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSXParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSXParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt322=3;
            alt322 = dfa322.predict(input);
            switch (alt322) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_111);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==LessThanSign) ) {
                        int LA317_1 = input.LA(2);

                        if ( (synpred171_InternalN4JSXParser()) ) {
                            alt317=1;
                        }
                    }
                    switch (alt317) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_105);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==LeftParenthesis) ) {
                        int LA320_1 = input.LA(2);

                        if ( (synpred172_InternalN4JSXParser()) ) {
                            alt320=1;
                        }
                    }
                    switch (alt320) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt318=2;
                            int LA318_0 = input.LA(1);

                            if ( ((LA318_0>=Intersection && LA318_0<=Implements)||(LA318_0>=Promisify && LA318_0<=Abstract)||(LA318_0>=External && LA318_0<=Function)||(LA318_0>=Private && LA318_0<=Delete)||LA318_0==Public||LA318_0==Static||(LA318_0>=Target && LA318_0<=Await)||LA318_0==Class||(LA318_0>=False && LA318_0<=Super)||LA318_0==Union||(LA318_0>=Yield && LA318_0<=This)||(LA318_0>=From && LA318_0<=Void)||LA318_0==FullStopFullStopFullStop||(LA318_0>=Get && LA318_0<=Set)||LA318_0==PlusSignPlusSign||LA318_0==HyphenMinusHyphenMinus||LA318_0==SolidusEqualsSign||LA318_0==As||LA318_0==Of||LA318_0==ExclamationMark||LA318_0==LeftParenthesis||LA318_0==PlusSign||LA318_0==HyphenMinus||LA318_0==Solidus||LA318_0==LessThanSign||(LA318_0>=CommercialAt && LA318_0<=LeftSquareBracket)||LA318_0==LeftCurlyBracket||LA318_0==Tilde||LA318_0==RULE_DOUBLE||(LA318_0>=RULE_HEX_INT && LA318_0<=RULE_LEGACY_OCTAL_INT)||LA318_0==RULE_SCIENTIFIC_INT||LA318_0==RULE_IDENTIFIER||LA318_0==RULE_STRING||(LA318_0>=RULE_TEMPLATE_HEAD && LA318_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA318_0==RULE_INT) ) {
                                alt318=1;
                            }
                            switch (alt318) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_75);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_112); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop319:
                            do {
                                int alt319=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt319=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt319=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt319=3;
                                    }
                                    break;

                                }

                                switch (alt319) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_112);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop319;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop321:
                    do {
                        int alt321=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt321=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt321=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt321=3;
                            }
                            break;

                        }

                        switch (alt321) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_112);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop321;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSXParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_113);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==LessThanSign) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSXParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSXParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSXParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_114); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==LessThanSign) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    {
                    pushFollow(FOLLOW_38);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSXParser.rulePostfixExpression_return retval = new InternalN4JSXParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==PlusSignPlusSign) && (synpred173_InternalN4JSXParser())) {
                alt325=1;
            }
            else if ( (LA325_0==HyphenMinusHyphenMinus) && (synpred173_InternalN4JSXParser())) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PostfixExpression_return retval = new InternalN4JSXParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==PlusSignPlusSign) && (synpred174_InternalN4JSXParser())) {
                alt326=1;
            }
            else if ( (LA326_0==HyphenMinusHyphenMinus) && (synpred174_InternalN4JSXParser())) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSXParser.ruleCastExpression_return retval = new InternalN4JSXParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==As) && (synpred175_InternalN4JSXParser())) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_CastExpression_return retval = new InternalN4JSXParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSXParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_37);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==As) && (synpred176_InternalN4JSXParser())) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnaryExpression_return retval = new InternalN4JSXParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( ((LA329_0>=Intersection && LA329_0<=Implements)||(LA329_0>=Promisify && LA329_0<=Abstract)||(LA329_0>=External && LA329_0<=Function)||(LA329_0>=Private && LA329_0<=Project)||LA329_0==Public||LA329_0==Static||LA329_0==Target||(LA329_0>=Async && LA329_0<=Await)||LA329_0==Class||(LA329_0>=False && LA329_0<=Super)||LA329_0==Union||(LA329_0>=Yield && LA329_0<=This)||(LA329_0>=From && LA329_0<=Type)||(LA329_0>=Get && LA329_0<=Set)||LA329_0==SolidusEqualsSign||LA329_0==As||LA329_0==Of||LA329_0==LeftParenthesis||LA329_0==Solidus||LA329_0==LessThanSign||(LA329_0>=CommercialAt && LA329_0<=LeftSquareBracket)||LA329_0==LeftCurlyBracket||LA329_0==RULE_DOUBLE||(LA329_0>=RULE_HEX_INT && LA329_0<=RULE_LEGACY_OCTAL_INT)||LA329_0==RULE_SCIENTIFIC_INT||LA329_0==RULE_IDENTIFIER||LA329_0==RULE_STRING||(LA329_0>=RULE_TEMPLATE_HEAD && LA329_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA329_0==RULE_INT) ) {
                alt329=1;
            }
            else if ( (LA329_0==Delete||LA329_0==Typeof||LA329_0==Void||LA329_0==PlusSignPlusSign||LA329_0==HyphenMinusHyphenMinus||LA329_0==ExclamationMark||LA329_0==PlusSign||LA329_0==HyphenMinus||LA329_0==Tilde) ) {
                alt329=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 0, input);

                throw nvae;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_14);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_UnaryExpression_return retval = new InternalN4JSXParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( ((LA330_0>=Intersection && LA330_0<=Implements)||(LA330_0>=Promisify && LA330_0<=Abstract)||(LA330_0>=External && LA330_0<=Function)||(LA330_0>=Private && LA330_0<=Project)||LA330_0==Public||LA330_0==Static||LA330_0==Target||(LA330_0>=Async && LA330_0<=Await)||LA330_0==Class||(LA330_0>=False && LA330_0<=Super)||LA330_0==Union||LA330_0==This||(LA330_0>=From && LA330_0<=Type)||(LA330_0>=Get && LA330_0<=Set)||LA330_0==SolidusEqualsSign||LA330_0==As||LA330_0==Of||LA330_0==LeftParenthesis||LA330_0==Solidus||LA330_0==LessThanSign||(LA330_0>=CommercialAt && LA330_0<=LeftSquareBracket)||LA330_0==LeftCurlyBracket||LA330_0==RULE_DOUBLE||(LA330_0>=RULE_HEX_INT && LA330_0<=RULE_LEGACY_OCTAL_INT)||LA330_0==RULE_SCIENTIFIC_INT||LA330_0==RULE_IDENTIFIER||LA330_0==RULE_STRING||(LA330_0>=RULE_TEMPLATE_HEAD && LA330_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA330_0==RULE_INT) ) {
                alt330=1;
            }
            else if ( (LA330_0==Delete||LA330_0==Typeof||LA330_0==Void||LA330_0==PlusSignPlusSign||LA330_0==HyphenMinusHyphenMinus||LA330_0==ExclamationMark||LA330_0==PlusSign||LA330_0==HyphenMinus||LA330_0==Tilde) ) {
                alt330=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_14);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleMultiplicativeExpression_return retval = new InternalN4JSXParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==Asterisk) && (synpred177_InternalN4JSXParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==Solidus) && (synpred177_InternalN4JSXParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==PercentSign) && (synpred177_InternalN4JSXParser())) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSXParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==Asterisk) && (synpred178_InternalN4JSXParser())) {
                    alt332=1;
                }
                else if ( (LA332_0==Solidus) && (synpred178_InternalN4JSXParser())) {
                    alt332=1;
                }
                else if ( (LA332_0==PercentSign) && (synpred178_InternalN4JSXParser())) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAdditiveExpression_return retval = new InternalN4JSXParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop333:
            do {
                int alt333=2;
                int LA333_0 = input.LA(1);

                if ( (LA333_0==PlusSign) && (synpred179_InternalN4JSXParser())) {
                    alt333=1;
                }
                else if ( (LA333_0==HyphenMinus) && (synpred179_InternalN4JSXParser())) {
                    alt333=1;
                }


                switch (alt333) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop333;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AdditiveExpression_return retval = new InternalN4JSXParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_118);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);

                if ( (LA334_0==PlusSign) && (synpred180_InternalN4JSXParser())) {
                    alt334=1;
                }
                else if ( (LA334_0==HyphenMinus) && (synpred180_InternalN4JSXParser())) {
                    alt334=1;
                }


                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSXParser.ruleShiftExpression_return retval = new InternalN4JSXParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop335:
            do {
                int alt335=2;
                alt335 = dfa335.predict(input);
                switch (alt335) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ShiftExpression_return retval = new InternalN4JSXParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_119);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop336:
            do {
                int alt336=2;
                alt336 = dfa336.predict(input);
                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSXParser.ruleShiftOperator_return retval = new InternalN4JSXParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;


            
        try {
            {
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==GreaterThanSign) ) {
                alt338=1;
            }
            else if ( (LA338_0==LessThanSignLessThanSign) ) {
                alt338=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);

                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0()); 
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1()); 
                    }
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==GreaterThanSign) ) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalExpression_return retval = new InternalN4JSXParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop339:
            do {
                int alt339=2;
                alt339 = dfa339.predict(input);
                switch (alt339) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalExpression_return retval = new InternalN4JSXParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop340:
            do {
                int alt340=2;
                alt340 = dfa340.predict(input);
                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_RelationalExpression_return retval = new InternalN4JSXParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop341:
            do {
                int alt341=2;
                alt341 = dfa341.predict(input);
                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_RelationalExpression_return retval = new InternalN4JSXParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop342:
            do {
                int alt342=2;
                alt342 = dfa342.predict(input);
                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSXParser.ruleRelationalOperator_return retval = new InternalN4JSXParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;


            
        try {
            {
            int alt343=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt343=1;
                }
                break;
            case GreaterThanSign:
                {
                alt343=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt343=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt343=4;
                }
                break;
            case Instanceof:
                {
                alt343=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;
            }

            switch (alt343) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSXParser.norm1_RelationalOperator_return retval = new InternalN4JSXParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;


            
        try {
            {
            int alt344=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt344=1;
                }
                break;
            case GreaterThanSign:
                {
                alt344=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt344=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt344=4;
                }
                break;
            case Instanceof:
                {
                alt344=5;
                }
                break;
            case In:
                {
                alt344=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;
            }

            switch (alt344) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSXParser.ruleEqualityExpression_return retval = new InternalN4JSXParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==EqualsSignEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==ExclamationMarkEqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==EqualsSignEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==ExclamationMarkEqualsSign) && (synpred191_InternalN4JSXParser())) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_EqualityExpression_return retval = new InternalN4JSXParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==EqualsSignEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==EqualsSignEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSign) && (synpred192_InternalN4JSXParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_EqualityExpression_return retval = new InternalN4JSXParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==EqualsSignEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==ExclamationMarkEqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==EqualsSignEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==ExclamationMarkEqualsSign) && (synpred193_InternalN4JSXParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_EqualityExpression_return retval = new InternalN4JSXParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==EqualsSignEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==ExclamationMarkEqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==EqualsSignEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt348=1;
                }
                else if ( (LA348_0==ExclamationMarkEqualsSign) && (synpred194_InternalN4JSXParser())) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDExpression_return retval = new InternalN4JSXParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==Ampersand) && (synpred195_InternalN4JSXParser())) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==Ampersand) && (synpred196_InternalN4JSXParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==Ampersand) && (synpred197_InternalN4JSXParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSXParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);

                if ( (LA352_0==Ampersand) && (synpred198_InternalN4JSXParser())) {
                    alt352=1;
                }


                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseANDOperator_return retval = new InternalN4JSXParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;


            
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXORExpression_return retval = new InternalN4JSXParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==CircumflexAccent) && (synpred199_InternalN4JSXParser())) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==CircumflexAccent) && (synpred200_InternalN4JSXParser())) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==CircumflexAccent) && (synpred201_InternalN4JSXParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==CircumflexAccent) && (synpred202_InternalN4JSXParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseXOROperator_return retval = new InternalN4JSXParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;


            
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseORExpression_return retval = new InternalN4JSXParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==VerticalLine) && (synpred203_InternalN4JSXParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_BitwiseORExpression_return retval = new InternalN4JSXParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==VerticalLine) && (synpred204_InternalN4JSXParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_BitwiseORExpression_return retval = new InternalN4JSXParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==VerticalLine) && (synpred205_InternalN4JSXParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_BitwiseORExpression_return retval = new InternalN4JSXParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==VerticalLine) && (synpred206_InternalN4JSXParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleBitwiseOROperator_return retval = new InternalN4JSXParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;


            
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDExpression_return retval = new InternalN4JSXParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==AmpersandAmpersand) && (synpred207_InternalN4JSXParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalANDExpression_return retval = new InternalN4JSXParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==AmpersandAmpersand) && (synpred208_InternalN4JSXParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalANDExpression_return retval = new InternalN4JSXParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==AmpersandAmpersand) && (synpred209_InternalN4JSXParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalANDExpression_return retval = new InternalN4JSXParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==AmpersandAmpersand) && (synpred210_InternalN4JSXParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_127);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalANDOperator_return retval = new InternalN4JSXParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;


            
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalORExpression_return retval = new InternalN4JSXParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==VerticalLineVerticalLine) && (synpred211_InternalN4JSXParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_LogicalORExpression_return retval = new InternalN4JSXParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==VerticalLineVerticalLine) && (synpred212_InternalN4JSXParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_LogicalORExpression_return retval = new InternalN4JSXParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==VerticalLineVerticalLine) && (synpred213_InternalN4JSXParser())) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_LogicalORExpression_return retval = new InternalN4JSXParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_128);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==VerticalLineVerticalLine) && (synpred214_InternalN4JSXParser())) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_14);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_128);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSXParser.ruleLogicalOROperator_return retval = new InternalN4JSXParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;


            
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.ruleConditionalExpression_return retval = new InternalN4JSXParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==QuestionMark) && (synpred215_InternalN4JSXParser())) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_ConditionalExpression_return retval = new InternalN4JSXParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==QuestionMark) && (synpred216_InternalN4JSXParser())) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_ConditionalExpression_return retval = new InternalN4JSXParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==QuestionMark) && (synpred217_InternalN4JSXParser())) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_ConditionalExpression_return retval = new InternalN4JSXParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSXParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_129);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( (LA372_0==QuestionMark) && (synpred218_InternalN4JSXParser())) {
                alt372=1;
            }
            switch (alt372) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_92);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentExpression_return retval = new InternalN4JSXParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt374=4;
            alt374 = dfa374.predict(input);
            switch (alt374) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt373=2;
                    alt373 = dfa373.predict(input);
                    switch (alt373) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_14);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AssignmentExpression_return retval = new InternalN4JSXParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt376=4;
            alt376 = dfa376.predict(input);
            switch (alt376) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt375=2;
                    alt375 = dfa375.predict(input);
                    switch (alt375) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_14);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AssignmentExpression_return retval = new InternalN4JSXParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt378=5;
            alt378 = dfa378.predict(input);
            switch (alt378) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt377=2;
                    alt377 = dfa377.predict(input);
                    switch (alt377) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_14);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AssignmentExpression_return retval = new InternalN4JSXParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSXParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSXParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSXParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt380=5;
            alt380 = dfa380.predict(input);
            switch (alt380) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_130);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt379=2;
                    alt379 = dfa379.predict(input);
                    switch (alt379) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_14);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSXParser.ruleYieldExpression_return retval = new InternalN4JSXParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==Asterisk) && (synpred239_InternalN4JSXParser())) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt382=2;
            alt382 = dfa382.predict(input);
            switch (alt382) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_YieldExpression_return retval = new InternalN4JSXParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==Asterisk) && (synpred241_InternalN4JSXParser())) {
                alt383=1;
            }
            switch (alt383) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt384=2;
            alt384 = dfa384.predict(input);
            switch (alt384) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSXParser.ruleAssignmentOperator_return retval = new InternalN4JSXParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;


            
        try {
            {
            int alt386=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt386=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt386=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt386=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt386=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt386=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt386=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt386=7;
                }
                break;
            case GreaterThanSign:
                {
                alt386=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt386=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt386=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt386=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);

                throw nvae;
            }

            switch (alt386) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0()); 
                    }
                    int alt385=2;
                    int LA385_0 = input.LA(1);

                    if ( (LA385_0==GreaterThanSign) ) {
                        alt385=1;
                    }
                    switch (alt385) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1()); 
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSXParser.ruleAwaitExpression_return retval = new InternalN4JSXParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_AwaitExpression_return retval = new InternalN4JSXParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_AwaitExpression_return retval = new InternalN4JSXParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_AwaitExpression_return retval = new InternalN4JSXParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.rulePromisifyExpression_return retval = new InternalN4JSXParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_PromisifyExpression_return retval = new InternalN4JSXParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm2_PromisifyExpression_return retval = new InternalN4JSXParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSXParser.norm3_PromisifyExpression_return retval = new InternalN4JSXParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSXParser.ruleExpression_return retval = new InternalN4JSXParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt388=2;
            int LA388_0 = input.LA(1);

            if ( (LA388_0==Comma) ) {
                alt388=1;
            }
            switch (alt388) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop387:
                    do {
                        int alt387=2;
                        int LA387_0 = input.LA(1);

                        if ( (LA387_0==Comma) ) {
                            alt387=1;
                        }


                        switch (alt387) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop387;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSXParser.norm1_Expression_return retval = new InternalN4JSXParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt390=2;
            int LA390_0 = input.LA(1);

            if ( (LA390_0==Comma) ) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop389:
                    do {
                        int alt389=2;
                        int LA389_0 = input.LA(1);

                        if ( (LA389_0==Comma) ) {
                            alt389=1;
                        }


                        switch (alt389) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop389;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSXParser.norm2_Expression_return retval = new InternalN4JSXParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==Comma) ) {
                alt392=1;
            }
            switch (alt392) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop391:
                    do {
                        int alt391=2;
                        int LA391_0 = input.LA(1);

                        if ( (LA391_0==Comma) ) {
                            alt391=1;
                        }


                        switch (alt391) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop391;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSXParser.norm3_Expression_return retval = new InternalN4JSXParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSXParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_44);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt394=2;
            int LA394_0 = input.LA(1);

            if ( (LA394_0==Comma) ) {
                alt394=1;
            }
            switch (alt394) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_44);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop393:
                    do {
                        int alt393=2;
                        int LA393_0 = input.LA(1);

                        if ( (LA393_0==Comma) ) {
                            alt393=1;
                        }


                        switch (alt393) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop393;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateLiteral_return retval = new InternalN4JSXParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt398=2;
            int LA398_0 = input.LA(1);

            if ( (LA398_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt398=1;
            }
            else if ( (LA398_0==RULE_TEMPLATE_HEAD) ) {
                alt398=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 0, input);

                throw nvae;
            }
            switch (alt398) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_136);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt395=2;
                    int LA395_0 = input.LA(1);

                    if ( ((LA395_0>=Intersection && LA395_0<=Implements)||(LA395_0>=Promisify && LA395_0<=Abstract)||(LA395_0>=External && LA395_0<=Function)||(LA395_0>=Private && LA395_0<=Delete)||LA395_0==Public||LA395_0==Static||(LA395_0>=Target && LA395_0<=Await)||LA395_0==Class||(LA395_0>=False && LA395_0<=Super)||LA395_0==Union||(LA395_0>=Yield && LA395_0<=This)||(LA395_0>=From && LA395_0<=Void)||(LA395_0>=Get && LA395_0<=Set)||LA395_0==PlusSignPlusSign||LA395_0==HyphenMinusHyphenMinus||LA395_0==SolidusEqualsSign||LA395_0==As||LA395_0==Of||LA395_0==ExclamationMark||LA395_0==LeftParenthesis||LA395_0==PlusSign||LA395_0==HyphenMinus||LA395_0==Solidus||LA395_0==LessThanSign||(LA395_0>=CommercialAt && LA395_0<=LeftSquareBracket)||LA395_0==LeftCurlyBracket||LA395_0==Tilde||LA395_0==RULE_DOUBLE||(LA395_0>=RULE_HEX_INT && LA395_0<=RULE_LEGACY_OCTAL_INT)||LA395_0==RULE_SCIENTIFIC_INT||LA395_0==RULE_IDENTIFIER||LA395_0==RULE_STRING||(LA395_0>=RULE_TEMPLATE_HEAD && LA395_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA395_0==RULE_INT) ) {
                        alt395=1;
                    }
                    switch (alt395) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_136);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_137);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop397:
                    do {
                        int alt397=2;
                        int LA397_0 = input.LA(1);

                        if ( (LA397_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt397=1;
                        }


                        switch (alt397) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_136);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt396=2;
                    	    int LA396_0 = input.LA(1);

                    	    if ( ((LA396_0>=Intersection && LA396_0<=Implements)||(LA396_0>=Promisify && LA396_0<=Abstract)||(LA396_0>=External && LA396_0<=Function)||(LA396_0>=Private && LA396_0<=Delete)||LA396_0==Public||LA396_0==Static||(LA396_0>=Target && LA396_0<=Await)||LA396_0==Class||(LA396_0>=False && LA396_0<=Super)||LA396_0==Union||(LA396_0>=Yield && LA396_0<=This)||(LA396_0>=From && LA396_0<=Void)||(LA396_0>=Get && LA396_0<=Set)||LA396_0==PlusSignPlusSign||LA396_0==HyphenMinusHyphenMinus||LA396_0==SolidusEqualsSign||LA396_0==As||LA396_0==Of||LA396_0==ExclamationMark||LA396_0==LeftParenthesis||LA396_0==PlusSign||LA396_0==HyphenMinus||LA396_0==Solidus||LA396_0==LessThanSign||(LA396_0>=CommercialAt && LA396_0<=LeftSquareBracket)||LA396_0==LeftCurlyBracket||LA396_0==Tilde||LA396_0==RULE_DOUBLE||(LA396_0>=RULE_HEX_INT && LA396_0<=RULE_LEGACY_OCTAL_INT)||LA396_0==RULE_SCIENTIFIC_INT||LA396_0==RULE_IDENTIFIER||LA396_0==RULE_STRING||(LA396_0>=RULE_TEMPLATE_HEAD && LA396_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA396_0==RULE_INT) ) {
                    	        alt396=1;
                    	    }
                    	    switch (alt396) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_136);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_137);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop397;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSXParser.norm1_TemplateLiteral_return retval = new InternalN4JSXParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSXParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSXParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSXParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSXParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt402=1;
            }
            else if ( (LA402_0==RULE_TEMPLATE_HEAD) ) {
                alt402=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 402, 0, input);

                throw nvae;
            }
            switch (alt402) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_136);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt399=2;
                    int LA399_0 = input.LA(1);

                    if ( ((LA399_0>=Intersection && LA399_0<=Implements)||(LA399_0>=Promisify && LA399_0<=Abstract)||(LA399_0>=External && LA399_0<=Function)||(LA399_0>=Private && LA399_0<=Delete)||LA399_0==Public||LA399_0==Static||(LA399_0>=Target && LA399_0<=Await)||LA399_0==Class||(LA399_0>=False && LA399_0<=Super)||LA399_0==Union||(LA399_0>=Yield && LA399_0<=This)||(LA399_0>=From && LA399_0<=Void)||(LA399_0>=Get && LA399_0<=Set)||LA399_0==PlusSignPlusSign||LA399_0==HyphenMinusHyphenMinus||LA399_0==SolidusEqualsSign||LA399_0==As||LA399_0==Of||LA399_0==ExclamationMark||LA399_0==LeftParenthesis||LA399_0==PlusSign||LA399_0==HyphenMinus||LA399_0==Solidus||LA399_0==LessThanSign||(LA399_0>=CommercialAt && LA399_0<=LeftSquareBracket)||LA399_0==LeftCurlyBracket||LA399_0==Tilde||LA399_0==RULE_DOUBLE||(LA399_0>=RULE_HEX_INT && LA399_0<=RULE_LEGACY_OCTAL_INT)||LA399_0==RULE_SCIENTIFIC_INT||LA399_0==RULE_IDENTIFIER||LA399_0==RULE_STRING||(LA399_0>=RULE_TEMPLATE_HEAD && LA399_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA399_0==RULE_INT) ) {
                        alt399=1;
                    }
                    switch (alt399) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_136);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_137);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop401:
                    do {
                        int alt401=2;
                        int LA401_0 = input.LA(1);

                        if ( (LA401_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt401=1;
                        }


                        switch (alt401) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_136);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt400=2;
                    	    int LA400_0 = input.LA(1);

                    	    if ( ((LA400_0>=Intersection && LA400_0<=Implements)||(LA400_0>=Promisify && LA400_0<=Abstract)||(LA400_0>=External && LA400_0<=Function)||(LA400_0>=Private && LA400_0<=Delete)||LA400_0==Public||LA400_0==Static||(LA400_0>=Target && LA400_0<=Await)||LA400_0==Class||(LA400_0>=False && LA400_0<=Super)||LA400_0==Union||(LA400_0>=Yield && LA400_0<=This)||(LA400_0>=From && LA400_0<=Void)||(LA400_0>=Get && LA400_0<=Set)||LA400_0==PlusSignPlusSign||LA400_0==HyphenMinusHyphenMinus||LA400_0==SolidusEqualsSign||LA400_0==As||LA400_0==Of||LA400_0==ExclamationMark||LA400_0==LeftParenthesis||LA400_0==PlusSign||LA400_0==HyphenMinus||LA400_0==Solidus||LA400_0==LessThanSign||(LA400_0>=CommercialAt && LA400_0<=LeftSquareBracket)||LA400_0==LeftCurlyBracket||LA400_0==Tilde||LA400_0==RULE_DOUBLE||(LA400_0>=RULE_HEX_INT && LA400_0<=RULE_LEGACY_OCTAL_INT)||LA400_0==RULE_SCIENTIFIC_INT||LA400_0==RULE_IDENTIFIER||LA400_0==RULE_STRING||(LA400_0>=RULE_TEMPLATE_HEAD && LA400_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA400_0==RULE_INT) ) {
                    	        alt400=1;
                    	    }
                    	    switch (alt400) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_136);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_137);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop401;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSXParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        		setInTemplateSegment();
            
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSXParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSXParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateHead_return retval = new InternalN4JSXParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTail_return retval = new InternalN4JSXParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddle_return retval = new InternalN4JSXParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLiteral_return retval = new InternalN4JSXParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;



            
        try {
            {
            int alt403=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt403=1;
                }
                break;
            case False:
            case True:
                {
                alt403=2;
                }
                break;
            case RULE_STRING:
                {
                alt403=3;
                }
                break;
            case Null:
                {
                alt403=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt403=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);

                throw nvae;
            }

            switch (alt403) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNullLiteral_return retval = new InternalN4JSXParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;


            
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBooleanLiteral_return retval = new InternalN4JSXParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;


            
        try {
            {
            {
            int alt404=2;
            int LA404_0 = input.LA(1);

            if ( (LA404_0==True) ) {
                alt404=1;
            }
            else if ( (LA404_0==False) ) {
                alt404=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);

                throw nvae;
            }
            switch (alt404) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleStringLiteral_return retval = new InternalN4JSXParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteral_return retval = new InternalN4JSXParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSXParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSXParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSXParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSXParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;



            
        try {
            {
            int alt405=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt405=1;
                }
                break;
            case RULE_INT:
                {
                alt405=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt405=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt405=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt405=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt405=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt405=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 405, 0, input);

                throw nvae;
            }

            switch (alt405) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleDoubleLiteral_return retval = new InternalN4JSXParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleIntLiteral_return retval = new InternalN4JSXParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleOctalIntLiteral_return retval = new InternalN4JSXParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSXParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleHexIntLiteral_return retval = new InternalN4JSXParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleBinaryIntLiteral_return retval = new InternalN4JSXParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleScientificIntLiteral_return retval = new InternalN4JSXParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSXParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSXParser.ruleNumericLiteralAsString_return retval = new InternalN4JSXParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);


            
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierOrThis_return retval = new InternalN4JSXParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;


            
        try {
            {
            int alt406=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt406=1;
                }
                break;
            case This:
                {
                alt406=2;
                }
                break;
            case Promisify:
                {
                alt406=3;
                }
                break;
            case Target:
                {
                alt406=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationName_return retval = new InternalN4JSXParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;


            
        try {
            {
            int alt407=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt407=1;
                }
                break;
            case This:
                {
                alt407=2;
                }
                break;
            case Target:
                {
                alt407=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);

                throw nvae;
            }

            switch (alt407) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSXParser.ruleREGEX_LITERAL_return retval = new InternalN4JSXParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        		setInRegularExpression();
            
        try {
            {
            {
            int alt408=2;
            int LA408_0 = input.LA(1);

            if ( (LA408_0==Solidus) ) {
                alt408=1;
            }
            else if ( (LA408_0==SolidusEqualsSign) ) {
                alt408=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }
            switch (alt408) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1()); 
                    }

                    }
                    break;

            }
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==RULE_REGEX_TAIL) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateTailLiteral_return retval = new InternalN4JSXParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==RULE_TEMPLATE_END) ) {
                alt410=1;
            }
            switch (alt410) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSXParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSXParser.ruleSemi_return retval = new InternalN4JSXParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        		int marker = input.mark();
        		promoteEOL();
            
        try {
            int alt411=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt411=1;
                }
                break;
            case EOF:
                {
                alt411=2;
                }
                break;
            case RULE_EOL:
                {
                alt411=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt411=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt411=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);

                throw nvae;
            }

            switch (alt411) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSXParser.ruleNoLineTerminator_return retval = new InternalN4JSXParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;


            
        try {
            {
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==RULE_NO_LINE_TERMINATOR) ) {
                alt412=1;
            }
            switch (alt412) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotation_return retval = new InternalN4JSXParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSXParser.ruleScriptAnnotation_return retval = new InternalN4JSXParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSXParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSXParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSXParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_105);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt415=2;
            alt415 = dfa415.predict(input);
            switch (alt415) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0()); 
                    }

                    }
                    int alt414=2;
                    int LA414_0 = input.LA(1);

                    if ( ((LA414_0>=Intersection && LA414_0<=Constructor)||LA414_0==Promisify||LA414_0==Target||LA414_0==Await||LA414_0==False||LA414_0==Union||LA414_0==This||(LA414_0>=Null && LA414_0<=Void)||LA414_0==SolidusEqualsSign||LA414_0==LeftParenthesis||LA414_0==Solidus||LA414_0==QuestionMark||LA414_0==LeftSquareBracket||LA414_0==LeftCurlyBracket||LA414_0==Tilde||LA414_0==RULE_DOUBLE||(LA414_0>=RULE_HEX_INT && LA414_0<=RULE_LEGACY_OCTAL_INT)||LA414_0==RULE_SCIENTIFIC_INT||LA414_0==RULE_IDENTIFIER||LA414_0==RULE_STRING||LA414_0==RULE_INT) ) {
                        alt414=1;
                    }
                    switch (alt414) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop413:
                            do {
                                int alt413=2;
                                int LA413_0 = input.LA(1);

                                if ( (LA413_0==Comma) ) {
                                    alt413=1;
                                }


                                switch (alt413) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_141); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_59);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop413;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationArgument_return retval = new InternalN4JSXParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;



            
        try {
            {
            int alt416=2;
            int LA416_0 = input.LA(1);

            if ( (LA416_0==False||LA416_0==Null||LA416_0==True||LA416_0==SolidusEqualsSign||LA416_0==Solidus||LA416_0==RULE_DOUBLE||(LA416_0>=RULE_HEX_INT && LA416_0<=RULE_LEGACY_OCTAL_INT)||LA416_0==RULE_SCIENTIFIC_INT||LA416_0==RULE_STRING||LA416_0==RULE_INT) ) {
                alt416=1;
            }
            else if ( ((LA416_0>=Intersection && LA416_0<=Constructor)||LA416_0==Promisify||LA416_0==Target||LA416_0==Await||LA416_0==Union||LA416_0==This||LA416_0==This_1||(LA416_0>=Type && LA416_0<=Void)||LA416_0==LeftParenthesis||LA416_0==QuestionMark||LA416_0==LeftSquareBracket||LA416_0==LeftCurlyBracket||LA416_0==Tilde||LA416_0==RULE_IDENTIFIER) ) {
                alt416=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }
            switch (alt416) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSXParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSXParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotationList_return retval = new InternalN4JSXParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSXParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_139); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_142);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2()); 
            }

            }


            }


            }


            }
            loop417:
            do {
                int alt417=2;
                int LA417_0 = input.LA(1);

                if ( (LA417_0==CommercialAt) ) {
                    alt417=1;
                }


                switch (alt417) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop417;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleExpressionAnnotationList_return retval = new InternalN4JSXParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt418=0;
            loop418:
            do {
                int alt418=2;
                int LA418_0 = input.LA(1);

                if ( (LA418_0==CommercialAt) ) {
                    alt418=1;
                }


                switch (alt418) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt418 >= 1 ) break loop418;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(418, input);
                        throw eee;
                }
                cnt418++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSXParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt419=0;
            loop419:
            do {
                int alt419=2;
                int LA419_0 = input.LA(1);

                if ( (LA419_0==CommercialAt) ) {
                    alt419=1;
                }


                switch (alt419) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt419 >= 1 ) break loop419;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(419, input);
                        throw eee;
                }
                cnt419++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSXParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt420=0;
            loop420:
            do {
                int alt420=2;
                int LA420_0 = input.LA(1);

                if ( (LA420_0==CommercialAt) ) {
                    alt420=1;
                }


                switch (alt420) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt420 >= 1 ) break loop420;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(420, input);
                        throw eee;
                }
                cnt420++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSXParser.ruleTypeReferenceName_return retval = new InternalN4JSXParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;


            
        try {
            {
            int alt421=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt421=1;
                }
                break;
            case This:
                {
                alt421=2;
                }
                break;
            case Await:
                {
                alt421=3;
                }
                break;
            case Promisify:
                {
                alt421=4;
                }
                break;
            case Target:
                {
                alt421=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt421=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }

            switch (alt421) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_11); if (state.failed) return ;
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==FullStop) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_143); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0()); 
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassDeclaration_return retval = new InternalN4JSXParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop423:
            do {
                int alt423=2;
                int LA423_0 = input.LA(1);

                if ( ((LA423_0>=Protected && LA423_0<=Abstract)||LA423_0==External||(LA423_0>=Private && LA423_0<=Project)||LA423_0==Public||LA423_0==Static||LA423_0==Const) ) {
                    alt423=1;
                }


                switch (alt423) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_20);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop423;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2()); 
            }
            int alt424=2;
            int LA424_0 = input.LA(1);

            if ( (LA424_0==Tilde) ) {
                alt424=1;
            }
            switch (alt424) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt425=2;
            int LA425_0 = input.LA(1);

            if ( ((LA425_0>=Intersection && LA425_0<=Constructor)||(LA425_0>=Promisify && LA425_0<=Abstract)||LA425_0==External||(LA425_0>=Private && LA425_0<=Project)||LA425_0==Public||LA425_0==Static||LA425_0==Target||(LA425_0>=Async && LA425_0<=Await)||LA425_0==Union||(LA425_0>=Yield && LA425_0<=This)||LA425_0==From||LA425_0==Type||(LA425_0>=Get && LA425_0<=Let)||(LA425_0>=Out && LA425_0<=Set)||LA425_0==As||LA425_0==Of||LA425_0==RULE_IDENTIFIER) ) {
                alt425=1;
            }
            else if ( (LA425_0==Implements) ) {
                int LA425_2 = input.LA(2);

                if ( (LA425_2==Implements||LA425_2==Extends||LA425_2==LessThanSign||LA425_2==LeftCurlyBracket) ) {
                    alt425=1;
                }
            }
            switch (alt425) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==LessThanSign) ) {
                alt426=1;
            }
            switch (alt426) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==Implements||LA427_0==Extends) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSXParser.ruleMembers_return retval = new InternalN4JSXParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop428:
            do {
                int alt428=2;
                int LA428_0 = input.LA(1);

                if ( ((LA428_0>=Intersection && LA428_0<=With)||(LA428_0>=For && LA428_0<=Var)||(LA428_0>=As && LA428_0<=Of)||LA428_0==LeftParenthesis||LA428_0==Asterisk||LA428_0==LessThanSign||(LA428_0>=QuestionMark && LA428_0<=LeftSquareBracket)||LA428_0==LeftCurlyBracket||LA428_0==Tilde||LA428_0==RULE_DOUBLE||LA428_0==RULE_HEX_INT||LA428_0==RULE_OCTAL_INT||LA428_0==RULE_SCIENTIFIC_INT||LA428_0==RULE_IDENTIFIER||LA428_0==RULE_STRING||LA428_0==RULE_INT) ) {
                    alt428=1;
                }


                switch (alt428) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop428;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSXParser.norm1_Members_return retval = new InternalN4JSXParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop429:
            do {
                int alt429=2;
                int LA429_0 = input.LA(1);

                if ( ((LA429_0>=Intersection && LA429_0<=With)||(LA429_0>=For && LA429_0<=Var)||(LA429_0>=As && LA429_0<=Of)||LA429_0==LeftParenthesis||LA429_0==Asterisk||LA429_0==LessThanSign||(LA429_0>=QuestionMark && LA429_0<=LeftSquareBracket)||LA429_0==LeftCurlyBracket||LA429_0==Tilde||LA429_0==RULE_DOUBLE||LA429_0==RULE_HEX_INT||LA429_0==RULE_OCTAL_INT||LA429_0==RULE_SCIENTIFIC_INT||LA429_0==RULE_IDENTIFIER||LA429_0==RULE_STRING||LA429_0==RULE_INT) ) {
                    alt429=1;
                }


                switch (alt429) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop429;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.ruleClassExtendsClause_return retval = new InternalN4JSXParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt433=2;
            int LA433_0 = input.LA(1);

            if ( (LA433_0==Extends) ) {
                alt433=1;
            }
            else if ( (LA433_0==Implements) ) {
                alt433=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 433, 0, input);

                throw nvae;
            }
            switch (alt433) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt432=2;
                    int LA432_0 = input.LA(1);

                    if ( (LA432_0==Void) && (synpred255_InternalN4JSXParser())) {
                        alt432=1;
                    }
                    else if ( (LA432_0==This) ) {
                        int LA432_2 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt432=1;
                        }
                        else if ( (true) ) {
                            alt432=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 432, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA432_0==Await) ) {
                        int LA432_3 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt432=1;
                        }
                        else if ( (true) ) {
                            alt432=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 432, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA432_0==Promisify) ) {
                        int LA432_4 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt432=1;
                        }
                        else if ( (true) ) {
                            alt432=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 432, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA432_0==Target) ) {
                        int LA432_5 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt432=1;
                        }
                        else if ( (true) ) {
                            alt432=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 432, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA432_0==RULE_IDENTIFIER) ) {
                        int LA432_6 = input.LA(2);

                        if ( (synpred255_InternalN4JSXParser()) ) {
                            alt432=1;
                        }
                        else if ( (true) ) {
                            alt432=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 432, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA432_0>=Intersection && LA432_0<=Implements)||(LA432_0>=Interface && LA432_0<=Abstract)||(LA432_0>=External && LA432_0<=Function)||(LA432_0>=Private && LA432_0<=Project)||LA432_0==Public||LA432_0==Static||LA432_0==Async||LA432_0==Class||(LA432_0>=False && LA432_0<=Super)||LA432_0==Union||LA432_0==Yield||(LA432_0>=From && LA432_0<=Type)||(LA432_0>=Get && LA432_0<=Set)||LA432_0==SolidusEqualsSign||LA432_0==As||LA432_0==Of||LA432_0==LeftParenthesis||LA432_0==Solidus||LA432_0==LessThanSign||(LA432_0>=CommercialAt && LA432_0<=LeftSquareBracket)||LA432_0==LeftCurlyBracket||LA432_0==RULE_DOUBLE||(LA432_0>=RULE_HEX_INT && LA432_0<=RULE_LEGACY_OCTAL_INT)||LA432_0==RULE_SCIENTIFIC_INT||LA432_0==RULE_STRING||(LA432_0>=RULE_TEMPLATE_HEAD && LA432_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA432_0==RULE_INT) ) {
                        alt432=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 432, 0, input);

                        throw nvae;
                    }
                    switch (alt432) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt431=2;
                            int LA431_0 = input.LA(1);

                            if ( (LA431_0==Implements||LA431_0==Extends) ) {
                                alt431=1;
                            }
                            switch (alt431) {
                                case 1 :
                                    {
                                    int alt430=2;
                                    int LA430_0 = input.LA(1);

                                    if ( (LA430_0==Implements) ) {
                                        alt430=1;
                                    }
                                    else if ( (LA430_0==Extends) ) {
                                        alt430=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 430, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt430) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSXParser.norm1_ClassExtendsClause_return retval = new InternalN4JSXParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSXParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( (LA437_0==Extends) ) {
                alt437=1;
            }
            else if ( (LA437_0==Implements) ) {
                alt437=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 437, 0, input);

                throw nvae;
            }
            switch (alt437) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt436=2;
                    int LA436_0 = input.LA(1);

                    if ( (LA436_0==Void) && (synpred256_InternalN4JSXParser())) {
                        alt436=1;
                    }
                    else if ( (LA436_0==This) ) {
                        int LA436_2 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt436=1;
                        }
                        else if ( (true) ) {
                            alt436=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 436, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA436_0==Await) ) {
                        int LA436_3 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt436=1;
                        }
                        else if ( (true) ) {
                            alt436=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 436, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA436_0==Promisify) ) {
                        int LA436_4 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt436=1;
                        }
                        else if ( (true) ) {
                            alt436=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 436, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA436_0==Target) ) {
                        int LA436_5 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt436=1;
                        }
                        else if ( (true) ) {
                            alt436=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 436, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA436_0==RULE_IDENTIFIER) ) {
                        int LA436_6 = input.LA(2);

                        if ( (synpred256_InternalN4JSXParser()) ) {
                            alt436=1;
                        }
                        else if ( (true) ) {
                            alt436=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 436, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA436_0>=Intersection && LA436_0<=Implements)||(LA436_0>=Interface && LA436_0<=Abstract)||(LA436_0>=External && LA436_0<=Function)||(LA436_0>=Private && LA436_0<=Project)||LA436_0==Public||LA436_0==Static||LA436_0==Async||LA436_0==Class||(LA436_0>=False && LA436_0<=Super)||LA436_0==Union||(LA436_0>=From && LA436_0<=Type)||(LA436_0>=Get && LA436_0<=Set)||LA436_0==SolidusEqualsSign||LA436_0==As||LA436_0==Of||LA436_0==LeftParenthesis||LA436_0==Solidus||LA436_0==LessThanSign||(LA436_0>=CommercialAt && LA436_0<=LeftSquareBracket)||LA436_0==LeftCurlyBracket||LA436_0==RULE_DOUBLE||(LA436_0>=RULE_HEX_INT && LA436_0<=RULE_LEGACY_OCTAL_INT)||LA436_0==RULE_SCIENTIFIC_INT||LA436_0==RULE_STRING||(LA436_0>=RULE_TEMPLATE_HEAD && LA436_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA436_0==RULE_INT) ) {
                        alt436=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 436, 0, input);

                        throw nvae;
                    }
                    switch (alt436) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt435=2;
                            int LA435_0 = input.LA(1);

                            if ( (LA435_0==Implements||LA435_0==Extends) ) {
                                alt435=1;
                            }
                            switch (alt435) {
                                case 1 :
                                    {
                                    int alt434=2;
                                    int LA434_0 = input.LA(1);

                                    if ( (LA434_0==Implements) ) {
                                        alt434=1;
                                    }
                                    else if ( (LA434_0==Extends) ) {
                                        alt434=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 434, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt434) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleClassImplementsList_return retval = new InternalN4JSXParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_148);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0()); 
            }

            }


            }
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);

                if ( (LA439_0==Implements||LA439_0==Extends||LA439_0==Comma) ) {
                    alt439=1;
                }


                switch (alt439) {
            	case 1 :
            	    {
            	    int alt438=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt438=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt438=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt438=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 438, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt438) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_148);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop439;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.ruleN4ClassExpression_return retval = new InternalN4JSXParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_67); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( ((LA440_0>=Intersection && LA440_0<=Constructor)||(LA440_0>=Promisify && LA440_0<=Abstract)||LA440_0==External||(LA440_0>=Private && LA440_0<=Project)||LA440_0==Public||LA440_0==Static||LA440_0==Target||(LA440_0>=Async && LA440_0<=Await)||LA440_0==Union||(LA440_0>=Yield && LA440_0<=This)||LA440_0==From||LA440_0==Type||(LA440_0>=Get && LA440_0<=Let)||(LA440_0>=Out && LA440_0<=Set)||LA440_0==As||LA440_0==Of||LA440_0==RULE_IDENTIFIER) ) {
                alt440=1;
            }
            else if ( (LA440_0==Implements) ) {
                int LA440_2 = input.LA(2);

                if ( (LA440_2==Implements||LA440_2==Extends||LA440_2==LeftCurlyBracket) ) {
                    alt440=1;
                }
            }
            switch (alt440) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( (LA441_0==Implements||LA441_0==Extends) ) {
                alt441=1;
            }
            switch (alt441) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSXParser.norm1_N4ClassExpression_return retval = new InternalN4JSXParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSXParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Members_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( ((LA442_0>=Intersection && LA442_0<=Constructor)||(LA442_0>=Promisify && LA442_0<=Abstract)||LA442_0==External||(LA442_0>=Private && LA442_0<=Project)||LA442_0==Public||LA442_0==Static||LA442_0==Target||(LA442_0>=Async && LA442_0<=Await)||LA442_0==Union||LA442_0==This||LA442_0==From||LA442_0==Type||(LA442_0>=Get && LA442_0<=Let)||(LA442_0>=Out && LA442_0<=Set)||LA442_0==As||LA442_0==Of||LA442_0==RULE_IDENTIFIER) ) {
                alt442=1;
            }
            else if ( (LA442_0==Implements) ) {
                int LA442_2 = input.LA(2);

                if ( (LA442_2==Implements||LA442_2==Extends||LA442_2==LeftCurlyBracket) ) {
                    alt442=1;
                }
            }
            switch (alt442) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==Implements||LA443_0==Extends) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSXParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSXParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSXParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop444:
            do {
                int alt444=2;
                int LA444_0 = input.LA(1);

                if ( ((LA444_0>=Protected && LA444_0<=Abstract)||LA444_0==External||(LA444_0>=Private && LA444_0<=Project)||LA444_0==Public||LA444_0==Static||LA444_0==Const) ) {
                    alt444=1;
                }


                switch (alt444) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_23);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop444;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2()); 
            }
            int alt445=2;
            int LA445_0 = input.LA(1);

            if ( (LA445_0==Tilde) ) {
                alt445=1;
            }
            switch (alt445) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_67);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( ((LA446_0>=Intersection && LA446_0<=Constructor)||(LA446_0>=Promisify && LA446_0<=Abstract)||LA446_0==External||(LA446_0>=Private && LA446_0<=Project)||LA446_0==Public||LA446_0==Static||LA446_0==Target||(LA446_0>=Async && LA446_0<=Await)||LA446_0==Union||(LA446_0>=Yield && LA446_0<=This)||LA446_0==From||LA446_0==Type||(LA446_0>=Get && LA446_0<=Let)||(LA446_0>=Out && LA446_0<=Set)||LA446_0==As||LA446_0==Of||LA446_0==RULE_IDENTIFIER) ) {
                alt446=1;
            }
            else if ( (LA446_0==Implements) ) {
                int LA446_2 = input.LA(2);

                if ( (LA446_2==Implements||LA446_2==Extends||LA446_2==LessThanSign||LA446_2==LeftCurlyBracket) ) {
                    alt446=1;
                }
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( (LA447_0==LessThanSign) ) {
                alt447=1;
            }
            switch (alt447) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==Implements||LA448_0==Extends) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    pushFollow(FOLLOW_22);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSXParser.ruleInterfaceImplementsList_return retval = new InternalN4JSXParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==Extends) ) {
                alt449=1;
            }
            else if ( (LA449_0==Implements) ) {
                alt449=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 449, 0, input);

                throw nvae;
            }
            switch (alt449) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_148);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1()); 
            }

            }


            }
            loop451:
            do {
                int alt451=2;
                int LA451_0 = input.LA(1);

                if ( (LA451_0==Implements||LA451_0==Extends||LA451_0==Comma) ) {
                    alt451=1;
                }


                switch (alt451) {
            	case 1 :
            	    {
            	    int alt450=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt450=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt450=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt450=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 450, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt450) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_148);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop451;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumDeclaration_return retval = new InternalN4JSXParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop452:
            do {
                int alt452=2;
                int LA452_0 = input.LA(1);

                if ( ((LA452_0>=Protected && LA452_0<=Abstract)||LA452_0==External||(LA452_0>=Private && LA452_0<=Project)||LA452_0==Public||LA452_0==Static||LA452_0==Const) ) {
                    alt452=1;
                }


                switch (alt452) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_24);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop452;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2()); 
            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( ((LA453_0>=Intersection && LA453_0<=Implements)||(LA453_0>=Promisify && LA453_0<=Abstract)||LA453_0==External||(LA453_0>=Private && LA453_0<=Project)||LA453_0==Public||LA453_0==Static||LA453_0==Target||(LA453_0>=Async && LA453_0<=Await)||LA453_0==Union||(LA453_0>=Yield && LA453_0<=This)||LA453_0==From||LA453_0==Type||(LA453_0>=Get && LA453_0<=Let)||(LA453_0>=Out && LA453_0<=Set)||LA453_0==As||LA453_0==Of||LA453_0==RULE_IDENTIFIER) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_25);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt455=2;
            int LA455_0 = input.LA(1);

            if ( (LA455_0==Promisify||LA455_0==Target||LA455_0==This||LA455_0==RULE_IDENTIFIER) ) {
                alt455=1;
            }
            switch (alt455) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0()); 
                    }

                    }


                    }
                    loop454:
                    do {
                        int alt454=2;
                        int LA454_0 = input.LA(1);

                        if ( (LA454_0==Comma) ) {
                            alt454=1;
                        }


                        switch (alt454) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop454;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSXParser.ruleN4EnumLiteral_return retval = new InternalN4JSXParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSXParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==Colon) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt457=6;
            alt457 = dfa457.predict(input);
            switch (alt457) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSXParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt458=6;
            alt458 = dfa458.predict(input);
            switch (alt458) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_151);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt470=4;
            alt470 = dfa470.predict(input);
            switch (alt470) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop459:
                    do {
                        int alt459=2;
                        int LA459_0 = input.LA(1);

                        if ( ((LA459_0>=Protected && LA459_0<=Abstract)||LA459_0==External||(LA459_0>=Private && LA459_0<=Project)||LA459_0==Public||LA459_0==Static||LA459_0==Const) ) {
                            alt459=1;
                        }


                        switch (alt459) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop459;
                        }
                    } while (true);

                    pushFollow(FOLLOW_153);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt460=2;
                    alt460 = dfa460.predict(input);
                    switch (alt460) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt461=2;
                    int LA461_0 = input.LA(1);

                    if ( (LA461_0==Semicolon) ) {
                        alt461=1;
                    }
                    switch (alt461) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop462:
                    do {
                        int alt462=2;
                        int LA462_0 = input.LA(1);

                        if ( ((LA462_0>=Protected && LA462_0<=Abstract)||LA462_0==External||(LA462_0>=Private && LA462_0<=Project)||LA462_0==Public||LA462_0==Static||LA462_0==Const) ) {
                            alt462=1;
                        }


                        switch (alt462) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_154);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop462;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt463=2;
                    alt463 = dfa463.predict(input);
                    switch (alt463) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt464=2;
                    int LA464_0 = input.LA(1);

                    if ( (LA464_0==Semicolon) ) {
                        alt464=1;
                    }
                    switch (alt464) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop465:
                    do {
                        int alt465=2;
                        alt465 = dfa465.predict(input);
                        switch (alt465) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop465;
                        }
                    } while (true);
                    int alt466=2;
                    int LA466_0 = input.LA(1);

                    if ( (LA466_0==LessThanSign) ) {
                        alt466=1;
                    }
                    switch (alt466) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt467=2;
                    alt467 = dfa467.predict(input);
                    switch (alt467) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt468=2;
                    int LA468_0 = input.LA(1);

                    if ( (LA468_0==Asterisk) ) {
                        alt468=1;
                    }
                    else if ( ((LA468_0>=Intersection && LA468_0<=With)||(LA468_0>=For && LA468_0<=Var)||(LA468_0>=As && LA468_0<=Of)||LA468_0==LeftSquareBracket||LA468_0==RULE_DOUBLE||LA468_0==RULE_HEX_INT||LA468_0==RULE_OCTAL_INT||LA468_0==RULE_SCIENTIFIC_INT||LA468_0==RULE_IDENTIFIER||LA468_0==RULE_STRING||LA468_0==RULE_INT) ) {
                        alt468=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 468, 0, input);

                        throw nvae;
                    }
                    switch (alt468) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==Semicolon) ) {
                        alt469=1;
                    }
                    switch (alt469) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSXParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSXParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_151);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt482=4;
            alt482 = dfa482.predict(input);
            switch (alt482) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop471:
                    do {
                        int alt471=2;
                        int LA471_0 = input.LA(1);

                        if ( ((LA471_0>=Protected && LA471_0<=Abstract)||LA471_0==External||(LA471_0>=Private && LA471_0<=Project)||LA471_0==Public||LA471_0==Static||LA471_0==Const) ) {
                            alt471=1;
                        }


                        switch (alt471) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop471;
                        }
                    } while (true);

                    pushFollow(FOLLOW_153);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt472=2;
                    alt472 = dfa472.predict(input);
                    switch (alt472) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt473=2;
                    int LA473_0 = input.LA(1);

                    if ( (LA473_0==Semicolon) ) {
                        alt473=1;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop474:
                    do {
                        int alt474=2;
                        int LA474_0 = input.LA(1);

                        if ( ((LA474_0>=Protected && LA474_0<=Abstract)||LA474_0==External||(LA474_0>=Private && LA474_0<=Project)||LA474_0==Public||LA474_0==Static||LA474_0==Const) ) {
                            alt474=1;
                        }


                        switch (alt474) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_154);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop474;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_64);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3()); 
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt475=2;
                    alt475 = dfa475.predict(input);
                    switch (alt475) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_104);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt476=2;
                    int LA476_0 = input.LA(1);

                    if ( (LA476_0==Semicolon) ) {
                        alt476=1;
                    }
                    switch (alt476) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop477:
                    do {
                        int alt477=2;
                        alt477 = dfa477.predict(input);
                        switch (alt477) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop477;
                        }
                    } while (true);
                    int alt478=2;
                    int LA478_0 = input.LA(1);

                    if ( (LA478_0==LessThanSign) ) {
                        alt478=1;
                    }
                    switch (alt478) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt479=2;
                    alt479 = dfa479.predict(input);
                    switch (alt479) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt480=2;
                    int LA480_0 = input.LA(1);

                    if ( (LA480_0==Asterisk) ) {
                        alt480=1;
                    }
                    else if ( ((LA480_0>=Intersection && LA480_0<=With)||(LA480_0>=For && LA480_0<=Var)||(LA480_0>=As && LA480_0<=Of)||LA480_0==LeftSquareBracket||LA480_0==RULE_DOUBLE||LA480_0==RULE_HEX_INT||LA480_0==RULE_OCTAL_INT||LA480_0==RULE_SCIENTIFIC_INT||LA480_0==RULE_IDENTIFIER||LA480_0==RULE_STRING||LA480_0==RULE_INT) ) {
                        alt480=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 480, 0, input);

                        throw nvae;
                    }
                    switch (alt480) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_53);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1()); 
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_104);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt481=2;
                    int LA481_0 = input.LA(1);

                    if ( (LA481_0==Semicolon) ) {
                        alt481=1;
                    }
                    switch (alt481) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSXParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop483:
            do {
                int alt483=2;
                alt483 = dfa483.predict(input);
                switch (alt483) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop483;
                }
            } while (true);
            int alt484=2;
            alt484 = dfa484.predict(input);
            switch (alt484) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_155);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt485=2;
            int LA485_0 = input.LA(1);

            if ( (LA485_0==Colon) ) {
                alt485=1;
            }
            switch (alt485) {
                case 1 :
                    {
                    pushFollow(FOLLOW_156);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt486=2;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==EqualsSign) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSXParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSXParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop487:
            do {
                int alt487=2;
                alt487 = dfa487.predict(input);
                switch (alt487) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_102);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop487;
                }
            } while (true);
            int alt488=2;
            alt488 = dfa488.predict(input);
            switch (alt488) {
                case 1 :
                    {
                    pushFollow(FOLLOW_102);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_155);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }
            int alt489=2;
            int LA489_0 = input.LA(1);

            if ( (LA489_0==Colon) ) {
                alt489=1;
            }
            switch (alt489) {
                case 1 :
                    {
                    pushFollow(FOLLOW_156);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==EqualsSign) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4FieldDeclaration_return retval = new InternalN4JSXParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSXParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4MethodDeclaration_return retval = new InternalN4JSXParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop491:
            do {
                int alt491=2;
                alt491 = dfa491.predict(input);
                switch (alt491) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop491;
                }
            } while (true);
            int alt492=2;
            int LA492_0 = input.LA(1);

            if ( (LA492_0==LessThanSign) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt493=2;
            alt493 = dfa493.predict(input);
            switch (alt493) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==Asterisk) ) {
                alt494=1;
            }
            else if ( ((LA494_0>=Intersection && LA494_0<=With)||(LA494_0>=For && LA494_0<=Var)||(LA494_0>=As && LA494_0<=Of)||LA494_0==LeftSquareBracket||LA494_0==RULE_DOUBLE||LA494_0==RULE_HEX_INT||LA494_0==RULE_OCTAL_INT||LA494_0==RULE_SCIENTIFIC_INT||LA494_0==RULE_IDENTIFIER||LA494_0==RULE_STRING||LA494_0==RULE_INT) ) {
                alt494=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 494, 0, input);

                throw nvae;
            }
            switch (alt494) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt495=2;
            int LA495_0 = input.LA(1);

            if ( (LA495_0==Semicolon) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSXParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSXParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop496:
            do {
                int alt496=2;
                alt496 = dfa496.predict(input);
                switch (alt496) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_151);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop496;
                }
            } while (true);
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==LessThanSign) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt498=2;
            alt498 = dfa498.predict(input);
            switch (alt498) {
                case 1 :
                    {
                    pushFollow(FOLLOW_103);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==Asterisk) ) {
                alt499=1;
            }
            else if ( ((LA499_0>=Intersection && LA499_0<=With)||(LA499_0>=For && LA499_0<=Var)||(LA499_0>=As && LA499_0<=Of)||LA499_0==LeftSquareBracket||LA499_0==RULE_DOUBLE||LA499_0==RULE_HEX_INT||LA499_0==RULE_OCTAL_INT||LA499_0==RULE_SCIENTIFIC_INT||LA499_0==RULE_IDENTIFIER||LA499_0==RULE_STRING||LA499_0==RULE_INT) ) {
                alt499=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 499, 0, input);

                throw nvae;
            }
            switch (alt499) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_104);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Semicolon) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt501=2;
            int LA501_0 = input.LA(1);

            if ( (LA501_0==Semicolon) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSXParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_104);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==Semicolon) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==LeftCurlyBracket) && (synpred287_InternalN4JSXParser())) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_157);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==LeftCurlyBracket) && (synpred288_InternalN4JSXParser())) {
                alt504=1;
            }
            switch (alt504) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSXParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==Colon) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_157);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt506=2;
            alt506 = dfa506.predict(input);
            switch (alt506) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSXParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( (LA507_0==Colon) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_157);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt508=2;
            alt508 = dfa508.predict(input);
            switch (alt508) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4GetterDeclaration_return retval = new InternalN4JSXParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop509:
            do {
                int alt509=2;
                int LA509_0 = input.LA(1);

                if ( ((LA509_0>=Protected && LA509_0<=Abstract)||LA509_0==External||(LA509_0>=Private && LA509_0<=Project)||LA509_0==Public||LA509_0==Static||LA509_0==Const) ) {
                    alt509=1;
                }


                switch (alt509) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop509;
                }
            } while (true);

            pushFollow(FOLLOW_153);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt510=2;
            alt510 = dfa510.predict(input);
            switch (alt510) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==Semicolon) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSXParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop512:
            do {
                int alt512=2;
                int LA512_0 = input.LA(1);

                if ( ((LA512_0>=Protected && LA512_0<=Abstract)||LA512_0==External||(LA512_0>=Private && LA512_0<=Project)||LA512_0==Public||LA512_0==Static||LA512_0==Const) ) {
                    alt512=1;
                }


                switch (alt512) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop512;
                }
            } while (true);

            pushFollow(FOLLOW_153);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt513=2;
            alt513 = dfa513.predict(input);
            switch (alt513) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt514=2;
            int LA514_0 = input.LA(1);

            if ( (LA514_0==Semicolon) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSXParser.ruleGetterHeader_return retval = new InternalN4JSXParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( ((LA515_0>=Intersection && LA515_0<=Constructor)||LA515_0==Promisify||LA515_0==Target||LA515_0==Await||LA515_0==Union||LA515_0==This||LA515_0==This_1||(LA515_0>=Type && LA515_0<=Void)||LA515_0==QuestionMark||LA515_0==LeftCurlyBracket||LA515_0==Tilde||LA515_0==RULE_IDENTIFIER) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    pushFollow(FOLLOW_159);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Colon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSXParser.norm1_GetterHeader_return retval = new InternalN4JSXParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSXParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;



            
        try {
            {
            {
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( ((LA517_0>=Intersection && LA517_0<=Constructor)||LA517_0==Promisify||LA517_0==Target||LA517_0==Await||LA517_0==Union||LA517_0==This||LA517_0==This_1||(LA517_0>=Type && LA517_0<=Void)||LA517_0==QuestionMark||LA517_0==LeftCurlyBracket||LA517_0==Tilde||LA517_0==RULE_IDENTIFIER) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    pushFollow(FOLLOW_159);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2()); 
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3()); 
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4()); 
            }
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==Colon) ) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.ruleN4SetterDeclaration_return retval = new InternalN4JSXParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop519:
            do {
                int alt519=2;
                int LA519_0 = input.LA(1);

                if ( ((LA519_0>=Protected && LA519_0<=Abstract)||LA519_0==External||(LA519_0>=Private && LA519_0<=Project)||LA519_0==Public||LA519_0==Static||LA519_0==Const) ) {
                    alt519=1;
                }


                switch (alt519) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop519;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt520=2;
            alt520 = dfa520.predict(input);
            switch (alt520) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==Semicolon) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSXParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSXParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSXParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop522:
            do {
                int alt522=2;
                int LA522_0 = input.LA(1);

                if ( ((LA522_0>=Protected && LA522_0<=Abstract)||LA522_0==External||(LA522_0>=Private && LA522_0<=Project)||LA522_0==Public||LA522_0==Static||LA522_0==Const) ) {
                    alt522=1;
                }


                switch (alt522) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_154);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop522;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt523=2;
            alt523 = dfa523.predict(input);
            switch (alt523) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt524=2;
            int LA524_0 = input.LA(1);

            if ( (LA524_0==Semicolon) ) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleBindingPattern_return retval = new InternalN4JSXParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==LeftCurlyBracket) ) {
                alt525=1;
            }
            else if ( (LA525_0==LeftSquareBracket) ) {
                alt525=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 525, 0, input);

                throw nvae;
            }
            switch (alt525) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingPattern_return retval = new InternalN4JSXParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSXParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==LeftCurlyBracket) ) {
                alt526=1;
            }
            else if ( (LA526_0==LeftSquareBracket) ) {
                alt526=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 526, 0, input);

                throw nvae;
            }
            switch (alt526) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleObjectBindingPattern_return retval = new InternalN4JSXParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt528=2;
            int LA528_0 = input.LA(1);

            if ( ((LA528_0>=Intersection && LA528_0<=With)||(LA528_0>=For && LA528_0<=Var)||(LA528_0>=As && LA528_0<=Of)||(LA528_0>=CommercialAt && LA528_0<=LeftSquareBracket)||LA528_0==RULE_DOUBLE||LA528_0==RULE_HEX_INT||LA528_0==RULE_OCTAL_INT||LA528_0==RULE_SCIENTIFIC_INT||LA528_0==RULE_IDENTIFIER||LA528_0==RULE_STRING||LA528_0==RULE_INT) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop527:
                    do {
                        int alt527=2;
                        int LA527_0 = input.LA(1);

                        if ( (LA527_0==Comma) ) {
                            alt527=1;
                        }


                        switch (alt527) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop527;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSXParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSXParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt530=2;
            int LA530_0 = input.LA(1);

            if ( ((LA530_0>=Intersection && LA530_0<=With)||(LA530_0>=For && LA530_0<=Var)||(LA530_0>=As && LA530_0<=Of)||(LA530_0>=CommercialAt && LA530_0<=LeftSquareBracket)||LA530_0==RULE_DOUBLE||LA530_0==RULE_HEX_INT||LA530_0==RULE_OCTAL_INT||LA530_0==RULE_SCIENTIFIC_INT||LA530_0==RULE_IDENTIFIER||LA530_0==RULE_STRING||LA530_0==RULE_INT) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_27);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop529:
                    do {
                        int alt529=2;
                        int LA529_0 = input.LA(1);

                        if ( (LA529_0==Comma) ) {
                            alt529=1;
                        }


                        switch (alt529) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_27);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop529;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.ruleArrayBindingPattern_return retval = new InternalN4JSXParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop531:
            do {
                int alt531=2;
                int LA531_0 = input.LA(1);

                if ( (LA531_0==Comma) ) {
                    alt531=1;
                }


                switch (alt531) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop531;
                }
            } while (true);
            int alt536=2;
            int LA536_0 = input.LA(1);

            if ( ((LA536_0>=Intersection && LA536_0<=Implements)||(LA536_0>=Promisify && LA536_0<=Abstract)||LA536_0==External||(LA536_0>=Private && LA536_0<=Project)||LA536_0==Public||LA536_0==Static||LA536_0==Target||(LA536_0>=Async && LA536_0<=Await)||LA536_0==Union||(LA536_0>=Yield && LA536_0<=This)||LA536_0==From||LA536_0==Type||LA536_0==FullStopFullStopFullStop||(LA536_0>=Get && LA536_0<=Let)||(LA536_0>=Out && LA536_0<=Set)||LA536_0==As||LA536_0==Of||(LA536_0>=CommercialAt && LA536_0<=LeftSquareBracket)||LA536_0==LeftCurlyBracket||LA536_0==RULE_IDENTIFIER) ) {
                alt536=1;
            }
            switch (alt536) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop533:
                    do {
                        int alt533=2;
                        alt533 = dfa533.predict(input);
                        switch (alt533) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop532:
                    	    do {
                    	        int alt532=2;
                    	        int LA532_0 = input.LA(1);

                    	        if ( (LA532_0==Comma) ) {
                    	            alt532=1;
                    	        }


                    	        switch (alt532) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop532;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop533;
                        }
                    } while (true);
                    int alt535=2;
                    int LA535_0 = input.LA(1);

                    if ( (LA535_0==Comma) ) {
                        alt535=1;
                    }
                    switch (alt535) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop534:
                            do {
                                int alt534=2;
                                int LA534_0 = input.LA(1);

                                if ( (LA534_0==Comma) ) {
                                    alt534=1;
                                }


                                switch (alt534) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop534;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSXParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSXParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSXParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSXParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop537:
            do {
                int alt537=2;
                int LA537_0 = input.LA(1);

                if ( (LA537_0==Comma) ) {
                    alt537=1;
                }


                switch (alt537) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop537;
                }
            } while (true);
            int alt542=2;
            int LA542_0 = input.LA(1);

            if ( ((LA542_0>=Intersection && LA542_0<=Implements)||(LA542_0>=Promisify && LA542_0<=Abstract)||LA542_0==External||(LA542_0>=Private && LA542_0<=Project)||LA542_0==Public||LA542_0==Static||LA542_0==Target||(LA542_0>=Async && LA542_0<=Await)||LA542_0==Union||LA542_0==This||LA542_0==From||LA542_0==Type||LA542_0==FullStopFullStopFullStop||(LA542_0>=Get && LA542_0<=Let)||(LA542_0>=Out && LA542_0<=Set)||LA542_0==As||LA542_0==Of||(LA542_0>=CommercialAt && LA542_0<=LeftSquareBracket)||LA542_0==LeftCurlyBracket||LA542_0==RULE_IDENTIFIER) ) {
                alt542=1;
            }
            switch (alt542) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_97);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop539:
                    do {
                        int alt539=2;
                        alt539 = dfa539.predict(input);
                        switch (alt539) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop538:
                    	    do {
                    	        int alt538=2;
                    	        int LA538_0 = input.LA(1);

                    	        if ( (LA538_0==Comma) ) {
                    	            alt538=1;
                    	        }


                    	        switch (alt538) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop538;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_97);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop539;
                        }
                    } while (true);
                    int alt541=2;
                    int LA541_0 = input.LA(1);

                    if ( (LA541_0==Comma) ) {
                        alt541=1;
                    }
                    switch (alt541) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_97); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop540:
                            do {
                                int alt540=2;
                                int LA540_0 = input.LA(1);

                                if ( (LA540_0==Comma) ) {
                                    alt540=1;
                                }


                                switch (alt540) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_97);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop540;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSXParser.ruleBindingProperty_return retval = new InternalN4JSXParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt543=2;
            alt543 = dfa543.predict(input);
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingProperty_return retval = new InternalN4JSXParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSXParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt544=2;
            alt544 = dfa544.predict(input);
            switch (alt544) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0()); 
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.ruleSingleNameBinding_return retval = new InternalN4JSXParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm1_SingleNameBinding_return retval = new InternalN4JSXParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingElement_return retval = new InternalN4JSXParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt546=2;
            int LA546_0 = input.LA(1);

            if ( (LA546_0==LeftCurlyBracket) && (synpred305_InternalN4JSXParser())) {
                alt546=1;
            }
            else if ( (LA546_0==LeftSquareBracket) && (synpred305_InternalN4JSXParser())) {
                alt546=1;
            }
            else if ( ((LA546_0>=Intersection && LA546_0<=Implements)||(LA546_0>=Promisify && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Target||(LA546_0>=Async && LA546_0<=Await)||LA546_0==Union||(LA546_0>=Yield && LA546_0<=This)||LA546_0==From||LA546_0==Type||(LA546_0>=Get && LA546_0<=Let)||(LA546_0>=Out && LA546_0<=Set)||LA546_0==As||LA546_0==Of||LA546_0==CommercialAt||LA546_0==RULE_IDENTIFIER) ) {
                alt546=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 546, 0, input);

                throw nvae;
            }
            switch (alt546) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt545=2;
                    int LA545_0 = input.LA(1);

                    if ( (LA545_0==EqualsSign) ) {
                        alt545=1;
                    }
                    switch (alt545) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingElement_return retval = new InternalN4JSXParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt548=2;
            int LA548_0 = input.LA(1);

            if ( (LA548_0==LeftCurlyBracket) && (synpred306_InternalN4JSXParser())) {
                alt548=1;
            }
            else if ( (LA548_0==LeftSquareBracket) && (synpred306_InternalN4JSXParser())) {
                alt548=1;
            }
            else if ( ((LA548_0>=Intersection && LA548_0<=Implements)||(LA548_0>=Promisify && LA548_0<=Abstract)||LA548_0==External||(LA548_0>=Private && LA548_0<=Project)||LA548_0==Public||LA548_0==Static||LA548_0==Target||(LA548_0>=Async && LA548_0<=Await)||LA548_0==Union||LA548_0==This||LA548_0==From||LA548_0==Type||(LA548_0>=Get && LA548_0<=Let)||(LA548_0>=Out && LA548_0<=Set)||LA548_0==As||LA548_0==Of||LA548_0==CommercialAt||LA548_0==RULE_IDENTIFIER) ) {
                alt548=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 548, 0, input);

                throw nvae;
            }
            switch (alt548) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt547=2;
                    int LA547_0 = input.LA(1);

                    if ( (LA547_0==EqualsSign) ) {
                        alt547=1;
                    }
                    switch (alt547) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSXParser.ruleBindingRestElement_return retval = new InternalN4JSXParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==FullStopFullStopFullStop) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt551=2;
            int LA551_0 = input.LA(1);

            if ( (LA551_0==LeftCurlyBracket) && (synpred307_InternalN4JSXParser())) {
                alt551=1;
            }
            else if ( (LA551_0==LeftSquareBracket) && (synpred307_InternalN4JSXParser())) {
                alt551=1;
            }
            else if ( ((LA551_0>=Intersection && LA551_0<=Implements)||(LA551_0>=Promisify && LA551_0<=Abstract)||LA551_0==External||(LA551_0>=Private && LA551_0<=Project)||LA551_0==Public||LA551_0==Static||LA551_0==Target||(LA551_0>=Async && LA551_0<=Await)||LA551_0==Union||(LA551_0>=Yield && LA551_0<=This)||LA551_0==From||LA551_0==Type||(LA551_0>=Get && LA551_0<=Let)||(LA551_0>=Out && LA551_0<=Set)||LA551_0==As||LA551_0==Of||LA551_0==CommercialAt||LA551_0==RULE_IDENTIFIER) ) {
                alt551=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 551, 0, input);

                throw nvae;
            }
            switch (alt551) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt550=2;
                    int LA550_0 = input.LA(1);

                    if ( (LA550_0==EqualsSign) ) {
                        alt550=1;
                    }
                    switch (alt550) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingRestElement_return retval = new InternalN4JSXParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSXParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSXParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt552=2;
            int LA552_0 = input.LA(1);

            if ( (LA552_0==FullStopFullStopFullStop) ) {
                alt552=1;
            }
            switch (alt552) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt554=2;
            int LA554_0 = input.LA(1);

            if ( (LA554_0==LeftCurlyBracket) && (synpred308_InternalN4JSXParser())) {
                alt554=1;
            }
            else if ( (LA554_0==LeftSquareBracket) && (synpred308_InternalN4JSXParser())) {
                alt554=1;
            }
            else if ( ((LA554_0>=Intersection && LA554_0<=Implements)||(LA554_0>=Promisify && LA554_0<=Abstract)||LA554_0==External||(LA554_0>=Private && LA554_0<=Project)||LA554_0==Public||LA554_0==Static||LA554_0==Target||(LA554_0>=Async && LA554_0<=Await)||LA554_0==Union||LA554_0==This||LA554_0==From||LA554_0==Type||(LA554_0>=Get && LA554_0<=Let)||(LA554_0>=Out && LA554_0<=Set)||LA554_0==As||LA554_0==Of||LA554_0==CommercialAt||LA554_0==RULE_IDENTIFIER) ) {
                alt554=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 554, 0, input);

                throw nvae;
            }
            switch (alt554) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_70);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt553=2;
                    int LA553_0 = input.LA(1);

                    if ( (LA553_0==EqualsSign) ) {
                        alt553=1;
                    }
                    switch (alt553) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_14); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSXParser.ruleElision_return retval = new InternalN4JSXParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt555=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt555=1;
                }
                break;
            case RULE_STRING:
                {
                alt555=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt555=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt555=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);

                throw nvae;
            }

            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSXParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSXParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSXParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            int alt556=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt556=1;
                }
                break;
            case RULE_STRING:
                {
                alt556=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt556=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt556=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 556, 0, input);

                throw nvae;
            }

            switch (alt556) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_113);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRef_return retval = new InternalN4JSXParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpression_return retval = new InternalN4JSXParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSXParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt558=2;
            int LA558_0 = input.LA(1);

            if ( (LA558_0==VerticalLine) ) {
                alt558=1;
            }
            switch (alt558) {
                case 1 :
                    {
                    int cnt557=0;
                    loop557:
                    do {
                        int alt557=2;
                        int LA557_0 = input.LA(1);

                        if ( (LA557_0==VerticalLine) ) {
                            alt557=1;
                        }


                        switch (alt557) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_126);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt557 >= 1 ) break loop557;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(557, input);
                                throw eee;
                        }
                        cnt557++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSXParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt560=2;
            int LA560_0 = input.LA(1);

            if ( (LA560_0==Ampersand) ) {
                alt560=1;
            }
            switch (alt560) {
                case 1 :
                    {
                    int cnt559=0;
                    loop559:
                    do {
                        int alt559=2;
                        int LA559_0 = input.LA(1);

                        if ( (LA559_0==Ampersand) ) {
                            alt559=1;
                        }


                        switch (alt559) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_55); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_124);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt559 >= 1 ) break loop559;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(559, input);
                                throw eee;
                        }
                        cnt559++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSXParser.rulePrimaryTypeExpression_return retval = new InternalN4JSXParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;



            
        try {
            {
            int alt561=4;
            alt561 = dfa561.predict(input);
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1()); 
                    }
                    pushFollow(FOLLOW_75);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3()); 
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_75);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleBogusTypeRef_return retval = new InternalN4JSXParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;



            
        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt563=2;
            int LA563_0 = input.LA(1);

            if ( ((LA563_0>=Intersection && LA563_0<=Constructor)||LA563_0==Promisify||LA563_0==Target||LA563_0==Await||LA563_0==Union||LA563_0==This||LA563_0==This_1||(LA563_0>=Type && LA563_0<=Void)||LA563_0==LeftCurlyBracket||LA563_0==Tilde||LA563_0==RULE_IDENTIFIER) ) {
                alt563=1;
            }
            else if ( (LA563_0==QuestionMark) ) {
                alt563=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 563, 0, input);

                throw nvae;
            }
            switch (alt563) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_165);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt562=2;
                    int LA562_0 = input.LA(1);

                    if ( (LA562_0==QuestionMark) ) {
                        int LA562_1 = input.LA(2);

                        if ( (synpred310_InternalN4JSXParser()) ) {
                            alt562=1;
                        }
                    }
                    switch (alt562) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSXParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt566=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt566=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt566=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt566=3;
                }
                break;
            case Union:
                {
                alt566=4;
                }
                break;
            case Intersection:
                {
                alt566=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 566, 0, input);

                throw nvae;
            }

            switch (alt566) {
                case 1 :
                    {
                    {
                    int alt564=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt564=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA564_4 = input.LA(3);

                            if ( (LA564_4==Promisify||LA564_4==Target||LA564_4==Await||LA564_4==This||LA564_4==Void||LA564_4==RULE_IDENTIFIER) ) {
                                alt564=1;
                            }
                            else if ( (LA564_4==This_1) ) {
                                alt564=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 564, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA564_5 = input.LA(3);

                            if ( (LA564_5==This_1) ) {
                                alt564=2;
                            }
                            else if ( (LA564_5==Promisify||LA564_5==Target||LA564_5==Await||LA564_5==This||LA564_5==Void||LA564_5==RULE_IDENTIFIER) ) {
                                alt564=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 564, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt564=1;
                            }
                            break;
                        case This_1:
                            {
                            alt564=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 564, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt564=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 564, 0, input);

                        throw nvae;
                    }

                    switch (alt564) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_48);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_48);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt565=2;
                    alt565 = dfa565.predict(input);
                    switch (alt565) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;



            
        try {
            {
            int alt567=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt567=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt567=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt567=3;
                }
                break;
            case Union:
                {
                alt567=4;
                }
                break;
            case Intersection:
                {
                alt567=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 567, 0, input);

                throw nvae;
            }

            switch (alt567) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSXParser.ruleTypeRefForCast_return retval = new InternalN4JSXParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSXParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSXParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;



            
        try {
            {
            int alt568=8;
            alt568 = dfa568.predict(input);
            switch (alt568) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_2 = null;



            
        try {
            {
            int alt569=3;
            int LA569_0 = input.LA(1);

            if ( (LA569_0==Promisify||LA569_0==Target||LA569_0==Await||LA569_0==This||LA569_0==Void||LA569_0==RULE_IDENTIFIER) ) {
                alt569=1;
            }
            else if ( (LA569_0==This_1) ) {
                alt569=2;
            }
            else if ( (LA569_0==QuestionMark) && (synpred312_InternalN4JSXParser())) {
                alt569=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 569, 0, input);

                throw nvae;
            }
            switch (alt569) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRef_return retval = new InternalN4JSXParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt570=2;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==This_1) ) {
                alt570=1;
            }
            else if ( (LA570_0==Tilde) ) {
                alt570=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 570, 0, input);

                throw nvae;
            }
            switch (alt570) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefNominal_return retval = new InternalN4JSXParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleThisTypeRefStructural_return retval = new InternalN4JSXParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_166);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1()); 
            }
            int alt571=2;
            int LA571_0 = input.LA(1);

            if ( (LA571_0==With) ) {
                int LA571_1 = input.LA(2);

                if ( (LA571_1==LeftCurlyBracket) ) {
                    alt571=1;
                }
            }
            switch (alt571) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSXParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( (LA572_0==CommercialAt) ) {
                alt572=1;
            }
            switch (alt572) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0()); 
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1()); 
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_75);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4()); 
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3()); 
            }
            int alt574=2;
            int LA574_0 = input.LA(1);

            if ( (LA574_0==LessThanSign) ) {
                alt574=1;
            }
            switch (alt574) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1()); 
                    }

                    }


                    }
                    loop573:
                    do {
                        int alt573=2;
                        int LA573_0 = input.LA(1);

                        if ( (LA573_0==Comma) ) {
                            alt573=1;
                        }


                        switch (alt573) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop573;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3()); 
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7()); 
            }
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==Colon) ) {
                alt575=1;
            }
            switch (alt575) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSXParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSXParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSXParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1()); 
            }
            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3()); 
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt577=2;
            int LA577_0 = input.LA(1);

            if ( ((LA577_0>=Intersection && LA577_0<=Implements)||(LA577_0>=Promisify && LA577_0<=Abstract)||LA577_0==External||(LA577_0>=Private && LA577_0<=Project)||LA577_0==Public||LA577_0==Static||LA577_0==Target||(LA577_0>=Async && LA577_0<=Await)||LA577_0==Union||(LA577_0>=Yield && LA577_0<=This)||LA577_0==From||LA577_0==This_1||(LA577_0>=Type && LA577_0<=Void)||LA577_0==FullStopFullStopFullStop||(LA577_0>=Get && LA577_0<=Let)||(LA577_0>=Out && LA577_0<=Set)||LA577_0==As||LA577_0==Of||LA577_0==LeftParenthesis||LA577_0==QuestionMark||LA577_0==LeftSquareBracket||LA577_0==LeftCurlyBracket||LA577_0==Tilde||LA577_0==RULE_IDENTIFIER) ) {
                alt577=1;
            }
            switch (alt577) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_44);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0()); 
                    }

                    }


                    }
                    loop576:
                    do {
                        int alt576=2;
                        int LA576_0 = input.LA(1);

                        if ( (LA576_0==Comma) ) {
                            alt576=1;
                        }


                        switch (alt576) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_173); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_44);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop576;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSXParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSXParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSXParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( (LA578_0==FullStopFullStopFullStop) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt579=2;
            alt579 = dfa579.predict(input);
            switch (alt579) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0()); 
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop580:
            do {
                int alt580=2;
                int LA580_0 = input.LA(1);

                if ( (LA580_0==Comma) ) {
                    alt580=1;
                }


                switch (alt580) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop580;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSXParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSXParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);

                if ( (LA581_0==Comma) ) {
                    alt581=1;
                }


                switch (alt581) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_175); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_27);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop581;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRef_return retval = new InternalN4JSXParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==Promisify||LA582_0==Target||LA582_0==Await||LA582_0==This||LA582_0==Void||LA582_0==RULE_IDENTIFIER) ) {
                alt582=1;
            }
            else if ( (LA582_0==Tilde) ) {
                alt582=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 582, 0, input);

                throw nvae;
            }
            switch (alt582) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_176);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0()); 
            }

            }


            }
            int alt584=2;
            alt584 = dfa584.predict(input);
            switch (alt584) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1()); 
                    }

                    }


                    }
                    loop583:
                    do {
                        int alt583=2;
                        int LA583_0 = input.LA(1);

                        if ( (LA583_0==Comma) ) {
                            alt583=1;
                        }


                        switch (alt583) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop583;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleArrayTypeRef_return retval = new InternalN4JSXParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_113);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSXParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSXParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSXParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSXParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_147);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_178);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1()); 
            }

            }


            }
            int alt586=2;
            alt586 = dfa586.predict(input);
            switch (alt586) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1()); 
                    }

                    }


                    }
                    loop585:
                    do {
                        int alt585=2;
                        int LA585_0 = input.LA(1);

                        if ( (LA585_0==Comma) ) {
                            alt585=1;
                        }


                        switch (alt585) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop585;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3()); 
                    }

                    }
                    break;

            }
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==With) ) {
                int LA587_1 = input.LA(2);

                if ( (LA587_1==LeftCurlyBracket) ) {
                    alt587=1;
                }
            }
            switch (alt587) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMemberList_return retval = new InternalN4JSXParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSXParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop589:
            do {
                int alt589=2;
                int LA589_0 = input.LA(1);

                if ( ((LA589_0>=Intersection && LA589_0<=With)||(LA589_0>=For && LA589_0<=Var)||(LA589_0>=As && LA589_0<=Of)||LA589_0==LessThanSign||LA589_0==RULE_IDENTIFIER) ) {
                    alt589=1;
                }


                switch (alt589) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_180);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0()); 
            	    }

            	    }


            	    }
            	    int alt588=3;
            	    int LA588_0 = input.LA(1);

            	    if ( (LA588_0==Semicolon) ) {
            	        alt588=1;
            	    }
            	    else if ( (LA588_0==Comma) ) {
            	        alt588=2;
            	    }
            	    switch (alt588) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1()); 
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop589;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMember_return retval = new InternalN4JSXParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSXParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSXParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;



            
        try {
            {
            int alt590=4;
            alt590 = dfa590.predict(input);
            switch (alt590) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSXParser.ruleTStructMethod_return retval = new InternalN4JSXParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSXParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==LessThanSign) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_28); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_29);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1()); 
                    }

                    }


                    }
                    loop591:
                    do {
                        int alt591=2;
                        int LA591_0 = input.LA(1);

                        if ( (LA591_0==Comma) ) {
                            alt591=1;
                        }


                        switch (alt591) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_28); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop591;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2()); 
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3()); 
            }

            }


            }

            pushFollow(FOLLOW_75);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2()); 
            }
            int alt593=2;
            int LA593_0 = input.LA(1);

            if ( (LA593_0==Colon) ) {
                alt593=1;
            }
            switch (alt593) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSXParser.ruleTStructField_return retval = new InternalN4JSXParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_54);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt594=2;
            int LA594_0 = input.LA(1);

            if ( (LA594_0==Colon) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructGetter_return retval = new InternalN4JSXParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_75); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2()); 
            }
            int alt595=2;
            int LA595_0 = input.LA(1);

            if ( (LA595_0==Colon) ) {
                alt595=1;
            }
            switch (alt595) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSXParser.ruleTStructSetter_return retval = new InternalN4JSXParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSXParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSXParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_64);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;


            
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0()); 
            }
            int alt596=3;
            int LA596_0 = input.LA(1);

            if ( (LA596_0==Tilde) ) {
                alt596=1;
            }
            else if ( (LA596_0==RULE_STRUCTMODSUFFIX) ) {
                alt596=2;
            }
            switch (alt596) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSXParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;


            
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSXParser.ruleTypeTypeRef_return retval = new InternalN4JSXParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSXParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;



            
        try {
            {
            {
            int alt597=2;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==Type) ) {
                alt597=1;
            }
            else if ( (LA597_0==Constructor) ) {
                alt597=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 597, 0, input);

                throw nvae;
            }
            switch (alt597) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSXParser.ruleTypeArgument_return retval = new InternalN4JSXParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSXParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSXParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSXParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;



            
        try {
            {
            int alt598=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA598_1 = input.LA(2);

                if ( (synpred322_InternalN4JSXParser()) ) {
                    alt598=1;
                }
                else if ( (true) ) {
                    alt598=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 598, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt598=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt598=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);

                throw nvae;
            }

            switch (alt598) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSXParser.ruleWildcard_return retval = new InternalN4JSXParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1()); 
            }

            }


            }
            int alt599=3;
            int LA599_0 = input.LA(1);

            if ( (LA599_0==Extends) ) {
                alt599=1;
            }
            else if ( (LA599_0==Super) ) {
                alt599=2;
            }
            switch (alt599) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSXParser.ruleWildcardNewNotation_return retval = new InternalN4JSXParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSXParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSXParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt600=2;
            int LA600_0 = input.LA(1);

            if ( (LA600_0==Out) ) {
                alt600=1;
            }
            else if ( (LA600_0==In) ) {
                alt600=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 600, 0, input);

                throw nvae;
            }
            switch (alt600) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSXParser.ruleUndefModifierToken_return retval = new InternalN4JSXParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;


            
        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.ruleBindingIdentifier_return retval = new InternalN4JSXParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;


            
        try {
            {
            int alt601=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt601=1;
                }
                break;
            case Yield:
                {
                alt601=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt601=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }

            switch (alt601) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSXParser.norm1_BindingIdentifier_return retval = new InternalN4JSXParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);

            if ( (LA602_0==RULE_IDENTIFIER) ) {
                alt602=1;
            }
            else if ( ((LA602_0>=Intersection && LA602_0<=Implements)||(LA602_0>=Promisify && LA602_0<=Abstract)||LA602_0==External||(LA602_0>=Private && LA602_0<=Project)||LA602_0==Public||LA602_0==Static||LA602_0==Target||(LA602_0>=Async && LA602_0<=Await)||LA602_0==Union||LA602_0==This||LA602_0==From||LA602_0==Type||(LA602_0>=Get && LA602_0<=Let)||(LA602_0>=Out && LA602_0<=Set)||LA602_0==As||LA602_0==Of) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSXParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSXParser.ruleIdentifierName_return retval = new InternalN4JSXParser.ruleIdentifierName_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt603=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt603=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt603=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt603=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;


            
        try {
            {
            int alt604=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt604=1;
                }
                break;
            case Case:
                {
                alt604=2;
                }
                break;
            case Catch:
                {
                alt604=3;
                }
                break;
            case Class:
                {
                alt604=4;
                }
                break;
            case Const:
                {
                alt604=5;
                }
                break;
            case Continue:
                {
                alt604=6;
                }
                break;
            case Debugger:
                {
                alt604=7;
                }
                break;
            case Default:
                {
                alt604=8;
                }
                break;
            case Delete:
                {
                alt604=9;
                }
                break;
            case Do:
                {
                alt604=10;
                }
                break;
            case Else:
                {
                alt604=11;
                }
                break;
            case Export:
                {
                alt604=12;
                }
                break;
            case Extends:
                {
                alt604=13;
                }
                break;
            case Finally:
                {
                alt604=14;
                }
                break;
            case For:
                {
                alt604=15;
                }
                break;
            case Function:
                {
                alt604=16;
                }
                break;
            case If:
                {
                alt604=17;
                }
                break;
            case Import:
                {
                alt604=18;
                }
                break;
            case In:
                {
                alt604=19;
                }
                break;
            case Instanceof:
                {
                alt604=20;
                }
                break;
            case New:
                {
                alt604=21;
                }
                break;
            case Return:
                {
                alt604=22;
                }
                break;
            case Super:
                {
                alt604=23;
                }
                break;
            case Switch:
                {
                alt604=24;
                }
                break;
            case This_1:
                {
                alt604=25;
                }
                break;
            case Throw:
                {
                alt604=26;
                }
                break;
            case Try:
                {
                alt604=27;
                }
                break;
            case Typeof:
                {
                alt604=28;
                }
                break;
            case Var:
                {
                alt604=29;
                }
                break;
            case Void:
                {
                alt604=30;
                }
                break;
            case While:
                {
                alt604=31;
                }
                break;
            case With:
                {
                alt604=32;
                }
                break;
            case Yield:
                {
                alt604=33;
                }
                break;
            case Null:
                {
                alt604=34;
                }
                break;
            case True:
                {
                alt604=35;
                }
                break;
            case False:
                {
                alt604=36;
                }
                break;
            case Enum:
                {
                alt604=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24()); 
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25()); 
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26()); 
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27()); 
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28()); 
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29()); 
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30()); 
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31()); 
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32()); 
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33()); 
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34()); 
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35()); 
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;


            
        try {
            {
            int alt605=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt605=1;
                }
                break;
            case Set:
                {
                alt605=2;
                }
                break;
            case Let:
                {
                alt605=3;
                }
                break;
            case Project:
                {
                alt605=4;
                }
                break;
            case External:
                {
                alt605=5;
                }
                break;
            case Abstract:
                {
                alt605=6;
                }
                break;
            case Static:
                {
                alt605=7;
                }
                break;
            case As:
                {
                alt605=8;
                }
                break;
            case From:
                {
                alt605=9;
                }
                break;
            case Constructor:
                {
                alt605=10;
                }
                break;
            case Of:
                {
                alt605=11;
                }
                break;
            case Target:
                {
                alt605=12;
                }
                break;
            case Type:
                {
                alt605=13;
                }
                break;
            case Union:
                {
                alt605=14;
                }
                break;
            case Intersection:
                {
                alt605=15;
                }
                break;
            case This:
                {
                alt605=16;
                }
                break;
            case Promisify:
                {
                alt605=17;
                }
                break;
            case Await:
                {
                alt605=18;
                }
                break;
            case Async:
                {
                alt605=19;
                }
                break;
            case Implements:
                {
                alt605=20;
                }
                break;
            case Interface:
                {
                alt605=21;
                }
                break;
            case Private:
                {
                alt605=22;
                }
                break;
            case Protected:
                {
                alt605=23;
                }
                break;
            case Public:
                {
                alt605=24;
                }
                break;
            case Out:
                {
                alt605=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }

            switch (alt605) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt606=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt606=1;
                }
                break;
            case Const:
                {
                alt606=2;
                }
                break;
            case Let:
                {
                alt606=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }

            switch (alt606) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt607=2;
            int LA607_0 = input.LA(1);

            if ( (LA607_0==PlusSignPlusSign) ) {
                alt607=1;
            }
            else if ( (LA607_0==HyphenMinusHyphenMinus) ) {
                alt607=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);

                throw nvae;
            }
            switch (alt607) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt608=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt608=1;
                }
                break;
            case Void:
                {
                alt608=2;
                }
                break;
            case Typeof:
                {
                alt608=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt608=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt608=5;
                }
                break;
            case PlusSign:
                {
                alt608=6;
                }
                break;
            case HyphenMinus:
                {
                alt608=7;
                }
                break;
            case Tilde:
                {
                alt608=8;
                }
                break;
            case ExclamationMark:
                {
                alt608=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 608, 0, input);

                throw nvae;
            }

            switch (alt608) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt609=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt609=1;
                }
                break;
            case Solidus:
                {
                alt609=2;
                }
                break;
            case PercentSign:
                {
                alt609=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 609, 0, input);

                throw nvae;
            }

            switch (alt609) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt610=2;
            int LA610_0 = input.LA(1);

            if ( (LA610_0==PlusSign) ) {
                alt610=1;
            }
            else if ( (LA610_0==HyphenMinus) ) {
                alt610=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 610, 0, input);

                throw nvae;
            }
            switch (alt610) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt611=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt611=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt611=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt611=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt611=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 611, 0, input);

                throw nvae;
            }

            switch (alt611) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt612=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt612=1;
                }
                break;
            case Project:
                {
                alt612=2;
                }
                break;
            case Protected:
                {
                alt612=3;
                }
                break;
            case Public:
                {
                alt612=4;
                }
                break;
            case External:
                {
                alt612=5;
                }
                break;
            case Abstract:
                {
                alt612=6;
                }
                break;
            case Static:
                {
                alt612=7;
                }
                break;
            case Const:
                {
                alt612=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 612, 0, input);

                throw nvae;
            }

            switch (alt612) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred2_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_56); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_57);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred3_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred4_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop613:
        do {
            int alt613=2;
            int LA613_0 = input.LA(1);

            if ( ((LA613_0>=Protected && LA613_0<=Abstract)||LA613_0==External||(LA613_0>=Private && LA613_0<=Project)||LA613_0==Public||LA613_0==Static||LA613_0==Const) ) {
                alt613=1;
            }


            switch (alt613) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop613;
            }
        } while (true);

        match(input,Class,FOLLOW_184); if (state.failed) return ;
        int alt614=2;
        int LA614_0 = input.LA(1);

        if ( (LA614_0==Tilde) ) {
            alt614=1;
        }
        switch (alt614) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt615=2;
        int LA615_0 = input.LA(1);

        if ( ((LA615_0>=Intersection && LA615_0<=Implements)||(LA615_0>=Promisify && LA615_0<=Abstract)||LA615_0==External||(LA615_0>=Private && LA615_0<=Project)||LA615_0==Public||LA615_0==Static||LA615_0==Target||(LA615_0>=Async && LA615_0<=Await)||LA615_0==Union||(LA615_0>=Yield && LA615_0<=This)||LA615_0==From||LA615_0==Type||(LA615_0>=Get && LA615_0<=Let)||(LA615_0>=Out && LA615_0<=Set)||LA615_0==As||LA615_0==Of||LA615_0==RULE_IDENTIFIER) ) {
            alt615=1;
        }
        switch (alt615) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred5_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop616:
        do {
            int alt616=2;
            int LA616_0 = input.LA(1);

            if ( ((LA616_0>=Protected && LA616_0<=Abstract)||LA616_0==External||(LA616_0>=Private && LA616_0<=Project)||LA616_0==Public||LA616_0==Static||LA616_0==Const) ) {
                alt616=1;
            }


            switch (alt616) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop616;
            }
        } while (true);

        match(input,Interface,FOLLOW_184); if (state.failed) return ;
        int alt617=2;
        int LA617_0 = input.LA(1);

        if ( (LA617_0==Tilde) ) {
            alt617=1;
        }
        switch (alt617) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt618=2;
        int LA618_0 = input.LA(1);

        if ( ((LA618_0>=Intersection && LA618_0<=Implements)||(LA618_0>=Promisify && LA618_0<=Abstract)||LA618_0==External||(LA618_0>=Private && LA618_0<=Project)||LA618_0==Public||LA618_0==Static||LA618_0==Target||(LA618_0>=Async && LA618_0<=Await)||LA618_0==Union||(LA618_0>=Yield && LA618_0<=This)||LA618_0==From||LA618_0==Type||(LA618_0>=Get && LA618_0<=Let)||(LA618_0>=Out && LA618_0<=Set)||LA618_0==As||LA618_0==Of||LA618_0==RULE_IDENTIFIER) ) {
            alt618=1;
        }
        switch (alt618) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop619:
        do {
            int alt619=2;
            int LA619_0 = input.LA(1);

            if ( ((LA619_0>=Protected && LA619_0<=Abstract)||LA619_0==External||(LA619_0>=Private && LA619_0<=Project)||LA619_0==Public||LA619_0==Static||LA619_0==Const) ) {
                alt619=1;
            }


            switch (alt619) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop619;
            }
        } while (true);

        match(input,Enum,FOLLOW_185); if (state.failed) return ;
        int alt620=2;
        int LA620_0 = input.LA(1);

        if ( ((LA620_0>=Intersection && LA620_0<=Implements)||(LA620_0>=Promisify && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Target||(LA620_0>=Async && LA620_0<=Await)||LA620_0==Union||(LA620_0>=Yield && LA620_0<=This)||LA620_0==From||LA620_0==Type||(LA620_0>=Get && LA620_0<=Let)||(LA620_0>=Out && LA620_0<=Set)||LA620_0==As||LA620_0==Of||LA620_0==RULE_IDENTIFIER) ) {
            alt620=1;
        }
        switch (alt620) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred8_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop621:
        do {
            int alt621=2;
            int LA621_0 = input.LA(1);

            if ( ((LA621_0>=Protected && LA621_0<=Abstract)||LA621_0==External||(LA621_0>=Private && LA621_0<=Project)||LA621_0==Public||LA621_0==Static||LA621_0==Const) ) {
                alt621=1;
            }


            switch (alt621) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop621;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred10_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred11_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred12_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred13_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop622:
        do {
            int alt622=2;
            int LA622_0 = input.LA(1);

            if ( ((LA622_0>=Protected && LA622_0<=Abstract)||LA622_0==External||(LA622_0>=Private && LA622_0<=Project)||LA622_0==Public||LA622_0==Static||LA622_0==Const) ) {
                alt622=1;
            }


            switch (alt622) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_20);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop622;
            }
        } while (true);

        match(input,Class,FOLLOW_184); if (state.failed) return ;
        int alt623=2;
        int LA623_0 = input.LA(1);

        if ( (LA623_0==Tilde) ) {
            alt623=1;
        }
        switch (alt623) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt624=2;
        int LA624_0 = input.LA(1);

        if ( ((LA624_0>=Intersection && LA624_0<=Implements)||(LA624_0>=Promisify && LA624_0<=Abstract)||LA624_0==External||(LA624_0>=Private && LA624_0<=Project)||LA624_0==Public||LA624_0==Static||LA624_0==Target||(LA624_0>=Async && LA624_0<=Await)||LA624_0==Union||(LA624_0>=Yield && LA624_0<=This)||LA624_0==From||LA624_0==Type||(LA624_0>=Get && LA624_0<=Let)||(LA624_0>=Out && LA624_0<=Set)||LA624_0==As||LA624_0==Of||LA624_0==RULE_IDENTIFIER) ) {
            alt624=1;
        }
        switch (alt624) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred14_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop625:
        do {
            int alt625=2;
            int LA625_0 = input.LA(1);

            if ( ((LA625_0>=Protected && LA625_0<=Abstract)||LA625_0==External||(LA625_0>=Private && LA625_0<=Project)||LA625_0==Public||LA625_0==Static||LA625_0==Const) ) {
                alt625=1;
            }


            switch (alt625) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_23);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop625;
            }
        } while (true);

        match(input,Interface,FOLLOW_184); if (state.failed) return ;
        int alt626=2;
        int LA626_0 = input.LA(1);

        if ( (LA626_0==Tilde) ) {
            alt626=1;
        }
        switch (alt626) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_185);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt627=2;
        int LA627_0 = input.LA(1);

        if ( ((LA627_0>=Intersection && LA627_0<=Implements)||(LA627_0>=Promisify && LA627_0<=Abstract)||LA627_0==External||(LA627_0>=Private && LA627_0<=Project)||LA627_0==Public||LA627_0==Static||LA627_0==Target||(LA627_0>=Async && LA627_0<=Await)||LA627_0==Union||(LA627_0>=Yield && LA627_0<=This)||LA627_0==From||LA627_0==Type||(LA627_0>=Get && LA627_0<=Let)||(LA627_0>=Out && LA627_0<=Set)||LA627_0==As||LA627_0==Of||LA627_0==RULE_IDENTIFIER) ) {
            alt627=1;
        }
        switch (alt627) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred15_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop628:
        do {
            int alt628=2;
            int LA628_0 = input.LA(1);

            if ( ((LA628_0>=Protected && LA628_0<=Abstract)||LA628_0==External||(LA628_0>=Private && LA628_0<=Project)||LA628_0==Public||LA628_0==Static||LA628_0==Const) ) {
                alt628=1;
            }


            switch (alt628) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_24);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop628;
            }
        } while (true);

        match(input,Enum,FOLLOW_185); if (state.failed) return ;
        int alt629=2;
        int LA629_0 = input.LA(1);

        if ( ((LA629_0>=Intersection && LA629_0<=Implements)||(LA629_0>=Promisify && LA629_0<=Abstract)||LA629_0==External||(LA629_0>=Private && LA629_0<=Project)||LA629_0==Public||LA629_0==Static||LA629_0==Target||(LA629_0>=Async && LA629_0<=Await)||LA629_0==Union||(LA629_0>=Yield && LA629_0<=This)||LA629_0==From||LA629_0==Type||(LA629_0>=Get && LA629_0<=Let)||(LA629_0>=Out && LA629_0<=Set)||LA629_0==As||LA629_0==Of||LA629_0==RULE_IDENTIFIER) ) {
            alt629=1;
        }
        switch (alt629) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred19_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred26_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred27_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred28_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred37_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred38_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred41_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred42_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred45_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred46_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred51_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred52_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred55_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred56_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop661:
        do {
            int alt661=2;
            int LA661_0 = input.LA(1);

            if ( ((LA661_0>=Protected && LA661_0<=Abstract)||LA661_0==External||(LA661_0>=Private && LA661_0<=Project)||LA661_0==Public||LA661_0==Static||LA661_0==Const) ) {
                alt661=1;
            }


            switch (alt661) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop661;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred58_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred60_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop662:
        do {
            int alt662=2;
            int LA662_0 = input.LA(1);

            if ( ((LA662_0>=Protected && LA662_0<=Abstract)||LA662_0==External||(LA662_0>=Private && LA662_0<=Project)||LA662_0==Public||LA662_0==Static||LA662_0==Const) ) {
                alt662=1;
            }


            switch (alt662) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_19);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop662;
            }
        } while (true);

        pushFollow(FOLLOW_57);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred62_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred63_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred64_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_139); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred67_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred71_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred72_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred81_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred82_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred83_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred84_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred85_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt663=2;
        int LA663_0 = input.LA(1);

        if ( (LA663_0==Colon) ) {
            alt663=1;
        }
        switch (alt663) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred86_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==Colon) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred87_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( (LA665_0==Colon) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred88_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt666=2;
        int LA666_0 = input.LA(1);

        if ( (LA666_0==Colon) ) {
            alt666=1;
        }
        switch (alt666) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred89_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred90_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred93_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred94_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred95_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred96_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred97_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_14); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred98_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred99_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt667=2;
        int LA667_0 = input.LA(1);

        if ( (LA667_0==In) ) {
            alt667=1;
        }
        else if ( (LA667_0==Of) ) {
            alt667=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 667, 0, input);

            throw nvae;
        }
        switch (alt667) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt668=2;
        int LA668_0 = input.LA(1);

        if ( ((LA668_0>=Intersection && LA668_0<=Implements)||(LA668_0>=Promisify && LA668_0<=Abstract)||(LA668_0>=External && LA668_0<=Function)||(LA668_0>=Private && LA668_0<=Delete)||LA668_0==Public||LA668_0==Static||(LA668_0>=Target && LA668_0<=Await)||LA668_0==Class||(LA668_0>=False && LA668_0<=Super)||LA668_0==Union||(LA668_0>=Yield && LA668_0<=This)||(LA668_0>=From && LA668_0<=Void)||(LA668_0>=Get && LA668_0<=Set)||LA668_0==PlusSignPlusSign||LA668_0==HyphenMinusHyphenMinus||LA668_0==SolidusEqualsSign||LA668_0==As||LA668_0==Of||LA668_0==ExclamationMark||LA668_0==LeftParenthesis||LA668_0==PlusSign||LA668_0==HyphenMinus||LA668_0==Solidus||LA668_0==LessThanSign||(LA668_0>=CommercialAt && LA668_0<=LeftSquareBracket)||LA668_0==LeftCurlyBracket||LA668_0==Tilde||LA668_0==RULE_DOUBLE||(LA668_0>=RULE_HEX_INT && LA668_0<=RULE_LEGACY_OCTAL_INT)||LA668_0==RULE_SCIENTIFIC_INT||LA668_0==RULE_IDENTIFIER||LA668_0==RULE_STRING||(LA668_0>=RULE_TEMPLATE_HEAD && LA668_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA668_0==RULE_INT) ) {
            alt668=1;
        }
        switch (alt668) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred100_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred101_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_14); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_75);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred102_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred103_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt669=2;
        int LA669_0 = input.LA(1);

        if ( (LA669_0==In) ) {
            alt669=1;
        }
        else if ( (LA669_0==Of) ) {
            alt669=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 669, 0, input);

            throw nvae;
        }
        switch (alt669) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_132); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt670=2;
        int LA670_0 = input.LA(1);

        if ( ((LA670_0>=Intersection && LA670_0<=Implements)||(LA670_0>=Promisify && LA670_0<=Abstract)||(LA670_0>=External && LA670_0<=Function)||(LA670_0>=Private && LA670_0<=Delete)||LA670_0==Public||LA670_0==Static||(LA670_0>=Target && LA670_0<=Await)||LA670_0==Class||(LA670_0>=False && LA670_0<=Super)||LA670_0==Union||(LA670_0>=Yield && LA670_0<=This)||(LA670_0>=From && LA670_0<=Void)||(LA670_0>=Get && LA670_0<=Set)||LA670_0==PlusSignPlusSign||LA670_0==HyphenMinusHyphenMinus||LA670_0==SolidusEqualsSign||LA670_0==As||LA670_0==Of||LA670_0==ExclamationMark||LA670_0==LeftParenthesis||LA670_0==PlusSign||LA670_0==HyphenMinus||LA670_0==Solidus||LA670_0==LessThanSign||(LA670_0>=CommercialAt && LA670_0<=LeftSquareBracket)||LA670_0==LeftCurlyBracket||LA670_0==Tilde||LA670_0==RULE_DOUBLE||(LA670_0>=RULE_HEX_INT && LA670_0<=RULE_LEGACY_OCTAL_INT)||LA670_0==RULE_SCIENTIFIC_INT||LA670_0==RULE_IDENTIFIER||LA670_0==RULE_STRING||(LA670_0>=RULE_TEMPLATE_HEAD && LA670_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA670_0==RULE_INT) ) {
            alt670=1;
        }
        switch (alt670) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred104_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred111_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred114_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred115_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt671=2;
        alt671 = dfa671.predict(input);
        switch (alt671) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred122_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt672=2;
        int LA672_0 = input.LA(1);

        if ( (LA672_0==LessThanSign) ) {
            alt672=1;
        }
        switch (alt672) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt673=2;
        alt673 = dfa673.predict(input);
        switch (alt673) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt674=2;
        int LA674_0 = input.LA(1);

        if ( (LA674_0==Asterisk) ) {
            alt674=1;
        }
        else if ( ((LA674_0>=Intersection && LA674_0<=With)||(LA674_0>=For && LA674_0<=Var)||(LA674_0>=As && LA674_0<=Of)||LA674_0==LeftSquareBracket||LA674_0==RULE_DOUBLE||LA674_0==RULE_HEX_INT||LA674_0==RULE_OCTAL_INT||LA674_0==RULE_SCIENTIFIC_INT||LA674_0==RULE_IDENTIFIER||LA674_0==RULE_STRING||LA674_0==RULE_INT) ) {
            alt674=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 674, 0, input);

            throw nvae;
        }
        switch (alt674) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred123_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt675=2;
        alt675 = dfa675.predict(input);
        switch (alt675) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred124_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred126_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt676=2;
        int LA676_0 = input.LA(1);

        if ( (LA676_0==LessThanSign) ) {
            alt676=1;
        }
        switch (alt676) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt677=2;
        alt677 = dfa677.predict(input);
        switch (alt677) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt678=2;
        int LA678_0 = input.LA(1);

        if ( (LA678_0==Asterisk) ) {
            alt678=1;
        }
        else if ( ((LA678_0>=Intersection && LA678_0<=With)||(LA678_0>=For && LA678_0<=Var)||(LA678_0>=As && LA678_0<=Of)||LA678_0==LeftSquareBracket||LA678_0==RULE_DOUBLE||LA678_0==RULE_HEX_INT||LA678_0==RULE_OCTAL_INT||LA678_0==RULE_SCIENTIFIC_INT||LA678_0==RULE_IDENTIFIER||LA678_0==RULE_STRING||LA678_0==RULE_INT) ) {
            alt678=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 678, 0, input);

            throw nvae;
        }
        switch (alt678) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred127_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt679=2;
        alt679 = dfa679.predict(input);
        switch (alt679) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred133_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt680=2;
        int LA680_0 = input.LA(1);

        if ( (LA680_0==LessThanSign) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt681=2;
        alt681 = dfa681.predict(input);
        switch (alt681) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt682=2;
        int LA682_0 = input.LA(1);

        if ( (LA682_0==Asterisk) ) {
            alt682=1;
        }
        else if ( ((LA682_0>=Intersection && LA682_0<=With)||(LA682_0>=For && LA682_0<=Var)||(LA682_0>=As && LA682_0<=Of)||LA682_0==LeftSquareBracket||LA682_0==RULE_DOUBLE||LA682_0==RULE_HEX_INT||LA682_0==RULE_OCTAL_INT||LA682_0==RULE_SCIENTIFIC_INT||LA682_0==RULE_IDENTIFIER||LA682_0==RULE_STRING||LA682_0==RULE_INT) ) {
            alt682=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 682, 0, input);

            throw nvae;
        }
        switch (alt682) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt683=2;
        alt683 = dfa683.predict(input);
        switch (alt683) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt684=2;
        int LA684_0 = input.LA(1);

        if ( (LA684_0==LessThanSign) ) {
            alt684=1;
        }
        switch (alt684) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt685=2;
        alt685 = dfa685.predict(input);
        switch (alt685) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_103);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt686=2;
        int LA686_0 = input.LA(1);

        if ( (LA686_0==Asterisk) ) {
            alt686=1;
        }
        else if ( ((LA686_0>=Intersection && LA686_0<=With)||(LA686_0>=For && LA686_0<=Var)||(LA686_0>=As && LA686_0<=Of)||LA686_0==LeftSquareBracket||LA686_0==RULE_DOUBLE||LA686_0==RULE_HEX_INT||LA686_0==RULE_OCTAL_INT||LA686_0==RULE_SCIENTIFIC_INT||LA686_0==RULE_IDENTIFIER||LA686_0==RULE_STRING||LA686_0==RULE_INT) ) {
            alt686=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 686, 0, input);

            throw nvae;
        }
        switch (alt686) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred163_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred164_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred165_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred166_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred167_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred168_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred169_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_109); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred170_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred171_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred172_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred173_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred174_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred175_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred178_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred179_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred180_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred181_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_14);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_14);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_14);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred185_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_14);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred187_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred189_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_187);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred191_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred192_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred193_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred216_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred217_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred218_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred219_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred220_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred221_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred222_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt701=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt701=1;
            }
            break;
        case Async:
            {
            int LA701_2 = input.LA(2);

            if ( (LA701_2==RULE_NO_LINE_TERMINATOR) && (synpred221_InternalN4JSXParser())) {
                alt701=2;
            }
            else if ( (LA701_2==LeftParenthesis) && (synpred221_InternalN4JSXParser())) {
                alt701=2;
            }
            else if ( (LA701_2==EqualsSignGreaterThanSign) ) {
                alt701=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 701, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt701=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 701, 0, input);

            throw nvae;
        }

        switch (alt701) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt696=2;
                int LA696_0 = input.LA(1);

                if ( ((LA696_0>=Intersection && LA696_0<=Implements)||(LA696_0>=Promisify && LA696_0<=Abstract)||LA696_0==External||(LA696_0>=Private && LA696_0<=Project)||LA696_0==Public||LA696_0==Static||LA696_0==Target||(LA696_0>=Async && LA696_0<=Await)||LA696_0==Union||(LA696_0>=Yield && LA696_0<=This)||LA696_0==From||LA696_0==This_1||(LA696_0>=Type && LA696_0<=Void)||LA696_0==FullStopFullStopFullStop||(LA696_0>=Get && LA696_0<=Let)||(LA696_0>=Out && LA696_0<=Set)||LA696_0==As||LA696_0==Of||(LA696_0>=QuestionMark && LA696_0<=LeftSquareBracket)||LA696_0==LeftCurlyBracket||LA696_0==Tilde||LA696_0==RULE_IDENTIFIER) ) {
                    alt696=1;
                }
                switch (alt696) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop695:
                        do {
                            int alt695=2;
                            int LA695_0 = input.LA(1);

                            if ( (LA695_0==Comma) ) {
                                alt695=1;
                            }


                            switch (alt695) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop695;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt697=2;
                int LA697_0 = input.LA(1);

                if ( (LA697_0==Colon) ) {
                    alt697=1;
                }
                switch (alt697) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt699=2;
                int LA699_0 = input.LA(1);

                if ( ((LA699_0>=Intersection && LA699_0<=Implements)||(LA699_0>=Promisify && LA699_0<=Abstract)||LA699_0==External||(LA699_0>=Private && LA699_0<=Project)||LA699_0==Public||LA699_0==Static||LA699_0==Target||(LA699_0>=Async && LA699_0<=Await)||LA699_0==Union||(LA699_0>=Yield && LA699_0<=This)||LA699_0==From||LA699_0==This_1||(LA699_0>=Type && LA699_0<=Void)||LA699_0==FullStopFullStopFullStop||(LA699_0>=Get && LA699_0<=Let)||(LA699_0>=Out && LA699_0<=Set)||LA699_0==As||LA699_0==Of||(LA699_0>=QuestionMark && LA699_0<=LeftSquareBracket)||LA699_0==LeftCurlyBracket||LA699_0==Tilde||LA699_0==RULE_IDENTIFIER) ) {
                    alt699=1;
                }
                switch (alt699) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop698:
                        do {
                            int alt698=2;
                            int LA698_0 = input.LA(1);

                            if ( (LA698_0==Comma) ) {
                                alt698=1;
                            }


                            switch (alt698) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop698;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt700=2;
                int LA700_0 = input.LA(1);

                if ( (LA700_0==Colon) ) {
                    alt700=1;
                }
                switch (alt700) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred223_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt708=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt708=1;
            }
            break;
        case Async:
            {
            int LA708_2 = input.LA(2);

            if ( (LA708_2==RULE_NO_LINE_TERMINATOR) && (synpred226_InternalN4JSXParser())) {
                alt708=2;
            }
            else if ( (LA708_2==LeftParenthesis) && (synpred226_InternalN4JSXParser())) {
                alt708=2;
            }
            else if ( (LA708_2==EqualsSignGreaterThanSign) ) {
                alt708=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 708, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt708=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 708, 0, input);

            throw nvae;
        }

        switch (alt708) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt703=2;
                int LA703_0 = input.LA(1);

                if ( ((LA703_0>=Intersection && LA703_0<=Implements)||(LA703_0>=Promisify && LA703_0<=Abstract)||LA703_0==External||(LA703_0>=Private && LA703_0<=Project)||LA703_0==Public||LA703_0==Static||LA703_0==Target||(LA703_0>=Async && LA703_0<=Await)||LA703_0==Union||(LA703_0>=Yield && LA703_0<=This)||LA703_0==From||LA703_0==This_1||(LA703_0>=Type && LA703_0<=Void)||LA703_0==FullStopFullStopFullStop||(LA703_0>=Get && LA703_0<=Let)||(LA703_0>=Out && LA703_0<=Set)||LA703_0==As||LA703_0==Of||(LA703_0>=QuestionMark && LA703_0<=LeftSquareBracket)||LA703_0==LeftCurlyBracket||LA703_0==Tilde||LA703_0==RULE_IDENTIFIER) ) {
                    alt703=1;
                }
                switch (alt703) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop702:
                        do {
                            int alt702=2;
                            int LA702_0 = input.LA(1);

                            if ( (LA702_0==Comma) ) {
                                alt702=1;
                            }


                            switch (alt702) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop702;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt704=2;
                int LA704_0 = input.LA(1);

                if ( (LA704_0==Colon) ) {
                    alt704=1;
                }
                switch (alt704) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt706=2;
                int LA706_0 = input.LA(1);

                if ( ((LA706_0>=Intersection && LA706_0<=Implements)||(LA706_0>=Promisify && LA706_0<=Abstract)||LA706_0==External||(LA706_0>=Private && LA706_0<=Project)||LA706_0==Public||LA706_0==Static||LA706_0==Target||(LA706_0>=Async && LA706_0<=Await)||LA706_0==Union||(LA706_0>=Yield && LA706_0<=This)||LA706_0==From||LA706_0==This_1||(LA706_0>=Type && LA706_0<=Void)||LA706_0==FullStopFullStopFullStop||(LA706_0>=Get && LA706_0<=Let)||(LA706_0>=Out && LA706_0<=Set)||LA706_0==As||LA706_0==Of||(LA706_0>=QuestionMark && LA706_0<=LeftSquareBracket)||LA706_0==LeftCurlyBracket||LA706_0==Tilde||LA706_0==RULE_IDENTIFIER) ) {
                    alt706=1;
                }
                switch (alt706) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop705:
                        do {
                            int alt705=2;
                            int LA705_0 = input.LA(1);

                            if ( (LA705_0==Comma) ) {
                                alt705=1;
                            }


                            switch (alt705) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop705;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt707=2;
                int LA707_0 = input.LA(1);

                if ( (LA707_0==Colon) ) {
                    alt707=1;
                }
                switch (alt707) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt715=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt715=1;
            }
            break;
        case Async:
            {
            int LA715_2 = input.LA(2);

            if ( (LA715_2==EqualsSignGreaterThanSign) ) {
                alt715=3;
            }
            else if ( (LA715_2==RULE_NO_LINE_TERMINATOR) && (synpred231_InternalN4JSXParser())) {
                alt715=2;
            }
            else if ( (LA715_2==LeftParenthesis) && (synpred231_InternalN4JSXParser())) {
                alt715=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 715, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt715=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 715, 0, input);

            throw nvae;
        }

        switch (alt715) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt710=2;
                int LA710_0 = input.LA(1);

                if ( ((LA710_0>=Intersection && LA710_0<=Implements)||(LA710_0>=Promisify && LA710_0<=Abstract)||LA710_0==External||(LA710_0>=Private && LA710_0<=Project)||LA710_0==Public||LA710_0==Static||LA710_0==Target||(LA710_0>=Async && LA710_0<=Await)||LA710_0==Union||LA710_0==This||LA710_0==From||LA710_0==This_1||(LA710_0>=Type && LA710_0<=Void)||LA710_0==FullStopFullStopFullStop||(LA710_0>=Get && LA710_0<=Let)||(LA710_0>=Out && LA710_0<=Set)||LA710_0==As||LA710_0==Of||(LA710_0>=QuestionMark && LA710_0<=LeftSquareBracket)||LA710_0==LeftCurlyBracket||LA710_0==Tilde||LA710_0==RULE_IDENTIFIER) ) {
                    alt710=1;
                }
                switch (alt710) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop709:
                        do {
                            int alt709=2;
                            int LA709_0 = input.LA(1);

                            if ( (LA709_0==Comma) ) {
                                alt709=1;
                            }


                            switch (alt709) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop709;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt711=2;
                int LA711_0 = input.LA(1);

                if ( (LA711_0==Colon) ) {
                    alt711=1;
                }
                switch (alt711) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt713=2;
                int LA713_0 = input.LA(1);

                if ( ((LA713_0>=Intersection && LA713_0<=Implements)||(LA713_0>=Promisify && LA713_0<=Abstract)||LA713_0==External||(LA713_0>=Private && LA713_0<=Project)||LA713_0==Public||LA713_0==Static||LA713_0==Target||(LA713_0>=Async && LA713_0<=Await)||LA713_0==Union||LA713_0==This||LA713_0==From||LA713_0==This_1||(LA713_0>=Type && LA713_0<=Void)||LA713_0==FullStopFullStopFullStop||(LA713_0>=Get && LA713_0<=Let)||(LA713_0>=Out && LA713_0<=Set)||LA713_0==As||LA713_0==Of||(LA713_0>=QuestionMark && LA713_0<=LeftSquareBracket)||LA713_0==LeftCurlyBracket||LA713_0==Tilde||LA713_0==RULE_IDENTIFIER) ) {
                    alt713=1;
                }
                switch (alt713) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop712:
                        do {
                            int alt712=2;
                            int LA712_0 = input.LA(1);

                            if ( (LA712_0==Comma) ) {
                                alt712=1;
                            }


                            switch (alt712) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop712;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt714=2;
                int LA714_0 = input.LA(1);

                if ( (LA714_0==Colon) ) {
                    alt714=1;
                }
                switch (alt714) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred234_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_135); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_63); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_64);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt722=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt722=1;
            }
            break;
        case Async:
            {
            int LA722_2 = input.LA(2);

            if ( (LA722_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSXParser())) {
                alt722=2;
            }
            else if ( (LA722_2==LeftParenthesis) && (synpred236_InternalN4JSXParser())) {
                alt722=2;
            }
            else if ( (LA722_2==EqualsSignGreaterThanSign) ) {
                alt722=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 722, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt722=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 722, 0, input);

            throw nvae;
        }

        switch (alt722) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt717=2;
                int LA717_0 = input.LA(1);

                if ( ((LA717_0>=Intersection && LA717_0<=Implements)||(LA717_0>=Promisify && LA717_0<=Abstract)||LA717_0==External||(LA717_0>=Private && LA717_0<=Project)||LA717_0==Public||LA717_0==Static||LA717_0==Target||(LA717_0>=Async && LA717_0<=Await)||LA717_0==Union||LA717_0==This||LA717_0==From||LA717_0==This_1||(LA717_0>=Type && LA717_0<=Void)||LA717_0==FullStopFullStopFullStop||(LA717_0>=Get && LA717_0<=Let)||(LA717_0>=Out && LA717_0<=Set)||LA717_0==As||LA717_0==Of||(LA717_0>=QuestionMark && LA717_0<=LeftSquareBracket)||LA717_0==LeftCurlyBracket||LA717_0==Tilde||LA717_0==RULE_IDENTIFIER) ) {
                    alt717=1;
                }
                switch (alt717) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop716:
                        do {
                            int alt716=2;
                            int LA716_0 = input.LA(1);

                            if ( (LA716_0==Comma) ) {
                                alt716=1;
                            }


                            switch (alt716) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop716;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt718=2;
                int LA718_0 = input.LA(1);

                if ( (LA718_0==Colon) ) {
                    alt718=1;
                }
                switch (alt718) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_63); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_64);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_58); if (state.failed) return ;

                }


                }
                int alt720=2;
                int LA720_0 = input.LA(1);

                if ( ((LA720_0>=Intersection && LA720_0<=Implements)||(LA720_0>=Promisify && LA720_0<=Abstract)||LA720_0==External||(LA720_0>=Private && LA720_0<=Project)||LA720_0==Public||LA720_0==Static||LA720_0==Target||(LA720_0>=Async && LA720_0<=Await)||LA720_0==Union||LA720_0==This||LA720_0==From||LA720_0==This_1||(LA720_0>=Type && LA720_0<=Void)||LA720_0==FullStopFullStopFullStop||(LA720_0>=Get && LA720_0<=Let)||(LA720_0>=Out && LA720_0<=Set)||LA720_0==As||LA720_0==Of||(LA720_0>=QuestionMark && LA720_0<=LeftSquareBracket)||LA720_0==LeftCurlyBracket||LA720_0==Tilde||LA720_0==RULE_IDENTIFIER) ) {
                    alt720=1;
                }
                switch (alt720) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_59);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop719:
                        do {
                            int alt719=2;
                            int LA719_0 = input.LA(1);

                            if ( (LA719_0==Comma) ) {
                                alt719=1;
                            }


                            switch (alt719) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_60); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_59);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop719;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_61); if (state.failed) return ;
                int alt721=2;
                int LA721_0 = input.LA(1);

                if ( (LA721_0==Colon) ) {
                    alt721=1;
                }
                switch (alt721) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_55); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_62);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_62);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred241_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred251_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred255_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop731:
        do {
            int alt731=2;
            int LA731_0 = input.LA(1);

            if ( ((LA731_0>=Protected && LA731_0<=Abstract)||LA731_0==External||(LA731_0>=Private && LA731_0<=Project)||LA731_0==Public||LA731_0==Static||LA731_0==Const) ) {
                alt731=1;
            }


            switch (alt731) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop731;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred260_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop732:
        do {
            int alt732=2;
            int LA732_0 = input.LA(1);

            if ( ((LA732_0>=Protected && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Const) ) {
                alt732=1;
            }


            switch (alt732) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop732;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred261_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop733:
        do {
            int alt733=2;
            alt733 = dfa733.predict(input);
            switch (alt733) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop733;
            }
        } while (true);
        int alt734=2;
        int LA734_0 = input.LA(1);

        if ( (LA734_0==LessThanSign) ) {
            alt734=1;
        }
        switch (alt734) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt735=2;
        alt735 = dfa735.predict(input);
        switch (alt735) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt736=2;
        int LA736_0 = input.LA(1);

        if ( (LA736_0==Asterisk) ) {
            alt736=1;
        }
        else if ( ((LA736_0>=Intersection && LA736_0<=With)||(LA736_0>=For && LA736_0<=Var)||(LA736_0>=As && LA736_0<=Of)||LA736_0==LeftSquareBracket||LA736_0==RULE_DOUBLE||LA736_0==RULE_HEX_INT||LA736_0==RULE_OCTAL_INT||LA736_0==RULE_SCIENTIFIC_INT||LA736_0==RULE_IDENTIFIER||LA736_0==RULE_STRING||LA736_0==RULE_INT) ) {
            alt736=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 736, 0, input);

            throw nvae;
        }
        switch (alt736) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred262_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop737:
        do {
            int alt737=2;
            int LA737_0 = input.LA(1);

            if ( ((LA737_0>=Protected && LA737_0<=Abstract)||LA737_0==External||(LA737_0>=Private && LA737_0<=Project)||LA737_0==Public||LA737_0==Static||LA737_0==Const) ) {
                alt737=1;
            }


            switch (alt737) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop737;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred263_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop738:
        do {
            int alt738=2;
            int LA738_0 = input.LA(1);

            if ( ((LA738_0>=Protected && LA738_0<=Abstract)||LA738_0==External||(LA738_0>=Private && LA738_0<=Project)||LA738_0==Public||LA738_0==Static||LA738_0==Const) ) {
                alt738=1;
            }


            switch (alt738) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop738;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred264_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop739:
        do {
            int alt739=2;
            alt739 = dfa739.predict(input);
            switch (alt739) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop739;
            }
        } while (true);
        int alt740=2;
        int LA740_0 = input.LA(1);

        if ( (LA740_0==LessThanSign) ) {
            alt740=1;
        }
        switch (alt740) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt741=2;
        alt741 = dfa741.predict(input);
        switch (alt741) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt742=2;
        int LA742_0 = input.LA(1);

        if ( (LA742_0==Asterisk) ) {
            alt742=1;
        }
        else if ( ((LA742_0>=Intersection && LA742_0<=With)||(LA742_0>=For && LA742_0<=Var)||(LA742_0>=As && LA742_0<=Of)||LA742_0==LeftSquareBracket||LA742_0==RULE_DOUBLE||LA742_0==RULE_HEX_INT||LA742_0==RULE_OCTAL_INT||LA742_0==RULE_SCIENTIFIC_INT||LA742_0==RULE_IDENTIFIER||LA742_0==RULE_STRING||LA742_0==RULE_INT) ) {
            alt742=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 742, 0, input);

            throw nvae;
        }
        switch (alt742) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred265_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop743:
        do {
            int alt743=2;
            int LA743_0 = input.LA(1);

            if ( ((LA743_0>=Protected && LA743_0<=Abstract)||LA743_0==External||(LA743_0>=Private && LA743_0<=Project)||LA743_0==Public||LA743_0==Static||LA743_0==Const) ) {
                alt743=1;
            }


            switch (alt743) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop743;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred267_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop744:
        do {
            int alt744=2;
            int LA744_0 = input.LA(1);

            if ( ((LA744_0>=Protected && LA744_0<=Abstract)||LA744_0==External||(LA744_0>=Private && LA744_0<=Project)||LA744_0==Public||LA744_0==Static||LA744_0==Const) ) {
                alt744=1;
            }


            switch (alt744) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop744;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred269_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred270_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop745:
        do {
            int alt745=2;
            alt745 = dfa745.predict(input);
            switch (alt745) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop745;
            }
        } while (true);
        int alt746=2;
        int LA746_0 = input.LA(1);

        if ( (LA746_0==LessThanSign) ) {
            alt746=1;
        }
        switch (alt746) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt747=2;
        alt747 = dfa747.predict(input);
        switch (alt747) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt748=2;
        int LA748_0 = input.LA(1);

        if ( (LA748_0==Asterisk) ) {
            alt748=1;
        }
        else if ( ((LA748_0>=Intersection && LA748_0<=With)||(LA748_0>=For && LA748_0<=Var)||(LA748_0>=As && LA748_0<=Of)||LA748_0==LeftSquareBracket||LA748_0==RULE_DOUBLE||LA748_0==RULE_HEX_INT||LA748_0==RULE_OCTAL_INT||LA748_0==RULE_SCIENTIFIC_INT||LA748_0==RULE_IDENTIFIER||LA748_0==RULE_STRING||LA748_0==RULE_INT) ) {
            alt748=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 748, 0, input);

            throw nvae;
        }
        switch (alt748) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred273_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop749:
        do {
            int alt749=2;
            int LA749_0 = input.LA(1);

            if ( ((LA749_0>=Protected && LA749_0<=Abstract)||LA749_0==External||(LA749_0>=Private && LA749_0<=Project)||LA749_0==Public||LA749_0==Static||LA749_0==Const) ) {
                alt749=1;
            }


            switch (alt749) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop749;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred274_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop750:
        do {
            int alt750=2;
            int LA750_0 = input.LA(1);

            if ( ((LA750_0>=Protected && LA750_0<=Abstract)||LA750_0==External||(LA750_0>=Private && LA750_0<=Project)||LA750_0==Public||LA750_0==Static||LA750_0==Const) ) {
                alt750=1;
            }


            switch (alt750) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_154);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop750;
            }
        } while (true);

        match(input,Set,FOLLOW_186); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        loop751:
        do {
            int alt751=2;
            alt751 = dfa751.predict(input);
            switch (alt751) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_151);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop751;
            }
        } while (true);
        int alt752=2;
        int LA752_0 = input.LA(1);

        if ( (LA752_0==LessThanSign) ) {
            alt752=1;
        }
        switch (alt752) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt753=2;
        alt753 = dfa753.predict(input);
        switch (alt753) {
            case 1 :
                {
                pushFollow(FOLLOW_103);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt754=2;
        int LA754_0 = input.LA(1);

        if ( (LA754_0==Asterisk) ) {
            alt754=1;
        }
        else if ( ((LA754_0>=Intersection && LA754_0<=With)||(LA754_0>=For && LA754_0<=Var)||(LA754_0>=As && LA754_0<=Of)||LA754_0==LeftSquareBracket||LA754_0==RULE_DOUBLE||LA754_0==RULE_HEX_INT||LA754_0==RULE_OCTAL_INT||LA754_0==RULE_SCIENTIFIC_INT||LA754_0==RULE_IDENTIFIER||LA754_0==RULE_STRING||LA754_0==RULE_INT) ) {
            alt754=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 754, 0, input);

            throw nvae;
        }
        switch (alt754) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_102); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_102);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_64);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred287_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred288_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred292_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred303_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred304_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_92);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred306_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred307_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred308_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred309_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_164); if (state.failed) return ;
        pushFollow(FOLLOW_75);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_62); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred310_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred311_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred315_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred316_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred317_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_38); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred318_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        int alt768=2;
        int LA768_0 = input.LA(1);

        if ( (LA768_0==LessThanSign) ) {
            alt768=1;
        }
        switch (alt768) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_28); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_29);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop767:
                do {
                    int alt767=2;
                    int LA767_0 = input.LA(1);

                    if ( (LA767_0==Comma) ) {
                        alt767=1;
                    }


                    switch (alt767) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_28); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_29);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop767;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_38); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_64);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSXParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred263_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA186 dfa186 = new DFA186(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA204 dfa204 = new DFA204(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA223 dfa223 = new DFA223(this);
    protected DFA222 dfa222 = new DFA222(this);
    protected DFA214 dfa214 = new DFA214(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA244 dfa244 = new DFA244(this);
    protected DFA247 dfa247 = new DFA247(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA250 dfa250 = new DFA250(this);
    protected DFA256 dfa256 = new DFA256(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA277 dfa277 = new DFA277(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA285 dfa285 = new DFA285(this);
    protected DFA278 dfa278 = new DFA278(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA294 dfa294 = new DFA294(this);
    protected DFA295 dfa295 = new DFA295(this);
    protected DFA296 dfa296 = new DFA296(this);
    protected DFA298 dfa298 = new DFA298(this);
    protected DFA316 dfa316 = new DFA316(this);
    protected DFA322 dfa322 = new DFA322(this);
    protected DFA335 dfa335 = new DFA335(this);
    protected DFA336 dfa336 = new DFA336(this);
    protected DFA339 dfa339 = new DFA339(this);
    protected DFA340 dfa340 = new DFA340(this);
    protected DFA341 dfa341 = new DFA341(this);
    protected DFA342 dfa342 = new DFA342(this);
    protected DFA374 dfa374 = new DFA374(this);
    protected DFA373 dfa373 = new DFA373(this);
    protected DFA376 dfa376 = new DFA376(this);
    protected DFA375 dfa375 = new DFA375(this);
    protected DFA378 dfa378 = new DFA378(this);
    protected DFA377 dfa377 = new DFA377(this);
    protected DFA380 dfa380 = new DFA380(this);
    protected DFA379 dfa379 = new DFA379(this);
    protected DFA382 dfa382 = new DFA382(this);
    protected DFA384 dfa384 = new DFA384(this);
    protected DFA415 dfa415 = new DFA415(this);
    protected DFA457 dfa457 = new DFA457(this);
    protected DFA458 dfa458 = new DFA458(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA460 dfa460 = new DFA460(this);
    protected DFA463 dfa463 = new DFA463(this);
    protected DFA465 dfa465 = new DFA465(this);
    protected DFA467 dfa467 = new DFA467(this);
    protected DFA482 dfa482 = new DFA482(this);
    protected DFA472 dfa472 = new DFA472(this);
    protected DFA475 dfa475 = new DFA475(this);
    protected DFA477 dfa477 = new DFA477(this);
    protected DFA479 dfa479 = new DFA479(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA484 dfa484 = new DFA484(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA491 dfa491 = new DFA491(this);
    protected DFA493 dfa493 = new DFA493(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA498 dfa498 = new DFA498(this);
    protected DFA506 dfa506 = new DFA506(this);
    protected DFA508 dfa508 = new DFA508(this);
    protected DFA510 dfa510 = new DFA510(this);
    protected DFA513 dfa513 = new DFA513(this);
    protected DFA520 dfa520 = new DFA520(this);
    protected DFA523 dfa523 = new DFA523(this);
    protected DFA533 dfa533 = new DFA533(this);
    protected DFA539 dfa539 = new DFA539(this);
    protected DFA543 dfa543 = new DFA543(this);
    protected DFA544 dfa544 = new DFA544(this);
    protected DFA561 dfa561 = new DFA561(this);
    protected DFA565 dfa565 = new DFA565(this);
    protected DFA568 dfa568 = new DFA568(this);
    protected DFA579 dfa579 = new DFA579(this);
    protected DFA584 dfa584 = new DFA584(this);
    protected DFA586 dfa586 = new DFA586(this);
    protected DFA590 dfa590 = new DFA590(this);
    protected DFA671 dfa671 = new DFA671(this);
    protected DFA673 dfa673 = new DFA673(this);
    protected DFA675 dfa675 = new DFA675(this);
    protected DFA677 dfa677 = new DFA677(this);
    protected DFA679 dfa679 = new DFA679(this);
    protected DFA681 dfa681 = new DFA681(this);
    protected DFA683 dfa683 = new DFA683(this);
    protected DFA685 dfa685 = new DFA685(this);
    protected DFA733 dfa733 = new DFA733(this);
    protected DFA735 dfa735 = new DFA735(this);
    protected DFA739 dfa739 = new DFA739(this);
    protected DFA741 dfa741 = new DFA741(this);
    protected DFA745 dfa745 = new DFA745(this);
    protected DFA747 dfa747 = new DFA747(this);
    protected DFA751 dfa751 = new DFA751(this);
    protected DFA753 dfa753 = new DFA753(this);
    static final String dfa_1s = "\41\uffff";
    static final String dfa_2s = "\4\uffff\1\3\34\uffff";
    static final String dfa_3s = "\1\4\3\uffff\1\7\1\4\12\uffff\1\4\1\uffff\10\4\1\uffff\2\4\1\10\3\4";
    static final String dfa_4s = "\1\u0095\3\uffff\1\u0099\1\176\12\uffff\1\176\1\uffff\10\176\1\uffff\6\176";
    static final String dfa_5s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\14\1\15\2\13\1\uffff\1\16\10\uffff\1\4\6\uffff";
    static final String dfa_6s = "\4\uffff\1\0\34\uffff}>";
    static final String[] dfa_7s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\26\1\22\1\21\1\uffff\1\30\3\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\23\1\uffff\1\21\1\31\7\uffff\1\25\1\uffff\1\21\1\27\3\uffff\1\21\1\uffff\1\32\1\uffff\1\24\1\32\6\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\5\uffff\1\32\14\uffff\1\32\1\uffff\1\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\1\33\1\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\36\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\37\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\17\uffff\1\21\27\uffff\1\40",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\1\uffff\2\32\3\uffff\1\32\3\uffff\1\32\7\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\17\uffff\1\21\27\uffff\1\32",
            "\1\32\23\uffff\1\32\2\uffff\1\32\12\uffff\1\32\5\uffff\1\32\2\uffff\1\32\2\uffff\1\21\62\uffff\1\32\24\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21"
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "88:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | ParameterizedCallExpressionParserRuleCall_3= ruleParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= ruleArrayLiteral | ObjectLiteralParserRuleCall_6= ruleObjectLiteral | ParenExpressionParserRuleCall_7= ruleParenExpression | AnnotatedExpressionParserRuleCall_8= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= ruleN4ClassExpression | TemplateLiteralParserRuleCall_12= ruleTemplateLiteral | JSXElementParserRuleCall_13= ruleJSXElement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA3_4==EOF||LA3_4==Instanceof||LA3_4==ExclamationMarkEqualsSignEqualsSign||(LA3_4>=LessThanSignLessThanSignEqualsSign && LA3_4<=EqualsSignEqualsSignEqualsSign)||(LA3_4>=ExclamationMarkEqualsSign && LA3_4<=EqualsSignEqualsSign)||LA3_4==GreaterThanSignEqualsSign||(LA3_4>=CircumflexAccentEqualsSign && LA3_4<=As)||(LA3_4>=In && LA3_4<=VerticalLineVerticalLine)||(LA3_4>=PercentSign && LA3_4<=QuestionMark)||(LA3_4>=LeftSquareBracket && LA3_4<=RightCurlyBracket)||(LA3_4>=RULE_TEMPLATE_HEAD && LA3_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_4==RULE_ML_COMMENT||LA3_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA3_4==RULE_NO_LINE_TERMINATOR) && (synpred1_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA3_4==Function) && (synpred1_InternalN4JSXParser())) {s = 15;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_8s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "\1\26\1\22\1\21\1\uffff\1\30\3\21\2\uffff\1\21\4\uffff\2\21\3\uffff\1\21\1\uffff\1\21\1\uffff\1\23\1\uffff\1\21\1\31\7\uffff\1\25\1\uffff\1\21\1\27\3\uffff\1\21\1\uffff\1\32\1\uffff\1\24\1\32\6\uffff\2\21\1\uffff\2\21\23\uffff\1\21\3\uffff\1\21\5\uffff\1\32\14\uffff\1\32\1\uffff\1\32\2\uffff\1\32\2\uffff\1\32\14\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\1\33\1\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\35\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\36\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\13\uffff\2\21\4\uffff\1\21\5\uffff\1\37\17\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21",
            "",
            "\61\21\4\uffff\10\21\21\uffff\5\21\17\uffff\1\21\27\uffff\1\40",
            "\3\32\1\uffff\4\32\2\uffff\1\32\4\uffff\2\32\3\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\2\32\7\uffff\1\32\2\uffff\1\32\3\uffff\1\32\3\uffff\1\32\7\uffff\2\32\1\uffff\2\32\23\uffff\1\32\3\uffff\1\32\17\uffff\1\21\27\uffff\1\32",
            "\1\32\23\uffff\1\32\2\uffff\1\32\12\uffff\1\32\5\uffff\1\32\2\uffff\1\32\2\uffff\1\21\62\uffff\1\32\24\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\2\32\2\uffff\1\32\23\uffff\1\32\2\uffff\1\32\7\uffff\1\32\2\uffff\1\32\5\uffff\1\32\1\uffff\2\32\2\uffff\1\21\67\uffff\1\32\2\uffff\1\32\14\uffff\1\32",
            "\61\21\4\uffff\10\21\21\uffff\5\21\4\uffff\1\32\3\uffff\2\32\1\uffff\2\21\2\uffff\1\32\1\uffff\1\34\1\32\4\uffff\1\21\1\32\16\uffff\1\21"
    };
    static final short[][] dfa_8 = unpackEncodedStringArray(dfa_8s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_8;
        }
        public String getDescription() {
            return "134:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | ParameterizedCallExpressionParserRuleCall_3= norm1_ParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_6= norm1_ObjectLiteral | ParenExpressionParserRuleCall_7= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_8= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_12= norm1_TemplateLiteral | JSXElementParserRuleCall_13= ruleJSXElement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA4_4==EOF||LA4_4==Instanceof||LA4_4==ExclamationMarkEqualsSignEqualsSign||(LA4_4>=LessThanSignLessThanSignEqualsSign && LA4_4<=EqualsSignEqualsSignEqualsSign)||(LA4_4>=ExclamationMarkEqualsSign && LA4_4<=EqualsSignEqualsSign)||LA4_4==GreaterThanSignEqualsSign||(LA4_4>=CircumflexAccentEqualsSign && LA4_4<=As)||(LA4_4>=In && LA4_4<=VerticalLineVerticalLine)||(LA4_4>=PercentSign && LA4_4<=QuestionMark)||(LA4_4>=LeftSquareBracket && LA4_4<=RightCurlyBracket)||(LA4_4>=RULE_TEMPLATE_HEAD && LA4_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA4_4==RULE_ML_COMMENT||LA4_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA4_4==RULE_NO_LINE_TERMINATOR) && (synpred2_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA4_4==Function) && (synpred2_InternalN4JSXParser())) {s = 15;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_9s = "\123\uffff";
    static final String dfa_10s = "\1\4\13\0\107\uffff";
    static final String dfa_11s = "\1\u0095\13\0\107\uffff";
    static final String dfa_12s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_13s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_14s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = dfa_9;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "400:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_0 = input.LA(1);

                         
                        int index11_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA11_0>=9 && LA11_0<=106 && (s=T2S.M_0[LA11_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA11_0==Enum) && (synpred6_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA11_0==Import) ) {s = 13;}

                        else if ( (LA11_0==Export) ) {s = 14;}

                        else if ( ((LA11_0>=Intersection && LA11_0<=Implements)||LA11_0==Promisify||(LA11_0>=Continue && LA11_0<=Debugger)||LA11_0==Function||LA11_0==Delete||LA11_0==Return||(LA11_0>=Switch && LA11_0<=Break)||(LA11_0>=False && LA11_0<=This)||(LA11_0>=From && LA11_0<=With)||(LA11_0>=For && LA11_0<=Var)||LA11_0==PlusSignPlusSign||LA11_0==HyphenMinusHyphenMinus||LA11_0==SolidusEqualsSign||(LA11_0>=As && LA11_0<=If)||LA11_0==Of||LA11_0==ExclamationMark||LA11_0==LeftParenthesis||LA11_0==PlusSign||LA11_0==HyphenMinus||LA11_0==Solidus||(LA11_0>=Semicolon && LA11_0<=LessThanSign)||LA11_0==LeftSquareBracket||LA11_0==LeftCurlyBracket||LA11_0==Tilde||LA11_0==RULE_DOUBLE||(LA11_0>=RULE_HEX_INT && LA11_0<=RULE_LEGACY_OCTAL_INT)||LA11_0==RULE_SCIENTIFIC_INT||LA11_0==RULE_IDENTIFIER||LA11_0==RULE_STRING||(LA11_0>=RULE_TEMPLATE_HEAD && LA11_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA11_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index11_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_1 = input.LA(1);

                         
                        int index11_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSXParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_2 = input.LA(1);

                         
                        int index11_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_3 = input.LA(1);

                         
                        int index11_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_4 = input.LA(1);

                         
                        int index11_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_5 = input.LA(1);

                         
                        int index11_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_6 = input.LA(1);

                         
                        int index11_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA11_7 = input.LA(1);

                         
                        int index11_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA11_8 = input.LA(1);

                         
                        int index11_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (synpred6_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalN4JSXParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSXParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_15s = "\17\uffff";
    static final String dfa_16s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_17s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_18s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_19s = "\1\2\2\uffff\1\5\1\7\1\0\1\3\1\6\1\10\1\1\1\4\4\uffff}>";
    static final String[] dfa_20s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[][] dfa_20 = unpackEncodedStringArray(dfa_20s);

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = dfa_15;
            this.eof = dfa_15;
            this.min = dfa_16;
            this.max = dfa_17;
            this.accept = dfa_18;
            this.special = dfa_19;
            this.transition = dfa_20;
        }
        public String getDescription() {
            return "477:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_5 = input.LA(1);

                         
                        int index24_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_5==Enum) ) {s = 14;}

                        else if ( (LA24_5==Private) ) {s = 3;}

                        else if ( (LA24_5==Project) ) {s = 4;}

                        else if ( (LA24_5==Protected) ) {s = 5;}

                        else if ( (LA24_5==Public) ) {s = 6;}

                        else if ( (LA24_5==External) ) {s = 7;}

                        else if ( (LA24_5==Abstract) ) {s = 8;}

                        else if ( (LA24_5==Static) ) {s = 9;}

                        else if ( (LA24_5==Const) ) {s = 10;}

                        else if ( (LA24_5==Interface||LA24_5==Class) ) {s = 13;}

                        else if ( (LA24_5==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_5==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index24_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA24_9 = input.LA(1);

                         
                        int index24_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_9==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_9==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_9==Private) ) {s = 3;}

                        else if ( (LA24_9==Project) ) {s = 4;}

                        else if ( (LA24_9==Protected) ) {s = 5;}

                        else if ( (LA24_9==Public) ) {s = 6;}

                        else if ( (LA24_9==External) ) {s = 7;}

                        else if ( (LA24_9==Abstract) ) {s = 8;}

                        else if ( (LA24_9==Static) ) {s = 9;}

                        else if ( (LA24_9==Const) ) {s = 10;}

                        else if ( (LA24_9==Interface||LA24_9==Class) ) {s = 13;}

                        else if ( (LA24_9==Enum) ) {s = 14;}

                         
                        input.seek(index24_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA24_0 = input.LA(1);

                         
                        int index24_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA24_0>=10 && LA24_0<=35 && (s=T2S.M_1[LA24_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA24_0==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_0==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_0==Interface||LA24_0==Class) ) {s = 13;}

                        else if ( (LA24_0==Enum) ) {s = 14;}

                         
                        input.seek(index24_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA24_6 = input.LA(1);

                         
                        int index24_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_6==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_6==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_6==Private) ) {s = 3;}

                        else if ( (LA24_6==Project) ) {s = 4;}

                        else if ( (LA24_6==Protected) ) {s = 5;}

                        else if ( (LA24_6==Public) ) {s = 6;}

                        else if ( (LA24_6==External) ) {s = 7;}

                        else if ( (LA24_6==Abstract) ) {s = 8;}

                        else if ( (LA24_6==Static) ) {s = 9;}

                        else if ( (LA24_6==Const) ) {s = 10;}

                        else if ( (LA24_6==Interface||LA24_6==Class) ) {s = 13;}

                        else if ( (LA24_6==Enum) ) {s = 14;}

                         
                        input.seek(index24_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA24_10 = input.LA(1);

                         
                        int index24_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_10==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_10==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_10==Private) ) {s = 3;}

                        else if ( (LA24_10==Project) ) {s = 4;}

                        else if ( (LA24_10==Protected) ) {s = 5;}

                        else if ( (LA24_10==Public) ) {s = 6;}

                        else if ( (LA24_10==External) ) {s = 7;}

                        else if ( (LA24_10==Abstract) ) {s = 8;}

                        else if ( (LA24_10==Static) ) {s = 9;}

                        else if ( (LA24_10==Const) ) {s = 10;}

                        else if ( (LA24_10==Interface||LA24_10==Class) ) {s = 13;}

                        else if ( (LA24_10==Enum) ) {s = 14;}

                         
                        input.seek(index24_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA24_3 = input.LA(1);

                         
                        int index24_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_3==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_3==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_3==Private) ) {s = 3;}

                        else if ( (LA24_3==Project) ) {s = 4;}

                        else if ( (LA24_3==Protected) ) {s = 5;}

                        else if ( (LA24_3==Public) ) {s = 6;}

                        else if ( (LA24_3==External) ) {s = 7;}

                        else if ( (LA24_3==Abstract) ) {s = 8;}

                        else if ( (LA24_3==Static) ) {s = 9;}

                        else if ( (LA24_3==Const) ) {s = 10;}

                        else if ( (LA24_3==Interface||LA24_3==Class) ) {s = 13;}

                        else if ( (LA24_3==Enum) ) {s = 14;}

                         
                        input.seek(index24_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA24_7 = input.LA(1);

                         
                        int index24_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_7==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_7==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_7==Private) ) {s = 3;}

                        else if ( (LA24_7==Project) ) {s = 4;}

                        else if ( (LA24_7==Protected) ) {s = 5;}

                        else if ( (LA24_7==Public) ) {s = 6;}

                        else if ( (LA24_7==External) ) {s = 7;}

                        else if ( (LA24_7==Abstract) ) {s = 8;}

                        else if ( (LA24_7==Static) ) {s = 9;}

                        else if ( (LA24_7==Const) ) {s = 10;}

                        else if ( (LA24_7==Interface||LA24_7==Class) ) {s = 13;}

                        else if ( (LA24_7==Enum) ) {s = 14;}

                         
                        input.seek(index24_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA24_4 = input.LA(1);

                         
                        int index24_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_4==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_4==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA24_4==Private) ) {s = 3;}

                        else if ( (LA24_4==Project) ) {s = 4;}

                        else if ( (LA24_4==Protected) ) {s = 5;}

                        else if ( (LA24_4==Public) ) {s = 6;}

                        else if ( (LA24_4==External) ) {s = 7;}

                        else if ( (LA24_4==Abstract) ) {s = 8;}

                        else if ( (LA24_4==Static) ) {s = 9;}

                        else if ( (LA24_4==Const) ) {s = 10;}

                        else if ( (LA24_4==Interface||LA24_4==Class) ) {s = 13;}

                        else if ( (LA24_4==Enum) ) {s = 14;}

                         
                        input.seek(index24_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA24_8 = input.LA(1);

                         
                        int index24_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA24_8==Enum) ) {s = 14;}

                        else if ( (LA24_8==Private) ) {s = 3;}

                        else if ( (LA24_8==Project) ) {s = 4;}

                        else if ( (LA24_8==Protected) ) {s = 5;}

                        else if ( (LA24_8==Public) ) {s = 6;}

                        else if ( (LA24_8==External) ) {s = 7;}

                        else if ( (LA24_8==Abstract) ) {s = 8;}

                        else if ( (LA24_8==Static) ) {s = 9;}

                        else if ( (LA24_8==Const) ) {s = 10;}

                        else if ( (LA24_8==Interface||LA24_8==Class) ) {s = 13;}

                        else if ( (LA24_8==Async) && (synpred8_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA24_8==Function) && (synpred8_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index24_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_21s = "\13\uffff";
    static final String dfa_22s = "\11\11\2\uffff";
    static final String dfa_23s = "\11\43\2\uffff";
    static final String dfa_24s = "\11\uffff\1\1\1\2";
    static final String dfa_25s = "\13\uffff}>";
    static final String[] dfa_26s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "494:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_27s = "\101\uffff";
    static final String dfa_28s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_29s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_30s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_31s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_32s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "627:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_0 = input.LA(1);

                         
                        int index27_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA27_0==CommercialAt) ) {s = 1;}

                        else if ( (LA27_0==Private) ) {s = 2;}

                        else if ( (LA27_0==Project) ) {s = 3;}

                        else if ( (LA27_0==Protected) ) {s = 4;}

                        else if ( (LA27_0==Public) ) {s = 5;}

                        else if ( (LA27_0==External) ) {s = 6;}

                        else if ( (LA27_0==Abstract) ) {s = 7;}

                        else if ( (LA27_0==Static) ) {s = 8;}

                        else if ( (LA27_0==Const) && (synpred11_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA27_0==Class) ) {s = 10;}

                        else if ( (LA27_0==Interface) ) {s = 11;}

                        else if ( (LA27_0==Enum) && (synpred11_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA27_0==Async) ) {s = 13;}

                        else if ( (LA27_0==Function) ) {s = 14;}

                        else if ( (LA27_0==Var) && (synpred11_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA27_0==Let) ) {s = 16;}

                        else if ( ((LA27_0>=Intersection && LA27_0<=Implements)||LA27_0==Promisify||LA27_0==Delete||(LA27_0>=Target && LA27_0<=Typeof)||LA27_0==Await||(LA27_0>=False && LA27_0<=Super)||LA27_0==Union||(LA27_0>=Yield && LA27_0<=This)||(LA27_0>=From && LA27_0<=Void)||LA27_0==Get||(LA27_0>=New && LA27_0<=Set)||LA27_0==PlusSignPlusSign||LA27_0==HyphenMinusHyphenMinus||LA27_0==SolidusEqualsSign||LA27_0==As||LA27_0==Of||LA27_0==ExclamationMark||LA27_0==LeftParenthesis||LA27_0==PlusSign||LA27_0==HyphenMinus||LA27_0==Solidus||LA27_0==LessThanSign||LA27_0==LeftSquareBracket||LA27_0==LeftCurlyBracket||LA27_0==Tilde||LA27_0==RULE_DOUBLE||(LA27_0>=RULE_HEX_INT && LA27_0<=RULE_LEGACY_OCTAL_INT)||LA27_0==RULE_SCIENTIFIC_INT||LA27_0==RULE_IDENTIFIER||LA27_0==RULE_STRING||(LA27_0>=RULE_TEMPLATE_HEAD && LA27_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA27_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index27_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_5 = input.LA(1);

                         
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA27_6 = input.LA(1);

                         
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA27_7 = input.LA(1);

                         
                        int index27_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA27_8 = input.LA(1);

                         
                        int index27_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA27_10 = input.LA(1);

                         
                        int index27_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA27_11 = input.LA(1);

                         
                        int index27_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA27_13 = input.LA(1);

                         
                        int index27_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA27_14 = input.LA(1);

                         
                        int index27_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA27_16 = input.LA(1);

                         
                        int index27_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSXParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index27_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_33s = "\67\uffff";
    static final String dfa_34s = "\17\uffff\11\16\37\uffff";
    static final String dfa_35s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\4\1\17\37\uffff";
    static final String dfa_36s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_37s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_38s = "\1\5\1\uffff\1\17\1\1\1\12\1\15\1\7\1\20\1\2\1\13\5\uffff\1\6\1\0\1\11\1\3\1\16\1\14\1\4\1\10\40\uffff}>";
    static final String[] dfa_39s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\26\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\27\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final char[] dfa_36 = DFA.unpackEncodedStringToUnsignedChars(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[][] dfa_39 = unpackEncodedStringArray(dfa_39s);

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = dfa_33;
            this.eof = dfa_34;
            this.min = dfa_35;
            this.max = dfa_36;
            this.accept = dfa_37;
            this.special = dfa_38;
            this.transition = dfa_39;
        }
        public String getDescription() {
            return "740:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_16 = input.LA(1);

                         
                        int index33_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_16==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_16==Private) ) {s = 2;}

                        else if ( (LA33_16==Project) ) {s = 3;}

                        else if ( (LA33_16==Protected) ) {s = 4;}

                        else if ( (LA33_16==Public) ) {s = 5;}

                        else if ( (LA33_16==External) ) {s = 6;}

                        else if ( (LA33_16==Abstract) ) {s = 7;}

                        else if ( (LA33_16==Static) ) {s = 8;}

                        else if ( (LA33_16==Const) ) {s = 9;}

                        else if ( (LA33_16==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_16==EOF||LA33_16==Let||LA33_16==Var||LA33_16==Comma||(LA33_16>=Colon && LA33_16<=Semicolon)||LA33_16==EqualsSign||LA33_16==RightCurlyBracket||LA33_16==RULE_ML_COMMENT||LA33_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_16==Function||LA33_16==Async) ) {s = 13;}

                        else if ( (LA33_16==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA33_3 = input.LA(1);

                         
                        int index33_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_3==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_3==Private) ) {s = 2;}

                        else if ( (LA33_3==Project) ) {s = 3;}

                        else if ( (LA33_3==Protected) ) {s = 4;}

                        else if ( (LA33_3==Public) ) {s = 5;}

                        else if ( (LA33_3==External) ) {s = 6;}

                        else if ( (LA33_3==Abstract) ) {s = 7;}

                        else if ( (LA33_3==Static) ) {s = 8;}

                        else if ( (LA33_3==Const) ) {s = 9;}

                        else if ( (LA33_3==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_3==Let||LA33_3==Var) ) {s = 14;}

                        else if ( (LA33_3==Function||LA33_3==Async) ) {s = 13;}

                        else if ( (LA33_3==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA33_8 = input.LA(1);

                         
                        int index33_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_8==Function||LA33_8==Async) ) {s = 13;}

                        else if ( (LA33_8==Private) ) {s = 2;}

                        else if ( (LA33_8==Project) ) {s = 3;}

                        else if ( (LA33_8==Protected) ) {s = 4;}

                        else if ( (LA33_8==Public) ) {s = 5;}

                        else if ( (LA33_8==External) ) {s = 6;}

                        else if ( (LA33_8==Abstract) ) {s = 7;}

                        else if ( (LA33_8==Static) ) {s = 8;}

                        else if ( (LA33_8==Const) ) {s = 9;}

                        else if ( (LA33_8==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_8==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_8==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_8==Let||LA33_8==Var) ) {s = 14;}

                         
                        input.seek(index33_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA33_18 = input.LA(1);

                         
                        int index33_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_18==Function||LA33_18==Async) ) {s = 13;}

                        else if ( (LA33_18==Private) ) {s = 2;}

                        else if ( (LA33_18==Project) ) {s = 3;}

                        else if ( (LA33_18==Protected) ) {s = 4;}

                        else if ( (LA33_18==Public) ) {s = 5;}

                        else if ( (LA33_18==External) ) {s = 6;}

                        else if ( (LA33_18==Abstract) ) {s = 7;}

                        else if ( (LA33_18==Static) ) {s = 8;}

                        else if ( (LA33_18==Const) ) {s = 9;}

                        else if ( (LA33_18==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_18==EOF||LA33_18==Let||LA33_18==Var||LA33_18==Comma||(LA33_18>=Colon && LA33_18<=Semicolon)||LA33_18==EqualsSign||LA33_18==RightCurlyBracket||LA33_18==RULE_ML_COMMENT||LA33_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_18==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_18==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index33_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA33_21 = input.LA(1);

                         
                        int index33_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_21==Function||LA33_21==Async) ) {s = 13;}

                        else if ( (LA33_21==Private) ) {s = 2;}

                        else if ( (LA33_21==Project) ) {s = 3;}

                        else if ( (LA33_21==Protected) ) {s = 4;}

                        else if ( (LA33_21==Public) ) {s = 5;}

                        else if ( (LA33_21==External) ) {s = 6;}

                        else if ( (LA33_21==Abstract) ) {s = 7;}

                        else if ( (LA33_21==Static) ) {s = 8;}

                        else if ( (LA33_21==Const) ) {s = 9;}

                        else if ( (LA33_21==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_21==EOF||LA33_21==Let||LA33_21==Var||LA33_21==Comma||(LA33_21>=Colon && LA33_21<=Semicolon)||LA33_21==EqualsSign||LA33_21==RightCurlyBracket||LA33_21==RULE_ML_COMMENT||LA33_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_21==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_21==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index33_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA33_0 = input.LA(1);

                         
                        int index33_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_0==CommercialAt) && (synpred12_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA33_0==Private) ) {s = 2;}

                        else if ( (LA33_0==Project) ) {s = 3;}

                        else if ( (LA33_0==Protected) ) {s = 4;}

                        else if ( (LA33_0==Public) ) {s = 5;}

                        else if ( (LA33_0==External) ) {s = 6;}

                        else if ( (LA33_0==Abstract) ) {s = 7;}

                        else if ( (LA33_0==Static) ) {s = 8;}

                        else if ( (LA33_0==Const) ) {s = 9;}

                        else if ( (LA33_0==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_0==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_0==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_0==Function||LA33_0==Async) ) {s = 13;}

                        else if ( (LA33_0==Let||LA33_0==Var) ) {s = 14;}

                         
                        input.seek(index33_0);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA33_15 = input.LA(1);

                         
                        int index33_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_15==Function||LA33_15==Async) ) {s = 13;}

                        else if ( (LA33_15==Private) ) {s = 2;}

                        else if ( (LA33_15==Project) ) {s = 3;}

                        else if ( (LA33_15==Protected) ) {s = 4;}

                        else if ( (LA33_15==Public) ) {s = 5;}

                        else if ( (LA33_15==External) ) {s = 6;}

                        else if ( (LA33_15==Abstract) ) {s = 7;}

                        else if ( (LA33_15==Static) ) {s = 8;}

                        else if ( (LA33_15==Const) ) {s = 9;}

                        else if ( (LA33_15==EOF||LA33_15==Let||LA33_15==Var||LA33_15==Comma||(LA33_15>=Colon && LA33_15<=Semicolon)||LA33_15==EqualsSign||LA33_15==RightCurlyBracket||LA33_15==RULE_ML_COMMENT||LA33_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_15==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_15==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_15==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                         
                        input.seek(index33_15);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA33_6 = input.LA(1);

                         
                        int index33_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_6==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_6==Private) ) {s = 2;}

                        else if ( (LA33_6==Project) ) {s = 3;}

                        else if ( (LA33_6==Protected) ) {s = 4;}

                        else if ( (LA33_6==Public) ) {s = 5;}

                        else if ( (LA33_6==External) ) {s = 6;}

                        else if ( (LA33_6==Abstract) ) {s = 7;}

                        else if ( (LA33_6==Static) ) {s = 8;}

                        else if ( (LA33_6==Const) ) {s = 9;}

                        else if ( (LA33_6==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_6==Let||LA33_6==Var) ) {s = 14;}

                        else if ( (LA33_6==Function||LA33_6==Async) ) {s = 13;}

                        else if ( (LA33_6==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA33_22 = input.LA(1);

                         
                        int index33_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA33_22>=4 && LA33_22<=126 && (s=T2S.M_2[LA33_22-(4)])>=0) && (synpred14_InternalN4JSXParser())) { /* 31 cases */ }
                        else if ( (LA33_22==EOF||LA33_22==Comma||(LA33_22>=Colon && LA33_22<=Semicolon)||LA33_22==EqualsSign||LA33_22==RightCurlyBracket||LA33_22==RULE_ML_COMMENT||LA33_22==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index33_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA33_17 = input.LA(1);

                         
                        int index33_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_17==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_17==Private) ) {s = 2;}

                        else if ( (LA33_17==Project) ) {s = 3;}

                        else if ( (LA33_17==Protected) ) {s = 4;}

                        else if ( (LA33_17==Public) ) {s = 5;}

                        else if ( (LA33_17==External) ) {s = 6;}

                        else if ( (LA33_17==Abstract) ) {s = 7;}

                        else if ( (LA33_17==Static) ) {s = 8;}

                        else if ( (LA33_17==Const) ) {s = 9;}

                        else if ( (LA33_17==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_17==EOF||LA33_17==Let||LA33_17==Var||LA33_17==Comma||(LA33_17>=Colon && LA33_17<=Semicolon)||LA33_17==EqualsSign||LA33_17==RightCurlyBracket||LA33_17==RULE_ML_COMMENT||LA33_17==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_17==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_17==Function||LA33_17==Async) ) {s = 13;}

                         
                        input.seek(index33_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA33_4 = input.LA(1);

                         
                        int index33_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_4==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_4==Private) ) {s = 2;}

                        else if ( (LA33_4==Project) ) {s = 3;}

                        else if ( (LA33_4==Protected) ) {s = 4;}

                        else if ( (LA33_4==Public) ) {s = 5;}

                        else if ( (LA33_4==External) ) {s = 6;}

                        else if ( (LA33_4==Abstract) ) {s = 7;}

                        else if ( (LA33_4==Static) ) {s = 8;}

                        else if ( (LA33_4==Const) ) {s = 9;}

                        else if ( (LA33_4==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_4==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_4==Let||LA33_4==Var) ) {s = 14;}

                        else if ( (LA33_4==Function||LA33_4==Async) ) {s = 13;}

                         
                        input.seek(index33_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA33_9 = input.LA(1);

                         
                        int index33_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_9==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        
                        else if ((LA33_9>=9 && LA33_9<=35 && (s=T2S.M_3[LA33_9-(9)])>=0)) { /* 10 cases */ }
                        else if ( ((LA33_9>=Intersection && LA33_9<=Implements)||LA33_9==Promisify||LA33_9==Target||LA33_9==Await||LA33_9==Union||(LA33_9>=Yield && LA33_9<=This)||LA33_9==From||LA33_9==Type||(LA33_9>=Get && LA33_9<=Let)||(LA33_9>=Out && LA33_9<=Set)||LA33_9==Var||LA33_9==As||LA33_9==Of||(LA33_9>=CommercialAt && LA33_9<=LeftSquareBracket)||LA33_9==LeftCurlyBracket||LA33_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA33_9==Async) ) {s = 23;}

                        else if ( (LA33_9==Function) ) {s = 13;}

                        else if ( (LA33_9==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_9);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA33_20 = input.LA(1);

                         
                        int index33_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_20==EOF||LA33_20==Let||LA33_20==Var||LA33_20==Comma||(LA33_20>=Colon && LA33_20<=Semicolon)||LA33_20==EqualsSign||LA33_20==RightCurlyBracket||LA33_20==RULE_ML_COMMENT||LA33_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_20==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_20==Private) ) {s = 2;}

                        else if ( (LA33_20==Project) ) {s = 3;}

                        else if ( (LA33_20==Protected) ) {s = 4;}

                        else if ( (LA33_20==Public) ) {s = 5;}

                        else if ( (LA33_20==External) ) {s = 6;}

                        else if ( (LA33_20==Abstract) ) {s = 7;}

                        else if ( (LA33_20==Static) ) {s = 8;}

                        else if ( (LA33_20==Const) ) {s = 9;}

                        else if ( (LA33_20==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_20==Function||LA33_20==Async) ) {s = 13;}

                        else if ( (LA33_20==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_20);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA33_5 = input.LA(1);

                         
                        int index33_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_5==Function||LA33_5==Async) ) {s = 13;}

                        else if ( (LA33_5==Private) ) {s = 2;}

                        else if ( (LA33_5==Project) ) {s = 3;}

                        else if ( (LA33_5==Protected) ) {s = 4;}

                        else if ( (LA33_5==Public) ) {s = 5;}

                        else if ( (LA33_5==External) ) {s = 6;}

                        else if ( (LA33_5==Abstract) ) {s = 7;}

                        else if ( (LA33_5==Static) ) {s = 8;}

                        else if ( (LA33_5==Const) ) {s = 9;}

                        else if ( (LA33_5==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_5==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_5==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_5==Let||LA33_5==Var) ) {s = 14;}

                         
                        input.seek(index33_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA33_19 = input.LA(1);

                         
                        int index33_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_19==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_19==Private) ) {s = 2;}

                        else if ( (LA33_19==Project) ) {s = 3;}

                        else if ( (LA33_19==Protected) ) {s = 4;}

                        else if ( (LA33_19==Public) ) {s = 5;}

                        else if ( (LA33_19==External) ) {s = 6;}

                        else if ( (LA33_19==Abstract) ) {s = 7;}

                        else if ( (LA33_19==Static) ) {s = 8;}

                        else if ( (LA33_19==Const) ) {s = 9;}

                        else if ( (LA33_19==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_19==EOF||LA33_19==Let||LA33_19==Var||LA33_19==Comma||(LA33_19>=Colon && LA33_19<=Semicolon)||LA33_19==EqualsSign||LA33_19==RightCurlyBracket||LA33_19==RULE_ML_COMMENT||LA33_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA33_19==Function||LA33_19==Async) ) {s = 13;}

                        else if ( (LA33_19==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA33_2 = input.LA(1);

                         
                        int index33_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_2==Function||LA33_2==Async) ) {s = 13;}

                        else if ( (LA33_2==Private) ) {s = 2;}

                        else if ( (LA33_2==Project) ) {s = 3;}

                        else if ( (LA33_2==Protected) ) {s = 4;}

                        else if ( (LA33_2==Public) ) {s = 5;}

                        else if ( (LA33_2==External) ) {s = 6;}

                        else if ( (LA33_2==Abstract) ) {s = 7;}

                        else if ( (LA33_2==Static) ) {s = 8;}

                        else if ( (LA33_2==Const) ) {s = 9;}

                        else if ( (LA33_2==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA33_2==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_2==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_2==Let||LA33_2==Var) ) {s = 14;}

                         
                        input.seek(index33_2);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA33_7 = input.LA(1);

                         
                        int index33_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA33_7==Class) && (synpred13_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA33_7==Private) ) {s = 2;}

                        else if ( (LA33_7==Project) ) {s = 3;}

                        else if ( (LA33_7==Protected) ) {s = 4;}

                        else if ( (LA33_7==Public) ) {s = 5;}

                        else if ( (LA33_7==External) ) {s = 6;}

                        else if ( (LA33_7==Abstract) ) {s = 7;}

                        else if ( (LA33_7==Static) ) {s = 8;}

                        else if ( (LA33_7==Const) ) {s = 9;}

                        else if ( (LA33_7==Interface) && (synpred14_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA33_7==Let||LA33_7==Var) ) {s = 14;}

                        else if ( (LA33_7==Function||LA33_7==Async) ) {s = 13;}

                        else if ( (LA33_7==Enum) && (synpred15_InternalN4JSXParser())) {s = 12;}

                         
                        input.seek(index33_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_40s = "\26\uffff";
    static final String dfa_41s = "\15\uffff\11\12";
    static final String dfa_42s = "\10\11\1\4\4\uffff\7\11\1\17\1\4";
    static final String dfa_43s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_44s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_45s = "\26\uffff}>";
    static final String[] dfa_46s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\17\1\22\2\uffff\1\21\1\11\3\uffff\1\15\1\16\3\uffff\1\20\1\uffff\1\23\1\uffff\1\12\1\uffff\1\24\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[] dfa_41 = DFA.unpackEncodedString(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[][] dfa_46 = unpackEncodedStringArray(dfa_46s);

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_40;
            this.eof = dfa_41;
            this.min = dfa_42;
            this.max = dfa_43;
            this.accept = dfa_44;
            this.special = dfa_45;
            this.transition = dfa_46;
        }
        public String getDescription() {
            return "815:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_47s = "\14\uffff";
    static final String dfa_48s = "\4\uffff\10\1";
    static final String dfa_49s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_50s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_51s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_52s = "\14\uffff}>";
    static final String[] dfa_53s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final char[] dfa_50 = DFA.unpackEncodedStringToUnsignedChars(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[][] dfa_53 = unpackEncodedStringArray(dfa_53s);

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_53;
        }
        public String getDescription() {
            return "()* loopback of 822:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "841:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_54s = "\36\uffff";
    static final String dfa_55s = "\1\uffff\33\35\2\uffff";
    static final String dfa_56s = "\1\4\33\122\2\uffff";
    static final String dfa_57s = "\1\176\33\160\2\uffff";
    static final String dfa_58s = "\34\uffff\1\2\1\1";
    static final String dfa_59s = "\36\uffff}>";
    static final String[] dfa_60s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[][] dfa_60 = unpackEncodedStringArray(dfa_60s);

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = dfa_54;
            this.eof = dfa_55;
            this.min = dfa_56;
            this.max = dfa_57;
            this.accept = dfa_58;
            this.special = dfa_59;
            this.transition = dfa_60;
        }
        public String getDescription() {
            return "1008:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_61s = "\134\uffff";
    static final String dfa_62s = "\1\2\1\uffff\1\7\4\uffff\1\133\124\uffff";
    static final String dfa_63s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_64s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_65s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\124\1";
    static final String dfa_66s = "\1\0\1\3\1\4\2\uffff\1\2\1\uffff\1\1\124\uffff}>";
    static final String[] dfa_67s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\uffff\1\76\7\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\10\uffff\1\63",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final char[] dfa_64 = DFA.unpackEncodedStringToUnsignedChars(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[][] dfa_67 = unpackEncodedStringArray(dfa_67s);

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_66;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "1125:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_0 = input.LA(1);

                         
                        int index59_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_0==Semicolon) ) {s = 1;}

                        else if ( (LA59_0==EOF) ) {s = 2;}

                        else if ( (LA59_0==RULE_EOL) && (synpred19_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA59_0==RULE_ML_COMMENT) && (synpred19_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA59_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA59_0>=Intersection && LA59_0<=Implements)||(LA59_0>=Promisify && LA59_0<=Default)||(LA59_0>=Private && LA59_0<=Break)||(LA59_0>=Class && LA59_0<=With)||(LA59_0>=For && LA59_0<=Var)||LA59_0==PlusSignPlusSign||LA59_0==HyphenMinusHyphenMinus||LA59_0==SolidusEqualsSign||(LA59_0>=As && LA59_0<=If)||LA59_0==Of||LA59_0==ExclamationMark||LA59_0==LeftParenthesis||LA59_0==PlusSign||LA59_0==HyphenMinus||LA59_0==Solidus||LA59_0==LessThanSign||(LA59_0>=CommercialAt && LA59_0<=LeftSquareBracket)||LA59_0==LeftCurlyBracket||LA59_0==Tilde||LA59_0==RULE_DOUBLE||(LA59_0>=RULE_HEX_INT && LA59_0<=RULE_LEGACY_OCTAL_INT)||LA59_0==RULE_SCIENTIFIC_INT||LA59_0==RULE_IDENTIFIER||LA59_0==RULE_STRING||(LA59_0>=RULE_TEMPLATE_HEAD && LA59_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA59_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index59_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_7 = input.LA(1);

                         
                        int index59_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_7==EOF) && (synpred19_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index59_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_5 = input.LA(1);

                         
                        int index59_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index59_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_1 = input.LA(1);

                         
                        int index59_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index59_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_2 = input.LA(1);

                         
                        int index59_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA59_2==EOF) ) {s = 7;}

                        
                        else if ((LA59_2>=-1 && LA59_2<=149 && (s=T2S.M_4[LA59_2-(-1)])>=0) && (synpred19_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index59_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_68s = "\130\uffff";
    static final String dfa_69s = "\1\2\127\uffff";
    static final String dfa_70s = "\1\4\1\0\126\uffff";
    static final String dfa_71s = "\1\u0099\1\0\126\uffff";
    static final String dfa_72s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_73s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_74s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[] dfa_69 = DFA.unpackEncodedString(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[][] dfa_74 = unpackEncodedStringArray(dfa_74s);

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1360:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_1 = input.LA(1);

                         
                        int index78_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred27_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index78_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = dfa_68;
            this.eof = dfa_69;
            this.min = dfa_70;
            this.max = dfa_71;
            this.accept = dfa_72;
            this.special = dfa_73;
            this.transition = dfa_74;
        }
        public String getDescription() {
            return "1377:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_1 = input.LA(1);

                         
                        int index79_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred28_InternalN4JSXParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index79_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_75s = "\77\uffff";
    static final String dfa_76s = "\1\4\1\0\75\uffff";
    static final String dfa_77s = "\1\u0095\1\0\75\uffff";
    static final String dfa_78s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_79s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_80s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_75 = DFA.unpackEncodedString(dfa_75s);
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final short[][] dfa_80 = unpackEncodedStringArray(dfa_80s);

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1683:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1817:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA97_1 = input.LA(1);

                         
                        int index97_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "1951:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "2085:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_81s = "\44\uffff";
    static final String dfa_82s = "\1\4\1\0\42\uffff";
    static final String dfa_83s = "\1\176\1\0\42\uffff";
    static final String dfa_84s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_85s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_86s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "2436:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_0 = input.LA(1);

                         
                        int index132_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA132_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA132_0==LeftSquareBracket) && (synpred51_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA132_0>=Intersection && LA132_0<=Implements)||(LA132_0>=Promisify && LA132_0<=Abstract)||LA132_0==External||(LA132_0>=Private && LA132_0<=Project)||LA132_0==Public||LA132_0==Static||LA132_0==Target||(LA132_0>=Async && LA132_0<=Await)||LA132_0==Union||(LA132_0>=Yield && LA132_0<=This)||LA132_0==From||LA132_0==This_1||(LA132_0>=Type && LA132_0<=Void)||LA132_0==FullStopFullStopFullStop||(LA132_0>=Get && LA132_0<=Let)||(LA132_0>=Out && LA132_0<=Set)||LA132_0==As||LA132_0==Of||(LA132_0>=QuestionMark && LA132_0<=CommercialAt)||LA132_0==Tilde||LA132_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index132_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_87s = "\2\uffff\11\13\1\uffff";
    static final String dfa_88s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_89s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_90s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_91s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[][] dfa_91 = unpackEncodedStringArray(dfa_91s);

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_91;
        }
        public String getDescription() {
            return "2449:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_92s = "\43\uffff";
    static final String dfa_93s = "\1\4\1\0\41\uffff";
    static final String dfa_94s = "\1\176\1\0\41\uffff";
    static final String dfa_95s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_96s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_97s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_92 = DFA.unpackEncodedString(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[][] dfa_97 = unpackEncodedStringArray(dfa_97s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_93;
            this.max = dfa_94;
            this.accept = dfa_95;
            this.special = dfa_96;
            this.transition = dfa_97;
        }
        public String getDescription() {
            return "2478:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_0 = input.LA(1);

                         
                        int index138_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA138_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA138_0==LeftSquareBracket) && (synpred52_InternalN4JSXParser())) {s = 2;}

                        else if ( ((LA138_0>=Intersection && LA138_0<=Implements)||(LA138_0>=Promisify && LA138_0<=Abstract)||LA138_0==External||(LA138_0>=Private && LA138_0<=Project)||LA138_0==Public||LA138_0==Static||LA138_0==Target||(LA138_0>=Async && LA138_0<=Await)||LA138_0==Union||LA138_0==This||LA138_0==From||LA138_0==This_1||(LA138_0>=Type && LA138_0<=Void)||LA138_0==FullStopFullStopFullStop||(LA138_0>=Get && LA138_0<=Let)||(LA138_0>=Out && LA138_0<=Set)||LA138_0==As||LA138_0==Of||(LA138_0>=QuestionMark && LA138_0<=CommercialAt)||LA138_0==Tilde||LA138_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index138_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_98s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "2491:3: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_99s = "\120\uffff";
    static final String dfa_100s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_101s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_102s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_103s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_104s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\12\1\35\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\40\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final char[] dfa_101 = DFA.unpackEncodedStringToUnsignedChars(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final short[][] dfa_104 = unpackEncodedStringArray(dfa_104s);

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_100;
            this.max = dfa_101;
            this.accept = dfa_102;
            this.special = dfa_103;
            this.transition = dfa_104;
        }
        public String getDescription() {
            return "2603:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_0 = input.LA(1);

                         
                        int index142_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA142_0>=10 && LA142_0<=110 && (s=T2S.M_5[LA142_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA142_0==Var) && (synpred57_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA142_0>=4 && LA142_0<=126 && (s=T2S.M_6[LA142_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA142_0==Delete||LA142_0==Typeof||LA142_0==Class||(LA142_0>=False && LA142_0<=Super)||(LA142_0>=Null && LA142_0<=True)||LA142_0==Void||LA142_0==New||LA142_0==PlusSignPlusSign||LA142_0==HyphenMinusHyphenMinus||LA142_0==SolidusEqualsSign||LA142_0==ExclamationMark||LA142_0==LeftParenthesis||LA142_0==PlusSign||LA142_0==HyphenMinus||LA142_0==Solidus||LA142_0==LessThanSign||(LA142_0>=CommercialAt && LA142_0<=LeftSquareBracket)||LA142_0==Tilde||LA142_0==RULE_DOUBLE||(LA142_0>=RULE_HEX_INT && LA142_0<=RULE_LEGACY_OCTAL_INT)||LA142_0==RULE_SCIENTIFIC_INT||LA142_0==RULE_STRING||(LA142_0>=RULE_TEMPLATE_HEAD && LA142_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA142_0==RULE_INT) ) {s = 33;}

                        else if ( (LA142_0==If) ) {s = 65;}

                        else if ( (LA142_0==While||LA142_0==For||LA142_0==Do) ) {s = 66;}

                        else if ( (LA142_0==Continue) ) {s = 69;}

                        else if ( (LA142_0==Break) ) {s = 70;}

                        else if ( (LA142_0==Return) ) {s = 71;}

                        else if ( (LA142_0==With) ) {s = 72;}

                        else if ( (LA142_0==Switch) ) {s = 73;}

                        else if ( (LA142_0==Throw) ) {s = 74;}

                        else if ( (LA142_0==Try) ) {s = 75;}

                        else if ( (LA142_0==Debugger) ) {s = 76;}

                         
                        input.seek(index142_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_2 = input.LA(1);

                         
                        int index142_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_3 = input.LA(1);

                         
                        int index142_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_4 = input.LA(1);

                         
                        int index142_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_5 = input.LA(1);

                         
                        int index142_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA142_6 = input.LA(1);

                         
                        int index142_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA142_7 = input.LA(1);

                         
                        int index142_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA142_8 = input.LA(1);

                         
                        int index142_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA142_9 = input.LA(1);

                         
                        int index142_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index142_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA142_10 = input.LA(1);

                         
                        int index142_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA142_11 = input.LA(1);

                         
                        int index142_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA142_13 = input.LA(1);

                         
                        int index142_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA142_15 = input.LA(1);

                         
                        int index142_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA142_16 = input.LA(1);

                         
                        int index142_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA142_17 = input.LA(1);

                         
                        int index142_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA142_18 = input.LA(1);

                         
                        int index142_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA142_19 = input.LA(1);

                         
                        int index142_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA142_20 = input.LA(1);

                         
                        int index142_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA142_21 = input.LA(1);

                         
                        int index142_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA142_22 = input.LA(1);

                         
                        int index142_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA142_23 = input.LA(1);

                         
                        int index142_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA142_24 = input.LA(1);

                         
                        int index142_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA142_25 = input.LA(1);

                         
                        int index142_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA142_26 = input.LA(1);

                         
                        int index142_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA142_27 = input.LA(1);

                         
                        int index142_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA142_28 = input.LA(1);

                         
                        int index142_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA142_29 = input.LA(1);

                         
                        int index142_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA142_30 = input.LA(1);

                         
                        int index142_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA142_31 = input.LA(1);

                         
                        int index142_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA142_32 = input.LA(1);

                         
                        int index142_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index142_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_105s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_106s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_107s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_108s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_109s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\12\1\34\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\37\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[][] dfa_109 = unpackEncodedStringArray(dfa_109s);

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = dfa_99;
            this.eof = dfa_99;
            this.min = dfa_105;
            this.max = dfa_106;
            this.accept = dfa_107;
            this.special = dfa_108;
            this.transition = dfa_109;
        }
        public String getDescription() {
            return "2661:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_0 = input.LA(1);

                         
                        int index143_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA143_0>=10 && LA143_0<=110 && (s=T2S.M_5[LA143_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA143_0==Var) && (synpred61_InternalN4JSXParser())) {s = 12;}

                        
                        else if ((LA143_0>=4 && LA143_0<=126 && (s=T2S.M_8[LA143_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA143_0==Delete||LA143_0==Typeof||LA143_0==Class||(LA143_0>=False && LA143_0<=Super)||LA143_0==Yield||(LA143_0>=Null && LA143_0<=True)||LA143_0==Void||LA143_0==New||LA143_0==PlusSignPlusSign||LA143_0==HyphenMinusHyphenMinus||LA143_0==SolidusEqualsSign||LA143_0==ExclamationMark||LA143_0==LeftParenthesis||LA143_0==PlusSign||LA143_0==HyphenMinus||LA143_0==Solidus||LA143_0==LessThanSign||(LA143_0>=CommercialAt && LA143_0<=LeftSquareBracket)||LA143_0==Tilde||LA143_0==RULE_DOUBLE||(LA143_0>=RULE_HEX_INT && LA143_0<=RULE_LEGACY_OCTAL_INT)||LA143_0==RULE_SCIENTIFIC_INT||LA143_0==RULE_STRING||(LA143_0>=RULE_TEMPLATE_HEAD && LA143_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA143_0==RULE_INT) ) {s = 32;}

                        else if ( (LA143_0==If) ) {s = 65;}

                        else if ( (LA143_0==While||LA143_0==For||LA143_0==Do) ) {s = 66;}

                        else if ( (LA143_0==Continue) ) {s = 69;}

                        else if ( (LA143_0==Break) ) {s = 70;}

                        else if ( (LA143_0==Return) ) {s = 71;}

                        else if ( (LA143_0==With) ) {s = 72;}

                        else if ( (LA143_0==Switch) ) {s = 73;}

                        else if ( (LA143_0==Throw) ) {s = 74;}

                        else if ( (LA143_0==Try) ) {s = 75;}

                        else if ( (LA143_0==Debugger) ) {s = 76;}

                         
                        input.seek(index143_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_1 = input.LA(1);

                         
                        int index143_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_2 = input.LA(1);

                         
                        int index143_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA143_4 = input.LA(1);

                         
                        int index143_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA143_5 = input.LA(1);

                         
                        int index143_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA143_6 = input.LA(1);

                         
                        int index143_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA143_7 = input.LA(1);

                         
                        int index143_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA143_8 = input.LA(1);

                         
                        int index143_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA143_9 = input.LA(1);

                         
                        int index143_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                         
                        input.seek(index143_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA143_10 = input.LA(1);

                         
                        int index143_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA143_11 = input.LA(1);

                         
                        int index143_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSXParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA143_13 = input.LA(1);

                         
                        int index143_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSXParser()) ) {s = 12;}

                        else if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA143_15 = input.LA(1);

                         
                        int index143_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA143_16 = input.LA(1);

                         
                        int index143_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA143_17 = input.LA(1);

                         
                        int index143_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA143_18 = input.LA(1);

                         
                        int index143_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA143_23 = input.LA(1);

                         
                        int index143_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA143_24 = input.LA(1);

                         
                        int index143_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA143_25 = input.LA(1);

                         
                        int index143_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA143_26 = input.LA(1);

                         
                        int index143_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA143_27 = input.LA(1);

                         
                        int index143_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA143_28 = input.LA(1);

                         
                        int index143_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA143_29 = input.LA(1);

                         
                        int index143_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA143_30 = input.LA(1);

                         
                        int index143_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA143_31 = input.LA(1);

                         
                        int index143_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSXParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index143_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_110s = "\116\uffff";
    static final String dfa_111s = "\1\4\1\0\114\uffff";
    static final String dfa_112s = "\1\u0095\1\0\114\uffff";
    static final String dfa_113s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_114s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_115s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "2725:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_1 = input.LA(1);

                         
                        int index144_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index144_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_110;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "2745:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_1 = input.LA(1);

                         
                        int index145_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index145_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = dfa_47;
            this.eof = dfa_48;
            this.min = dfa_49;
            this.max = dfa_50;
            this.accept = dfa_51;
            this.special = dfa_52;
            this.transition = dfa_53;
        }
        public String getDescription() {
            return "()* loopback of 2835:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_116s = "\35\uffff";
    static final String dfa_117s = "\1\4\34\uffff";
    static final String dfa_118s = "\1\176\34\uffff";
    static final String dfa_119s = "\1\uffff\33\2\1\1";
    static final String dfa_120s = "\1\0\34\uffff}>";
    static final String[] dfa_121s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final char[] dfa_118 = DFA.unpackEncodedStringToUnsignedChars(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final short[][] dfa_121 = unpackEncodedStringArray(dfa_121s);

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3277:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_0 = input.LA(1);

                         
                        int index160_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA160_0>=4 && LA160_0<=126 && (s=T2S.M_9[LA160_0-(4)])>=0) && (synpred81_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA160_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index160_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3306:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_0 = input.LA(1);

                         
                        int index162_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA162_0>=4 && LA162_0<=126 && (s=T2S.M_9[LA162_0-(4)])>=0) && (synpred82_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA162_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index162_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\34\uffff";
    static final String dfa_123s = "\1\4\33\uffff";
    static final String dfa_124s = "\1\176\33\uffff";
    static final String dfa_125s = "\1\uffff\32\2\1\1";
    static final String dfa_126s = "\1\0\33\uffff}>";
    static final String[] dfa_127s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[][] dfa_127 = unpackEncodedStringArray(dfa_127s);

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3335:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA164_0>=4 && LA164_0<=126 && (s=T2S.M_11[LA164_0-(4)])>=0) && (synpred83_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA164_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3364:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_0 = input.LA(1);

                         
                        int index166_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA166_0>=4 && LA166_0<=126 && (s=T2S.M_11[LA166_0-(4)])>=0) && (synpred84_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA166_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index166_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3393:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_0 = input.LA(1);

                         
                        int index168_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA168_0>=4 && LA168_0<=126 && (s=T2S.M_9[LA168_0-(4)])>=0) && (synpred85_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA168_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index168_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = dfa_116;
            this.eof = dfa_116;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "()* loopback of 3423:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_0 = input.LA(1);

                         
                        int index171_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA171_0>=4 && LA171_0<=126 && (s=T2S.M_9[LA171_0-(4)])>=0) && (synpred86_InternalN4JSXParser())) { /* 27 cases */ }
                        else if ( (LA171_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index171_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3453:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_0 = input.LA(1);

                         
                        int index174_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA174_0>=4 && LA174_0<=126 && (s=T2S.M_11[LA174_0-(4)])>=0) && (synpred87_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA174_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index174_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "()* loopback of 3483:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_0 = input.LA(1);

                         
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA177_0>=4 && LA177_0<=126 && (s=T2S.M_11[LA177_0-(4)])>=0) && (synpred88_InternalN4JSXParser())) { /* 26 cases */ }
                        else if ( (LA177_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_128s = "\1\2\1\3\1\1\2\uffff\1\4\1\uffff\1\0\124\uffff}>";
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = dfa_61;
            this.eof = dfa_62;
            this.min = dfa_63;
            this.max = dfa_64;
            this.accept = dfa_65;
            this.special = dfa_128;
            this.transition = dfa_67;
        }
        public String getDescription() {
            return "3826:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA186_7 = input.LA(1);

                         
                        int index186_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_7==EOF) && (synpred95_InternalN4JSXParser())) {s = 91;}

                         
                        input.seek(index186_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA186_2 = input.LA(1);

                         
                        int index186_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_2==EOF) ) {s = 7;}

                        
                        else if ((LA186_2>=-1 && LA186_2<=149 && (s=T2S.M_4[LA186_2-(-1)])>=0) && (synpred95_InternalN4JSXParser())) { /* 84 cases */ }
                        input.seek(index186_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA186_0 = input.LA(1);

                         
                        int index186_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA186_0==Semicolon) ) {s = 1;}

                        else if ( (LA186_0==EOF) ) {s = 2;}

                        else if ( (LA186_0==RULE_EOL) && (synpred95_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA186_0==RULE_ML_COMMENT) && (synpred95_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA186_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA186_0>=Intersection && LA186_0<=Implements)||(LA186_0>=Promisify && LA186_0<=Default)||(LA186_0>=Private && LA186_0<=Break)||(LA186_0>=Class && LA186_0<=With)||(LA186_0>=For && LA186_0<=Var)||LA186_0==PlusSignPlusSign||LA186_0==HyphenMinusHyphenMinus||LA186_0==SolidusEqualsSign||(LA186_0>=As && LA186_0<=If)||LA186_0==Of||LA186_0==ExclamationMark||LA186_0==LeftParenthesis||LA186_0==PlusSign||LA186_0==HyphenMinus||LA186_0==Solidus||LA186_0==LessThanSign||(LA186_0>=CommercialAt && LA186_0<=LeftSquareBracket)||LA186_0==LeftCurlyBracket||LA186_0==Tilde||LA186_0==RULE_DOUBLE||(LA186_0>=RULE_HEX_INT && LA186_0<=RULE_LEGACY_OCTAL_INT)||LA186_0==RULE_SCIENTIFIC_INT||LA186_0==RULE_IDENTIFIER||LA186_0==RULE_STRING||(LA186_0>=RULE_TEMPLATE_HEAD && LA186_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA186_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index186_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA186_1 = input.LA(1);

                         
                        int index186_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index186_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA186_5 = input.LA(1);

                         
                        int index186_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSXParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index186_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 186, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_129s = "\102\uffff";
    static final String dfa_130s = "\1\4\1\0\100\uffff";
    static final String dfa_131s = "\1\u0095\1\0\100\uffff";
    static final String dfa_132s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_133s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_134s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final char[] dfa_130 = DFA.unpackEncodedStringToUnsignedChars(dfa_130s);
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[][] dfa_134 = unpackEncodedStringArray(dfa_134s);

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = dfa_129;
            this.eof = dfa_129;
            this.min = dfa_130;
            this.max = dfa_131;
            this.accept = dfa_132;
            this.special = dfa_133;
            this.transition = dfa_134;
        }
        public String getDescription() {
            return "3924:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA205_1 = input.LA(1);

                         
                        int index205_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index205_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_135s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_136s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_137s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_138s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_139s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final char[] dfa_136 = DFA.unpackEncodedStringToUnsignedChars(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[] dfa_138 = DFA.unpackEncodedString(dfa_138s);
    static final short[][] dfa_139 = unpackEncodedStringArray(dfa_139s);

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_135;
            this.max = dfa_136;
            this.accept = dfa_137;
            this.special = dfa_138;
            this.transition = dfa_139;
        }
        public String getDescription() {
            return "3955:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA204_0 = input.LA(1);

                         
                        int index204_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA204_0==Var) && (synpred98_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA204_0==Const) && (synpred98_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA204_0==Let) ) {s = 3;}

                        else if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||LA204_0==Get||(LA204_0>=New && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {s = 4;}

                        else if ( (LA204_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index204_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA204_3 = input.LA(1);

                         
                        int index204_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred98_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index204_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 204, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_140s = "\40\uffff";
    static final String dfa_141s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_142s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_143s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_144s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_145s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final char[] dfa_141 = DFA.unpackEncodedStringToUnsignedChars(dfa_141s);
    static final char[] dfa_142 = DFA.unpackEncodedStringToUnsignedChars(dfa_142s);
    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[][] dfa_145 = unpackEncodedStringArray(dfa_145s);

    class DFA196 extends DFA {

        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = dfa_140;
            this.eof = dfa_140;
            this.min = dfa_141;
            this.max = dfa_142;
            this.accept = dfa_143;
            this.special = dfa_144;
            this.transition = dfa_145;
        }
        public String getDescription() {
            return "3962:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_30 = input.LA(1);

                         
                        int index196_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA196_29 = input.LA(1);

                         
                        int index196_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSXParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index196_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_146s = "\1\4\76\uffff";
    static final String dfa_147s = "\1\u0095\76\uffff";
    static final String dfa_148s = "\1\uffff\75\1\1\2";
    static final String dfa_149s = "\1\0\76\uffff}>";
    static final String[] dfa_150s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\61\3\uffff\1\32\1\12\1\65\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final char[] dfa_147 = DFA.unpackEncodedStringToUnsignedChars(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_146;
            this.max = dfa_147;
            this.accept = dfa_148;
            this.special = dfa_149;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "4106:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_0 = input.LA(1);

                         
                        int index189_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA189_0>=4 && LA189_0<=149 && (s=T2S.M_18[LA189_0-(4)])>=0) && (synpred100_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA189_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index189_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA223 extends DFA {

        public DFA223(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 223;
            this.eot = dfa_129;
            this.eof = dfa_129;
            this.min = dfa_130;
            this.max = dfa_131;
            this.accept = dfa_132;
            this.special = dfa_133;
            this.transition = dfa_134;
        }
        public String getDescription() {
            return "4269:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA223_1 = input.LA(1);

                         
                        int index223_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index223_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 223, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA222 extends DFA {

        public DFA222(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 222;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_135;
            this.max = dfa_136;
            this.accept = dfa_137;
            this.special = dfa_138;
            this.transition = dfa_139;
        }
        public String getDescription() {
            return "4300:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA222_0 = input.LA(1);

                         
                        int index222_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA222_0==Var) && (synpred102_InternalN4JSXParser())) {s = 1;}

                        else if ( (LA222_0==Const) && (synpred102_InternalN4JSXParser())) {s = 2;}

                        else if ( (LA222_0==Let) ) {s = 3;}

                        else if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||LA222_0==Public||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||LA222_0==Get||(LA222_0>=New && LA222_0<=Set)||LA222_0==PlusSignPlusSign||LA222_0==HyphenMinusHyphenMinus||LA222_0==SolidusEqualsSign||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {s = 4;}

                        else if ( (LA222_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index222_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA222_3 = input.LA(1);

                         
                        int index222_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index222_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 222, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\37\uffff";
    static final String dfa_152s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_153s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_154s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_155s = "\34\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_156s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final char[] dfa_153 = DFA.unpackEncodedStringToUnsignedChars(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA214 extends DFA {

        public DFA214(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 214;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_153;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "4307:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA214_28 = input.LA(1);

                         
                        int index214_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index214_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA214_29 = input.LA(1);

                         
                        int index214_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_InternalN4JSXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index214_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 214, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_157s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_157 = unpackEncodedStringArray(dfa_157s);

    class DFA207 extends DFA {

        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = dfa_75;
            this.eof = dfa_75;
            this.min = dfa_146;
            this.max = dfa_147;
            this.accept = dfa_148;
            this.special = dfa_149;
            this.transition = dfa_157;
        }
        public String getDescription() {
            return "4451:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA207_0 = input.LA(1);

                         
                        int index207_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA207_0>=4 && LA207_0<=149 && (s=T2S.M_19[LA207_0-(4)])>=0) && (synpred104_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA207_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index207_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_158s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_159s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_160s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_161s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_162s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\22\uffff\1\36\1\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA245 extends DFA {

        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_92;
            this.eof = dfa_92;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "5272:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA245_0 = input.LA(1);

                         
                        int index245_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA245_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA245_0==LeftSquareBracket) && (synpred111_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA245_0>=4 && LA245_0<=126 && (s=T2S.M_20[LA245_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA245_0==This_1||LA245_0==Void||LA245_0==QuestionMark||LA245_0==Tilde) ) {s = 30;}

                         
                        input.seek(index245_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA245_1 = input.LA(1);

                         
                        int index245_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA245_3 = input.LA(1);

                         
                        int index245_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA245_4 = input.LA(1);

                         
                        int index245_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA245_5 = input.LA(1);

                         
                        int index245_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA245_6 = input.LA(1);

                         
                        int index245_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA245_7 = input.LA(1);

                         
                        int index245_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA245_8 = input.LA(1);

                         
                        int index245_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA245_9 = input.LA(1);

                         
                        int index245_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA245_10 = input.LA(1);

                         
                        int index245_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA245_11 = input.LA(1);

                         
                        int index245_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA245_12 = input.LA(1);

                         
                        int index245_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA245_13 = input.LA(1);

                         
                        int index245_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA245_14 = input.LA(1);

                         
                        int index245_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA245_15 = input.LA(1);

                         
                        int index245_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA245_16 = input.LA(1);

                         
                        int index245_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA245_17 = input.LA(1);

                         
                        int index245_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA245_18 = input.LA(1);

                         
                        int index245_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA245_19 = input.LA(1);

                         
                        int index245_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA245_20 = input.LA(1);

                         
                        int index245_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA245_21 = input.LA(1);

                         
                        int index245_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA245_22 = input.LA(1);

                         
                        int index245_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA245_23 = input.LA(1);

                         
                        int index245_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA245_24 = input.LA(1);

                         
                        int index245_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA245_25 = input.LA(1);

                         
                        int index245_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA245_26 = input.LA(1);

                         
                        int index245_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA245_27 = input.LA(1);

                         
                        int index245_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA245_28 = input.LA(1);

                         
                        int index245_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA245_29 = input.LA(1);

                         
                        int index245_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSXParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index245_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 245, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_163s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_163 = unpackEncodedStringArray(dfa_163s);

    class DFA244 extends DFA {

        public DFA244(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 244;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_163;
        }
        public String getDescription() {
            return "5293:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_164s = "\42\uffff";
    static final String dfa_165s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_166s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_167s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_168s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_169s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\22\uffff\1\35\1\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA247 extends DFA {

        public DFA247(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 247;
            this.eot = dfa_164;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "5310:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA247_0 = input.LA(1);

                         
                        int index247_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA247_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA247_0==LeftSquareBracket) && (synpred114_InternalN4JSXParser())) {s = 2;}

                        
                        else if ((LA247_0>=4 && LA247_0<=126 && (s=T2S.M_21[LA247_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA247_0==This_1||LA247_0==Void||LA247_0==QuestionMark||LA247_0==Tilde) ) {s = 29;}

                         
                        input.seek(index247_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA247_1 = input.LA(1);

                         
                        int index247_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_InternalN4JSXParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA247_3 = input.LA(1);

                         
                        int index247_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA247_4 = input.LA(1);

                         
                        int index247_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA247_5 = input.LA(1);

                         
                        int index247_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA247_6 = input.LA(1);

                         
                        int index247_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA247_7 = input.LA(1);

                         
                        int index247_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA247_8 = input.LA(1);

                         
                        int index247_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA247_9 = input.LA(1);

                         
                        int index247_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA247_10 = input.LA(1);

                         
                        int index247_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA247_11 = input.LA(1);

                         
                        int index247_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA247_12 = input.LA(1);

                         
                        int index247_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA247_13 = input.LA(1);

                         
                        int index247_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA247_14 = input.LA(1);

                         
                        int index247_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA247_15 = input.LA(1);

                         
                        int index247_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA247_16 = input.LA(1);

                         
                        int index247_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA247_17 = input.LA(1);

                         
                        int index247_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA247_18 = input.LA(1);

                         
                        int index247_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA247_19 = input.LA(1);

                         
                        int index247_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA247_20 = input.LA(1);

                         
                        int index247_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA247_21 = input.LA(1);

                         
                        int index247_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA247_22 = input.LA(1);

                         
                        int index247_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA247_23 = input.LA(1);

                         
                        int index247_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA247_24 = input.LA(1);

                         
                        int index247_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA247_25 = input.LA(1);

                         
                        int index247_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA247_26 = input.LA(1);

                         
                        int index247_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA247_27 = input.LA(1);

                         
                        int index247_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA247_28 = input.LA(1);

                         
                        int index247_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred115_InternalN4JSXParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index247_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 247, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "5331:7: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA250 extends DFA {

        public DFA250(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 250;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5545:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA256 extends DFA {

        public DFA256(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 256;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 5586:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\115\uffff";
    static final String dfa_178s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_179s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_180s = "\1\uffff\1\1\105\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_181s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_182s = {
            "\1\16\1\13\1\76\1\43\1\5\1\77\1\101\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\100\1\66\1\30\1\33\1\41\1\102\1\45\1\71\1\47\1\6\1\52\1\75\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\12\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\103\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\5\uffff\1\111\1\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5747:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA268_0 = input.LA(1);

                         
                        int index268_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA268_0>=4 && LA268_0<=129 && (s=T2S.M_22[LA268_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA268_0==RULE_DOUBLE||LA268_0==RULE_HEX_INT||LA268_0==RULE_OCTAL_INT||LA268_0==RULE_SCIENTIFIC_INT||LA268_0==RULE_INT) ) {s = 69;}

                        else if ( (LA268_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA268_0==LessThanSign) && (synpred122_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA268_0==Asterisk) && (synpred122_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA268_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index268_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA268_2 = input.LA(1);

                         
                        int index268_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA268_3 = input.LA(1);

                         
                        int index268_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA268_4 = input.LA(1);

                         
                        int index268_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA268_5 = input.LA(1);

                         
                        int index268_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA268_6 = input.LA(1);

                         
                        int index268_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA268_7 = input.LA(1);

                         
                        int index268_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA268_8 = input.LA(1);

                         
                        int index268_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA268_9 = input.LA(1);

                         
                        int index268_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA268_10 = input.LA(1);

                         
                        int index268_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA268_11 = input.LA(1);

                         
                        int index268_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA268_12 = input.LA(1);

                         
                        int index268_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA268_13 = input.LA(1);

                         
                        int index268_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA268_14 = input.LA(1);

                         
                        int index268_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA268_15 = input.LA(1);

                         
                        int index268_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA268_16 = input.LA(1);

                         
                        int index268_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA268_17 = input.LA(1);

                         
                        int index268_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA268_18 = input.LA(1);

                         
                        int index268_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA268_19 = input.LA(1);

                         
                        int index268_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA268_20 = input.LA(1);

                         
                        int index268_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA268_21 = input.LA(1);

                         
                        int index268_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA268_22 = input.LA(1);

                         
                        int index268_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA268_23 = input.LA(1);

                         
                        int index268_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA268_24 = input.LA(1);

                         
                        int index268_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA268_25 = input.LA(1);

                         
                        int index268_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA268_26 = input.LA(1);

                         
                        int index268_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA268_27 = input.LA(1);

                         
                        int index268_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA268_28 = input.LA(1);

                         
                        int index268_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA268_29 = input.LA(1);

                         
                        int index268_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA268_30 = input.LA(1);

                         
                        int index268_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA268_31 = input.LA(1);

                         
                        int index268_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA268_32 = input.LA(1);

                         
                        int index268_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA268_33 = input.LA(1);

                         
                        int index268_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA268_34 = input.LA(1);

                         
                        int index268_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA268_35 = input.LA(1);

                         
                        int index268_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA268_36 = input.LA(1);

                         
                        int index268_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA268_37 = input.LA(1);

                         
                        int index268_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA268_38 = input.LA(1);

                         
                        int index268_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA268_39 = input.LA(1);

                         
                        int index268_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA268_40 = input.LA(1);

                         
                        int index268_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA268_41 = input.LA(1);

                         
                        int index268_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA268_42 = input.LA(1);

                         
                        int index268_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA268_43 = input.LA(1);

                         
                        int index268_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA268_44 = input.LA(1);

                         
                        int index268_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA268_45 = input.LA(1);

                         
                        int index268_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA268_46 = input.LA(1);

                         
                        int index268_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA268_47 = input.LA(1);

                         
                        int index268_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA268_48 = input.LA(1);

                         
                        int index268_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA268_49 = input.LA(1);

                         
                        int index268_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA268_50 = input.LA(1);

                         
                        int index268_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA268_51 = input.LA(1);

                         
                        int index268_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA268_52 = input.LA(1);

                         
                        int index268_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred121_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA268_53 = input.LA(1);

                         
                        int index268_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA268_54 = input.LA(1);

                         
                        int index268_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA268_55 = input.LA(1);

                         
                        int index268_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA268_56 = input.LA(1);

                         
                        int index268_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA268_57 = input.LA(1);

                         
                        int index268_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA268_58 = input.LA(1);

                         
                        int index268_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA268_59 = input.LA(1);

                         
                        int index268_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA268_60 = input.LA(1);

                         
                        int index268_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA268_61 = input.LA(1);

                         
                        int index268_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA268_62 = input.LA(1);

                         
                        int index268_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA268_63 = input.LA(1);

                         
                        int index268_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA268_64 = input.LA(1);

                         
                        int index268_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA268_65 = input.LA(1);

                         
                        int index268_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA268_66 = input.LA(1);

                         
                        int index268_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA268_67 = input.LA(1);

                         
                        int index268_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA268_68 = input.LA(1);

                         
                        int index268_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA268_69 = input.LA(1);

                         
                        int index268_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index268_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA268_70 = input.LA(1);

                         
                        int index268_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index268_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 268, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "5933:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA269_0 = input.LA(1);

                         
                        int index269_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA269_0>=4 && LA269_0<=129 && (s=T2S.M_22[LA269_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA269_0==RULE_DOUBLE||LA269_0==RULE_HEX_INT||LA269_0==RULE_OCTAL_INT||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_INT) ) {s = 69;}

                        else if ( (LA269_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA269_0==LessThanSign) && (synpred126_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA269_0==Asterisk) && (synpred126_InternalN4JSXParser())) {s = 72;}

                        else if ( (LA269_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index269_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA269_2 = input.LA(1);

                         
                        int index269_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA269_3 = input.LA(1);

                         
                        int index269_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA269_4 = input.LA(1);

                         
                        int index269_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA269_5 = input.LA(1);

                         
                        int index269_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA269_6 = input.LA(1);

                         
                        int index269_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA269_7 = input.LA(1);

                         
                        int index269_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA269_8 = input.LA(1);

                         
                        int index269_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA269_9 = input.LA(1);

                         
                        int index269_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA269_10 = input.LA(1);

                         
                        int index269_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA269_11 = input.LA(1);

                         
                        int index269_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA269_12 = input.LA(1);

                         
                        int index269_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA269_13 = input.LA(1);

                         
                        int index269_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA269_14 = input.LA(1);

                         
                        int index269_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA269_15 = input.LA(1);

                         
                        int index269_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA269_16 = input.LA(1);

                         
                        int index269_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA269_17 = input.LA(1);

                         
                        int index269_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA269_18 = input.LA(1);

                         
                        int index269_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA269_19 = input.LA(1);

                         
                        int index269_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA269_20 = input.LA(1);

                         
                        int index269_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA269_21 = input.LA(1);

                         
                        int index269_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA269_22 = input.LA(1);

                         
                        int index269_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA269_23 = input.LA(1);

                         
                        int index269_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA269_24 = input.LA(1);

                         
                        int index269_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA269_25 = input.LA(1);

                         
                        int index269_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA269_26 = input.LA(1);

                         
                        int index269_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA269_27 = input.LA(1);

                         
                        int index269_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA269_28 = input.LA(1);

                         
                        int index269_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA269_29 = input.LA(1);

                         
                        int index269_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA269_30 = input.LA(1);

                         
                        int index269_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA269_31 = input.LA(1);

                         
                        int index269_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA269_32 = input.LA(1);

                         
                        int index269_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA269_33 = input.LA(1);

                         
                        int index269_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA269_34 = input.LA(1);

                         
                        int index269_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA269_35 = input.LA(1);

                         
                        int index269_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA269_36 = input.LA(1);

                         
                        int index269_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA269_37 = input.LA(1);

                         
                        int index269_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA269_38 = input.LA(1);

                         
                        int index269_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA269_39 = input.LA(1);

                         
                        int index269_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA269_40 = input.LA(1);

                         
                        int index269_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA269_41 = input.LA(1);

                         
                        int index269_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA269_42 = input.LA(1);

                         
                        int index269_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA269_43 = input.LA(1);

                         
                        int index269_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA269_44 = input.LA(1);

                         
                        int index269_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA269_45 = input.LA(1);

                         
                        int index269_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA269_46 = input.LA(1);

                         
                        int index269_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA269_47 = input.LA(1);

                         
                        int index269_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA269_48 = input.LA(1);

                         
                        int index269_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA269_49 = input.LA(1);

                         
                        int index269_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA269_50 = input.LA(1);

                         
                        int index269_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA269_51 = input.LA(1);

                         
                        int index269_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA269_52 = input.LA(1);

                         
                        int index269_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred125_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA269_53 = input.LA(1);

                         
                        int index269_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA269_54 = input.LA(1);

                         
                        int index269_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA269_55 = input.LA(1);

                         
                        int index269_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA269_56 = input.LA(1);

                         
                        int index269_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA269_57 = input.LA(1);

                         
                        int index269_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA269_58 = input.LA(1);

                         
                        int index269_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA269_59 = input.LA(1);

                         
                        int index269_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA269_60 = input.LA(1);

                         
                        int index269_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA269_61 = input.LA(1);

                         
                        int index269_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA269_62 = input.LA(1);

                         
                        int index269_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA269_63 = input.LA(1);

                         
                        int index269_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA269_64 = input.LA(1);

                         
                        int index269_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA269_65 = input.LA(1);

                         
                        int index269_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA269_66 = input.LA(1);

                         
                        int index269_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA269_67 = input.LA(1);

                         
                        int index269_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA269_68 = input.LA(1);

                         
                        int index269_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA269_69 = input.LA(1);

                         
                        int index269_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                         
                        input.seek(index269_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA269_70 = input.LA(1);

                         
                        int index269_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index269_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 269, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\114\uffff";
    static final String dfa_184s = "\1\4\105\0\6\uffff";
    static final String dfa_185s = "\1\u0095\105\0\6\uffff";
    static final String dfa_186s = "\106\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_187s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\12\1\75\1\42\1\4\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\5\1\51\1\74\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\11\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA277 extends DFA {

        public DFA277(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 277;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6126:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA277_0 = input.LA(1);

                         
                        int index277_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA277_0>=4 && LA277_0<=129 && (s=T2S.M_24[LA277_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA277_0==RULE_DOUBLE||LA277_0==RULE_HEX_INT||LA277_0==RULE_OCTAL_INT||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_INT) ) {s = 68;}

                        else if ( (LA277_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA277_0==LessThanSign) && (synpred133_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA277_0==Asterisk) && (synpred133_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA277_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index277_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA277_1 = input.LA(1);

                         
                        int index277_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA277_2 = input.LA(1);

                         
                        int index277_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA277_3 = input.LA(1);

                         
                        int index277_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA277_4 = input.LA(1);

                         
                        int index277_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA277_5 = input.LA(1);

                         
                        int index277_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA277_6 = input.LA(1);

                         
                        int index277_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA277_7 = input.LA(1);

                         
                        int index277_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA277_8 = input.LA(1);

                         
                        int index277_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA277_9 = input.LA(1);

                         
                        int index277_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA277_10 = input.LA(1);

                         
                        int index277_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA277_11 = input.LA(1);

                         
                        int index277_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA277_12 = input.LA(1);

                         
                        int index277_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA277_13 = input.LA(1);

                         
                        int index277_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA277_14 = input.LA(1);

                         
                        int index277_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA277_15 = input.LA(1);

                         
                        int index277_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA277_16 = input.LA(1);

                         
                        int index277_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA277_17 = input.LA(1);

                         
                        int index277_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA277_18 = input.LA(1);

                         
                        int index277_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA277_19 = input.LA(1);

                         
                        int index277_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA277_20 = input.LA(1);

                         
                        int index277_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA277_21 = input.LA(1);

                         
                        int index277_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA277_22 = input.LA(1);

                         
                        int index277_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA277_23 = input.LA(1);

                         
                        int index277_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA277_24 = input.LA(1);

                         
                        int index277_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA277_25 = input.LA(1);

                         
                        int index277_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA277_26 = input.LA(1);

                         
                        int index277_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA277_27 = input.LA(1);

                         
                        int index277_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA277_28 = input.LA(1);

                         
                        int index277_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA277_29 = input.LA(1);

                         
                        int index277_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA277_30 = input.LA(1);

                         
                        int index277_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA277_31 = input.LA(1);

                         
                        int index277_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA277_32 = input.LA(1);

                         
                        int index277_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA277_33 = input.LA(1);

                         
                        int index277_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA277_34 = input.LA(1);

                         
                        int index277_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA277_35 = input.LA(1);

                         
                        int index277_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA277_36 = input.LA(1);

                         
                        int index277_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA277_37 = input.LA(1);

                         
                        int index277_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA277_38 = input.LA(1);

                         
                        int index277_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA277_39 = input.LA(1);

                         
                        int index277_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA277_40 = input.LA(1);

                         
                        int index277_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA277_41 = input.LA(1);

                         
                        int index277_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA277_42 = input.LA(1);

                         
                        int index277_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA277_43 = input.LA(1);

                         
                        int index277_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA277_44 = input.LA(1);

                         
                        int index277_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA277_45 = input.LA(1);

                         
                        int index277_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA277_46 = input.LA(1);

                         
                        int index277_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA277_47 = input.LA(1);

                         
                        int index277_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA277_48 = input.LA(1);

                         
                        int index277_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA277_49 = input.LA(1);

                         
                        int index277_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA277_50 = input.LA(1);

                         
                        int index277_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA277_51 = input.LA(1);

                         
                        int index277_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred130_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA277_52 = input.LA(1);

                         
                        int index277_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA277_53 = input.LA(1);

                         
                        int index277_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA277_54 = input.LA(1);

                         
                        int index277_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA277_55 = input.LA(1);

                         
                        int index277_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA277_56 = input.LA(1);

                         
                        int index277_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA277_57 = input.LA(1);

                         
                        int index277_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA277_58 = input.LA(1);

                         
                        int index277_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA277_59 = input.LA(1);

                         
                        int index277_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA277_60 = input.LA(1);

                         
                        int index277_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA277_61 = input.LA(1);

                         
                        int index277_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA277_62 = input.LA(1);

                         
                        int index277_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA277_63 = input.LA(1);

                         
                        int index277_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA277_64 = input.LA(1);

                         
                        int index277_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA277_65 = input.LA(1);

                         
                        int index277_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA277_66 = input.LA(1);

                         
                        int index277_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA277_67 = input.LA(1);

                         
                        int index277_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA277_68 = input.LA(1);

                         
                        int index277_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index277_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA277_69 = input.LA(1);

                         
                        int index277_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index277_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 277, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\16\uffff";
    static final String dfa_190s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_191s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_192s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_193s = "\16\uffff}>";
    static final String[] dfa_194s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6135:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_195s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_196s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6391:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_199s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6416:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA285 extends DFA {

        public DFA285(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 285;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "6442:1: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA285_0 = input.LA(1);

                         
                        int index285_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA285_0>=4 && LA285_0<=129 && (s=T2S.M_24[LA285_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA285_0==RULE_DOUBLE||LA285_0==RULE_HEX_INT||LA285_0==RULE_OCTAL_INT||LA285_0==RULE_SCIENTIFIC_INT||LA285_0==RULE_INT) ) {s = 68;}

                        else if ( (LA285_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA285_0==LessThanSign) && (synpred142_InternalN4JSXParser())) {s = 70;}

                        else if ( (LA285_0==Asterisk) && (synpred142_InternalN4JSXParser())) {s = 71;}

                        else if ( (LA285_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index285_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA285_1 = input.LA(1);

                         
                        int index285_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA285_2 = input.LA(1);

                         
                        int index285_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA285_3 = input.LA(1);

                         
                        int index285_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA285_4 = input.LA(1);

                         
                        int index285_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA285_5 = input.LA(1);

                         
                        int index285_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA285_6 = input.LA(1);

                         
                        int index285_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA285_7 = input.LA(1);

                         
                        int index285_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA285_8 = input.LA(1);

                         
                        int index285_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA285_9 = input.LA(1);

                         
                        int index285_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA285_10 = input.LA(1);

                         
                        int index285_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA285_11 = input.LA(1);

                         
                        int index285_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA285_12 = input.LA(1);

                         
                        int index285_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA285_13 = input.LA(1);

                         
                        int index285_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA285_14 = input.LA(1);

                         
                        int index285_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA285_15 = input.LA(1);

                         
                        int index285_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA285_16 = input.LA(1);

                         
                        int index285_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA285_17 = input.LA(1);

                         
                        int index285_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA285_18 = input.LA(1);

                         
                        int index285_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA285_19 = input.LA(1);

                         
                        int index285_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA285_20 = input.LA(1);

                         
                        int index285_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA285_21 = input.LA(1);

                         
                        int index285_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA285_22 = input.LA(1);

                         
                        int index285_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA285_23 = input.LA(1);

                         
                        int index285_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA285_24 = input.LA(1);

                         
                        int index285_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA285_25 = input.LA(1);

                         
                        int index285_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA285_26 = input.LA(1);

                         
                        int index285_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA285_27 = input.LA(1);

                         
                        int index285_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA285_28 = input.LA(1);

                         
                        int index285_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA285_29 = input.LA(1);

                         
                        int index285_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA285_30 = input.LA(1);

                         
                        int index285_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA285_31 = input.LA(1);

                         
                        int index285_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA285_32 = input.LA(1);

                         
                        int index285_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA285_33 = input.LA(1);

                         
                        int index285_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA285_34 = input.LA(1);

                         
                        int index285_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA285_35 = input.LA(1);

                         
                        int index285_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA285_36 = input.LA(1);

                         
                        int index285_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA285_37 = input.LA(1);

                         
                        int index285_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA285_38 = input.LA(1);

                         
                        int index285_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA285_39 = input.LA(1);

                         
                        int index285_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA285_40 = input.LA(1);

                         
                        int index285_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA285_41 = input.LA(1);

                         
                        int index285_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA285_42 = input.LA(1);

                         
                        int index285_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA285_43 = input.LA(1);

                         
                        int index285_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA285_44 = input.LA(1);

                         
                        int index285_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA285_45 = input.LA(1);

                         
                        int index285_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA285_46 = input.LA(1);

                         
                        int index285_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA285_47 = input.LA(1);

                         
                        int index285_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA285_48 = input.LA(1);

                         
                        int index285_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA285_49 = input.LA(1);

                         
                        int index285_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA285_50 = input.LA(1);

                         
                        int index285_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA285_51 = input.LA(1);

                         
                        int index285_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred139_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA285_52 = input.LA(1);

                         
                        int index285_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA285_53 = input.LA(1);

                         
                        int index285_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA285_54 = input.LA(1);

                         
                        int index285_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA285_55 = input.LA(1);

                         
                        int index285_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA285_56 = input.LA(1);

                         
                        int index285_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA285_57 = input.LA(1);

                         
                        int index285_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA285_58 = input.LA(1);

                         
                        int index285_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA285_59 = input.LA(1);

                         
                        int index285_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA285_60 = input.LA(1);

                         
                        int index285_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA285_61 = input.LA(1);

                         
                        int index285_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA285_62 = input.LA(1);

                         
                        int index285_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA285_63 = input.LA(1);

                         
                        int index285_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA285_64 = input.LA(1);

                         
                        int index285_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA285_65 = input.LA(1);

                         
                        int index285_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA285_66 = input.LA(1);

                         
                        int index285_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA285_67 = input.LA(1);

                         
                        int index285_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA285_68 = input.LA(1);

                         
                        int index285_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                         
                        input.seek(index285_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA285_69 = input.LA(1);

                         
                        int index285_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSXParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index285_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 285, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA278 extends DFA {

        public DFA278(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 278;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6451:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6707:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "6732:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6785:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6843:3: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA294 extends DFA {

        public DFA294(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6894:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA295 extends DFA {

        public DFA295(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 295;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6928:14: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA296 extends DFA {

        public DFA296(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 296;
            this.eot = dfa_47;
            this.eof = dfa_87;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "6959:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA298 extends DFA {

        public DFA298(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 298;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_90;
            this.special = dfa_52;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "6984:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_201s = "\70\uffff";
    static final String dfa_202s = "\2\4\66\uffff";
    static final String dfa_203s = "\2\u0095\66\uffff";
    static final String dfa_204s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_205s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_206s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\64\3\uffff\1\36\1\14\3\uffff\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[][] dfa_206 = unpackEncodedStringArray(dfa_206s);

    class DFA316 extends DFA {

        public DFA316(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 316;
            this.eot = dfa_201;
            this.eof = dfa_201;
            this.min = dfa_202;
            this.max = dfa_203;
            this.accept = dfa_204;
            this.special = dfa_205;
            this.transition = dfa_206;
        }
        public String getDescription() {
            return "7752:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA316_1 = input.LA(1);

                         
                        int index316_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA316_1==FullStop) && (synpred165_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA316_1>=4 && LA316_1<=149 && (s=T2S.M_26[LA316_1-(4)])>=0) && (synpred166_InternalN4JSXParser())) { /* 53 cases */ }
                        input.seek(index316_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 316, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_207s = "\2\4\65\uffff";
    static final String dfa_208s = "\2\u0095\65\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_210s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);

    class DFA322 extends DFA {

        public DFA322(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 322;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "7810:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA322_1 = input.LA(1);

                         
                        int index322_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA322_1==FullStop) && (synpred169_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA322_1>=4 && LA322_1<=149 && (s=T2S.M_27[LA322_1-(4)])>=0) && (synpred170_InternalN4JSXParser())) { /* 52 cases */ }
                        input.seek(index322_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 322, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\103\uffff";
    static final String dfa_213s = "\1\1\102\uffff";
    static final String dfa_214s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_215s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_216s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_217s = "\1\1\3\uffff\1\0\76\uffff}>";
    static final String[] dfa_218s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final char[] dfa_214 = DFA.unpackEncodedStringToUnsignedChars(dfa_214s);
    static final char[] dfa_215 = DFA.unpackEncodedStringToUnsignedChars(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[][] dfa_218 = unpackEncodedStringArray(dfa_218s);

    class DFA335 extends DFA {

        public DFA335(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 335;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_214;
            this.max = dfa_215;
            this.accept = dfa_216;
            this.special = dfa_217;
            this.transition = dfa_218;
        }
        public String getDescription() {
            return "()* loopback of 8215:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA335_4 = input.LA(1);

                         
                        int index335_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA335_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA335_4>=4 && LA335_4<=149 && (s=T2S.M_28[LA335_4-(4)])>=0) && (synpred181_InternalN4JSXParser())) { /* 63 cases */ }
                        input.seek(index335_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA335_0 = input.LA(1);

                         
                        int index335_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA335_0==EOF||LA335_0==Instanceof||LA335_0==ExclamationMarkEqualsSignEqualsSign||(LA335_0>=LessThanSignLessThanSignEqualsSign && LA335_0<=EqualsSignEqualsSignEqualsSign)||(LA335_0>=ExclamationMarkEqualsSign && LA335_0<=AsteriskEqualsSign)||LA335_0==PlusSignEqualsSign||(LA335_0>=HyphenMinusEqualsSign && LA335_0<=SolidusEqualsSign)||(LA335_0>=LessThanSignEqualsSign && LA335_0<=EqualsSignEqualsSign)||LA335_0==GreaterThanSignEqualsSign||LA335_0==CircumflexAccentEqualsSign||(LA335_0>=In && LA335_0<=VerticalLineVerticalLine)||LA335_0==Ampersand||LA335_0==RightParenthesis||LA335_0==Comma||(LA335_0>=Colon && LA335_0<=EqualsSign)||LA335_0==QuestionMark||(LA335_0>=RightSquareBracket && LA335_0<=CircumflexAccent)||(LA335_0>=VerticalLine && LA335_0<=RightCurlyBracket)||LA335_0==RULE_ML_COMMENT||LA335_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA335_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA335_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index335_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 335, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_219s = "\1\1\101\uffff";
    static final String dfa_220s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_221s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_222s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_223s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_224s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[][] dfa_224 = unpackEncodedStringArray(dfa_224s);

    class DFA336 extends DFA {

        public DFA336(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 336;
            this.eot = dfa_129;
            this.eof = dfa_219;
            this.min = dfa_220;
            this.max = dfa_221;
            this.accept = dfa_222;
            this.special = dfa_223;
            this.transition = dfa_224;
        }
        public String getDescription() {
            return "()* loopback of 8244:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA336_4 = input.LA(1);

                         
                        int index336_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA336_4>=4 && LA336_4<=149 && (s=T2S.M_29[LA336_4-(4)])>=0) && (synpred182_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA336_4==GreaterThanSignEqualsSign) ) {s = 1;}

                         
                        input.seek(index336_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA336_0 = input.LA(1);

                         
                        int index336_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_0==EOF||LA336_0==Instanceof||LA336_0==ExclamationMarkEqualsSignEqualsSign||(LA336_0>=LessThanSignLessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSignEqualsSign)||(LA336_0>=ExclamationMarkEqualsSign && LA336_0<=AsteriskEqualsSign)||LA336_0==PlusSignEqualsSign||(LA336_0>=HyphenMinusEqualsSign && LA336_0<=SolidusEqualsSign)||(LA336_0>=LessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSign)||LA336_0==GreaterThanSignEqualsSign||LA336_0==CircumflexAccentEqualsSign||(LA336_0>=In && LA336_0<=VerticalLineVerticalLine)||LA336_0==Ampersand||LA336_0==RightParenthesis||LA336_0==Comma||(LA336_0>=Colon && LA336_0<=EqualsSign)||LA336_0==QuestionMark||(LA336_0>=RightSquareBracket && LA336_0<=CircumflexAccent)||(LA336_0>=VerticalLine && LA336_0<=RightCurlyBracket)||LA336_0==RULE_ML_COMMENT||LA336_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA336_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA336_0==LessThanSignLessThanSign) && (synpred182_InternalN4JSXParser())) {s = 3;}

                         
                        input.seek(index336_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 336, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_225s = "\104\uffff";
    static final String dfa_226s = "\1\1\103\uffff";
    static final String dfa_227s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_228s = "\1\160\1\uffff\1\u0095\101\uffff";
    static final String dfa_229s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_230s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_231s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[][] dfa_231 = unpackEncodedStringArray(dfa_231s);

    class DFA339 extends DFA {

        public DFA339(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_228;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_231;
        }
        public String getDescription() {
            return "()* loopback of 8310:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA339_0 = input.LA(1);

                         
                        int index339_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA339_0==EOF||LA339_0==ExclamationMarkEqualsSignEqualsSign||(LA339_0>=LessThanSignLessThanSignEqualsSign && LA339_0<=EqualsSignEqualsSignEqualsSign)||(LA339_0>=ExclamationMarkEqualsSign && LA339_0<=AsteriskEqualsSign)||LA339_0==PlusSignEqualsSign||(LA339_0>=HyphenMinusEqualsSign && LA339_0<=SolidusEqualsSign)||LA339_0==EqualsSignEqualsSign||LA339_0==CircumflexAccentEqualsSign||(LA339_0>=In && LA339_0<=VerticalLineVerticalLine)||LA339_0==Ampersand||LA339_0==Comma||LA339_0==Semicolon||LA339_0==EqualsSign||LA339_0==QuestionMark||LA339_0==CircumflexAccent||(LA339_0>=VerticalLine && LA339_0<=RightCurlyBracket)) ) {s = 1;}

                        else if ( (LA339_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA339_0==LessThanSign) && (synpred183_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA339_0==LessThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA339_0==GreaterThanSignEqualsSign) && (synpred183_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA339_0==Instanceof) && (synpred183_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index339_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA339_2 = input.LA(1);

                         
                        int index339_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA339_2>=4 && LA339_2<=149 && (s=T2S.M_30[LA339_2-(4)])>=0) && (synpred183_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA339_2==GreaterThanSignEqualsSign||LA339_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index339_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 339, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_232s = "\105\uffff";
    static final String dfa_233s = "\1\1\104\uffff";
    static final String dfa_234s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_235s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_236s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_237s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_238s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[][] dfa_238 = unpackEncodedStringArray(dfa_238s);

    class DFA340 extends DFA {

        public DFA340(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 340;
            this.eot = dfa_232;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_235;
            this.accept = dfa_236;
            this.special = dfa_237;
            this.transition = dfa_238;
        }
        public String getDescription() {
            return "()* loopback of 8495:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA340_0 = input.LA(1);

                         
                        int index340_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA340_0==EOF||LA340_0==ExclamationMarkEqualsSignEqualsSign||(LA340_0>=LessThanSignLessThanSignEqualsSign && LA340_0<=EqualsSignEqualsSignEqualsSign)||(LA340_0>=ExclamationMarkEqualsSign && LA340_0<=AsteriskEqualsSign)||LA340_0==PlusSignEqualsSign||(LA340_0>=HyphenMinusEqualsSign && LA340_0<=SolidusEqualsSign)||LA340_0==EqualsSignEqualsSign||LA340_0==CircumflexAccentEqualsSign||(LA340_0>=VerticalLineEqualsSign && LA340_0<=VerticalLineVerticalLine)||LA340_0==Ampersand||LA340_0==RightParenthesis||LA340_0==Comma||(LA340_0>=Colon && LA340_0<=Semicolon)||LA340_0==EqualsSign||LA340_0==QuestionMark||(LA340_0>=RightSquareBracket && LA340_0<=CircumflexAccent)||(LA340_0>=VerticalLine && LA340_0<=RightCurlyBracket)||LA340_0==RULE_ML_COMMENT||LA340_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA340_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA340_0==LessThanSign) && (synpred185_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA340_0==LessThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA340_0==GreaterThanSignEqualsSign) && (synpred185_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA340_0==Instanceof) && (synpred185_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA340_0==In) && (synpred185_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index340_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA340_2 = input.LA(1);

                         
                        int index340_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA340_2>=4 && LA340_2<=149 && (s=T2S.M_31[LA340_2-(4)])>=0) && (synpred185_InternalN4JSXParser())) { /* 61 cases */ }
                        else if ( (LA340_2==GreaterThanSignEqualsSign||LA340_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index340_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 340, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_239s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_240s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_241s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_242s = "\1\1\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_243s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[][] dfa_243 = unpackEncodedStringArray(dfa_243s);

    class DFA341 extends DFA {

        public DFA341(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 341;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_239;
            this.max = dfa_240;
            this.accept = dfa_241;
            this.special = dfa_242;
            this.transition = dfa_243;
        }
        public String getDescription() {
            return "()* loopback of 8680:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA341_2 = input.LA(1);

                         
                        int index341_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA341_2>=4 && LA341_2<=149 && (s=T2S.M_32[LA341_2-(4)])>=0) && (synpred187_InternalN4JSXParser())) { /* 60 cases */ }
                        else if ( (LA341_2==GreaterThanSignEqualsSign||LA341_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index341_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA341_0 = input.LA(1);

                         
                        int index341_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA341_0==EOF||LA341_0==ExclamationMarkEqualsSignEqualsSign||(LA341_0>=LessThanSignLessThanSignEqualsSign && LA341_0<=EqualsSignEqualsSignEqualsSign)||(LA341_0>=ExclamationMarkEqualsSign && LA341_0<=AsteriskEqualsSign)||LA341_0==PlusSignEqualsSign||(LA341_0>=HyphenMinusEqualsSign && LA341_0<=SolidusEqualsSign)||LA341_0==EqualsSignEqualsSign||LA341_0==CircumflexAccentEqualsSign||(LA341_0>=In && LA341_0<=VerticalLineVerticalLine)||LA341_0==Ampersand||LA341_0==Comma||LA341_0==Semicolon||LA341_0==EqualsSign||LA341_0==QuestionMark||LA341_0==CircumflexAccent||LA341_0==VerticalLine) ) {s = 1;}

                        else if ( (LA341_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA341_0==LessThanSign) && (synpred187_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA341_0==LessThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA341_0==GreaterThanSignEqualsSign) && (synpred187_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA341_0==Instanceof) && (synpred187_InternalN4JSXParser())) {s = 6;}

                         
                        input.seek(index341_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 341, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_244s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String[] dfa_245s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final short[][] dfa_245 = unpackEncodedStringArray(dfa_245s);

    class DFA342 extends DFA {

        public DFA342(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 342;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_244;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_245;
        }
        public String getDescription() {
            return "()* loopback of 8862:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA342_0 = input.LA(1);

                         
                        int index342_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_0==EOF||LA342_0==ExclamationMarkEqualsSignEqualsSign||(LA342_0>=LessThanSignLessThanSignEqualsSign && LA342_0<=EqualsSignEqualsSignEqualsSign)||(LA342_0>=ExclamationMarkEqualsSign && LA342_0<=AsteriskEqualsSign)||LA342_0==PlusSignEqualsSign||(LA342_0>=HyphenMinusEqualsSign && LA342_0<=SolidusEqualsSign)||LA342_0==EqualsSignEqualsSign||LA342_0==CircumflexAccentEqualsSign||(LA342_0>=VerticalLineEqualsSign && LA342_0<=VerticalLineVerticalLine)||LA342_0==Ampersand||LA342_0==RightParenthesis||LA342_0==Comma||(LA342_0>=Colon && LA342_0<=Semicolon)||LA342_0==EqualsSign||LA342_0==QuestionMark||(LA342_0>=RightSquareBracket && LA342_0<=CircumflexAccent)||(LA342_0>=VerticalLine && LA342_0<=RightCurlyBracket)||LA342_0==RULE_ML_COMMENT||LA342_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA342_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA342_0==LessThanSign) && (synpred189_InternalN4JSXParser())) {s = 3;}

                        else if ( (LA342_0==LessThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 4;}

                        else if ( (LA342_0==GreaterThanSignEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 5;}

                        else if ( (LA342_0==Instanceof) && (synpred189_InternalN4JSXParser())) {s = 6;}

                        else if ( (LA342_0==In) && (synpred189_InternalN4JSXParser())) {s = 7;}

                         
                        input.seek(index342_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA342_2 = input.LA(1);

                         
                        int index342_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA342_2==GreaterThanSignEqualsSign||LA342_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA342_2==New) && (synpred189_InternalN4JSXParser())) {s = 8;}

                        else if ( (LA342_2==This_1) && (synpred189_InternalN4JSXParser())) {s = 9;}

                        else if ( (LA342_2==Super) && (synpred189_InternalN4JSXParser())) {s = 10;}

                        else if ( (LA342_2==RULE_IDENTIFIER) && (synpred189_InternalN4JSXParser())) {s = 11;}

                        else if ( (LA342_2==Get) && (synpred189_InternalN4JSXParser())) {s = 12;}

                        else if ( (LA342_2==Set) && (synpred189_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA342_2==Let) && (synpred189_InternalN4JSXParser())) {s = 14;}

                        else if ( (LA342_2==Project) && (synpred189_InternalN4JSXParser())) {s = 15;}

                        else if ( (LA342_2==External) && (synpred189_InternalN4JSXParser())) {s = 16;}

                        else if ( (LA342_2==Abstract) && (synpred189_InternalN4JSXParser())) {s = 17;}

                        else if ( (LA342_2==Static) && (synpred189_InternalN4JSXParser())) {s = 18;}

                        else if ( (LA342_2==As) && (synpred189_InternalN4JSXParser())) {s = 19;}

                        else if ( (LA342_2==From) && (synpred189_InternalN4JSXParser())) {s = 20;}

                        else if ( (LA342_2==Constructor) && (synpred189_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA342_2==Of) && (synpred189_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA342_2==Target) && (synpred189_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA342_2==Type) && (synpred189_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA342_2==Union) && (synpred189_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA342_2==Intersection) && (synpred189_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA342_2==This) && (synpred189_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA342_2==Promisify) && (synpred189_InternalN4JSXParser())) {s = 28;}

                        else if ( (LA342_2==Await) && (synpred189_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA342_2==Async) && (synpred189_InternalN4JSXParser())) {s = 30;}

                        else if ( (LA342_2==Implements) && (synpred189_InternalN4JSXParser())) {s = 31;}

                        else if ( (LA342_2==Interface) && (synpred189_InternalN4JSXParser())) {s = 32;}

                        else if ( (LA342_2==Private) && (synpred189_InternalN4JSXParser())) {s = 33;}

                        else if ( (LA342_2==Protected) && (synpred189_InternalN4JSXParser())) {s = 34;}

                        else if ( (LA342_2==Public) && (synpred189_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA342_2==Out) && (synpred189_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA342_2==LessThanSign) && (synpred189_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA342_2==RULE_DOUBLE) && (synpred189_InternalN4JSXParser())) {s = 38;}

                        else if ( (LA342_2==RULE_INT) && (synpred189_InternalN4JSXParser())) {s = 39;}

                        else if ( (LA342_2==RULE_BINARY_INT) && (synpred189_InternalN4JSXParser())) {s = 40;}

                        else if ( (LA342_2==RULE_OCTAL_INT) && (synpred189_InternalN4JSXParser())) {s = 41;}

                        else if ( (LA342_2==RULE_LEGACY_OCTAL_INT) && (synpred189_InternalN4JSXParser())) {s = 42;}

                        else if ( (LA342_2==RULE_HEX_INT) && (synpred189_InternalN4JSXParser())) {s = 43;}

                        else if ( (LA342_2==RULE_SCIENTIFIC_INT) && (synpred189_InternalN4JSXParser())) {s = 44;}

                        else if ( (LA342_2==True) && (synpred189_InternalN4JSXParser())) {s = 45;}

                        else if ( (LA342_2==False) && (synpred189_InternalN4JSXParser())) {s = 46;}

                        else if ( (LA342_2==RULE_STRING) && (synpred189_InternalN4JSXParser())) {s = 47;}

                        else if ( (LA342_2==Null) && (synpred189_InternalN4JSXParser())) {s = 48;}

                        else if ( (LA342_2==Solidus) && (synpred189_InternalN4JSXParser())) {s = 49;}

                        else if ( (LA342_2==SolidusEqualsSign) && (synpred189_InternalN4JSXParser())) {s = 50;}

                        else if ( (LA342_2==LeftSquareBracket) && (synpred189_InternalN4JSXParser())) {s = 51;}

                        else if ( (LA342_2==LeftCurlyBracket) && (synpred189_InternalN4JSXParser())) {s = 52;}

                        else if ( (LA342_2==LeftParenthesis) && (synpred189_InternalN4JSXParser())) {s = 53;}

                        else if ( (LA342_2==CommercialAt) && (synpred189_InternalN4JSXParser())) {s = 54;}

                        else if ( (LA342_2==Function) && (synpred189_InternalN4JSXParser())) {s = 55;}

                        else if ( (LA342_2==Class) && (synpred189_InternalN4JSXParser())) {s = 56;}

                        else if ( (LA342_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred189_InternalN4JSXParser())) {s = 57;}

                        else if ( (LA342_2==RULE_TEMPLATE_HEAD) && (synpred189_InternalN4JSXParser())) {s = 58;}

                        else if ( (LA342_2==Delete) && (synpred189_InternalN4JSXParser())) {s = 59;}

                        else if ( (LA342_2==Void) && (synpred189_InternalN4JSXParser())) {s = 60;}

                        else if ( (LA342_2==Typeof) && (synpred189_InternalN4JSXParser())) {s = 61;}

                        else if ( (LA342_2==PlusSignPlusSign) && (synpred189_InternalN4JSXParser())) {s = 62;}

                        else if ( (LA342_2==HyphenMinusHyphenMinus) && (synpred189_InternalN4JSXParser())) {s = 63;}

                        else if ( (LA342_2==PlusSign) && (synpred189_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA342_2==HyphenMinus) && (synpred189_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA342_2==Tilde) && (synpred189_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA342_2==ExclamationMark) && (synpred189_InternalN4JSXParser())) {s = 67;}

                         
                        input.seek(index342_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 342, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_246s = "\1\4\35\0\43\uffff";
    static final String dfa_247s = "\1\u0095\35\0\43\uffff";
    static final String dfa_248s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_249s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_250s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_246 = DFA.unpackEncodedStringToUnsignedChars(dfa_246s);
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[][] dfa_250 = unpackEncodedStringArray(dfa_250s);

    class DFA374 extends DFA {

        public DFA374(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 374;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_246;
            this.max = dfa_247;
            this.accept = dfa_248;
            this.special = dfa_249;
            this.transition = dfa_250;
        }
        public String getDescription() {
            return "9964:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA374_1 = input.LA(1);

                         
                        int index374_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA374_2 = input.LA(1);

                         
                        int index374_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA374_3 = input.LA(1);

                         
                        int index374_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA374_4 = input.LA(1);

                         
                        int index374_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA374_5 = input.LA(1);

                         
                        int index374_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA374_6 = input.LA(1);

                         
                        int index374_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA374_7 = input.LA(1);

                         
                        int index374_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA374_8 = input.LA(1);

                         
                        int index374_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA374_9 = input.LA(1);

                         
                        int index374_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA374_10 = input.LA(1);

                         
                        int index374_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA374_11 = input.LA(1);

                         
                        int index374_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA374_12 = input.LA(1);

                         
                        int index374_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA374_13 = input.LA(1);

                         
                        int index374_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA374_14 = input.LA(1);

                         
                        int index374_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA374_15 = input.LA(1);

                         
                        int index374_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA374_16 = input.LA(1);

                         
                        int index374_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA374_17 = input.LA(1);

                         
                        int index374_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA374_18 = input.LA(1);

                         
                        int index374_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA374_19 = input.LA(1);

                         
                        int index374_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA374_20 = input.LA(1);

                         
                        int index374_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA374_21 = input.LA(1);

                         
                        int index374_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA374_22 = input.LA(1);

                         
                        int index374_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA374_23 = input.LA(1);

                         
                        int index374_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA374_24 = input.LA(1);

                         
                        int index374_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA374_25 = input.LA(1);

                         
                        int index374_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA374_26 = input.LA(1);

                         
                        int index374_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA374_27 = input.LA(1);

                         
                        int index374_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA374_28 = input.LA(1);

                         
                        int index374_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA374_29 = input.LA(1);

                         
                        int index374_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 374, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_251s = "\1\14\15\uffff";
    static final String dfa_252s = "\1\67\13\0\2\uffff";
    static final String dfa_253s = "\1\160\13\0\2\uffff";
    static final String dfa_254s = "\14\uffff\1\2\1\1";
    static final String dfa_255s = "\1\uffff\1\6\1\2\1\0\1\11\1\7\1\3\1\1\1\5\1\12\1\10\1\4\2\uffff}>";
    static final String[] dfa_256s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_251 = DFA.unpackEncodedString(dfa_251s);
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[][] dfa_256 = unpackEncodedStringArray(dfa_256s);

    class DFA373 extends DFA {

        public DFA373(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 373;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "10026:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA373_3 = input.LA(1);

                         
                        int index373_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA373_7 = input.LA(1);

                         
                        int index373_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA373_2 = input.LA(1);

                         
                        int index373_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA373_6 = input.LA(1);

                         
                        int index373_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA373_11 = input.LA(1);

                         
                        int index373_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA373_8 = input.LA(1);

                         
                        int index373_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA373_1 = input.LA(1);

                         
                        int index373_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA373_5 = input.LA(1);

                         
                        int index373_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA373_10 = input.LA(1);

                         
                        int index373_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA373_4 = input.LA(1);

                         
                        int index373_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA373_9 = input.LA(1);

                         
                        int index373_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 373, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA376 extends DFA {

        public DFA376(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 376;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_246;
            this.max = dfa_247;
            this.accept = dfa_248;
            this.special = dfa_249;
            this.transition = dfa_250;
        }
        public String getDescription() {
            return "10050:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA376_1 = input.LA(1);

                         
                        int index376_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA376_2 = input.LA(1);

                         
                        int index376_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA376_3 = input.LA(1);

                         
                        int index376_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA376_4 = input.LA(1);

                         
                        int index376_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA376_5 = input.LA(1);

                         
                        int index376_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA376_6 = input.LA(1);

                         
                        int index376_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA376_7 = input.LA(1);

                         
                        int index376_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA376_8 = input.LA(1);

                         
                        int index376_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA376_9 = input.LA(1);

                         
                        int index376_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA376_10 = input.LA(1);

                         
                        int index376_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA376_11 = input.LA(1);

                         
                        int index376_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA376_12 = input.LA(1);

                         
                        int index376_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA376_13 = input.LA(1);

                         
                        int index376_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA376_14 = input.LA(1);

                         
                        int index376_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA376_15 = input.LA(1);

                         
                        int index376_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA376_16 = input.LA(1);

                         
                        int index376_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA376_17 = input.LA(1);

                         
                        int index376_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA376_18 = input.LA(1);

                         
                        int index376_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA376_19 = input.LA(1);

                         
                        int index376_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA376_20 = input.LA(1);

                         
                        int index376_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA376_21 = input.LA(1);

                         
                        int index376_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA376_22 = input.LA(1);

                         
                        int index376_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA376_23 = input.LA(1);

                         
                        int index376_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA376_24 = input.LA(1);

                         
                        int index376_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA376_25 = input.LA(1);

                         
                        int index376_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA376_26 = input.LA(1);

                         
                        int index376_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA376_27 = input.LA(1);

                         
                        int index376_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA376_28 = input.LA(1);

                         
                        int index376_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA376_29 = input.LA(1);

                         
                        int index376_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 376, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_257s = "\1\u0099\13\0\2\uffff";
    static final String dfa_258s = "\1\uffff\1\3\1\0\1\11\1\7\1\4\1\1\1\12\1\6\1\10\1\5\1\2\2\uffff}>";
    static final String[] dfa_259s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[][] dfa_259 = unpackEncodedStringArray(dfa_259s);

    class DFA375 extends DFA {

        public DFA375(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 375;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_257;
            this.accept = dfa_254;
            this.special = dfa_258;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10112:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA375_2 = input.LA(1);

                         
                        int index375_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA375_6 = input.LA(1);

                         
                        int index375_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA375_11 = input.LA(1);

                         
                        int index375_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA375_1 = input.LA(1);

                         
                        int index375_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA375_5 = input.LA(1);

                         
                        int index375_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA375_10 = input.LA(1);

                         
                        int index375_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA375_8 = input.LA(1);

                         
                        int index375_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA375_4 = input.LA(1);

                         
                        int index375_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA375_9 = input.LA(1);

                         
                        int index375_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA375_3 = input.LA(1);

                         
                        int index375_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA375_7 = input.LA(1);

                         
                        int index375_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 375, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_260s = "\1\4\34\0\44\uffff";
    static final String dfa_261s = "\1\u0095\34\0\44\uffff";
    static final String dfa_262s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_263s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_264s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_260 = DFA.unpackEncodedStringToUnsignedChars(dfa_260s);
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[][] dfa_264 = unpackEncodedStringArray(dfa_264s);

    class DFA378 extends DFA {

        public DFA378(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 378;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "10136:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA378_1 = input.LA(1);

                         
                        int index378_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA378_2 = input.LA(1);

                         
                        int index378_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA378_3 = input.LA(1);

                         
                        int index378_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA378_4 = input.LA(1);

                         
                        int index378_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA378_5 = input.LA(1);

                         
                        int index378_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA378_6 = input.LA(1);

                         
                        int index378_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA378_7 = input.LA(1);

                         
                        int index378_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA378_8 = input.LA(1);

                         
                        int index378_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA378_9 = input.LA(1);

                         
                        int index378_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA378_10 = input.LA(1);

                         
                        int index378_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA378_11 = input.LA(1);

                         
                        int index378_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA378_12 = input.LA(1);

                         
                        int index378_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA378_13 = input.LA(1);

                         
                        int index378_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA378_14 = input.LA(1);

                         
                        int index378_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA378_15 = input.LA(1);

                         
                        int index378_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA378_16 = input.LA(1);

                         
                        int index378_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA378_17 = input.LA(1);

                         
                        int index378_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA378_18 = input.LA(1);

                         
                        int index378_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA378_19 = input.LA(1);

                         
                        int index378_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA378_20 = input.LA(1);

                         
                        int index378_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA378_21 = input.LA(1);

                         
                        int index378_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA378_22 = input.LA(1);

                         
                        int index378_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA378_23 = input.LA(1);

                         
                        int index378_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA378_24 = input.LA(1);

                         
                        int index378_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA378_25 = input.LA(1);

                         
                        int index378_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA378_26 = input.LA(1);

                         
                        int index378_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA378_27 = input.LA(1);

                         
                        int index378_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA378_28 = input.LA(1);

                         
                        int index378_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 378, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_265s = "\1\150\13\0\2\uffff";
    static final String dfa_266s = "\1\uffff\1\6\1\1\1\7\1\2\1\10\1\3\1\11\1\0\1\4\1\12\1\5\2\uffff}>";
    static final String[] dfa_267s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_265 = DFA.unpackEncodedStringToUnsignedChars(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final short[][] dfa_267 = unpackEncodedStringArray(dfa_267s);

    class DFA377 extends DFA {

        public DFA377(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 377;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_265;
            this.accept = dfa_254;
            this.special = dfa_266;
            this.transition = dfa_267;
        }
        public String getDescription() {
            return "10200:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA377_8 = input.LA(1);

                         
                        int index377_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA377_2 = input.LA(1);

                         
                        int index377_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA377_4 = input.LA(1);

                         
                        int index377_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA377_6 = input.LA(1);

                         
                        int index377_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA377_9 = input.LA(1);

                         
                        int index377_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA377_11 = input.LA(1);

                         
                        int index377_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA377_1 = input.LA(1);

                         
                        int index377_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA377_3 = input.LA(1);

                         
                        int index377_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA377_5 = input.LA(1);

                         
                        int index377_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA377_7 = input.LA(1);

                         
                        int index377_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA377_10 = input.LA(1);

                         
                        int index377_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 377, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA380 extends DFA {

        public DFA380(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 380;
            this.eot = dfa_27;
            this.eof = dfa_27;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "10224:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA380_1 = input.LA(1);

                         
                        int index380_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSXParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA380_2 = input.LA(1);

                         
                        int index380_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSXParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA380_3 = input.LA(1);

                         
                        int index380_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA380_4 = input.LA(1);

                         
                        int index380_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA380_5 = input.LA(1);

                         
                        int index380_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA380_6 = input.LA(1);

                         
                        int index380_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA380_7 = input.LA(1);

                         
                        int index380_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA380_8 = input.LA(1);

                         
                        int index380_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA380_9 = input.LA(1);

                         
                        int index380_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA380_10 = input.LA(1);

                         
                        int index380_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA380_11 = input.LA(1);

                         
                        int index380_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA380_12 = input.LA(1);

                         
                        int index380_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA380_13 = input.LA(1);

                         
                        int index380_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA380_14 = input.LA(1);

                         
                        int index380_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA380_15 = input.LA(1);

                         
                        int index380_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA380_16 = input.LA(1);

                         
                        int index380_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA380_17 = input.LA(1);

                         
                        int index380_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA380_18 = input.LA(1);

                         
                        int index380_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA380_19 = input.LA(1);

                         
                        int index380_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA380_20 = input.LA(1);

                         
                        int index380_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA380_21 = input.LA(1);

                         
                        int index380_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA380_22 = input.LA(1);

                         
                        int index380_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA380_23 = input.LA(1);

                         
                        int index380_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA380_24 = input.LA(1);

                         
                        int index380_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA380_25 = input.LA(1);

                         
                        int index380_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA380_26 = input.LA(1);

                         
                        int index380_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA380_27 = input.LA(1);

                         
                        int index380_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA380_28 = input.LA(1);

                         
                        int index380_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index380_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 380, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA379 extends DFA {

        public DFA379(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 379;
            this.eot = dfa_189;
            this.eof = dfa_251;
            this.min = dfa_252;
            this.max = dfa_257;
            this.accept = dfa_254;
            this.special = dfa_266;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "10288:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA379_8 = input.LA(1);

                         
                        int index379_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA379_2 = input.LA(1);

                         
                        int index379_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA379_4 = input.LA(1);

                         
                        int index379_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA379_6 = input.LA(1);

                         
                        int index379_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA379_9 = input.LA(1);

                         
                        int index379_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA379_11 = input.LA(1);

                         
                        int index379_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA379_1 = input.LA(1);

                         
                        int index379_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA379_3 = input.LA(1);

                         
                        int index379_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA379_5 = input.LA(1);

                         
                        int index379_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA379_7 = input.LA(1);

                         
                        int index379_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA379_10 = input.LA(1);

                         
                        int index379_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSXParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index379_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 379, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_268s = "\1\76\113\uffff";
    static final String dfa_269s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_270s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_271s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_272s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_273s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_268 = DFA.unpackEncodedString(dfa_268s);
    static final char[] dfa_269 = DFA.unpackEncodedStringToUnsignedChars(dfa_269s);
    static final char[] dfa_270 = DFA.unpackEncodedStringToUnsignedChars(dfa_270s);
    static final short[] dfa_271 = DFA.unpackEncodedString(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[][] dfa_273 = unpackEncodedStringArray(dfa_273s);

    class DFA382 extends DFA {

        public DFA382(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 382;
            this.eot = dfa_183;
            this.eof = dfa_268;
            this.min = dfa_269;
            this.max = dfa_270;
            this.accept = dfa_271;
            this.special = dfa_272;
            this.transition = dfa_273;
        }
        public String getDescription() {
            return "10331:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA382_0 = input.LA(1);

                         
                        int index382_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA382_0>=5 && LA382_0<=126 && (s=T2S.M_33[LA382_0-(5)])>=0) && (synpred240_InternalN4JSXParser())) { /* 15 cases */ }
                        else if ( (LA382_0==Of) ) {s = 16;}

                        
                        else if ((LA382_0>=4 && LA382_0<=149 && (s=T2S.M_34[LA382_0-(4)])>=0) && (synpred240_InternalN4JSXParser())) { /* 30 cases */ }
                        else if ( (LA382_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA382_0>=15 && LA382_0<=140 && (s=T2S.M_35[LA382_0-(15)])>=0) && (synpred240_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA382_0==EOF||LA382_0==LessThanSignLessThanSignEqualsSign||LA382_0==PercentSignEqualsSign||(LA382_0>=AmpersandEqualsSign && LA382_0<=AsteriskEqualsSign)||LA382_0==PlusSignEqualsSign||LA382_0==HyphenMinusEqualsSign||LA382_0==CircumflexAccentEqualsSign||LA382_0==In||LA382_0==VerticalLineEqualsSign||LA382_0==Comma||LA382_0==Semicolon||(LA382_0>=EqualsSign && LA382_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index382_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA382_16 = input.LA(1);

                         
                        int index382_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index382_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA382_46 = input.LA(1);

                         
                        int index382_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index382_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 382, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_274s = "\121\uffff";
    static final String dfa_275s = "\1\76\120\uffff";
    static final String dfa_276s = "\1\4\55\uffff\1\0\42\uffff";
    static final String dfa_277s = "\1\u0099\55\uffff\1\0\42\uffff";
    static final String dfa_278s = "\1\uffff\55\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_279s = "\1\0\55\uffff\1\1\42\uffff}>";
    static final String[] dfa_280s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final short[] dfa_275 = DFA.unpackEncodedString(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final char[] dfa_277 = DFA.unpackEncodedStringToUnsignedChars(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[] dfa_279 = DFA.unpackEncodedString(dfa_279s);
    static final short[][] dfa_280 = unpackEncodedStringArray(dfa_280s);

    class DFA384 extends DFA {

        public DFA384(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 384;
            this.eot = dfa_274;
            this.eof = dfa_275;
            this.min = dfa_276;
            this.max = dfa_277;
            this.accept = dfa_278;
            this.special = dfa_279;
            this.transition = dfa_280;
        }
        public String getDescription() {
            return "10410:3: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA384_0 = input.LA(1);

                         
                        int index384_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA384_0>=4 && LA384_0<=149 && (s=T2S.M_36[LA384_0-(4)])>=0) && (synpred242_InternalN4JSXParser())) { /* 45 cases */ }
                        else if ( (LA384_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA384_0>=15 && LA384_0<=140 && (s=T2S.M_35[LA384_0-(15)])>=0) && (synpred242_InternalN4JSXParser())) { /* 16 cases */ }
                        else if ( (LA384_0==EOF||LA384_0==LessThanSignLessThanSignEqualsSign||LA384_0==PercentSignEqualsSign||(LA384_0>=AmpersandEqualsSign && LA384_0<=AsteriskEqualsSign)||LA384_0==PlusSignEqualsSign||LA384_0==HyphenMinusEqualsSign||LA384_0==CircumflexAccentEqualsSign||LA384_0==VerticalLineEqualsSign||LA384_0==RightParenthesis||LA384_0==Comma||(LA384_0>=Colon && LA384_0<=Semicolon)||(LA384_0>=EqualsSign && LA384_0<=GreaterThanSign)||LA384_0==RightSquareBracket||LA384_0==RightCurlyBracket||LA384_0==RULE_ML_COMMENT||LA384_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index384_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA384_46 = input.LA(1);

                         
                        int index384_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index384_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 384, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_281s = "\136\uffff";
    static final String dfa_282s = "\1\2\135\uffff";
    static final String dfa_283s = "\1\4\1\0\134\uffff";
    static final String dfa_284s = "\1\u0095\1\0\134\uffff";
    static final String dfa_285s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_286s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_287s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final short[] dfa_282 = DFA.unpackEncodedString(dfa_282s);
    static final char[] dfa_283 = DFA.unpackEncodedStringToUnsignedChars(dfa_283s);
    static final char[] dfa_284 = DFA.unpackEncodedStringToUnsignedChars(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[] dfa_286 = DFA.unpackEncodedString(dfa_286s);
    static final short[][] dfa_287 = unpackEncodedStringArray(dfa_287s);

    class DFA415 extends DFA {

        public DFA415(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 415;
            this.eot = dfa_281;
            this.eof = dfa_282;
            this.min = dfa_283;
            this.max = dfa_284;
            this.accept = dfa_285;
            this.special = dfa_286;
            this.transition = dfa_287;
        }
        public String getDescription() {
            return "11542:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA415_1 = input.LA(1);

                         
                        int index415_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSXParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index415_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 415, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_288s = "\1\4\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_289s = "\1\u0095\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_290s = "\1\uffff\1\1\30\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_291s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\4\uffff}>";
    static final String[] dfa_292s = {
            "\1\26\1\23\1\103\1\57\1\15\1\104\1\4\1\7\1\41\1\42\1\6\1\53\1\43\1\50\1\51\1\2\1\3\1\44\1\47\1\55\1\5\1\61\1\10\1\63\1\16\1\66\1\34\1\14\1\35\1\37\1\40\1\11\1\75\1\62\1\64\1\25\1\70\1\72\1\13\1\36\1\46\1\76\1\101\1\73\1\21\1\74\1\22\1\12\1\71\4\uffff\1\52\1\30\1\77\1\60\1\105\1\31\1\65\1\67\21\uffff\1\100\1\45\1\54\1\56\1\102\5\uffff\1\111\1\uffff\1\33\7\uffff\1\32\2\uffff\1\27\1\1\1\110\2\uffff\1\24\2\uffff\1\20\3\uffff\1\107\1\uffff\1\107\1\uffff\1\107\2\uffff\1\107\1\uffff\1\17\2\uffff\1\106\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_288 = DFA.unpackEncodedStringToUnsignedChars(dfa_288s);
    static final char[] dfa_289 = DFA.unpackEncodedStringToUnsignedChars(dfa_289s);
    static final short[] dfa_290 = DFA.unpackEncodedString(dfa_290s);
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final short[][] dfa_292 = unpackEncodedStringArray(dfa_292s);

    class DFA457 extends DFA {

        public DFA457(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 457;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_288;
            this.max = dfa_289;
            this.accept = dfa_290;
            this.special = dfa_291;
            this.transition = dfa_292;
        }
        public String getDescription() {
            return "12170:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA457_0 = input.LA(1);

                         
                        int index457_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA457_0>=4 && LA457_0<=126 && (s=T2S.M_38[LA457_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA457_0==LessThanSign) && (synpred261_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA457_0==Asterisk) && (synpred261_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA457_0>=6 && LA457_0<=129 && (s=T2S.M_39[LA457_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA457_0==RULE_DOUBLE||LA457_0==RULE_HEX_INT||LA457_0==RULE_OCTAL_INT||LA457_0==RULE_SCIENTIFIC_INT||LA457_0==RULE_INT) ) {s = 71;}

                        else if ( (LA457_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA457_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index457_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA457_2 = input.LA(1);

                         
                        int index457_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA457_3 = input.LA(1);

                         
                        int index457_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA457_4 = input.LA(1);

                         
                        int index457_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA457_5 = input.LA(1);

                         
                        int index457_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA457_6 = input.LA(1);

                         
                        int index457_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA457_7 = input.LA(1);

                         
                        int index457_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA457_8 = input.LA(1);

                         
                        int index457_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA457_9 = input.LA(1);

                         
                        int index457_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA457_10 = input.LA(1);

                         
                        int index457_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA457_11 = input.LA(1);

                         
                        int index457_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA457_12 = input.LA(1);

                         
                        int index457_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA457_13 = input.LA(1);

                         
                        int index457_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA457_14 = input.LA(1);

                         
                        int index457_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA457_15 = input.LA(1);

                         
                        int index457_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA457_16 = input.LA(1);

                         
                        int index457_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA457_17 = input.LA(1);

                         
                        int index457_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA457_18 = input.LA(1);

                         
                        int index457_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA457_19 = input.LA(1);

                         
                        int index457_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA457_20 = input.LA(1);

                         
                        int index457_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA457_21 = input.LA(1);

                         
                        int index457_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA457_22 = input.LA(1);

                         
                        int index457_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA457_23 = input.LA(1);

                         
                        int index457_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA457_24 = input.LA(1);

                         
                        int index457_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA457_25 = input.LA(1);

                         
                        int index457_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA457_28 = input.LA(1);

                         
                        int index457_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA457_29 = input.LA(1);

                         
                        int index457_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA457_30 = input.LA(1);

                         
                        int index457_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA457_31 = input.LA(1);

                         
                        int index457_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA457_32 = input.LA(1);

                         
                        int index457_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA457_33 = input.LA(1);

                         
                        int index457_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA457_34 = input.LA(1);

                         
                        int index457_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA457_35 = input.LA(1);

                         
                        int index457_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA457_36 = input.LA(1);

                         
                        int index457_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA457_37 = input.LA(1);

                         
                        int index457_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA457_38 = input.LA(1);

                         
                        int index457_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA457_39 = input.LA(1);

                         
                        int index457_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA457_40 = input.LA(1);

                         
                        int index457_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA457_41 = input.LA(1);

                         
                        int index457_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA457_42 = input.LA(1);

                         
                        int index457_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA457_43 = input.LA(1);

                         
                        int index457_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA457_44 = input.LA(1);

                         
                        int index457_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA457_45 = input.LA(1);

                         
                        int index457_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA457_46 = input.LA(1);

                         
                        int index457_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA457_47 = input.LA(1);

                         
                        int index457_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA457_48 = input.LA(1);

                         
                        int index457_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA457_49 = input.LA(1);

                         
                        int index457_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA457_50 = input.LA(1);

                         
                        int index457_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA457_51 = input.LA(1);

                         
                        int index457_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA457_52 = input.LA(1);

                         
                        int index457_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA457_53 = input.LA(1);

                         
                        int index457_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA457_54 = input.LA(1);

                         
                        int index457_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA457_55 = input.LA(1);

                         
                        int index457_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA457_56 = input.LA(1);

                         
                        int index457_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA457_57 = input.LA(1);

                         
                        int index457_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA457_58 = input.LA(1);

                         
                        int index457_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA457_59 = input.LA(1);

                         
                        int index457_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA457_60 = input.LA(1);

                         
                        int index457_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA457_61 = input.LA(1);

                         
                        int index457_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA457_62 = input.LA(1);

                         
                        int index457_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA457_63 = input.LA(1);

                         
                        int index457_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA457_64 = input.LA(1);

                         
                        int index457_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA457_65 = input.LA(1);

                         
                        int index457_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA457_66 = input.LA(1);

                         
                        int index457_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA457_67 = input.LA(1);

                         
                        int index457_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA457_68 = input.LA(1);

                         
                        int index457_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA457_69 = input.LA(1);

                         
                        int index457_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA457_70 = input.LA(1);

                         
                        int index457_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA457_71 = input.LA(1);

                         
                        int index457_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA457_72 = input.LA(1);

                         
                        int index457_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index457_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 457, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA458 extends DFA {

        public DFA458(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 458;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_288;
            this.max = dfa_289;
            this.accept = dfa_290;
            this.special = dfa_291;
            this.transition = dfa_292;
        }
        public String getDescription() {
            return "12355:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA458_0 = input.LA(1);

                         
                        int index458_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA458_0>=4 && LA458_0<=126 && (s=T2S.M_38[LA458_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA458_0==LessThanSign) && (synpred264_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA458_0==Asterisk) && (synpred264_InternalN4JSXParser())) {s = 27;}

                        
                        else if ((LA458_0>=6 && LA458_0<=129 && (s=T2S.M_39[LA458_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA458_0==RULE_DOUBLE||LA458_0==RULE_HEX_INT||LA458_0==RULE_OCTAL_INT||LA458_0==RULE_SCIENTIFIC_INT||LA458_0==RULE_INT) ) {s = 71;}

                        else if ( (LA458_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA458_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index458_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA458_2 = input.LA(1);

                         
                        int index458_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA458_3 = input.LA(1);

                         
                        int index458_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA458_4 = input.LA(1);

                         
                        int index458_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA458_5 = input.LA(1);

                         
                        int index458_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA458_6 = input.LA(1);

                         
                        int index458_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA458_7 = input.LA(1);

                         
                        int index458_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA458_8 = input.LA(1);

                         
                        int index458_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA458_9 = input.LA(1);

                         
                        int index458_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA458_10 = input.LA(1);

                         
                        int index458_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA458_11 = input.LA(1);

                         
                        int index458_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA458_12 = input.LA(1);

                         
                        int index458_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA458_13 = input.LA(1);

                         
                        int index458_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA458_14 = input.LA(1);

                         
                        int index458_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA458_15 = input.LA(1);

                         
                        int index458_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA458_16 = input.LA(1);

                         
                        int index458_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA458_17 = input.LA(1);

                         
                        int index458_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA458_18 = input.LA(1);

                         
                        int index458_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA458_19 = input.LA(1);

                         
                        int index458_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA458_20 = input.LA(1);

                         
                        int index458_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA458_21 = input.LA(1);

                         
                        int index458_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA458_22 = input.LA(1);

                         
                        int index458_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA458_23 = input.LA(1);

                         
                        int index458_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA458_24 = input.LA(1);

                         
                        int index458_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSXParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA458_25 = input.LA(1);

                         
                        int index458_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSXParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA458_28 = input.LA(1);

                         
                        int index458_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA458_29 = input.LA(1);

                         
                        int index458_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA458_30 = input.LA(1);

                         
                        int index458_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA458_31 = input.LA(1);

                         
                        int index458_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA458_32 = input.LA(1);

                         
                        int index458_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA458_33 = input.LA(1);

                         
                        int index458_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA458_34 = input.LA(1);

                         
                        int index458_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA458_35 = input.LA(1);

                         
                        int index458_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA458_36 = input.LA(1);

                         
                        int index458_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA458_37 = input.LA(1);

                         
                        int index458_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA458_38 = input.LA(1);

                         
                        int index458_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA458_39 = input.LA(1);

                         
                        int index458_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA458_40 = input.LA(1);

                         
                        int index458_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA458_41 = input.LA(1);

                         
                        int index458_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA458_42 = input.LA(1);

                         
                        int index458_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA458_43 = input.LA(1);

                         
                        int index458_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA458_44 = input.LA(1);

                         
                        int index458_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA458_45 = input.LA(1);

                         
                        int index458_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA458_46 = input.LA(1);

                         
                        int index458_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA458_47 = input.LA(1);

                         
                        int index458_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA458_48 = input.LA(1);

                         
                        int index458_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA458_49 = input.LA(1);

                         
                        int index458_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA458_50 = input.LA(1);

                         
                        int index458_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA458_51 = input.LA(1);

                         
                        int index458_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA458_52 = input.LA(1);

                         
                        int index458_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA458_53 = input.LA(1);

                         
                        int index458_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA458_54 = input.LA(1);

                         
                        int index458_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA458_55 = input.LA(1);

                         
                        int index458_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA458_56 = input.LA(1);

                         
                        int index458_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA458_57 = input.LA(1);

                         
                        int index458_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA458_58 = input.LA(1);

                         
                        int index458_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA458_59 = input.LA(1);

                         
                        int index458_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA458_60 = input.LA(1);

                         
                        int index458_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA458_61 = input.LA(1);

                         
                        int index458_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA458_62 = input.LA(1);

                         
                        int index458_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA458_63 = input.LA(1);

                         
                        int index458_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA458_64 = input.LA(1);

                         
                        int index458_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA458_65 = input.LA(1);

                         
                        int index458_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA458_66 = input.LA(1);

                         
                        int index458_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA458_67 = input.LA(1);

                         
                        int index458_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA458_68 = input.LA(1);

                         
                        int index458_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA458_69 = input.LA(1);

                         
                        int index458_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA458_70 = input.LA(1);

                         
                        int index458_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA458_71 = input.LA(1);

                         
                        int index458_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA458_72 = input.LA(1);

                         
                        int index458_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSXParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index458_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 458, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_293s = "\113\uffff";
    static final String dfa_294s = "\1\4\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_295s = "\1\u0095\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_296s = "\31\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_297s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\3\uffff}>";
    static final String[] dfa_298s = {
            "\1\25\1\22\1\102\1\56\1\14\1\103\1\3\1\6\1\40\1\41\1\5\1\52\1\42\1\47\1\50\1\1\1\2\1\43\1\46\1\54\1\4\1\60\1\7\1\62\1\15\1\65\1\33\1\13\1\34\1\36\1\37\1\10\1\74\1\61\1\63\1\24\1\67\1\71\1\12\1\35\1\45\1\75\1\100\1\72\1\20\1\73\1\21\1\11\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\7\uffff\1\32\7\uffff\1\31\2\uffff\1\26\1\uffff\1\107\2\uffff\1\23\2\uffff\1\17\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\16\2\uffff\1\105\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final char[] dfa_295 = DFA.unpackEncodedStringToUnsignedChars(dfa_295s);
    static final short[] dfa_296 = DFA.unpackEncodedString(dfa_296s);
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[][] dfa_298 = unpackEncodedStringArray(dfa_298s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_293;
            this.eof = dfa_293;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "12547:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA470_0 = input.LA(1);

                         
                        int index470_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA470_0>=4 && LA470_0<=126 && (s=T2S.M_42[LA470_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA470_0==LessThanSign) && (synpred270_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA470_0==Asterisk) && (synpred270_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA470_0>=6 && LA470_0<=129 && (s=T2S.M_43[LA470_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA470_0==RULE_DOUBLE||LA470_0==RULE_HEX_INT||LA470_0==RULE_OCTAL_INT||LA470_0==RULE_SCIENTIFIC_INT||LA470_0==RULE_INT) ) {s = 70;}

                        else if ( (LA470_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index470_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA470_1 = input.LA(1);

                         
                        int index470_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA470_2 = input.LA(1);

                         
                        int index470_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA470_3 = input.LA(1);

                         
                        int index470_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA470_4 = input.LA(1);

                         
                        int index470_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA470_5 = input.LA(1);

                         
                        int index470_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA470_6 = input.LA(1);

                         
                        int index470_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA470_7 = input.LA(1);

                         
                        int index470_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA470_8 = input.LA(1);

                         
                        int index470_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA470_9 = input.LA(1);

                         
                        int index470_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA470_10 = input.LA(1);

                         
                        int index470_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA470_11 = input.LA(1);

                         
                        int index470_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA470_12 = input.LA(1);

                         
                        int index470_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA470_13 = input.LA(1);

                         
                        int index470_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA470_14 = input.LA(1);

                         
                        int index470_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA470_15 = input.LA(1);

                         
                        int index470_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA470_16 = input.LA(1);

                         
                        int index470_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA470_17 = input.LA(1);

                         
                        int index470_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA470_18 = input.LA(1);

                         
                        int index470_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA470_19 = input.LA(1);

                         
                        int index470_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA470_20 = input.LA(1);

                         
                        int index470_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA470_21 = input.LA(1);

                         
                        int index470_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA470_22 = input.LA(1);

                         
                        int index470_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA470_23 = input.LA(1);

                         
                        int index470_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA470_24 = input.LA(1);

                         
                        int index470_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA470_27 = input.LA(1);

                         
                        int index470_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA470_28 = input.LA(1);

                         
                        int index470_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA470_29 = input.LA(1);

                         
                        int index470_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA470_30 = input.LA(1);

                         
                        int index470_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA470_31 = input.LA(1);

                         
                        int index470_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA470_32 = input.LA(1);

                         
                        int index470_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA470_33 = input.LA(1);

                         
                        int index470_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA470_34 = input.LA(1);

                         
                        int index470_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA470_35 = input.LA(1);

                         
                        int index470_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA470_36 = input.LA(1);

                         
                        int index470_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA470_37 = input.LA(1);

                         
                        int index470_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA470_38 = input.LA(1);

                         
                        int index470_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA470_39 = input.LA(1);

                         
                        int index470_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA470_40 = input.LA(1);

                         
                        int index470_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA470_41 = input.LA(1);

                         
                        int index470_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA470_42 = input.LA(1);

                         
                        int index470_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA470_43 = input.LA(1);

                         
                        int index470_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA470_44 = input.LA(1);

                         
                        int index470_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA470_45 = input.LA(1);

                         
                        int index470_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA470_46 = input.LA(1);

                         
                        int index470_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA470_47 = input.LA(1);

                         
                        int index470_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA470_48 = input.LA(1);

                         
                        int index470_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA470_49 = input.LA(1);

                         
                        int index470_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA470_50 = input.LA(1);

                         
                        int index470_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA470_51 = input.LA(1);

                         
                        int index470_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA470_52 = input.LA(1);

                         
                        int index470_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA470_53 = input.LA(1);

                         
                        int index470_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA470_54 = input.LA(1);

                         
                        int index470_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA470_55 = input.LA(1);

                         
                        int index470_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA470_56 = input.LA(1);

                         
                        int index470_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA470_57 = input.LA(1);

                         
                        int index470_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA470_58 = input.LA(1);

                         
                        int index470_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA470_59 = input.LA(1);

                         
                        int index470_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA470_60 = input.LA(1);

                         
                        int index470_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA470_61 = input.LA(1);

                         
                        int index470_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA470_62 = input.LA(1);

                         
                        int index470_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA470_63 = input.LA(1);

                         
                        int index470_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA470_64 = input.LA(1);

                         
                        int index470_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA470_65 = input.LA(1);

                         
                        int index470_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA470_66 = input.LA(1);

                         
                        int index470_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA470_67 = input.LA(1);

                         
                        int index470_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA470_68 = input.LA(1);

                         
                        int index470_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA470_69 = input.LA(1);

                         
                        int index470_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA470_70 = input.LA(1);

                         
                        int index470_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA470_71 = input.LA(1);

                         
                        int index470_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index470_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 470, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_299s = "\1\2\115\uffff";
    static final String[] dfa_300s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);

    class DFA460 extends DFA {

        public DFA460(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 460;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "12556:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA460_1 = input.LA(1);

                         
                        int index460_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index460_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 460, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA463 extends DFA {

        public DFA463(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 463;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "12778:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA463_1 = input.LA(1);

                         
                        int index463_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index463_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 463, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_302s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_303s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_304s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final short[] dfa_303 = DFA.unpackEncodedString(dfa_303s);
    static final short[][] dfa_304 = unpackEncodedStringArray(dfa_304s);

    class DFA465 extends DFA {

        public DFA465(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 465;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 12806:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA467 extends DFA {

        public DFA467(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 467;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12811:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA482 extends DFA {

        public DFA482(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 482;
            this.eot = dfa_293;
            this.eof = dfa_293;
            this.min = dfa_294;
            this.max = dfa_295;
            this.accept = dfa_296;
            this.special = dfa_297;
            this.transition = dfa_298;
        }
        public String getDescription() {
            return "12848:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA482_0 = input.LA(1);

                         
                        int index482_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA482_0>=4 && LA482_0<=126 && (s=T2S.M_42[LA482_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA482_0==LessThanSign) && (synpred278_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA482_0==Asterisk) && (synpred278_InternalN4JSXParser())) {s = 26;}

                        
                        else if ((LA482_0>=6 && LA482_0<=129 && (s=T2S.M_43[LA482_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA482_0==RULE_DOUBLE||LA482_0==RULE_HEX_INT||LA482_0==RULE_OCTAL_INT||LA482_0==RULE_SCIENTIFIC_INT||LA482_0==RULE_INT) ) {s = 70;}

                        else if ( (LA482_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index482_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA482_1 = input.LA(1);

                         
                        int index482_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA482_2 = input.LA(1);

                         
                        int index482_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA482_3 = input.LA(1);

                         
                        int index482_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA482_4 = input.LA(1);

                         
                        int index482_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA482_5 = input.LA(1);

                         
                        int index482_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA482_6 = input.LA(1);

                         
                        int index482_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA482_7 = input.LA(1);

                         
                        int index482_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA482_8 = input.LA(1);

                         
                        int index482_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA482_9 = input.LA(1);

                         
                        int index482_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA482_10 = input.LA(1);

                         
                        int index482_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA482_11 = input.LA(1);

                         
                        int index482_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA482_12 = input.LA(1);

                         
                        int index482_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA482_13 = input.LA(1);

                         
                        int index482_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA482_14 = input.LA(1);

                         
                        int index482_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA482_15 = input.LA(1);

                         
                        int index482_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA482_16 = input.LA(1);

                         
                        int index482_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA482_17 = input.LA(1);

                         
                        int index482_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA482_18 = input.LA(1);

                         
                        int index482_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA482_19 = input.LA(1);

                         
                        int index482_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA482_20 = input.LA(1);

                         
                        int index482_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA482_21 = input.LA(1);

                         
                        int index482_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA482_22 = input.LA(1);

                         
                        int index482_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA482_23 = input.LA(1);

                         
                        int index482_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSXParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA482_24 = input.LA(1);

                         
                        int index482_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSXParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA482_27 = input.LA(1);

                         
                        int index482_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA482_28 = input.LA(1);

                         
                        int index482_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA482_29 = input.LA(1);

                         
                        int index482_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA482_30 = input.LA(1);

                         
                        int index482_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA482_31 = input.LA(1);

                         
                        int index482_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA482_32 = input.LA(1);

                         
                        int index482_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA482_33 = input.LA(1);

                         
                        int index482_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA482_34 = input.LA(1);

                         
                        int index482_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA482_35 = input.LA(1);

                         
                        int index482_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA482_36 = input.LA(1);

                         
                        int index482_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA482_37 = input.LA(1);

                         
                        int index482_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA482_38 = input.LA(1);

                         
                        int index482_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA482_39 = input.LA(1);

                         
                        int index482_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA482_40 = input.LA(1);

                         
                        int index482_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA482_41 = input.LA(1);

                         
                        int index482_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA482_42 = input.LA(1);

                         
                        int index482_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA482_43 = input.LA(1);

                         
                        int index482_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA482_44 = input.LA(1);

                         
                        int index482_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA482_45 = input.LA(1);

                         
                        int index482_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA482_46 = input.LA(1);

                         
                        int index482_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA482_47 = input.LA(1);

                         
                        int index482_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA482_48 = input.LA(1);

                         
                        int index482_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA482_49 = input.LA(1);

                         
                        int index482_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA482_50 = input.LA(1);

                         
                        int index482_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA482_51 = input.LA(1);

                         
                        int index482_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA482_52 = input.LA(1);

                         
                        int index482_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA482_53 = input.LA(1);

                         
                        int index482_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA482_54 = input.LA(1);

                         
                        int index482_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA482_55 = input.LA(1);

                         
                        int index482_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA482_56 = input.LA(1);

                         
                        int index482_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA482_57 = input.LA(1);

                         
                        int index482_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA482_58 = input.LA(1);

                         
                        int index482_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA482_59 = input.LA(1);

                         
                        int index482_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA482_60 = input.LA(1);

                         
                        int index482_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA482_61 = input.LA(1);

                         
                        int index482_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA482_62 = input.LA(1);

                         
                        int index482_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA482_63 = input.LA(1);

                         
                        int index482_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA482_64 = input.LA(1);

                         
                        int index482_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA482_65 = input.LA(1);

                         
                        int index482_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA482_66 = input.LA(1);

                         
                        int index482_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA482_67 = input.LA(1);

                         
                        int index482_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA482_68 = input.LA(1);

                         
                        int index482_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA482_69 = input.LA(1);

                         
                        int index482_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA482_70 = input.LA(1);

                         
                        int index482_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA482_71 = input.LA(1);

                         
                        int index482_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSXParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index482_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 482, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_305s = "\1\4\1\0\113\uffff";
    static final String dfa_306s = "\1\u0095\1\0\113\uffff";
    static final String dfa_307s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_308s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_309s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_305 = DFA.unpackEncodedStringToUnsignedChars(dfa_305s);
    static final char[] dfa_306 = DFA.unpackEncodedStringToUnsignedChars(dfa_306s);
    static final short[] dfa_307 = DFA.unpackEncodedString(dfa_307s);
    static final short[] dfa_308 = DFA.unpackEncodedString(dfa_308s);
    static final short[][] dfa_309 = unpackEncodedStringArray(dfa_309s);

    class DFA472 extends DFA {

        public DFA472(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 472;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_305;
            this.max = dfa_306;
            this.accept = dfa_307;
            this.special = dfa_308;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "12857:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA472_1 = input.LA(1);

                         
                        int index472_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index472_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 472, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA475 extends DFA {

        public DFA475(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 475;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_305;
            this.max = dfa_306;
            this.accept = dfa_307;
            this.special = dfa_308;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "13079:186: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA475_1 = input.LA(1);

                         
                        int index475_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index475_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 475, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA477 extends DFA {

        public DFA477(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 477;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 13107:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA479 extends DFA {

        public DFA479(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 479;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13112:3: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_310s = "\2\uffff\10\1\1\uffff";
    static final String dfa_311s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_312s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\22\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_310 = DFA.unpackEncodedString(dfa_310s);
    static final char[] dfa_311 = DFA.unpackEncodedStringToUnsignedChars(dfa_311s);
    static final short[][] dfa_312 = unpackEncodedStringArray(dfa_312s);

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_21;
            this.eof = dfa_310;
            this.min = dfa_301;
            this.max = dfa_311;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "()* loopback of 13148:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_313s = "\1\uffff\6\15\1\uffff\5\15\1\uffff";
    static final String dfa_314s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff";
    static final String[] dfa_315s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            ""
    };
    static final short[] dfa_313 = DFA.unpackEncodedString(dfa_313s);
    static final char[] dfa_314 = DFA.unpackEncodedStringToUnsignedChars(dfa_314s);
    static final short[][] dfa_315 = unpackEncodedStringArray(dfa_315s);

    class DFA484 extends DFA {

        public DFA484(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 484;
            this.eot = dfa_189;
            this.eof = dfa_313;
            this.min = dfa_190;
            this.max = dfa_314;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "13152:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA487 extends DFA {

        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_21;
            this.eof = dfa_310;
            this.min = dfa_301;
            this.max = dfa_311;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_312;
        }
        public String getDescription() {
            return "()* loopback of 13176:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_189;
            this.eof = dfa_313;
            this.min = dfa_190;
            this.max = dfa_314;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_315;
        }
        public String getDescription() {
            return "13180:3: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA491 extends DFA {

        public DFA491(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 491;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 13263:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA493 extends DFA {

        public DFA493(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 493;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13268:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 13323:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA498 extends DFA {

        public DFA498(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 498;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13328:3: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA506 extends DFA {

        public DFA506(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 506;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "13438:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA506_1 = input.LA(1);

                         
                        int index506_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index506_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 506, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA508 extends DFA {

        public DFA508(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 508;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "13461:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA508_1 = input.LA(1);

                         
                        int index508_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index508_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 508, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA510 extends DFA {

        public DFA510(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 510;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "13493:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA510_1 = input.LA(1);

                         
                        int index510_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index510_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 510, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA513 extends DFA {

        public DFA513(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 513;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_305;
            this.max = dfa_306;
            this.accept = dfa_307;
            this.special = dfa_308;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "13520:3: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA513_1 = input.LA(1);

                         
                        int index513_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index513_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 513, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA520 extends DFA {

        public DFA520(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 520;
            this.eot = dfa_110;
            this.eof = dfa_299;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "13927:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA520_1 = input.LA(1);

                         
                        int index520_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSXParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index520_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 520, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA523 extends DFA {

        public DFA523(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 523;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_305;
            this.max = dfa_306;
            this.accept = dfa_307;
            this.special = dfa_308;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "14160:165: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA523_1 = input.LA(1);

                         
                        int index523_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSXParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index523_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 523, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_316s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_317s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_316 = DFA.unpackEncodedStringToUnsignedChars(dfa_316s);
    static final short[][] dfa_317 = unpackEncodedStringArray(dfa_317s);

    class DFA533 extends DFA {

        public DFA533(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 533;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_316;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_317;
        }
        public String getDescription() {
            return "()* loopback of 14281:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_318s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_318 = unpackEncodedStringArray(dfa_318s);

    class DFA539 extends DFA {

        public DFA539(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 539;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_316;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_318;
        }
        public String getDescription() {
            return "()* loopback of 14317:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_319s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_320s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_321s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_322s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_323s = "\1\22\1\12\40\uffff\1\0\4\uffff\1\16\1\23\1\26\1\31\1\1\1\4\1\7\1\13\1\17\1\24\1\27\1\32\1\2\1\5\1\10\1\14\1\20\1\25\1\30\1\33\1\3\1\6\1\11\1\15\1\21\5\uffff}>";
    static final String[] dfa_324s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final char[] dfa_320 = DFA.unpackEncodedStringToUnsignedChars(dfa_320s);
    static final char[] dfa_321 = DFA.unpackEncodedStringToUnsignedChars(dfa_321s);
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final short[] dfa_323 = DFA.unpackEncodedString(dfa_323s);
    static final short[][] dfa_324 = unpackEncodedStringArray(dfa_324s);

    class DFA543 extends DFA {

        public DFA543(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 543;
            this.eot = dfa_232;
            this.eof = dfa_319;
            this.min = dfa_320;
            this.max = dfa_321;
            this.accept = dfa_322;
            this.special = dfa_323;
            this.transition = dfa_324;
        }
        public String getDescription() {
            return "14350:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA543_34 = input.LA(1);

                         
                        int index543_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_34==EOF||LA543_34==Comma||LA543_34==EqualsSign||LA543_34==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA543_34==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index543_34);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA543_43 = input.LA(1);

                         
                        int index543_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_43==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_43==EOF||LA543_43==Comma||LA543_43==EqualsSign||LA543_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_43);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA543_51 = input.LA(1);

                         
                        int index543_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_51==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_51==EOF||LA543_51==Comma||LA543_51==EqualsSign||LA543_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_51);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA543_59 = input.LA(1);

                         
                        int index543_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_59==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_59==EOF||LA543_59==Comma||LA543_59==EqualsSign||LA543_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_59);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA543_44 = input.LA(1);

                         
                        int index543_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_44==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_44==EOF||LA543_44==Comma||LA543_44==EqualsSign||LA543_44==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA543_52 = input.LA(1);

                         
                        int index543_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_52==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_52==EOF||LA543_52==Comma||LA543_52==EqualsSign||LA543_52==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_52);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA543_60 = input.LA(1);

                         
                        int index543_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_60==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_60==EOF||LA543_60==Comma||LA543_60==EqualsSign||LA543_60==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_60);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA543_45 = input.LA(1);

                         
                        int index543_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_45==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_45==EOF||LA543_45==Comma||LA543_45==EqualsSign||LA543_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_45);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA543_53 = input.LA(1);

                         
                        int index543_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_53==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_53==EOF||LA543_53==Comma||LA543_53==EqualsSign||LA543_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_53);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA543_61 = input.LA(1);

                         
                        int index543_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_61==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_61==EOF||LA543_61==Comma||LA543_61==EqualsSign||LA543_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_61);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA543_1 = input.LA(1);

                         
                        int index543_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_1==EOF||LA543_1==Comma||LA543_1==EqualsSign||LA543_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA543_1==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index543_1);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA543_46 = input.LA(1);

                         
                        int index543_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_46==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_46==EOF||LA543_46==Comma||LA543_46==EqualsSign||LA543_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_46);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA543_54 = input.LA(1);

                         
                        int index543_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_54==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_54==EOF||LA543_54==Comma||LA543_54==EqualsSign||LA543_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA543_62 = input.LA(1);

                         
                        int index543_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_62==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_62==EOF||LA543_62==Comma||LA543_62==EqualsSign||LA543_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_62);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA543_39 = input.LA(1);

                         
                        int index543_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_39==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_39==EOF||LA543_39==Comma||LA543_39==EqualsSign||LA543_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_39);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA543_47 = input.LA(1);

                         
                        int index543_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_47==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_47==EOF||LA543_47==Comma||LA543_47==EqualsSign||LA543_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_47);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA543_55 = input.LA(1);

                         
                        int index543_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_55==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_55==EOF||LA543_55==Comma||LA543_55==EqualsSign||LA543_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA543_63 = input.LA(1);

                         
                        int index543_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_63==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_63==EOF||LA543_63==Comma||LA543_63==EqualsSign||LA543_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_63);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA543_0 = input.LA(1);

                         
                        int index543_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA543_0>=7 && LA543_0<=126 && (s=T2S.M_46[LA543_0-(7)])>=0) && (synpred303_InternalN4JSXParser())) { /* 33 cases */ }
                        else if ( (LA543_0==Yield) ) {s = 34;}

                        else if ( (LA543_0==Null) && (synpred303_InternalN4JSXParser())) {s = 35;}

                        else if ( (LA543_0==True) && (synpred303_InternalN4JSXParser())) {s = 36;}

                        else if ( (LA543_0==False) && (synpred303_InternalN4JSXParser())) {s = 37;}

                        else if ( (LA543_0==Enum) && (synpred303_InternalN4JSXParser())) {s = 38;}

                        
                        else if ((LA543_0>=4 && LA543_0<=86 && (s=T2S.M_47[LA543_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA543_0==RULE_STRING) && (synpred303_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA543_0==RULE_DOUBLE||LA543_0==RULE_HEX_INT||LA543_0==RULE_OCTAL_INT||LA543_0==RULE_SCIENTIFIC_INT||LA543_0==RULE_INT) && (synpred303_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA543_0==LeftSquareBracket) && (synpred303_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA543_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index543_0);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA543_40 = input.LA(1);

                         
                        int index543_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_40==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_40==EOF||LA543_40==Comma||LA543_40==EqualsSign||LA543_40==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_40);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA543_48 = input.LA(1);

                         
                        int index543_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_48==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_48==EOF||LA543_48==Comma||LA543_48==EqualsSign||LA543_48==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_48);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA543_56 = input.LA(1);

                         
                        int index543_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_56==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_56==EOF||LA543_56==Comma||LA543_56==EqualsSign||LA543_56==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_56);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA543_41 = input.LA(1);

                         
                        int index543_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_41==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_41==EOF||LA543_41==Comma||LA543_41==EqualsSign||LA543_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_41);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA543_49 = input.LA(1);

                         
                        int index543_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_49==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_49==EOF||LA543_49==Comma||LA543_49==EqualsSign||LA543_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_49);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA543_57 = input.LA(1);

                         
                        int index543_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_57==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_57==EOF||LA543_57==Comma||LA543_57==EqualsSign||LA543_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_57);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA543_42 = input.LA(1);

                         
                        int index543_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_42==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_42==EOF||LA543_42==Comma||LA543_42==EqualsSign||LA543_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_42);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA543_50 = input.LA(1);

                         
                        int index543_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_50==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_50==EOF||LA543_50==Comma||LA543_50==EqualsSign||LA543_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_50);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA543_58 = input.LA(1);

                         
                        int index543_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA543_58==Colon) && (synpred303_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA543_58==EOF||LA543_58==Comma||LA543_58==EqualsSign||LA543_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index543_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 543, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_325s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_326s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_327s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_328s = "\1\0\1\23\45\uffff\1\24\1\30\1\1\1\4\1\7\1\12\1\15\1\20\1\25\1\31\1\2\1\5\1\10\1\13\1\16\1\21\1\26\1\32\1\3\1\6\1\11\1\14\1\17\1\22\1\27\5\uffff}>";
    static final String[] dfa_329s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_325 = DFA.unpackEncodedStringToUnsignedChars(dfa_325s);
    static final char[] dfa_326 = DFA.unpackEncodedStringToUnsignedChars(dfa_326s);
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final short[] dfa_328 = DFA.unpackEncodedString(dfa_328s);
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);

    class DFA544 extends DFA {

        public DFA544(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 544;
            this.eot = dfa_232;
            this.eof = dfa_232;
            this.min = dfa_325;
            this.max = dfa_326;
            this.accept = dfa_327;
            this.special = dfa_328;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "14381:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA544_0 = input.LA(1);

                         
                        int index544_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA544_0>=7 && LA544_0<=126 && (s=T2S.M_48[LA544_0-(7)])>=0) && (synpred304_InternalN4JSXParser())) { /* 38 cases */ }
                        
                        else if ((LA544_0>=4 && LA544_0<=86 && (s=T2S.M_47[LA544_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA544_0==RULE_STRING) && (synpred304_InternalN4JSXParser())) {s = 64;}

                        else if ( (LA544_0==RULE_DOUBLE||LA544_0==RULE_HEX_INT||LA544_0==RULE_OCTAL_INT||LA544_0==RULE_SCIENTIFIC_INT||LA544_0==RULE_INT) && (synpred304_InternalN4JSXParser())) {s = 65;}

                        else if ( (LA544_0==LeftSquareBracket) && (synpred304_InternalN4JSXParser())) {s = 66;}

                        else if ( (LA544_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index544_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA544_41 = input.LA(1);

                         
                        int index544_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_41==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_41==Comma||LA544_41==EqualsSign||LA544_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_41);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA544_49 = input.LA(1);

                         
                        int index544_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_49==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_49==Comma||LA544_49==EqualsSign||LA544_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_49);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA544_57 = input.LA(1);

                         
                        int index544_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_57==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_57==Comma||LA544_57==EqualsSign||LA544_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_57);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA544_42 = input.LA(1);

                         
                        int index544_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_42==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_42==Comma||LA544_42==EqualsSign||LA544_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA544_50 = input.LA(1);

                         
                        int index544_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_50==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_50==Comma||LA544_50==EqualsSign||LA544_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA544_58 = input.LA(1);

                         
                        int index544_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_58==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_58==Comma||LA544_58==EqualsSign||LA544_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_58);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA544_43 = input.LA(1);

                         
                        int index544_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_43==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_43==Comma||LA544_43==EqualsSign||LA544_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_43);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA544_51 = input.LA(1);

                         
                        int index544_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_51==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_51==Comma||LA544_51==EqualsSign||LA544_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA544_59 = input.LA(1);

                         
                        int index544_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_59==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_59==Comma||LA544_59==EqualsSign||LA544_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA544_44 = input.LA(1);

                         
                        int index544_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_44==Comma||LA544_44==EqualsSign||LA544_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_44==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_44);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA544_52 = input.LA(1);

                         
                        int index544_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_52==Comma||LA544_52==EqualsSign||LA544_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_52==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA544_60 = input.LA(1);

                         
                        int index544_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_60==Comma||LA544_60==EqualsSign||LA544_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_60==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_60);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA544_45 = input.LA(1);

                         
                        int index544_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_45==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_45==Comma||LA544_45==EqualsSign||LA544_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA544_53 = input.LA(1);

                         
                        int index544_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_53==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_53==Comma||LA544_53==EqualsSign||LA544_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA544_61 = input.LA(1);

                         
                        int index544_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_61==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_61==Comma||LA544_61==EqualsSign||LA544_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_61);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA544_46 = input.LA(1);

                         
                        int index544_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_46==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_46==Comma||LA544_46==EqualsSign||LA544_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_46);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA544_54 = input.LA(1);

                         
                        int index544_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_54==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_54==Comma||LA544_54==EqualsSign||LA544_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA544_62 = input.LA(1);

                         
                        int index544_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_62==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_62==Comma||LA544_62==EqualsSign||LA544_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA544_1 = input.LA(1);

                         
                        int index544_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_1==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_1==Comma||LA544_1==EqualsSign||LA544_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_1);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA544_39 = input.LA(1);

                         
                        int index544_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_39==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_39==Comma||LA544_39==EqualsSign||LA544_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA544_47 = input.LA(1);

                         
                        int index544_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_47==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_47==Comma||LA544_47==EqualsSign||LA544_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_47);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA544_55 = input.LA(1);

                         
                        int index544_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_55==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_55==Comma||LA544_55==EqualsSign||LA544_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_55);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA544_63 = input.LA(1);

                         
                        int index544_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_63==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                        else if ( (LA544_63==Comma||LA544_63==EqualsSign||LA544_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index544_63);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA544_40 = input.LA(1);

                         
                        int index544_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_40==Comma||LA544_40==EqualsSign||LA544_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_40==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA544_48 = input.LA(1);

                         
                        int index544_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_48==Comma||LA544_48==EqualsSign||LA544_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_48==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA544_56 = input.LA(1);

                         
                        int index544_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA544_56==Comma||LA544_56==EqualsSign||LA544_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA544_56==Colon) && (synpred304_InternalN4JSXParser())) {s = 68;}

                         
                        input.seek(index544_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 544, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_330s = "\23\uffff";
    static final String dfa_331s = "\1\4\1\0\21\uffff";
    static final String dfa_332s = "\1\176\1\0\21\uffff";
    static final String dfa_333s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_334s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_335s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\14\uffff\1\3\1\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_330 = DFA.unpackEncodedString(dfa_330s);
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final short[][] dfa_335 = unpackEncodedStringArray(dfa_335s);

    class DFA561 extends DFA {

        public DFA561(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 561;
            this.eot = dfa_330;
            this.eof = dfa_330;
            this.min = dfa_331;
            this.max = dfa_332;
            this.accept = dfa_333;
            this.special = dfa_334;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "14796:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA561_1 = input.LA(1);

                         
                        int index561_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSXParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index561_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 561, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_336s = "\174\uffff";
    static final String dfa_337s = "\1\2\173\uffff";
    static final String dfa_338s = "\1\4\1\0\172\uffff";
    static final String dfa_339s = "\1\u0099\1\0\172\uffff";
    static final String dfa_340s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_341s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_342s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[][] dfa_342 = unpackEncodedStringArray(dfa_342s);

    class DFA565 extends DFA {

        public DFA565(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 565;
            this.eot = dfa_336;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_342;
        }
        public String getDescription() {
            return "14887:2: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA565_1 = input.LA(1);

                         
                        int index565_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index565_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 565, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_343s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_344s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_345s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_346s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final short[][] dfa_346 = unpackEncodedStringArray(dfa_346s);

    class DFA568 extends DFA {

        public DFA568(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 568;
            this.eot = dfa_47;
            this.eof = dfa_47;
            this.min = dfa_343;
            this.max = dfa_344;
            this.accept = dfa_345;
            this.special = dfa_52;
            this.transition = dfa_346;
        }
        public String getDescription() {
            return "14952:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_347s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_348s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_349s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_350s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_351s = "\1\3\1\10\12\uffff\1\7\1\uffff\1\4\1\11\1\2\1\5\1\6\1\0\1\1\11\uffff}>";
    static final String[] dfa_352s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final char[] dfa_349 = DFA.unpackEncodedStringToUnsignedChars(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[] dfa_351 = DFA.unpackEncodedString(dfa_351s);
    static final short[][] dfa_352 = unpackEncodedStringArray(dfa_352s);

    class DFA579 extends DFA {

        public DFA579(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 579;
            this.eot = dfa_54;
            this.eof = dfa_347;
            this.min = dfa_348;
            this.max = dfa_349;
            this.accept = dfa_350;
            this.special = dfa_351;
            this.transition = dfa_352;
        }
        public String getDescription() {
            return "15175:3: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA579_19 = input.LA(1);

                         
                        int index579_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_19==EOF||LA579_19==Ampersand||LA579_19==RightParenthesis||(LA579_19>=PlusSign && LA579_19<=Comma)||LA579_19==LessThanSign||LA579_19==QuestionMark||LA579_19==VerticalLine) ) {s = 28;}

                        else if ( (LA579_19==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA579_20 = input.LA(1);

                         
                        int index579_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_20==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA579_20==EOF||LA579_20==Ampersand||LA579_20==RightParenthesis||(LA579_20>=PlusSign && LA579_20<=Comma)||LA579_20==LessThanSign||LA579_20==QuestionMark||LA579_20==VerticalLine) ) {s = 28;}

                         
                        input.seek(index579_20);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA579_16 = input.LA(1);

                         
                        int index579_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA579_16==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA579_0 = input.LA(1);

                         
                        int index579_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA579_0>=11 && LA579_0<=126 && (s=T2S.M_50[LA579_0-(11)])>=0) && (synpred313_InternalN4JSXParser())) { /* 11 cases */ }
                        else if ( (LA579_0==Constructor) ) {s = 12;}

                        else if ( (LA579_0==Of) && (synpred313_InternalN4JSXParser())) {s = 13;}

                        else if ( (LA579_0==Target) ) {s = 14;}

                        else if ( (LA579_0==Type) ) {s = 15;}

                        else if ( (LA579_0==Union) ) {s = 16;}

                        else if ( (LA579_0==Intersection) ) {s = 17;}

                        else if ( (LA579_0==This) ) {s = 18;}

                        else if ( (LA579_0==Promisify) ) {s = 19;}

                        else if ( (LA579_0==Await) ) {s = 20;}

                        else if ( (LA579_0==Async) && (synpred313_InternalN4JSXParser())) {s = 21;}

                        else if ( (LA579_0==Implements) && (synpred313_InternalN4JSXParser())) {s = 22;}

                        else if ( (LA579_0==Interface) && (synpred313_InternalN4JSXParser())) {s = 23;}

                        else if ( (LA579_0==Private) && (synpred313_InternalN4JSXParser())) {s = 24;}

                        else if ( (LA579_0==Protected) && (synpred313_InternalN4JSXParser())) {s = 25;}

                        else if ( (LA579_0==Public) && (synpred313_InternalN4JSXParser())) {s = 26;}

                        else if ( (LA579_0==Out) && (synpred313_InternalN4JSXParser())) {s = 27;}

                        else if ( (LA579_0==This_1||LA579_0==Void||LA579_0==LeftParenthesis||LA579_0==QuestionMark||LA579_0==LeftSquareBracket||LA579_0==LeftCurlyBracket||LA579_0==Tilde) ) {s = 28;}

                         
                        input.seek(index579_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA579_14 = input.LA(1);

                         
                        int index579_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_14==EOF||LA579_14==Ampersand||LA579_14==RightParenthesis||(LA579_14>=PlusSign && LA579_14<=Comma)||LA579_14==LessThanSign||LA579_14==QuestionMark||LA579_14==VerticalLine) ) {s = 28;}

                        else if ( (LA579_14==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA579_17 = input.LA(1);

                         
                        int index579_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_17==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA579_17==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA579_18 = input.LA(1);

                         
                        int index579_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_18==EOF||LA579_18==Ampersand||LA579_18==RightParenthesis||(LA579_18>=PlusSign && LA579_18<=Comma)||LA579_18==LessThanSign||LA579_18==QuestionMark||LA579_18==VerticalLine) ) {s = 28;}

                        else if ( (LA579_18==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_18);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA579_12 = input.LA(1);

                         
                        int index579_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_12==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA579_12==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index579_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA579_1 = input.LA(1);

                         
                        int index579_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_1==EOF||LA579_1==Ampersand||LA579_1==RightParenthesis||(LA579_1>=PlusSign && LA579_1<=Comma)||LA579_1==FullStop||LA579_1==LessThanSign||LA579_1==QuestionMark||LA579_1==VerticalLine) ) {s = 28;}

                        else if ( (LA579_1==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                         
                        input.seek(index579_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA579_15 = input.LA(1);

                         
                        int index579_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_15==Colon) && (synpred313_InternalN4JSXParser())) {s = 29;}

                        else if ( (LA579_15==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index579_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 579, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_353s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_353 = unpackEncodedStringArray(dfa_353s);

    class DFA584 extends DFA {

        public DFA584(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 584;
            this.eot = dfa_336;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "15294:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA584_1 = input.LA(1);

                         
                        int index584_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index584_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 584, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA586 extends DFA {

        public DFA586(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 586;
            this.eot = dfa_336;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_353;
        }
        public String getDescription() {
            return "15362:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA586_1 = input.LA(1);

                         
                        int index586_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSXParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index586_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 586, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_354s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_355s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_356s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_357s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_358s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_354 = DFA.unpackEncodedStringToUnsignedChars(dfa_354s);
    static final char[] dfa_355 = DFA.unpackEncodedStringToUnsignedChars(dfa_355s);
    static final short[] dfa_356 = DFA.unpackEncodedString(dfa_356s);
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[][] dfa_358 = unpackEncodedStringArray(dfa_358s);

    class DFA590 extends DFA {

        public DFA590(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 590;
            this.eot = dfa_225;
            this.eof = dfa_225;
            this.min = dfa_354;
            this.max = dfa_355;
            this.accept = dfa_356;
            this.special = dfa_357;
            this.transition = dfa_358;
        }
        public String getDescription() {
            return "15415:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA590_0 = input.LA(1);

                         
                        int index590_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA590_0==Get) ) {s = 1;}

                        else if ( (LA590_0==Set) ) {s = 2;}

                        else if ( (LA590_0==LessThanSign) && (synpred318_InternalN4JSXParser())) {s = 3;}

                        
                        else if ((LA590_0>=4 && LA590_0<=126 && (s=T2S.M_51[LA590_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index590_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA590_1 = input.LA(1);

                         
                        int index590_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSXParser()) ) {s = 65;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA590_2 = input.LA(1);

                         
                        int index590_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSXParser()) ) {s = 67;}

                        else if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA590_4 = input.LA(1);

                         
                        int index590_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA590_5 = input.LA(1);

                         
                        int index590_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA590_6 = input.LA(1);

                         
                        int index590_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA590_7 = input.LA(1);

                         
                        int index590_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA590_8 = input.LA(1);

                         
                        int index590_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA590_9 = input.LA(1);

                         
                        int index590_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA590_10 = input.LA(1);

                         
                        int index590_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA590_11 = input.LA(1);

                         
                        int index590_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA590_12 = input.LA(1);

                         
                        int index590_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA590_13 = input.LA(1);

                         
                        int index590_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA590_14 = input.LA(1);

                         
                        int index590_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA590_15 = input.LA(1);

                         
                        int index590_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA590_16 = input.LA(1);

                         
                        int index590_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA590_17 = input.LA(1);

                         
                        int index590_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA590_18 = input.LA(1);

                         
                        int index590_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA590_19 = input.LA(1);

                         
                        int index590_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA590_20 = input.LA(1);

                         
                        int index590_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA590_21 = input.LA(1);

                         
                        int index590_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA590_22 = input.LA(1);

                         
                        int index590_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA590_23 = input.LA(1);

                         
                        int index590_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA590_24 = input.LA(1);

                         
                        int index590_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA590_25 = input.LA(1);

                         
                        int index590_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA590_26 = input.LA(1);

                         
                        int index590_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA590_27 = input.LA(1);

                         
                        int index590_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA590_28 = input.LA(1);

                         
                        int index590_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA590_29 = input.LA(1);

                         
                        int index590_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA590_30 = input.LA(1);

                         
                        int index590_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA590_31 = input.LA(1);

                         
                        int index590_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA590_32 = input.LA(1);

                         
                        int index590_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA590_33 = input.LA(1);

                         
                        int index590_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA590_34 = input.LA(1);

                         
                        int index590_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA590_35 = input.LA(1);

                         
                        int index590_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA590_36 = input.LA(1);

                         
                        int index590_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA590_37 = input.LA(1);

                         
                        int index590_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA590_38 = input.LA(1);

                         
                        int index590_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA590_39 = input.LA(1);

                         
                        int index590_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA590_40 = input.LA(1);

                         
                        int index590_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA590_41 = input.LA(1);

                         
                        int index590_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA590_42 = input.LA(1);

                         
                        int index590_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA590_43 = input.LA(1);

                         
                        int index590_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA590_44 = input.LA(1);

                         
                        int index590_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA590_45 = input.LA(1);

                         
                        int index590_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA590_46 = input.LA(1);

                         
                        int index590_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA590_47 = input.LA(1);

                         
                        int index590_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA590_48 = input.LA(1);

                         
                        int index590_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA590_49 = input.LA(1);

                         
                        int index590_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA590_50 = input.LA(1);

                         
                        int index590_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA590_51 = input.LA(1);

                         
                        int index590_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA590_52 = input.LA(1);

                         
                        int index590_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA590_53 = input.LA(1);

                         
                        int index590_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA590_54 = input.LA(1);

                         
                        int index590_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA590_55 = input.LA(1);

                         
                        int index590_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA590_56 = input.LA(1);

                         
                        int index590_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA590_57 = input.LA(1);

                         
                        int index590_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA590_58 = input.LA(1);

                         
                        int index590_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA590_59 = input.LA(1);

                         
                        int index590_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA590_60 = input.LA(1);

                         
                        int index590_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA590_61 = input.LA(1);

                         
                        int index590_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA590_62 = input.LA(1);

                         
                        int index590_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA590_63 = input.LA(1);

                         
                        int index590_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA590_64 = input.LA(1);

                         
                        int index590_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSXParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index590_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 590, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA671 extends DFA {

        public DFA671(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 671;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5749:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA673 extends DFA {

        public DFA673(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 673;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "5897:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA675 extends DFA {

        public DFA675(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 675;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "5935:9: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA677 extends DFA {

        public DFA677(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 677;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6083:30: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA679 extends DFA {

        public DFA679(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 679;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6126:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA681 extends DFA {

        public DFA681(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 681;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6369:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA683 extends DFA {

        public DFA683(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 683;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "6442:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA685 extends DFA {

        public DFA685(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 685;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "6685:31: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA733 extends DFA {

        public DFA733(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 733;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 12317:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA735 extends DFA {

        public DFA735(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 735;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12321:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA739 extends DFA {

        public DFA739(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 739;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 12502:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA741 extends DFA {

        public DFA741(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 741;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12506:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA745 extends DFA {

        public DFA745(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 745;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 12785:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA747 extends DFA {

        public DFA747(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 747;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "12789:24: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA751 extends DFA {

        public DFA751(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 751;
            this.eot = dfa_21;
            this.eof = dfa_21;
            this.min = dfa_301;
            this.max = dfa_302;
            this.accept = dfa_303;
            this.special = dfa_25;
            this.transition = dfa_304;
        }
        public String getDescription() {
            return "()* loopback of 13086:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA753 extends DFA {

        public DFA753(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 753;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "13090:24: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x40004000007C0001L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004000007C0001L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014000007C0001L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x000D048090000130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0020440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0000440000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002460000440000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_32;
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0000440000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000080410000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000080400000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004040007C0001L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x040D048895184D30L,0x4002420000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x000D048090000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014040007C0001L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40014061007C0001L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 41, 36, 46, -1, 43, 47, 49, 32, -1, -1, 31, -1, -1, 53, -1, 48, 30, -1, -1, -1, 50, -1, 33, -1, 38, -1, 45, 44, -1, -1, -1, -1, -1, -1, -1, 40, -1, 26, 42, -1, -1, -1, 35, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, 27, 29, -1, 51, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25};
	final static int[] M_3 = { 22, 17, 20, -1, -1, 19, -1, -1, -1, -1, 15, 16, -1, -1, -1, 18, -1, 21, -1, -1, -1, -1, -1, -1, -1, 10, 9};
	final static int[] M_4 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, -1, 62, -1, -1, -1, -1, -1, -1, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_5 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_6 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_9 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_11 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_18 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 49, -1, -1, -1, 26, 10, 53, -1, -1, 28, -1, 13, -1, 18, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_19 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 49, -1, -1, -1, 25, 9, 53, -1, -1, 27, -1, 12, -1, 17, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_20 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_22 = { 14, 11, 62, 35, 5, 63, 65, 56, 21, 22, 55, 31, 23, 28, 29, 64, 54, 24, 27, 33, 66, 37, 57, 39, 6, 42, 61, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 10, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 67, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_24 = { 13, 10, 61, 34, 4, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 5, 41, 60, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 9, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_26 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 52, -1, -1, -1, 30, 12, -1, -1, -1, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_27 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_28 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_29 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_30 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 48, 8, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_32 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 47, 8, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 10, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_33 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_34 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_35 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_36 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, -1, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_38 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_39 = { 67, 47, -1, 68, -1, -1, 33, 34, -1, 43, 35, 40, 41, -1, -1, 36, 39, 45, -1, 49, -1, 51, -1, 54, 28, -1, 29, 31, 32, -1, 61, 50, 52, -1, 56, 58, -1, 30, 38, 62, 65, 59, -1, 60, -1, -1, 57, -1, -1, -1, -1, 42, -1, 63, 48, 69, -1, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 37, 44, 46, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_42 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_43 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_46 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_47 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_48 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_50 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_51 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}