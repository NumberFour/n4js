/* XPECT_SETUP eu.numberfour.n4js.expectmatrix.tests.N4JSExpectMatrixPendingTest END_SETUP  */

/////////////////////////
// Optional parameters //
/////////////////////////

interface I {
	// IDEBUG-188 in method: all parameters after an optional one are optional XPECT errors --> "Optional parameters can only appear after the non-optional parameters." at "b : boolean?"
	public f (b : boolean?, z : number, w : string) : union{string,boolean}
};

class A implements I {
	@Override
	// IDEBUG-188 in method: all parameters after an optional one are optional XPECT errors --> "Optional parameters can only appear after the non-optional parameters." at "b : boolean?"
	public f (b : boolean?, z : number, w : string) : union{string,boolean} {
		if (b !== undefined) {
			return b;
		}
		else return "nope";
	}
};

var a : A = new A();

// no arguments XPECT noerrors -->
a.f();

// IDEBUG-188 not enough arguments XPECT errors -->"Incorrect number of arguments: expected 3, got 1." at "a.f(true)"
a.f(true);

/* IDEBUG-188  argument in wrong place XPECT errors ---
"Incorrect number of arguments: expected 3, got 1." at "a.f(5)"
"int is not a subtype of boolean?." at "5"
---*/
a.f(5);

// good arguments XPECT noerrors -->
a.f(true, 5, "F");


interface IC {
	// in method: all parameters after an optional one are optional XPECT errors -->"Optional parameters can only appear after the non-optional parameters." at "b : boolean?"
	public f (b : boolean?, z : number, w : string) : union{string,boolean}
};

class AC implements IC {
	@Override
	// in method: all parameters after an optional one are optional XPECT errors -->"Optional parameters can only appear after the non-optional parameters." at "b : boolean?"
	public f (b : boolean?, z : number, w : string) : union{string,boolean} {
		if (b !== undefined) {
			return b;
		}
		else return "nope";
	}
};

var ac : AC = new AC();

// no arguments XPECT noerrors -->
ac.f();

// not enough arguments XPECT errors -->"Incorrect number of arguments: expected 3, got 1." at "ac.f(true)"
ac.f(true);

/* argument in wrong place XPECT errors ---
"Incorrect number of arguments: expected 3, got 1." at "ac.f(5)"
"int is not a subtype of boolean?." at "5"
---*/
ac.f(5);

// good arguments XPECT noerrors -->
ac.f(true, 5, "F");

