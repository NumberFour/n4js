<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>N4JS Language Specification</title>
<date>2016-11-14</date>
</info>
<part xml:id="_n4js_language_specification">
<title>N4JS Language Specification</title>
<partintro>
<simpara><?asciidoc-pagebreak?></simpara>
<simpara role="center">Version 0.4</simpara>
<simpara role="center">Revision Date: 28.10.2016</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="resources/images/n4jslogo.svg" align="center"/>
</imageobject>
<textobject><phrase>n4jslogo</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara role="center">&#169; 2016 NumberFour AG</simpara>
<simpara role="center">Authors:<?asciidoc-br?>
Jens von Pilgrim, Jakub Siberski, Mark-Oliver Reiser,<?asciidoc-br?>
Torsten Krämer, Ákos Kitta, Sebastian Zarnekow, Lorenzo Bettini, Jörg Reichert</simpara>
<simpara><?asciidoc-pagebreak?></simpara>
<bridgehead xml:id="_abstract" renderas="sect1">Abstract</bridgehead>
<simpara>This document contains the NumberFour JavaScript Specification.</simpara>
<bridgehead xml:id="_revision_history" renderas="sect1">Revision History</bridgehead>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="center" valign="top">Date</entry>
<entry align="center" valign="top">Tasks</entry>
<entry align="center" valign="top">Author</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara><emphasis>2013-03-21</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>–</literal></simpara></entry>
<entry align="center" valign="top"><simpara>v.Pilgrim</simpara></entry>
<entry align="left" valign="top"><simpara>initial commit</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis>2016-03-13</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><literal>–</literal></simpara></entry>
<entry align="center" valign="top"><simpara>v.Pilgrim</simpara></entry>
<entry align="left" valign="top"><simpara>public release, version 0.3 (alpha)</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis>2016-05-31</emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>mor</simpara></entry>
<entry align="left" valign="top"><simpara>support for definition-site variance,
cf. <xref linkend="_definition_site_variance"/></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis>2016-07-18</emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>mor</simpara></entry>
<entry align="left" valign="top"><simpara>rename manifest property <literal>artifactId</literal> to <literal>projectId</literal>; remove <literal>projectName</literal></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis>2016-09-09</emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>mor</simpara></entry>
<entry align="left" valign="top"><simpara>add <literal>@CovariantConstructor</literal>, cf. <xref linkend="_covariant_constructors"/>, plus related
adjustments</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<bridgehead xml:id="_licence" renderas="sect1">Licence</bridgehead>
<simpara>This specification and the accompanying materials is made available
under the terms of the Eclipse Public License v1.0 which accompanies
this distribution, and is available at <link xl:href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</link></simpara>
<bridgehead xml:id="_eclipse_public_license_v_1_0" renderas="sect2">Eclipse Public License - v 1.0</bridgehead>
<simpara>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE
PUBLIC LICENSE (<literal>AGREEMENT</literal>). ANY USE, REPRODUCTION OR DISTRIBUTION OF
THE PROGRAM CONSTITUTES RECIPIENT’S ACCEPTANCE OF THIS AGREEMENT.</simpara>
<bridgehead xml:id="_1_definitions" renderas="sect3">1. DEFINITIONS</bridgehead>
<variablelist>
<varlistentry>
<term><literal>Contribution</literal> means: </term>
<listitem>
<orderedlist numeration="arabic">
<listitem>
<simpara>in the case of the initial Contributor, the initial code and
documentation distributed under this Agreement, and</simpara>
</listitem>
<listitem>
<simpara>in the case of each subsequent Contributor:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>changes to the Program, and</simpara>
</listitem>
<listitem>
<simpara>additions to the Program;</simpara>
<simpara>where such changes and/or additions to the Program originate from and
are distributed by that particular Contributor. A Contribution
’originates’ from a Contributor if it was added to the Program by such
Contributor itself or anyone acting on such Contributor’s behalf.
Contributions do not include additions to the Program which:</simpara>
<orderedlist numeration="lowerroman">
<listitem>
<simpara>are separate modules of software distributed in conjunction with the Program
under their own license agreement, and</simpara>
</listitem>
<listitem>
<simpara>are not derivative works of the Program.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Contributor</literal></term>
<listitem>
<simpara>means any person or entity that distributes the Program.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Licensed Patents</literal> </term>
<listitem>
<simpara>mean patent claims licensable by a Contributor
which are necessarily infringed by the use or sale of its Contribution
alone or when combined with the Program.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Program</literal> </term>
<listitem>
<simpara>means the Contributions distributed in accordance with this
Agreement.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Recipient</literal> </term>
<listitem>
<simpara>means anyone who receives the Program under this
Agreement, including all Contributors.</simpara>
</listitem>
</varlistentry>
</variablelist>
<bridgehead xml:id="_2_grant_of_rights" renderas="sect3">2. GRANT OF RIGHTS</bridgehead>
<orderedlist numeration="arabic">
<listitem>
<simpara>Subject to the terms of this Agreement, each Contributor hereby
grants Recipient a non-exclusive, worldwide, royalty-free copyright
license to reproduce, prepare derivative works of, publicly display,
publicly perform, distribute and sublicense the Contribution of such
Contributor, if any, and such derivative works, in source code and
object code form.</simpara>
</listitem>
<listitem>
<simpara>Subject to the terms of this Agreement, each Contributor hereby
grants Recipient a non-exclusive, worldwide, royalty-free patent license
under Licensed Patents to make, use, sell, offer to sell, import and
otherwise transfer the Contribution of such Contributor, if any, in
source code and object code form. This patent license shall apply to the
combination of the Contribution and the Program if, at the time the
Contribution is added by the Contributor, such addition of the
Contribution causes such combination to be covered by the Licensed
Patents. The patent license shall not apply to any other combinations
which include the Contribution. No hardware per se is licensed
hereunder.</simpara>
</listitem>
<listitem>
<simpara>Recipient understands that although each Contributor grants the
licenses to its Contributions set forth herein, no assurances are
provided by any Contributor that the Program does not infringe the
patent or other intellectual property rights of any other entity. Each
Contributor disclaims any liability to Recipient for claims brought by
any other entity based on infringement of intellectual property rights
or otherwise. As a condition to exercising the rights and licenses
granted hereunder, each Recipient hereby assumes sole responsibility to
secure any other intellectual property rights needed, if any. For
example, if a third party patent license is required to allow Recipient
to distribute the Program, it is Recipient’s responsibility to acquire
that license before distributing the Program.</simpara>
</listitem>
<listitem>
<simpara>Each Contributor represents that to its knowledge it has sufficient
copyright rights in its Contribution, if any, to grant the copyright
license set forth in this Agreement.</simpara>
</listitem>
</orderedlist>
<bridgehead xml:id="_3_requirements" renderas="sect3">3. REQUIREMENTS</bridgehead>
<simpara>A Contributor may choose to distribute the Program in object code form
under its own license agreement, provided that:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>it complies with the terms and conditions of this Agreement; and</simpara>
</listitem>
<listitem>
<simpara>its license agreement:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>effectively disclaims on behalf of all Contributors all warranties
and conditions, express and implied, including warranties or conditions
of title and non-infringement, and implied warranties or conditions of
merchantability and fitness for a particular purpose;</simpara>
</listitem>
<listitem>
<simpara>effectively excludes on behalf of all Contributors all liability for
damages, including direct, indirect, special, incidental and
consequential damages, such as lost profits;</simpara>
</listitem>
<listitem>
<simpara>states that any provisions which differ from this Agreement are
offered by that Contributor alone and not by any other party; and</simpara>
</listitem>
<listitem>
<simpara>states that source code for the Program is available from such
Contributor, and informs licensees how to obtain it in a reasonable
manner on or through a medium customarily used for software exchange.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>When the Program is made available in source code form:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>it must be made available under this Agreement; and</simpara>
</listitem>
<listitem>
<simpara>a copy of this Agreement must be included with each copy of the
Program.</simpara>
</listitem>
</orderedlist>
<simpara>Contributors may not remove or alter any copyright notices contained
within the Program.</simpara>
<simpara>Each Contributor must identify itself as the originator of its
Contribution, if any, in a manner that reasonably allows subsequent
Recipients to identify the originator of the Contribution.</simpara>
<bridgehead xml:id="_4_commercial_distribution" renderas="sect3">4. COMMERCIAL DISTRIBUTION</bridgehead>
<simpara>Commercial distributors of software may accept certain responsibilities
with respect to end users, business partners and the like. While this
license is intended to facilitate the commercial use of the Program, the
Contributor who includes the Program in a commercial product offering
should do so in a manner which does not create potential liability for
other Contributors. Therefore, if a Contributor includes the Program in
a commercial product offering, such Contributor (<literal>Commercial
Contributor</literal>) hereby agrees to defend and indemnify every other
Contributor (<literal>Indemnified Contributor</literal>) against any losses, damages
and costs (collectively <literal>Losses</literal>) arising from claims, lawsuits and
other legal actions brought by a third party against the Indemnified
Contributor to the extent caused by the acts or omissions of such
Commercial Contributor in connection with its distribution of the
Program in a commercial product offering. The obligations in this
section do not apply to any claims or Losses relating to any actual or
alleged intellectual property infringement. In order to qualify, an
Indemnified Contributor must: a) promptly notify the Commercial
Contributor in writing of such claim, and b) allow the Commercial
Contributor to control, and cooperate with the Commercial Contributor
in, the defense and any related settlement negotiations. The Indemnified
Contributor may participate in any such claim at its own expense.</simpara>
<simpara>For example, a Contributor might include the Program in a commercial
product offering, Product X. That Contributor is then a Commercial
Contributor. If that Commercial Contributor then makes performance
claims, or offers warranties related to Product X, those performance
claims and warranties are such Commercial Contributor’s responsibility
alone. Under this section, the Commercial Contributor would have to
defend claims against the other Contributors related to those
performance claims and warranties, and if a court requires any other
Contributor to pay any damages as a result, the Commercial Contributor
must pay those damages.</simpara>
<bridgehead xml:id="_5_no_warranty" renderas="sect3">5. NO WARRANTY</bridgehead>
<simpara>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED
ON AN <literal>AS IS</literal> BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES
OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR
A PARTICULAR PURPOSE. Each Recipient is solely responsible for
determining the appropriateness of using and distributing the Program
and assumes all risks associated with its exercise of rights under this
Agreement , including but not limited to the risks and costs of program
errors, compliance with applicable laws, damage to or loss of data,
programs or equipment, and unavailability or interruption of operations.</simpara>
<bridgehead xml:id="_6_disclaimer_of_liability" renderas="sect3">6. DISCLAIMER OF LIABILITY</bridgehead>
<simpara>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR
ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING
WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR
DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</simpara>
<bridgehead xml:id="_7_general" renderas="sect3">7. GENERAL</bridgehead>
<simpara>If any provision of this Agreement is invalid or unenforceable under
applicable law, it shall not affect the validity or enforceability of
the remainder of the terms of this Agreement, and without further action
by the parties hereto, such provision shall be reformed to the minimum
extent necessary to make such provision valid and enforceable.</simpara>
<simpara>If Recipient institutes patent litigation against any entity (including
a cross-claim or counterclaim in a lawsuit) alleging that the Program
itself (excluding combinations of the Program with other software or
hardware) infringes such Recipient’s patent(s), then such Recipient’s
rights granted under Section 2(b) shall terminate as of the date such
litigation is filed.</simpara>
<simpara>All Recipient’s rights under this Agreement shall terminate if it fails
to comply with any of the material terms or conditions of this Agreement
and does not cure such failure in a reasonable period of time after
becoming aware of such noncompliance. If all Recipient’s rights under
this Agreement terminate, Recipient agrees to cease use and distribution
of the Program as soon as reasonably practicable. However, Recipient’s
obligations under this Agreement and any licenses granted by Recipient
relating to the Program shall continue and survive.</simpara>
<simpara>Everyone is permitted to copy and distribute copies of this Agreement,
but in order to avoid inconsistency the Agreement is copyrighted and may
only be modified in the following manner. The Agreement Steward reserves
the right to publish new versions (including revisions) of this
Agreement from time to time. No one other than the Agreement Steward has
the right to modify this Agreement. The Eclipse Foundation is the
initial Agreement Steward. The Eclipse Foundation may assign the
responsibility to serve as the Agreement Steward to a suitable separate
entity. Each new version of the Agreement will be given a distinguishing
version number. The Program (including Contributions) may always be
distributed subject to the version of the Agreement under which it was
received. In addition, after a new version of the Agreement is
published, Contributor may elect to distribute the Program (including
its Contributions) under the new version. Except as expressly stated in
Sections 2(a) and 2(b) above, Recipient receives no rights or licenses
to the intellectual property of any Contributor under this Agreement,
whether expressly, by implication, estoppel or otherwise. All rights in
the Program not expressly granted under this Agreement are reserved.</simpara>
<simpara>This Agreement is governed by the laws of the State of New York and the
intellectual property laws of the United States of America. No party to
this Agreement will bring a legal action under this Agreement more than
one year after the cause of action arose. Each party waives its rights
to a jury trial in any resulting litigation.</simpara>
</partintro>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>This specification defines the N4JS language.</simpara>
<simpara>In general, the N4 JavaScript dialect used is identical to the standard
ECMAScript as defined in the 6th edition of ECMA-262, also known as
ECMAScript 2015, referred to as [<link linkend="ECMA15a">ECMA15a</link>].</simpara>
<section xml:id="_notation">
<title>Notation</title>
<section xml:id="_grammar_notation">
<title>Grammar Notation</title>
<simpara>For the specification of the syntax and structure of elements, we use a
slightly augmented similar to the grammar language of Xtext <link xl:href="http://www.eclipse.org/Xtext/documentation.html\#grammarLanguage">Grammar Language</link>.</simpara>
<simpara>Similar to [<link linkend="ECMA11a">ECMA11a</link>], we define types with properties only for the purpose of
explanation and usage within this specification. We use the Xtext
notation style to assign values to meta-properties. Particularly, we use
the Xtext notation for collection (<literal>+=</literal>) and boolean (<literal>?=</literal>) values. These
properties are written in italics. Enumerations are defined similar to
Xtext. In order to allow the specification of default values, which are
often defined by omitting the value, we always define the literal
explicitly if it can be defined by the user.</simpara>
<simpara>The following lists informally defines the grammar:</simpara>
<variablelist>
<varlistentry>
<term>Terminal</term>
<listitem>
<simpara>Terminals (or terminal strings) are enclosed in single quotes, e.g., <literal>terminal</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Enumerations</term>
<listitem>
<simpara>Rules which contain only terminals used as values for properties are
marked with <literal>enum</literal> for enumeration.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Properties</term>
<listitem>
<simpara>Values of non-terminals, e.g., other rules, can be assigned to
properties. The property name and the assignment are not part of the
original syntax and only used for the meta description. E.g., <literal><emphasis>name=</emphasis>Identifier</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Collection Properties</term>
<listitem>
<simpara>If a property is a collection, values are added to that list via <literal>+=</literal>.
E.g.,<literal><emphasis>property+=</emphasis>Value</literal> .</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Boolean Properties</term>
<listitem>
<simpara>Boolean properties are set to false by default, if the value (usually
a terminal) is found, the boolean value is set to true. Often, the
name of the property is similar to the terminal. E.g., <literal><emphasis>final?</emphasis>='final'?</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Properties of a non-terminal are sometimes listed again below the
grammar. In that case, often pseudo properties are introduced which are
derived from other properties and which are only used for
simplification.</simpara>
</section>
<section xml:id="_type_judgments_and_rules_and_constraints_notation">
<title>Type Judgments and Rules and Constraints Notation</title>
<section xml:id="_typing_rules_and_judgments">
<title>Typing Rules and Judgments</title>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="rule">Rule</link></simpara>
<simpara>We use the common notation for rules such as type
inference rules
<footnote><simpara>A brief introduction can be found at <link xl:href="http://www.cs.cornell.edu/~ross/publications/mixedsite/tutorial.html">http://www.cs.cornell.edu/~ross/publications/mixedsite/tutorial.html</link>. In general, we refer the reader to cite:[Pierce02a</simpara></footnote>]
, that is</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfrac><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>s</mi></mrow><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfrac><mspace width="5.0mm"/><mstyle mathvariant="normal"><mtext>rule name</mtext></mstyle></math></simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>r</mi><mi>e</mi><mi>m</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>s</mi></math> is the rule’s premises (e.g., the expression to
be inferred), <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math> the result of the rule.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi><mi>u</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math> is an optional condition which may be omitted.</simpara>
<simpara>Both parts of the rule may contain multiple expressions, which are
concatenated via and. For example, the following
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfrac><mrow><msub><mi>P</mi><mn>1</mn></msub><mspace width="5.0mm"/><msub><mi>P</mi><mn>2</mn></msub><mspace width="5.0mm"/><msub><mi>P</mi><mn>3</mn></msub></mrow><mi>C</mi></mfrac></math> can be read as
' <literal>if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>P</mi><mn>1</mn></msub></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>P</mi><mn>2</mn></msub></math>, and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>P</mi><mn>3</mn></msub></math> are all true, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is true as well</literal> '.</simpara>
<simpara>The following judgments (with relation symbols) are used:</simpara>
<variablelist>
<varlistentry>
<term>subtype <literal>&lt;</literal> </term>
<term>type<literal>:</literal> </term>
<listitem>
<simpara>in which the left hand side is a declaration or
expression, and the right hand side a type. We also use
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>.</mo><mo>.</mo></mrow></math> as a function returning the (inferred) type
of an expression.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>expectedTypeIn <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>:</mi></math> </term>
<listitem>
<simpara> a relation with three arguments:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>:</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> means, that
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math> is expected to be a subtype of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> inside <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi></math></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following statement, for example, defines transitivity of subtypes
(in a simplified manner):</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfrac><mrow><mi>Γ</mi><mi>B</mi><mo>⊢</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi><mspace width="7.0mm"/><mi>Γ</mi><mo>⊢</mo><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>B</mi></mrow><mrow><mi>Γ</mi><mo>⊢</mo><mi>C</mi><mi>:</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>A</mi></mrow></mfrac></math></simpara>
<simpara>is the context containing (bound) type variables etc.,
<math xmlns="http://www.w3.org/1998/Math/MathML"/> can be read as <literal>entails</literal>. Thus, the rule can be
read as follows: if the type B is a subtype of type A in context (i.e.
with constraints on type variables specified in ), and if type C is a
subtype of B, then C is also a subtype of A in context .</simpara>
<simpara>In rules, we sometimes omit the environment if it is not needed. New
information is sometimes added to the environment, in particular,
substitutions (that is binding type variables to a type). The set of
substitutions is written with <math xmlns="http://www.w3.org/1998/Math/MathML"/> (theta). If new
substitutions are explicitly added to that set, we write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mrow><mi>V</mi><mo>←</mo><mi>T</mi></mrow></mfenced></math> (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>V</mi></math> is substituted
with type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>). Often, these bindings are computed from a
parameterized type reference which declares type arguments which are
bound to the type variables of the generic declaration. In this case we
simply write <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mi>p</mi></mfenced></math>, in which <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is the
parameterized type declaration. As these new substitutions must become
part of a (newly) created environment, we then usually write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mi>p</mi></mfenced></math>. These substitutions are usually
omitted.</simpara>
</section>
<section xml:id="_types_of_an_element">
<title>Types of an Element</title>
<simpara>A variable or other typed element may be associated with three types:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Declared type: the type explicitly specified in the code, e.g., .</simpara>
</listitem>
<listitem>
<simpara>Inferred type: the type inferred by the type inferencer, e.g.,
infers the type of s to <literal>string</literal>. I.e.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Γ</mi><mo>⊢</mo><mi>s</mi><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></math> will be true, or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>[</mo><mspace width="-0.167em"/><mrow><mo>[</mo><mi>s</mi></mrow></mrow></math>\!] &lt; :string $\]]. If an element is
annotated with a type ,i.e. it has a declared type, the inferred type
will always be the declared type.</simpara>
</listitem>
<listitem>
<simpara>Actual type: the actual type of a variable during runtime. This type
information is not available at compile time and ignored in this
specification.</simpara>
</listitem>
</orderedlist>
<simpara>These types are not type declarations but type references, in fact, as
they may be parameterized. For the sake of simplicity, we often omit the
<literal>Ref</literal> suffix to shorten formulas. Consequently, we define the
following properties and pseudo properties for typed elements such as
variables:</simpara>
<simpara>The explicitly declared type, this is usually a real property of the
construct. Not all elements allow the specification of a declared type,
such as expressions.</simpara>
<simpara>or <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>.</mo><mo>.</mo></mrow></math>: This pseudo property is the inferred type
computed by the type inferencer.</simpara>
<simpara>A pseudo property for elements with a <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>
property. It is similar to the inferred type, i.e.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mi>e</mi></math></simpara>
</section>
</section>
</section>
<section xml:id="_auxiliary_functions">
<title>Auxiliary Functions</title>
<simpara>This section describes some auxiliary functions required for definition
of type inference rules later on.</simpara>
<section xml:id="_binding">
<title>Binding</title>
<simpara>Binding an identifier (variable reference) to a variable declaration (or
variable definition) is not part of this specification as this is
standard ECMAScript functionality. However, some valid ECMAScript
bindings are permitted due to visibility constraints.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="binding_relation">Binding Relation</link></simpara>
<simpara>We define a pseudo relation
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>:</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>×</mo><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></math>
which binds a reference, i.e. an identifier, to a declaration (e.g.,variable
declaration).</simpara>
<simpara>Binding of variable references to declaration is defined by ECMAScript
already. Type references only occur in type expressions, how these are
handled is explained in [sec:Type_Expressions].</simpara>
<simpara>We usually omit this binding mechanism in most rules and use the
reference similarly to the declaration or definition it is bound to. If
a variable reference <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi></math>, for example, is bound to a
variable declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math>, i.e. <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></math>, we
simply write <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> instead of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced><mo>,</mo><mi>D</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> to refer to the type expression (of the
variable).</simpara>
<simpara><footnote><simpara>One can interpret this similar to delegate methods, that is, instead of writing <literal>r.binding().getType()</literal>, a method <literal>r.getType()\{return binding().getType();</literal> is defined.</simpara></footnote></simpara>
<simpara>A <literal>DeclaredType</literal> references the type declaration by its simple name that has been
imported from a module specifier. We define the method
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi></math> for declared types as well:</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="binding_relation_of_types">Binding Relation of Types</link></simpara>
<simpara>We define a pseudo relation
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>:</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>×</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mo>|</mo><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mo>|</mo><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></math>
which binds a type reference, i.e. a simple name, to the type declaration.</simpara>
</section>
<section xml:id="_merging_types">
<title>Merging Types</title>
<simpara>In some cases we have to merge types, e.g., types of a union type or
item types of an array. For that purpose, we define a method
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi></math> as follows.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="merge_function">Merge Function</link></simpara>
<simpara>We define a pseudo function
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>:</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>×</mo><mo>×</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></mfenced></math></simpara>
<simpara>The idea of this function is to remove duplicates. For example; if a
union type contains two type expressions <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><msub><mi>e</mi><mn>1</mn></msub></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><msub><mi>e</mi><mi>k</mi></msub></math>, and if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>τ</mi><mfenced close=")" open="("><mrow><mi>t</mi><msub><mi>e</mi><mn>1</mn></msub></mrow></mfenced><mo>=</mo><mi>τ</mi><mfenced close=")" open="("><mrow><mi>t</mi><msub><mi>e</mi><mn>2</mn></msub></mrow></mfenced></math>, then
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mi>e</mi><mi>r</mi><mi>g</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>τ</mi><mfenced close=")" open="("><mrow><mi>t</mi><msub><mi>e</mi><mn>1</mn></msub></mrow></mfenced></mrow><mrow><mi>τ</mi><mfenced close=")" open="("><mrow><mi>t</mi><msub><mi>e</mi><mn>2</mn></msub></mrow></mfenced></mrow></mfenced></math> contains only one element.
The order of the elements is lost, however.</simpara>
<section xml:id="_logic_formulars">
<title>Logic Formulars</title>
<simpara>In general, we use a pragmatic mixture of pseudo code, predicate logic,
and OCL. Within constraints (also within the inference rules), the
properties defined in the grammar are used.</simpara>
<simpara>In some rules, it is necessary to type the rule variables. Instead of
explicitly checking the metatype (via
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>X</mi></mfenced><mo>=</mo><mi>:</mi><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>a</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></math>), we precede the variable with the
type, that is: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>:</mi><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>a</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mi>X</mi></math>.</simpara>
<simpara>Instead of <literal>type casting</literal> elements, often properties are simply
accessed. If an element does not define that element, it is either
assumed to be false or null by default.</simpara>
<simpara>If a property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is optional and not set, we write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></math> to test its absence. Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></math>
is different from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>=</mo><mi>N</mi><mi>u</mi><mi>l</mi><mi>l</mi></math>, as the latter refers to the null
type. Non-terminals may implicitly be subclasses. In that case, the
concrete non-terminal, or type, of a property may be subject for a test
in a constraint.</simpara>
</section>
</section>
<section xml:id="_symbols_and_font_convention">
<title>Symbols and Font Convention</title>
<simpara>Variables and their properties are printed in italic when used in
formulas (such as rules). A dot-notation is used for member access, e.g.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math>. Also defined functions are printed in italic,
e.g., <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>c</mi><mi>c</mi><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></math>. Properties which define sets are usually
ordered and we assume 0-indexed access to elements, the index
subscripted, e.g., <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><msub><mi>s</mi><mi>i</mi></msub></math>.</simpara>
<simpara>We use the following symbols and font conventions:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∧</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∨</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"/>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>¬</mo></math>::
  Logical and, or, exclusive or (xor), and not.
<math xmlns="http://www.w3.org/1998/Math/MathML"/>, <math xmlns="http://www.w3.org/1998/Math/MathML"/>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>.</mo><mo>.</mo><mo>.</mo><mo>.</mo></math>::
  Logical implication, if and only if, and if-then-else.
<math xmlns="http://www.w3.org/1998/Math/MathML"/>, <math xmlns="http://www.w3.org/1998/Math/MathML"/>, <math xmlns="http://www.w3.org/1998/Math/MathML"/>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math>::
  Boolean true, boolean false, null (i.e., not specified, e.g.,
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mo>=</mo></math> means that there are is no <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi></math>
  (super class) specified), empty set.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∈</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∉</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∪</mo></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∩</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>x</mi><mo>|</mo></math>::
  Element of, not an element of, union set, intersection set,
  cardinality of set x.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mi>X</mi></mfenced></math>::
  Power set of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>, i.e.
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mi>X</mi></mfenced><mo>=</mo><mfenced close="}" open="{"><mrow><mi>U</mi><mi>:</mi><mi>U</mi><mo>⊆</mo><mi>X</mi></mrow></mfenced></math>.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"/>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo></math>::
  Exists, not exists, for all; we write
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo><mi>x</mi><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><mi>z</mi><mi>:</mi><mi>P</mi><mfenced close=")" open="("><mi>x</mi><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><mi>z</mi></mfenced></math> and say <literal>there exists
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><mi>z</mi></math> such that predicate <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> is true</literal>.
  Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mi>:</mi><mi>P</mi><mfenced close=")" open="("><mi>x</mi></mfenced><mo>∀</mo><mi>x</mi><mi>:</mi><mo>¬</mo><mi>P</mi><mfenced close=")" open="("><mi>x</mi></mfenced></math>.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mrow><mo>.</mo><mo>.</mo></mrow></mfenced></math>::
  (mu) read <literal>metatype of</literal>; metatype of a variable or property, e.g.,
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>x</mi></mfenced><mo>=</mo><mi>:</mi><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></math> .
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi></math>::
  Sequence of elements <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub></math>. E.g., if we want to
  define a constraint that the owner of a members of a class
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is the class, we simply write
  <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>C</mi><mo>.</mo><mrow><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></mrow><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>C</mi></math> instead of
  <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>C</mi></math> or even more
  complicated with index variables.</simpara>
<simpara>Sequences are 1-based, e.g., a sequence <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math> with length
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>s</mi><mo>|</mo><mo>=</mo><mi>n</mi></math>, has elements <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>s</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>s</mi><mi>n</mi></msub></math>.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_grammar">
<title>Grammar</title>
<section xml:id="_lexical_conventions">
<title>Lexical Conventions</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-7"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-7</link></simpara>
</sidebar>
<simpara>As a super language on top of ECMAScript, the same lexical conventions are supported as described in
[<link linkend="ECMA11a">ECMA11a(p.S7)</link>] within strict mode.
Some further constraints are defined, however, restricting certain constructs. These constraints are described in the following.</simpara>
<section xml:id="_identifier_names_and_identifiers">
<title>Identifier Names and Identifiers</title>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S7.6)</link>], [<link linkend="ECMA11a">ECMA11a(p.S11.1.2, p.p.63)</link>] and [<link linkend="ECMA11a">ECMA11a(p.S01.2, p.p.51ff)</link>].</simpara>
<simpara>As a reminder, identifiers are defined as follows in the ECMAScript specification:</simpara>
<screen>IdentifierName: IdentifierStart* IdentifierPart;
IdentifierStart : UnicodeLetter | '_';
                \ UnicodeEscapeSequence</screen>
<simpara>N4JS supports a limited form of computed-names for member declarations:</simpara>
<screen>N4JSPropertyComputedName:
    '[' (SymbolLiteralComputedName | StringLiteralComputedName) ']'
;

SymbolLiteralComputedName: N4JSIdentifier '.' N4JSIdentifier ;

StringLiteralComputedName: STRING ;</screen>
<simpara>As can be seen, a computed-name must be either</simpara>
<itemizedlist>
<listitem>
<simpara> a symbol reference, e.g. <literal>Symbol.iterator</literal>,</simpara>
</listitem>
<listitem>
<simpara> a string literal, i.e., a compile time known constant. This notation is useful when interoperating with libraries that define members whose
names contain special characters (e.g., a field name starting with
commercial-at)</simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1220"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1220</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1734"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1734</link></simpara>
</sidebar>
<simpara>In N4JS, identifiers are further constrained in order to avoid
ambiguities and to make code more readable. Some of these constraints
will lead to errors, others only to warnings. They do not apply for
identifiers declared in definitions file (n4jsd) in order to enable
declaration of external entities.</simpara>
<simpara><emphasis role="strong">Req. IDE-1:</emphasis> <link linkend="IDE-1">N4JS Identifier Restrictions</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the following constraints do not hold, errors are created.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Leading <literal>$</literal> (dollar sign) character is prohibited for any variable
name such as fields, variables, types functions and methods.</simpara>
</listitem>
<listitem>
<simpara>Leading <literal> _ </literal> (underscore) character is not allowed for identifying any
functions or methods.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-2:</emphasis> <link linkend="IDE-2">N4JS identifier recommendations</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the following constraints do not hold, warnings are created.</simpara>
</listitem>
<listitem>
<simpara>Variable names should, in general, be constructed form the 26 ASCII
upper and lower case alphabetic letters (a..z, A..Z), from the 10
decimal digits (0..9) and from the _ (underline). Although the usage of
the international characters are allowed (according to the ECMAScript
specification) it is discouraged because these characters may not be
read or understood well in every circumstance.
<footnote><simpara><link xl:href="http://javascript.crockford.com/code.html">http://javascript.crockford.com/code.html</link></simpara></footnote></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Type (and Type Variable) Identifiers</simpara>
<screen>TypeIdentifier: [_A-Z][_a-zA-Z0-9]*
TypeVariableIdentifier: [_A-Z][_a-zA-Z0-9]*</screen>
</listitem>
<listitem>
<simpara>Package Identifiers</simpara>
<screen>PackageIdentifier: [_a-z][._a-zA-Z0-9]*; // i.e. the folder names, must not end with .</screen>
</listitem>
<listitem>
<simpara>Member Identifiers and Enum Literals</simpara>
<screen>InstanceFieldIdentifier: [_a-z][_a-zA-Z0-9]*
StaticFieldIdentifier: [_A-Z][_A-Z0-9]*([_A-Z0-9]+)*
EnumLiteral: [_A-Z][_A-Z0-9]*([_A-Z0-9]+)*</screen>
</listitem>
<listitem>
<simpara>Variable and Parameter Names</simpara>
<screen>VariableIdentifier: [_a-zA-Z0-9]*
􏰀ParameterIdentifier: [_a-z][_a-zA-Z0-9]*</screen>
</listitem>
<listitem>
<simpara>Methods</simpara>
<screen>MethodIdentifier: [_a-z][_a-zA-Z0-9]*;</screen>
</listitem>
<listitem>
<simpara>Annotations</simpara>
<screen>AnnotationIdentifier: [_A-Z][_a-zA-Z0-9]*</screen>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>The following rules describe how fully qualified names of elements are
created. Note that these fully qualified names cannot be used in N4JS
directly. Though they may be shown in error messages etc. to identify
elements.</simpara>
<screen>TypeIdentifier:         [A-Z][a-zA-Z0-9]*;
PackageIdentifier:      [a-z][a-zA-Z0-9]*;
FQNType:                (PackageIdentifier '.')+ TypeIdentifier;</screen>
</section>
<section xml:id="_this_keyword">
<title>This Keyword</title>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.1.1, p.p.63)</link>]</simpara>
</section>
<section xml:id="_regular_expression_literals">
<title>Regular Expression Literals</title>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S7.8.5)</link>]</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-95"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-95</link></simpara>
</sidebar>
</section>
<section xml:id="_automatic_semicolon_insertion">
<title>Automatic Semicolon Insertion</title>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S7.9)</link>]</simpara>
<simpara><link linkend="AC">ASI</link> is supported by the parser, however warnings are issued. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-95"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-95</link></simpara>
</sidebar>
</section>
<section xml:id="_jsdoc">
<title>JSDoc</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-56"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-56</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-57"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-57</link></simpara>
</sidebar>
<simpara>JSDoc are comments similar to JavaDoc in Java for documenting types,
functions and members. There is no semantic information expressed in
JSDoc, that is, the behavior of a program must not change if all the
JSDoc is removed. The JSDoc tags and overall syntax is a mixture of tags
defined by the <link xl:href="https://developers.google.com/closure/compiler/docs/js-for-compiler">Google Closure Compiler</link>, Java&#8217;s <link xl:href="http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html">JavaDoc</link> tool and N4-specific tags.</simpara>
<simpara>JSDoc comments are multiline comments, starting with `/**
`</simpara>
<simpara>(instead of simple multiline comments, starting with `/*
`).</simpara>
<screen>MultiLineComment: '/*' MultiLineCommentChars? '*/'  // from ECMAScript specification
JSDoc:            '/**' MultiLineCommentChars? '*/'</screen>
<simpara>In general, JSDoc comments are placed directly before the annotated
language element. In some cases, this is slightly different, such as for
method parameters, for example, where it is then explicitly specified.</simpara>
<simpara>The content of JSDoc comments will be covered in more detail in upcoming
chapters. For documentation purposes, multi- and single-line
descriptions are used in several constructs.</simpara>
<screen>MLVALUE:         ([^@]+[^\n]+)+;
SLVALUE:         ([^\n]+);</screen>
<variablelist>
<varlistentry>
<term><literal>MLVALUE</literal> </term>
<listitem>
<simpara>short for <literal>multi-line value</literal>. This is usually only used for the
general description of types or members.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>SLVALUE</literal> </term>
<listitem>
<simpara>short for <literal>single-line value</literal>. This is a description which ends at
the end of a line. It is usually used in combination with other tags,
e.g., to further describe a parameter of a method.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
</chapter>
<chapter xml:id="_names">
<title>Names</title>
<simpara><emphasis>Visibility</emphasis> defines the scope in which a declaration is visible, that
is in which context references can be bound to the declaration. <emphasis>Access
control</emphasis> defines the extent to which types and members are accessible
beyond their immediate context. Access control may, therefore, restrict
the visibility of a declaration by limiting its scope.</simpara>
<simpara><emphasis>Extensibility</emphasis> refers to whether a given type can be subtyped, or in
the case of members, whether they can be overridden. Access control is a
prerequisite for extensibility which is further explained in <xref linkend="N4_Specific_Classifiers"/></simpara>
<section xml:id="_access_control">
<title>Access Control</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-84"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-84</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-556"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-556</link></simpara>
</sidebar>
<simpara>Types from one project may or may not be made
accessible to another project. Likewise, members from a given type may
or may not be made accessible to members existing outside that type. For
example, if a developer writes an application which uses a library,
which types within that library can the application see? Given a type
that is set as visible, which members of that type can the application
see?</simpara>
<simpara>Accessing a type or member actually means that a reference is bound to a
declaration with the same identifier.</simpara>
<simpara>We distinguish the following contexts from which an element is accessed
as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Module or type: access from elements in the same module or type.</simpara>
</listitem>
<listitem>
<simpara>Subtype: access from a subtype.</simpara>
</listitem>
<listitem>
<simpara>Project: access from the same project.</simpara>
</listitem>
<listitem>
<simpara>Vendor: access from different project of the same vendor.</simpara>
</listitem>
<listitem>
<simpara>World: access from anything else.</simpara>
</listitem>
</orderedlist>
<simpara>Accessibility is defined by modifiers on types and members, e.g , via
the statement, and by the annotation. Extensibility is defined by the
annotation respectively.</simpara>
</section>
<section xml:id="_accessibility_of_types_top_level_variables_and_function_declarations">
<title>Accessibility of Types, Top-Level Variables and Function Declarations</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-84"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-84</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-556"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-556</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-707"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-707</link></simpara>
</sidebar>
<simpara>We define types (classes, interfaces, enums) whereby each type has members (fields and methods, depending on the kind of type).
When we define a type, we need to define whether it is visible only for the specifying module, project or whether that type should be accessible from outside of that project.</simpara>
<simpara>The same is true for variable declarations and function declarations
defined as top-level elements of a module.</simpara>
<simpara>The following type access modifiers are supported by N4JS:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">enum TypeAccessModifier:      project
                            | public;</programlisting>
<simpara>If a type is not exported, its visibility is private. If a type has
declared visibility , it may additionally be marked as internal via the
annotation . Thus, we have the following set of type access modifiers:</simpara>
<simpara>TAM = <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>,</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>,</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>)</mo></mrow></math></simpara>
<simpara>That is, in N4JS, only the type access modifiers and are available. The
redundant modifier serves only documentation purpose and can be
synthesized if the modifier is preset.</simpara>
<simpara>All other modifiers used here are synthesized as shown in the next
example:</simpara>
<formalpara>
<title>Synthesized Type Access Modifiers in N4JS</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">class C0 {}                         // private
export class C1 {}                  // project
export project class C1 {}          // project
export @Internal public class C1 {} // public@Internal
export public class C2 {}           // public

var v0;                             // private
export var v1;                      // project
export project var v1;              // project
export @Internal public var v3;     // public@Internal
export public var v2;               // public


function f0() {}                    // private
export function f1() {}             // project
export project function f1() {}     // project
export @Internal public function f3() {} // public@Internal
export public function f2() {}      // public</programlisting>
</para>
</formalpara>
<simpara>The access control levels are defined as listed in .</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Type Access Control</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="center" valign="top" namest="col_1" nameend="col_5"><emphasis role="strong">Type Access</emphasis></entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara><emphasis role="strong">Modifier</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Module</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Project</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Vendor</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">World</emphasis></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>project</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>public@Internal</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>public</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>A</mi><mi>M</mi></math> is a totally ordered set:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math></simpara>
<simpara><emphasis role="strong">Req. IDE-3:</emphasis> <link linkend="IDE-3">Type Access Modifiers</link> (ver. 1)</simpara>
<simpara>The following constraints for type access modifiers for a given type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>
(which may be a classifier declaration, a function or a variable) must
hold:</simpara>
<itemizedlist>
<listitem>
<simpara>It is an error if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is not exported but defined as
<literal>project</literal>, <literal>public</literal> or
<literal>public@Internal</literal>.</simpara>
</listitem>
<listitem>
<simpara>It is an error if an annotation <literal>@Internal</literal> is
present on a module private or <literal>project</literal> visible
type.</simpara>
</listitem>
<listitem>
<simpara>The type modifier for all built-in ECMAScript types is
<literal>public</literal>.</simpara>
</listitem>
<listitem>
<simpara>The <emphasis>default modifier</emphasis> for user declared exported declarations is
<literal>project</literal>. That is, this modifier is assumed if no
modifier is explicitly specified.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="type_accessibility_t">Type Accessibility T</link></simpara>
<simpara>The function <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msub><mi>α</mi><mi>T</mi></msub><mi>:</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>×</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></math>
computes whether a given type, (top-level) variable or function
reference can access the declaration that it references.
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>T</mi></msub></math> is defined with .</simpara>
<simpara>Formally, we define <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>T</mi></msub></math> for a given reference
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi></math> and a module top level variable, function or type
declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math> as follows: <footnote><simpara>See for definitions of metatype properties.</simpara></footnote>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><msub><mi>α</mi><mi>T</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></mrow><mrow><mi>D</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><msub><mi>α</mi><mi>T</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></mrow><mrow><mi>D</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>r</mi><mo>.</mo><mi>v</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>D</mi><mo>.</mo><mi>v</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>r</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><msub><mi>α</mi><mi>T</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></mrow><mrow><mi>D</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>r</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mi>D</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><msub><mi>α</mi><mi>T</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></mrow><mrow><mi>D</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>r</mi><mo>.</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>=</mo><mi>D</mi><mo>.</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi></mrow></math>
If the type of the arguments is clear from the context, we simply write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>α</mi><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></math> instead of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>T</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>D</mi></mfenced></math>.</simpara>
<simpara>Accessibility for types is only checked for types that manifest
themselves in the concrete syntax of the N4JS file. Types that do not
have to be written to concrete syntax may be used even if they are
generally not accessible. This is illustrated by the following example:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">export public class D {
    public takeC(): C { .. }
    public acceptC(c: C): void { .. }
}
/* private */ class C {}</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">var d: D = new D()
d.acceptC( d.takeC() )</programlisting>
<section xml:id="_accessibility_of_members">
<title>Accessibility of Members</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-84"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-84</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-556"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-556</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-707"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-707</link></simpara>
</sidebar>
<simpara>Accessibility at the member level is only applicable when the type
itself is accessible. If you cannot access the type, you cannot access
any of its members. Note that inherited members (from an interface or
class) become members of a class. For example, if <literal>B extends A</literal>, and if <literal>A</literal> is not
accessible to some client <literal>C</literal> but <literal>B</literal> is, then the members of <literal>A</literal> are indirectly
accessible to <literal>C</literal> in so far as they are accessed via <literal>B</literal>. This is true in
particular for interfaces, as their properties are possibly merged into
the consuming class (cf. <xref linkend="Implementation_of_members"/>).</simpara>
<simpara>The following member access modifiers are supported by N4JS:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">enum MemberAccessModifier:    private
                            | project
                            | protected
                            | public;</programlisting>
<simpara>The modifiers and may be annotated with . Thus, we can define the
following set of member access modifiers:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mi>A</mi><mi>M</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>=</mo><mfenced close="}" open="{"><mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mrow><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow><mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mrow><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mtext>
</mtext></mrow></mfenced></math>
<literal>protected@Internal</literal> and <literal>public@Internal</literal> are synthesized tags and were
introduced as shorthand notation for the <literal>@Internal</literal> annotation together with <literal>protected</literal> or <literal>public</literal> access modifiers.
The modifier is the default one and it can be omitted.
As with the type access modifiers, not all member access modifiers are
available in N4JS. Instead, they are synthesized from different
construct as shown in the next example.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">export @Internal public class C {

    private f0;                 // private
    f1;                         // project
    project f2;                 // project
    @Internal protected f3;     // protected@Internal
    protected f4;               // protected
    @Internal public f5;        // public@Internal
    public f6;                  // public

    private m0() {}             // private
    m1() {}                     // project
    project m2() {}             // project
    @Internal protected m3() {} // protected@Internal
    protected m4() {}           // protected
    @Internal public m5() {}    // public@Internal
    public  m6() {}             // public
}</programlisting>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mi>A</mi><mi>M</mi></math> does not define a totally ordered set. However, its
subset
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mi>A</mi><mi>M</mi><mo>\</mo><mfenced close="}" open="{"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></mfenced></math> is a totally
ordered set <footnote><simpara>That is, for application developers not providing a library or a public API available to other vendors, member access modifiers behave almost similar to modifiers known from Java.</simpara></footnote>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math></simpara>
<simpara><xref linkend="Member Access Controls"/> shows which members are accessible from where.</simpara>
<simpara>[[Member Access Controls]]</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Member Access Control</title>
<tgroup cols="7">
<colspec colname="col_1" colwidth="14.2857*"/>
<colspec colname="col_2" colwidth="14.2857*"/>
<colspec colname="col_3" colwidth="14.2857*"/>
<colspec colname="col_4" colwidth="14.2857*"/>
<colspec colname="col_5" colwidth="14.2857*"/>
<colspec colname="col_6" colwidth="14.2857*"/>
<colspec colname="col_7" colwidth="14.2858*"/>
<thead>
<row>
<entry align="left" valign="top">Access Modifier</entry>
<entry align="center" valign="top">Inside Module</entry>
<entry align="center" valign="top">Inside Project</entry>
<entry align="center" valign="top">Vendor</entry>
<entry align="center" valign="top">Vendor Subtypes</entry>
<entry align="center" valign="top">Other Projects</entry>
<entry align="center" valign="top">Everywhere</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>private</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>project</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>protected@Internal</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>protected</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public@Internal</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="type_and_member_accessibility_relation">Type and Member Accessibility Relation</link></simpara>
<simpara>We define the relation
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>=</mo><mspace width="1.0em"/><mi>:</mi><mspace width="1.0em"/><mi>T</mi><mi>A</mi><mi>M</mi><mo>×</mo><mi>M</mi><mi>A</mi><mi>M</mi></math> as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>=</mo><mspace width="1.0em"/><mi>:</mi><mspace width="1.0em"/><mi>T</mi><mi>A</mi><mi>M</mi><mo>×</mo><mi>M</mi><mi>A</mi><mi>M</mi><mi>a</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>s</mi><mi>:</mi><mo>=</mo><mspace width="1.0em"/><mi>:</mi><mi>:</mi><mo>=</mo><mfenced close="}" open="{"><mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mfenced></mrow><mfenced close=")" open="("><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mfenced><mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>@</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></mfenced></mrow><mfenced close=")" open="("><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></mfenced></mfenced></math>
We further define the relation <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>≥</mo><mi>:</mi><mi>T</mi><mi>A</mi><mi>M</mi><mo>×</mo><mi>M</mi><mi>A</mi><mi>M</mi></math> as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>t</mi><mi>a</mi><mi>m</mi><mo>≥</mo><mi>m</mi><mi>a</mi><mi>m</mi></mrow><mrow><mo>∃</mo><mi>m</mi><mi>a</mi><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>M</mi><mi>A</mi><mi>M</mi><mi>:</mi><mi>t</mi><mi>a</mi><mi>m</mi><mo>=</mo><mi>m</mi><mi>a</mi><msup><mi>m</mi><mi>'</mi></msup><mo>∧</mo><mi>m</mi><mi>a</mi><msup><mi>m</mi><mi>'</mi></msup><mo>≥</mo><mi>m</mi><mi>a</mi><mi>m</mi></mrow></math>
Less, greater then etc. are defined accordingly.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="member_accessibility">Member Accessibility</link></simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>m</mi></msub></math>]
The function
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msub><mi>α</mi><mi>m</mi></msub><mi>:</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>×</mo><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></math>
computes if a given reference can access the member declaration that it
references.</simpara>
<simpara>Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>l</mi><mi>p</mi><mi>h</mi><msub><mi>a</mi><mi>m</mi></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi></math> are different
functions. A reference can only bind to a declaration if it can access
the declaration. However, bind requires more condition to work (correct
metatypes, no shadowing etc).</simpara>
<simpara>Formally, we define <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>m</mi></msub></math> for a given reference
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi></math> and member declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> as
follows:
<footnote><simpara>See <xref linkend="N4_Specific_Classifiers"/> for definitions of metatype properties. Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>c</mi><mi>e</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>r</mi></math> always refers to a type declaration in the context of an expression as the receiver type of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi></math>. The declaring type of the member declaration is considered to be the receiver type of the member reference rather than the type that originally declares the member declaration.</simpara></footnote></simpara>
<simpara><footnote><simpara>Note, the Java-like access restriction for members of visibility <literal>protected</literal> or <literal>protected@Internal</literal> to code that is responsible for the implementation of that object. [<link linkend="Gosling14a">Gosling14a(p.S6.6.2, p.p.166)</link></simpara></footnote>]</simpara>
<literallayout class="monospaced"> math:[\[\begin{aligned}
&amp;\infer{\alpha_m(r, M)}{M.acc = \lenum{public}}\\
&amp;\infer{\alpha_m(r, M)}{r.vendor = M.vendor &amp; M.acc = \lenum{public@Internal}}\\
&amp;\infer{\alpha_m(r, M)}{r.owner \in r.receiver.super^* &amp; M.acc = \lenum{protected}}\\
&amp;\infer{\alpha_m(r, M)}{r.owner \in r.receiver.super^* &amp; r.vendor = M.vendor &amp; M.acc = \lenum{protected@Internal}}\\
&amp;\infer{\alpha_m(r, M)}{r.project = M.project &amp; M.acc = \lenum{project}}\\
&amp;\infer{\alpha_m(r, M)}{r.module = r.module &amp; M.acc =\lenum{private}}\\
\end{aligned}\]]</literallayout>
<simpara>If the type of the arguments is clear from the context, we simply write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>α</mi><mfenced close=")" open="("><mi>r</mi><mi>M</mi></mfenced></math> instead of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>α</mi><mi>m</mi></msub><mfenced close=")" open="("><mi>r</mi><mi>M</mi></mfenced></math>.</simpara>
<simpara>Although private members are accessible inside a module, it is not
possible to redefine (override etc.) these members (see <xref linkend="Redefinition_of_Members"/>).</simpara>
<simpara><emphasis role="strong">Req. IDE-4:</emphasis> <link linkend="IDE-4">Default Member Access Modifiers</link> (ver. 1)</simpara>
<simpara>The following constraints for member access modifiers must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The <emphasis>default modifier</emphasis> for members of user-declared classes is
<literal>project</literal>.</simpara>
</listitem>
<listitem>
<simpara>The <emphasis>default modifier</emphasis> for members of interfaces is the same as the
visibility of the interface itself, except for private interfaces. For
private interfaces, the default modifier for members is
<literal>project</literal>.</simpara>
</listitem>
<listitem>
<simpara>The modifier for enum literals is always
<literal>public</literal>.</simpara>
</listitem>
<listitem>
<simpara>Private members of a classifier are visible and accessible within a
module, i.e. you can access the private method of a class, for instance,
when the use of the class as receiver is in the same module where the
class has been defined. In case of inheritance, private members are
visible if the host (e.g. the class) is in the same module as the
provider (the extended class). This also means that abstract members of
a class are allowed to be defined private as they may be overridden
within a module.</simpara>
</listitem>
</orderedlist>
<programlisting language="n4js" linenumbering="unnumbered">export project interface I {
    project foo();
}

// This interface may be used publicly, but since the inherited method foo() is project visible only,
// it is not possible to implement that interface in other projects.
export public interface J extends I {
}

// Since the visibility of foo is set to public here, it is possible to implement this interface in other projects.
export public interface K extends I {
    @Override public foo();
}

// Since foo is private, it is not possible to subclass the class in other modules. Still, it
// is possible to use it in other projects.
// XPECT noerrors --&gt;
export public abstract class C {
    private abstract foo();

    public static C instance() {
        // return some default instance
        ...
    }
}</programlisting>
<simpara>As demonstrated in the following snippet, class can be used but not
subclassed in other modules:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">import C from "C"

// XPECT errors --&gt; "Cannot extend class C: cannot implement one or more non-accessible abstract members: method C.foo." at "C"
export public abstract class Sub extends C {
}

// XPECT noerrors --&gt;
var c: C = C.instance();</programlisting>
<simpara>Members of non-visible types are, in general, not visible for a client.
Members may become visible, however, if they are accessed via a visible
type which inherits these members. The following examples demonstrate
two different scenarios:</simpara>
<simpara>[[ex:Declaring type vs receiver type]]
It is especially noteworthy that the declaring type of a member is
generally not considered for the accessibility of that member but only
the receiver type is relevant.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class Base {
    public m(b: Base): void {}
}
export public class ApiType extends Base {
}</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">import * as N from "Base";

var t = new N.ApiType();
// member can be accessed although type Base is not exported:
t.m(t);</programlisting>
<simpara>The property access to the member <literal>m</literal> is valid because it fulfills the
constraints for accessibility. The receiver of the property access is <literal>t</literal> of
type <literal>ApiType</literal>. That type is exported and accessible. Therefore, the inherited
member <literal>m</literal> is also considered valid since it is also defined <literal>public</literal>.</simpara>
<simpara>This rule allows for defining a common functionality in module or
project visible types that becomes accessible via exported, visible
subtypes.</simpara>
<simpara>The following example demonstrates the behavior when
non-visible types are used as return types. In this case, all the
members of the non-visible types are not accessible, even if they have a
public access modifier.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    foo(): void{}
}
export public class C {
    public getHidden(): A { return new A() };
}</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">import * as Nfrom "A"

class Client {
    f(): void {
        var c = new N.C();
        // XPECT noerrors --&gt; Getting an instance the hidden type is possible
        var hidden = c.getHidden();
        // XPECT errors --&gt; "The method foo is not visible." at "foo"
        hidden.foo();
    }
}</programlisting>
</section>
<section xml:id="_valid_names">
<title>Valid Names</title>
<simpara>For identifier and property names, the same constraints as in ECMAScript
[<link linkend="ECMA11a">ECMA11a(p.S7.6)</link>]
[<link linkend="ECMA11a">ECMA11a(p.S7.6.1.2)</link>]
[<link linkend="ECMA11a">ECMA11a(p.S11.6)</link>] are applied.</simpara>
<simpara>Identifier names in N4JS are defined similar to [<link linkend="ECMA11a">ECMA11a(p.S11.6)</link>], making it possible to even use reserved words (keywords etc.). For some element types, errors
or warnings are issued in order to prevent problems when using these
names.</simpara>
<simpara><emphasis role="strong">Req. IDE-5:</emphasis> <link linkend="IDE-5">Forbidden Identifier Names in N4JS</link> (ver. 1)</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/207"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-207</link></simpara>
</sidebar>
<simpara>In N4JS mode, errors are generated in the following cases:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A name of a type equals</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>an access modifier</simpara>
</listitem>
<listitem>
<simpara><literal>set</literal> or <literal>get</literal></simpara>
</listitem>
<listitem>
<simpara>an ECMAScript keyword</simpara>
</listitem>
<listitem>
<simpara>a boolean literal</simpara>
</listitem>
<listitem>
<simpara>the name of a base type</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>The name of a function or function expression equals (but not the
method)</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>an ECMAScript keyword</simpara>
</listitem>
<listitem>
<simpara>a reserved future ECMAScript word</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-6:</emphasis> <link linkend="IDE-6">Undesired Identifier Names in N4JS</link> (ver. 1)</simpara>
<simpara>In N4JS mode, warnings are generated in the following cases:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The name of a member (of a non external type)</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>equals the name of a base type <footnote><simpara><literal>string, boolean, number, any, null</literal></simpara></footnote> but the type of the variable is different from that type</simpara>
</listitem>
<listitem>
<simpara>is not static nor const but starts with an upper case letter</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>The name of a non-external n4 types (class, interface, enum) starts
with a lower case letter</simpara>
</listitem>
<listitem>
<simpara>The name of a variable (incl. formal parameter or catch variable and
fields)</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>equals an N4JS keyword</simpara>
</listitem>
<listitem>
<simpara>equals the name of a base type but the type of the variable is
different from that type</simpara>
</listitem>
<listitem>
<simpara>is not const but starts with an upper case letter</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="_qualified_names">
<title>Qualified Names</title>
<simpara>In N4JS source code, types can only be referenced using their simple
name. There is no such thing as a fully-qualified type name in N4JS or
ECMAScript. Types are uniquely identified by their simple name, maybe
together with an import and the module specifier given there. Clashes
between simple names of imported type and locally declared types can be
resolved by importing the type under an alias.</simpara>
<simpara>In some cases, however, we need to define references to types or even
members. For example, if we want to reference certain members in JSDoc
comments or for unambiguous error messages. For this reason, we formally
define qualified names even if they cannot occur in source code.</simpara>
<simpara><link linkend="tab:typenames">Type Names</link> shows the different names of a given type <literal>C</literal>, defined in a module
<literal>M.n4js</literal>, defined in a package <literal>p</literal> of a project <literal>MyProject</literal>.</simpara>
<table xml:id="tab:typenames" frame="all" rowsep="1" colsep="1">
<title>Different forms of module and type specifiers.</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="center" valign="top">Example</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Simple Type Name</simpara></entry>
<entry align="center" valign="top"><simpara><literal>C</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>(Plain) Module Specifier</simpara></entry>
<entry align="center" valign="top"><simpara><literal>p/M</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Complete Module Specifier</simpara></entry>
<entry align="center" valign="top"><simpara><literal>MyProject/p/M</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Complete Type Specifier</simpara></entry>
<entry align="center" valign="top"><simpara><literal>MyProject/p/M.C</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Simple type names are used throughout N4JS code in order to refer to
types. The different forms of module specifiers are only used in import
declarations in the string following the keyword.</simpara>
</section>
<section xml:id="_name_duplicates">
<title>Name Duplicates</title>
<simpara>There might be cases where two (or more) scopes created by different
entities with the same (simple) name overlap. Those situations can be
referred to as shadowing, hiding, or obscuring. While they are not the
same, many of those cases are not allowed in N4JS. For simplicity we
refer to them all as shadowing or duplication (see below). Rule of thumb
is that N4JS allows everything that is allowed in JavaScript StrictMode.</simpara>
<section xml:id="_lexical_environment">
<title>Lexical Environment</title>
<simpara>N4JS handles scopes similar to ECMAScript, so that function scope is
applied to variables declared with <literal>var</literal> (and parameters), and block scope for
variables is declared with <literal>let</literal> or <literal>const</literal>. In general, ECMAScript defines <emphasis>Lexical
Environments</emphasis> as a specification type used to define the association of
Identifiers to specific variables and functions based upon the lexical
nesting structure of ECMAScript code. [<link linkend="ECMA11a">ECMA11a(p.10.2)</link>].</simpara>
<variablelist>
<varlistentry>
<term>Elements that introduce lexical environments: </term>
<listitem>
<simpara><literal>FunctionDefinition</literal>, <literal>VariableDeclaration</literal>, <literal>CatchBlock</literal>, <literal>WithStatement</literal>,
<literal>ImportDeclaration</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>N4JS specific declarations: </term>
<listitem>
<simpara><literal>N4ClassDeclaration</literal>, <literal>N4InterfaceDeclaration</literal>,
<literal>N4EnumDeclaration</literal>, <literal>N4MethodDeclaration</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Additionally, a built-in lexical environment that defines global scope
exists for every <literal>Script</literal>.</simpara>
<simpara>Since N4JS is extended (and a bit more strict) JS strict mode, <emphasis>Object
environment record</emphasis>s created by <literal>WithStatement</literal> are not taken into account when
resolving duplicates. This applies to both N4JS mode and JS strict mode.
In unrestricted JS the <literal>WithStatement</literal> is allowed but duplicates are not validated.</simpara>
<note>
<simpara>In case of names introduced by <literal>ImportDeclaration</literal>s only <literal>NamedImportSpecifiers</literal>s are taken into account (their import name or its alias if available). <literal>WildcardImportSpecifiers</literal>s are not taken into
account. Potential optimizations by compiler or user annotation are also
not currently taken into account during analysis.</simpara>
</note>
</section>
<section xml:id="_duplicates_and_shadowing">
<title>Duplicates and Shadowing</title>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="shadowing_overriding_duplicates">Shadowing Overriding Duplicates</link></simpara>
<simpara>Two elements with the same name declared in the same lexical environment
(cf. [<link linkend="ECMA11a">ECMA11a(p.S10.2.2.1)</link>] are called <emphasis>duplicates</emphasis>.
An element defined in an environment <emphasis>shadows</emphasis> all elements with the same name in outer environments.</simpara>
<simpara>In class hierarchies, a member with the same name as a member defined in
a supertype is said to override the latter. Overriding is discussed in .</simpara>
<simpara>For the following constraints, we make the following assumptions:</simpara>
<itemizedlist>
<listitem>
<simpara>Names of function expressions or declarations are handles similar to
locally declared elements in the function. Function declarations are
additionally declaring a name in their outer scope.</simpara>
</listitem>
<listitem>
<simpara>The implicit formal parameter <literal>arguments</literal> is treated similar to declared formal
parameters.</simpara>
</listitem>
<listitem>
<simpara>Formal parameters are defined in the lexical environment of a
function, that is, they are defined in the same lexical environment as
local <literal>var</literal>-variables or other declarations in that function.</simpara>
</listitem>
<listitem>
<simpara>The "global" environment contains objects globally defined by the
execution environment.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-7:</emphasis> <link linkend="IDE-7">Forbidden Duplicates</link> (ver. 1)</simpara>
<simpara>There must be no two elements defined in the same lexical environment with the same name,
that is, there must be no duplicates.</simpara>
<simpara><emphasis role="strong">Req. IDE-8:</emphasis> <link linkend="IDE-8">Forbidden Shadowing</link> (ver. 1)</simpara>
<simpara>In general, shadowing is allowed in N4JS. But it is not allowed in the following cases:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>No element defined in the standard global scope must be shadowed.</simpara>
</listitem>
<listitem>
<simpara>There must be no function shadowing another function.</simpara>
</listitem>
<listitem>
<simpara>Elements defined in catch blocks must not shadow elements defined
all parent non-catch-block environments.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-9:</emphasis> <link linkend="IDE-9">Forbidden Names</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In the script environment, it is not allowed to use the name
’arguments’.
<footnote><simpara>This conflicts with the implicit parameter arguments introduced by the transpiler when wrapping the script/module into a definition function.</simpara></footnote></simpara>
</listitem>
</orderedlist>
<simpara><xref linkend="fig:forbidden_shadowing"/> shows nested lexical environments with named elements declared inside (all named <literal>x</literal> here), the forbidden cases are marked with arrows (the
numbers at the left side refer to the numbers in
<xref linkend="req:Forbidden_Shadowing"/>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="fig/shadowing.png"/>
</imageobject>
<textobject><phrase>Forbidden shadowing</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Rationale:</simpara>
<itemizedlist>
<listitem>
<simpara>We expect only few named nested functions. Since this is expected to
be a rare case, no shadowing should occur there as this is maybe not
expected by the programmer.</simpara>
</listitem>
<listitem>
<simpara>It is typical that nested environments define local variables. In
particular helper variables (such as <literal>i: number i</literal> or <literal>s: string</literal> ) are expected to be used quite
often. Since this is a typical case, we allow shadowing for local
variables.</simpara>
</listitem>
<listitem>
<simpara>Function declarations may shadow type declarations. However, both
entities are to be handled completely differently, so that an error will
occur if the shadowing is ignored by the programmer anyway.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_types">
<title>Types</title>
<section xml:id="_overview">
<title>Overview</title>
<simpara>N4JS is essentially ECMAScript with the inclusion of
types. In the following sections we will describe how types are defined
and used in N4JS.</simpara>
<simpara>Besides standard JavaScript types, the following metatypes are
introduced:</simpara>
<itemizedlist>
<listitem>
<simpara>Classifiers, that is class or interface (see )</simpara>
</listitem>
<listitem>
<simpara>Enum</simpara>
</listitem>
</itemizedlist>
<simpara>Classifiers, methods and functions may be declared generic.</simpara>
<simpara>Types are related to each other by the subtype relation.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="subtype_relation">Subtype Relation</link></simpara>
<simpara>We use subtype<math xmlns="http://www.w3.org/1998/Math/MathML"/>
for the general subtype relation or type conformance. In nominal typing,
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>S</mi></math> means that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is a (transitive)
supertype of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>. Generally in structural typing, this means
that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> conforms to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>. <math xmlns="http://www.w3.org/1998/Math/MathML"/>
is defined transitive reflexive by default. We write <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>t</mi><mi>;</mi></math> to
refer to the transitive non-reflexive relation, that is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>S</mi><mi>T</mi><mi>S</mi><mo>∧</mo><mi>T</mi><mo>≠</mo><mi>S</mi></math></simpara>
<simpara>Whether nominal or structural typing is used depends on the declaration
of the type or the reference. This is explained further in .</simpara>
<simpara>For convenience reasons, we sometimes revert the operator, that is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>S</mi><mi>S</mi><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>T</mi></math> We write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>S</mi></math> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is not type conforming
to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>. (cf. [<link linkend="Gosling12a">Gosling12a(p.S4.10)</link>])</simpara>
<simpara>Join and meet are defined as follows:</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="join_and_meet">Join and Meet</link></simpara>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> is called a <emphasis>join</emphasis> (or least common supertype, ) of a pair of types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>
and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, written <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>T</mi><mo>=</mo><mi>J</mi></math>, if<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>S</mi><mi>J</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mi>J</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>L</mi><mi>:</mi><mfenced close=")" open="("><mrow><mi>S</mi><mi>L</mi></mrow></mfenced><mo>∧</mo><mfenced close=")" open="("><mrow><mi>T</mi><mi>L</mi></mrow></mfenced><mi>J</mi><mi>L</mi></math>
Similarly, we say that a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is a <emphasis>meet</emphasis> (or greatest
common subtype, ) of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, written
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>T</mi><mo>=</mo><mi>M</mi></math>, if<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>M</mi><mi>S</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>M</mi><mi>T</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>L</mi><mi>:</mi><mfenced close=")" open="("><mrow><mi>L</mi><mi>S</mi></mrow></mfenced><mo>∧</mo><mfenced close=")" open="("><mrow><mi>L</mi><mi>T</mi></mrow></mfenced><mi>L</mi><mi>M</mi></math></simpara>
<simpara>Note that this declarative definition needs to be specified in detail
for special cases, such as union and intersection types. Usually, the
union type of two types is also the join.</simpara>
<simpara><xref linkend="cdPredefinedTypesHierarchy"/> summarizes all predefined types, that is primitive and built-in
ECMAScript and N4JS types. Specific rules for the subtype relation are
defined in the following sections. This type hierarchy shows <literal>any</literal> and <literal>undefined</literal> as the
top and bottom type (cf. [<link linkend="Pierce02a">Pierce02a(p.15.4)</link>]) We define these types here explicitly:</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="top_and_bottom_type">Top and Bottom Type</link></simpara>
<simpara>We call <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>o</mi><mi>p</mi></math>
the top type, if for all types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the relation
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>T</mi><mi>o</mi><mi>p</mi></math> is true. We call <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>o</mi><mi>t</mi></math> the
bottom type, if for all types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the relation
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>o</mi><mi>t</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi></math> is true. In N4JS, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>o</mi><mi>p</mi><mo>=</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>a</mi><mi>n</mi><mi>y</mi><mi>}</mi></math>, the
bottom type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>o</mi><mi>t</mi><mo>=</mo><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>}</mi></math>.</simpara>
<simpara><literal>null</literal> is almost similar to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>o</mi><mi>t</mi></math>, except that it is not a subtype
of <literal>undefined</literal>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="fig/cdPredefinedTypesHierarchy.png"/>
</imageobject>
<textobject><phrase>cdPredefinedTypesHierarchy</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>For every primitive type there is a corresponding built-in type as
defined in [<link linkend="ECMA11a">ECMA11a</link>], e.g. and . There is no inheritance supported for
primitive types and built-in types – these types are final.</simpara>
<simpara>Although the diagram shows inheritance between <literal>void</literal> and <literal>undefined</literal>, this relationship is only semantic: <literal>void</literal> is a refinement of <literal>undefined</literal> from a type system viewpoint. The
same applies to the relation of <literal>Object</literal> as well as the subtypes shown for <literal>String</literal> and <literal>String</literal>.</simpara>
<simpara>[[ex:Type Examples, Class Hierarchy]]
In the following examples, we assume the following classes to be given:</simpara>
<screen>// C &lt;: B &lt;: A
class A{}
class B extends A{}
class C extends B{}

// independent types X, Y, and Z
class X{} class Y{} class Z{}

// interfaces I, I1 &lt;: I, I2 &lt;: I, I3
interface I
interface I1 extends I {}
interface I2 extends I {}
interface I3 {}

// class implementing the interfaces
class H1 implements I1{}
class H12 implements I1,I2{}
class H23 implements I2,I3{}

// a generic class with getter (contra-variance) and setter (co-variance)
class G&lt;T&gt; {
    get(). T;
    set(x: T): void;
}</screen>
</section>
<section xml:id="_type_expressions">
<title>Type Expressions</title>
<simpara>In contrast to ECMAScript, N4JS defines static
types. Aside from simple type references, type expressions may be used
to specify the type of variables.</simpara>
<section xml:id="_syntax">
<title>Syntax</title>
<simpara>summarizes the type expression grammar. Depending on the context, not
all constructs are allowed. For example, the variadic modifier is only
allowed for function parameters.</simpara>
<simpara>References to user-declared types are expressed via <literal>ParameterizedTypeRef</literal>. This is also true
for non-generic types, as the type arguments are optional.
See <xref linkend="_parameterized_types"/> for details on that reference.</simpara>
<simpara>For qualified names and type reference names, see</simpara>
<simpara>The type expressions are usually added to parameter, field, or variable
declarations as a suffix, separated with colon (’:’). The same is true
for function, method, getter or setter return types. Exceptions in the
cases of object literals or destructuring are explained later on.</simpara>
<example>
<title>Type_Annotation_Syntax</title>
<simpara>The following two listings show the very same code and type annotations are provided on
the left hand side. For simplicity, is always used as type
expression.
<footnote><simpara>In the N4JS IDE, type annotations are highlighted differently than ordinary code.</simpara></footnote></simpara>
<screen>var x: string;
var s: string = "Hello";
function f(p: string): string {
    return p;
}
class C {
    f: string;
    s: string = "Hello";
    m(p: string): string {
        return p;
    }
    get x(): string {
        return this.f;
    }
    set x(v: string) {
        this.f = v;
    }
}</screen>
<screen>var x;
var s = "Hello";
function f(p) {
    return p;
}
class C {
    f;
    s = "Hello";
    m(p) {
        return p;
    }
    get x() {
        return this.f;
    }
    set x(v) {
        this.f = v;
    }
}</screen>
<simpara>The code on the right hand side is almost all valid ECMAScript 2015,
with the exception of field declarations in the class. These are moved
into the constructor by the N4JS transpiler.</simpara>
</example>
</section>
<section xml:id="_properties">
<title>Properties</title>
<simpara>Besides the properties indirectly defined by the grammar, the following
pseudo properties are used for type expressions: Properties of :</simpara>
<simpara>If true, variable of that type is variadic. This is only allowed for
parameters. Default value: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></math>.</simpara>
<simpara>If true, variable of that type is optional. This is only allowed for
parameters and return types. This actually means that the type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> actually is a union type of . Default value:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></math>.</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>p</mi><mi>t</mi><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>∨</mo><mi>o</mi><mi>p</mi><mi>t</mi></math>, reflect the facts that a variadic
parameter is also optional (as its cardinality is <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>[</mo><mn>0.</mn><mo>.</mo><mi>n</mi></mrow></math>).$]</simpara>
<simpara>Pseudo property referencing the variable declaration (or expression)
which <literal>owns</literal> the type expression.</simpara>
</section>
<section xml:id="_semantics">
<title>Semantics</title>
<simpara>The ECMAScript types <emphasis>undefined</emphasis> and <emphasis>null</emphasis> are also supported. These
types cannot be referenced directly, however. Note that <literal>void</literal> and <emphasis>undefined</emphasis>
are almost similar. Actually, the inferred type of a types element with
declared type of <literal>void</literal> will be <emphasis>undefined</emphasis>. The difference between void and
undefined is that an element of type void can never have another type,
while an element of type undefined may be assigned a value later on and
thus become a different type. <literal>void</literal> is only used for function and method return types.</simpara>
<simpara>Note that not any type reference is allowed in any context. Variables or
formal parameters must not be declared <literal>void</literal> or union types must not be
declared dynamic, for example. These constraints are explained in the
following section.</simpara>
<simpara>The types mentioned above are described in detail in the next sections.
They are hierarchically defined and the following list displays all
possible types. Note that all types are actually references to types. A
type variable can only be used in some cases, e.g., the variable has to
be visible in the given scope.</simpara>
<bridgehead xml:id="_ecmascript_types" renderas="sect4">ECMAScript Types</bridgehead>
<variablelist>
<varlistentry>
<term>Predefined Type</term>
<listitem>
<simpara>Predefined types, such as String, Number, or Object; and .</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Array Type</term>
<listitem>
<simpara><xref linkend="_array_object_type"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Function Type</term>
<listitem>
<simpara>Described in <xref linkend="../06_funtions/Functions.adoc"/>, <link xl:href="../06_funtions/Functions.xml#function_type">../06_funtions/Functions.xml</link>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Any Type</term>
<listitem>
<simpara><xref linkend="_any_type"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<bridgehead xml:id="_n4types" renderas="sect4">N4Types</bridgehead>
<variablelist>
<varlistentry>
<term>Declared Type</term>
<listitem>
<simpara>(Unparameterized) Reference to defined class <xref linkend="_classes"/> or enum <xref linkend="_enums"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Parameterized Type</term>
<listitem>
<simpara>Parameterized reference to defined generic class or interface; <xref linkend="_parameterized_types"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>This Type</term>
<listitem>
<simpara><xref linkend="_this_type"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Constructor and Type Type</term>
<listitem>
<simpara>Class type, that is the meta class of a defined class or interface, <xref linkend="_constructor_and_classifier_type"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Union Types</term>
<listitem>
<simpara>Union of types, <xref linkend="_union_type"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Type Variable</term>
<listitem>
<simpara>Type variable, <xref linkend="_type_variables"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Type expressions are used to explicitly declare the type of a variable,
parameter and return type of a function or method, fields (and object
literal properties).</simpara>
</section>
</section>
<section xml:id="_type_inference">
<title>Type Inference</title>
<simpara>If no type is explicitly declared, it is inferred based on the given
context, as in the expected type of expressions or function parameters,
for example. The type inference rules are described in the remainder of
this specification.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="default_type">Default Type</link></simpara>
<simpara>In N4JS mode , if no type is explicitly
specified and if no type information can be inferred, <literal>any</literal> is assumed as the default type.</simpara>
<simpara>In JS mode, the default type is <literal>any+</literal>.</simpara>
<simpara>Once the type of a variable is either declared or inferred, it is not
supposed to be changed.</simpara>
<simpara>[Variable type is not changeable] Given the following example.</simpara>
<screen>var x: any;
x = 42;
x-5; // error: any is not a subtype of number.</screen>
<simpara>Type of <literal>x</literal> is declared as <literal>any</literal> in line 1. Although a number is assigned to <literal>x</literal> in line 2, the type of <literal>x</literal> is not changed. Thus an error is issued in line 3 because the type of <literal>x</literal> is still <literal>any</literal>.</simpara>
<simpara>At the moment, N4JS does not support type guards or, more general, effect system (cf. [<link linkend="Nielson99a">Nielson99a</link>]).</simpara>
</section>
<section xml:id="_generic_and_parameterized_types">
<title>Generic and Parameterized Types</title>
<simpara>Some notes on terminology:</simpara>
<variablelist>
<varlistentry>
<term>Type Parameter vs. Type Argument</term>
<listitem>
<simpara>A type parameter is a declaration containing type variables. A type
argument is a binding of a type parameter to a concrete type or to
another type parameter. Binding to another type parameter can further
restrict the bounds of the type parameter.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>This is similar to function declarations (with formal parameters) and
function calls (with arguments).</simpara>
<section xml:id="_generic_types">
<title>Generic Types</title>
<simpara>A class declaration or interface declaration with type parameters
declares a generic type. A generic type declares a family of types. The
type parameters have to be bound with type arguments when referencing a
generic type.</simpara>
</section>
<section xml:id="_type_variables">
<title>Type Variables</title>
<simpara>A type variable is an identifier used as a type in the context of a
generic class definition, generic interface definition or generic method
definition. A type variable is declared in a type parameter as follows.</simpara>
<bridgehead xml:id="_syntax_2" renderas="sect4">Syntax</bridgehead>
<screen>TypeVariable:
    name=IDENTIFIER
        ('extends' declaredUpperBounds+=ParameterizedTypeRef
            ('&amp;' declaredUpperBounds+=ParameterizedTypeRef)*
        )?
;</screen>
<simpara>[Type Variable as Upper Bound][ex:Type Variable as Upper Bound] Note
that type variables are also interpreted as types. Thus, the upper bound
of a type variable may be a type variable as shown in the following
snippet:</simpara>
<screen>class G&lt;T&gt; {
    &lt;X extends T&gt; foo(x: X): void { }
}</screen>
<section xml:id="type-variables-properties">
<title>Properties</title>
<simpara>A type parameter defines a type variable, which type may be constrained
with an upper bound.</simpara>
<simpara>Properties of <literal>TypeVariable</literal>:</simpara>
<simpara>Type variable, as type variable contains only an identifier, we use type
parameter instead of type variable (and vice versa) if the correct
element is clear from the context.</simpara>
<simpara>Upper bounds of concrete type bound to the type variable, i.e. a super
class.</simpara>
</section>
<section xml:id="type-variables-semantics">
<title>Semantics</title>
<simpara><emphasis role="strong">Req. IDE-10:</emphasis> <link linkend="IDE-10">Type Variable Semantics</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Enum is not a valid metatype in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>Wildcards are not valid in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>Primitives are not valid in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>Type variables are valid in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></math>. </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/830"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-830</link></simpara>
</sidebar>
<simpara>A type variable can be used in any type expression contained in the
generic class, generic interface, or generic function / method
definition.</simpara>
<informalexample xml:id="ex:F_bounded_quantification">
<simpara>Using a type variable in the upper bound reference may lead to recursive definition.</simpara>
<screen>class Chain&lt;C extends Chain&lt;C, T&gt;, T&gt; {
    next() : C { return null; }
    m() : T { return null; }
}</screen>
</informalexample>
</section>
<section xml:id="type-variables-type-inference">
<title>Type Inference</title>
<simpara>In many cases, type variables are not directly used in subtype relations
as they are substituted with the concrete types specified by some type
arguments. In these cases, the ordinary subtype rules apply without
change. However, there are other cases in which type variables cannot be
substituted:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Inside a generic declaration.</simpara>
</listitem>
<listitem>
<simpara>If the generic type is used as raw type.</simpara>
</listitem>
<listitem>
<simpara>If a generic function / method is called without type arguments and
without the possibility to infer the type from the context.</simpara>
</listitem>
</orderedlist>
<simpara>In these cases, an unbound type variable may appear on one or both sides
of a subtype relation and we require subtype rules that take type
variables into account.</simpara>
<simpara>It is important to note that while type variables may have a declared
upper bound, they cannot be simply replaced with that upper bound and
treated like existential types. The following example illustrates this:</simpara>
<simpara>[Type variables vs. existential
types][ex:TypeVariablesVsExistentialTypes]</simpara>
<screen>class A {}
class B extends A {}
class C extends B {}

class G&lt;T&gt; {}

class X&lt;T extends A, S extends B&gt; {

    m(): void {

        // plain type variables:
        var t: T;
        var s: S;

        t = s;  // ERROR: "S is not a subtype of T." at "s"

        // existential types:
        var ga: G&lt;? extends A&gt;;
        var gb: G&lt;? extends B&gt;;

        ga = gb;  // ok!
    }
}</screen>
<simpara>Even though the upper bound of is a subtype of ’s upper bound (since
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>), we cannot infer that is a subtype of (line 15),
because there are valid concrete bindings for which this would not be
true: for example, if were bound to and to .</simpara>
<simpara>This differs from existential types (see and and line 21):
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi></math> ).</simpara>
<simpara>We thus have to define subtype rules for type variables, taking the
declared upper bound into account. If we have a subtype relation in
which a type variable appears on one or both sides, we distinguish the
following cases:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If we have type variables on both sides: the result is true if and
only if there is the identical type variable on both sides.</simpara>
</listitem>
<listitem>
<simpara>If we have a type variable on the left side and no type variable on
the right side: the result is true if and only if the type variable on
the left has one or more declared upper bounds.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close=")" open="("><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mrow></mfenced><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></math><?asciidoc-br?>
This is the case for
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mfenced close=")" open="("><mrow><mi>T</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>B</mi></mrow></mfenced><mi>}</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>A</mi><mi>}</mi></math> in which T is an
unbound type variable and A, B two classes with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>In all other cases the result is false.<?asciidoc-br?>
This includes cases such as<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>B</mi><mi>}</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mfenced close=")" open="("><mrow><mi>T</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>A</mi></mrow></mfenced><mi>}</mi></math> which is always
false, even if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math> or<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mfenced close=")" open="("><mrow><mi>T</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>A</mi></mrow></mfenced><mi>}</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mfenced close=")" open="("><mrow><mi>S</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>B</mi></mrow></mfenced><mi>}</mi></math> which
is always false, even if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>=</mo><mi>B</mi></math>.</simpara>
</listitem>
</orderedlist>
<simpara>We thus obtain the following defintion:</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="subtype_relation_for_type_variables">Subtype Relation for Type Variables</link></simpara>
<simpara>For two types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mo>,</mo><mi>S</mi></math> of which at least one is a type variable, we define</simpara>
<itemizedlist>
<listitem>
<simpara>if both <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> are type variables:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow><mrow><mi>T</mi><mo>=</mo><mi>S</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is a type variable and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is not:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow><mrow><mrow><mi>T</mi><mo>.</mo><mstyle mathvariant="italic"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mstyle><mo>.</mo><mstyle mathvariant="italic"><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mstyle><mi>g</mi><mi>t</mi><mi>;</mi><mn>0</mn></mrow><mrow><mi> </mi><mo>∧</mo><mi> </mi><mo>∀</mo><mi>t</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mstyle mathvariant="italic"><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>U</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mstyle><mi>:</mi><mi>t</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow></mrow></math></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_parameterized_types">
<title>Parameterized Types</title>
<simpara>References to generic types (cf. <xref linkend="_classes"/>) can be parameterized with type
arguments. A type reference with type arguments is called parameterized
type.</simpara>
<section xml:id="parameterized-types-syntax">
<title>Syntax</title>
<screen>ParameterizedTypeRef:
    ParameterizedTypeRefNominal | ParameterizedTypeRefStructural;

ParameterizedTypeRefNominal:
    declaredType=[Type|TypeReferenceName]
    (=&gt; '&lt;' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '&gt;')?;

ParameterizedTypeRefStructural:
    definedTypingStrategy=TypingStrategyUseSiteOperator
    declaredType=[Type|TypeReferenceName]
    (=&gt;'&lt;' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '&gt;')?
    ('with' TStructMemberList)?;

TypeArgument returns TypeArgument:
    Wildcard | TypeRef;

Wildcard returns Wildcard:
    '?'
    (
          'extends' declaredUpperBound=TypeRef
        | 'super' declaredLowerBound=TypeRef
    )?
;</screen>
</section>
<section xml:id="parameterized-types-properties">
<title>Properties</title>
<simpara>Properties of parameterized type references (nominal or structural):</simpara>
<variablelist>
<varlistentry>
<term><literal>declaredType</literal> </term>
<listitem>
<simpara>Referenced type by type reference name (either the simple name or a
qualified name, e.g. in case of namespace imports).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typeArgs</literal> </term>
<listitem>
<simpara>The type arguments, may be empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>definedTypingStrategy</literal> </term>
<listitem>
<simpara>Typing strategy, by default nominal, see for details</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>structuralMembers</literal> </term>
<listitem>
<simpara>in case of structural typing, reference can add additional members to
the structural type, see <xref linkend="Structural Typing"/> for details.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><emphasis role="strong">Pseudo Properties:</emphasis></simpara>
<variablelist>
<varlistentry>
<term><literal>importSpec</literal> </term>
<listitem>
<simpara>The <literal>ImportSpecifier</literal>, may be null if this is a local type reference. Note that this may
be a <literal>NamedImportSpecifier</literal>. See <xref linkend="Import Statement"/> for details for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>moduleWideName</literal> </term>
<listitem>
<simpara>Returns simple name of type, that is either the simple name as declared,
or the alias in case of an imported type with alias in the import
statement.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="parameterized-types-semantics">
<title>Semantics</title>
<simpara>The main purpose of a parameterized type reference is to simply refer to
the declared type. If the declared type is a generic type, the
parameterized type references defines a <emphasis>substitution</emphasis> of the type
parameters of a generic type with actual type arguments. A type argument
can either be a concrete type, a wildcard or a type variable declared in
the surrounding generic declaration. The actual type arguments must
conform to the type parameters so that code referencing the generic type
parameters is still valid.</simpara>
<simpara><emphasis role="strong">Req. IDE-11:</emphasis> <link linkend="IDE-11">Parameterized Types</link> (ver. 1)</simpara>
<simpara>For a given parameterized
type reference <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> with<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mo>=</mo><mi>R</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>The actual type arguments must conform to the type parameters, that
is:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>|</mo><mi>G</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mo>|</mo><mi>R</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mn>0</mn><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mo>|</mo><mi>R</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mi>:</mi><mrow><mi>R</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>R</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><mtext>
</mtext></math></simpara>
</listitem>
</itemizedlist>
<simpara>We define type erasure similar to Java [<link linkend="Gosling12a">Gosling12a(p.S4.6)</link>] as a "mapping from types (possibly including parameterized types and type variables) to types (that are never parameterized types or type variables)". We write $T°$ for the erasure of type $T$.\ <footnote><simpara>The notation $|T|$ used in [<link linkend="Gosling12a">Gosling12a</link></simpara></footnote> conflicts with the notation of cardinality of sets, which we use in case of union or intersection types for types as well. The notation used here is inspired by [<link linkend="Crary02a">Crary02a</link>], in which  a mapping is defined between a typed language $\lambda$ to an untyped language $\lambda°$.]</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="parameterized_type">Parameterized Type</link></simpara>
<simpara>A parameterized type reference <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> defines a parameterized type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, in which all type parameters of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>p</mi><mi>e</mi></math> are substituted with the actual values of
the type arguments. We call the type <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>T</mi><mn>0</mn></msup></math>, in which all
type parameters of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> are ignored, the <emphasis>raw
type</emphasis> or <emphasis>erasure</emphasis> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
<simpara>We define for types in general:</simpara>
<itemizedlist>
<listitem>
<simpara>The erasure <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mi>x</mi></math> of a parameterized type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math> is simply <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>The erasure of a type variable is the erasure of its upper bound.</simpara>
</listitem>
<listitem>
<simpara>The erasure of any other type is the type itself.</simpara>
</listitem>
</itemizedlist>
<simpara>This concept of type erasure is purely defined for specification
purposes. It is not to be confused with the <literal>real</literal> type erasure which
takes place at runtime, in which almost no types (except primitive
types) are available.</simpara>
<simpara>That is, the type reference in <literal>var G&lt;string&gt; gs;</literal>
actually defines a type <literal>G&lt;string&gt;</literal>, so that
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>g</mi><mi>s</mi></mrow><mo>=</mo><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math>. It may reference a type
defined by a class declaration <literal>class G&lt;T&gt;</literal>.
It is important that the type <literal>G&lt;string&gt;</literal> is different from <literal>G&lt;T&gt;</literal>.</simpara>
<simpara>If a parameterized type reference <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> has no type arguments,
then it is similar to the declared type. That is,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo>=</mo><mi>T</mi><mo>=</mo><mi>R</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> if (and only if)
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>R</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>0</mn></math>.</simpara>
<simpara>In the following, we do not distinguish between parameter type reference
and parameter type – they are both two sides of the same coin.</simpara>
<example>
<title>Raw Types</title>
<simpara>In Java, due to backward compatibility
(generics were only introduced in Java 1.5), it is possible to use raw
types in which we refer to a generic type without specifying any type
arguments. This is not possible in N4JS, as there is no unique
interpretation of the type in that case as shown in the following
example. Given the following declarations:</simpara>
<screen>class A{}
class B extends A{}
class G&lt;T extends A&gt; { t: T; }
var g: G;</screen>
</example>
<simpara>In this case, variable <literal>g</literal> refers to the <emphasis>raw type</emphasis> <literal>G</literal>. This is forbidden in
N4JS, because two interpretations are possible:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>g</literal> is of type <literal>G&lt;? extends A&gt;</literal></simpara>
</listitem>
<listitem>
<simpara><literal>g</literal> is of type <literal>G&lt;A&gt;</literal></simpara>
</listitem>
</orderedlist>
<simpara>In the first case, an existential type would be created, and <literal>g.t = new A();</literal> must fail.</simpara>
<simpara>In the second case, <literal>g = new G&lt;B&gt;();</literal> must fail.</simpara>
<simpara>In Java, both assignments work with raw types, which is not really safe.
To avoid problems due to different interpretations, usage of raw types
is not allowed in N4JS. <footnote><simpara>Although raw type usage is prohibited, the N4JS validator interprets raw types according to the first case, which may lead to consequential errors.</simpara></footnote></simpara>
<simpara>Calls to generic functions and methods can also be parameterized, this
is described in <xref linkend="Function_Calls"/>. Note that invocation of generic
functions or methods does not need to be parameterized.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="type_conformance">Type Conformance</link></simpara>
<simpara>We define type conformance for non-primitive type references as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>For two non-parameterized types <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>T</mi><mn>0</mn></msup></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>S</mi><mn>0</mn></msup></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msup><mi>T</mi><mn>0</mn></msup><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn></mrow><mrow><mi>S</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mo>∈</mo><mi>T</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0.</mn><mi>s</mi><mi>u</mi><mi>p</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mo>*</mo><mo>∪</mo><mi>T</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0.</mn><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mo>*</mo></mrow></math></simpara>
</listitem>
<listitem>
<simpara>For two parameterized types
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>S</mi><mi>m</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mspace width="10.0em"/><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mspace width="10.0em"/></mrow><mrow><mrow><mrow><mi>T</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn></mrow><mtext>
</mtext><mrow><mo>(</mo><mi>n</mi><mo>=</mo><mn>0</mn><mo>∨</mo><mi>m</mi><mo>=</mo><mn>0</mn><mo>∨</mo><mrow><mo>(</mo><mi>n</mi><mo>=</mo><mi>m</mi><mo>∀</mo><mi>i</mi><mi>:</mi></mrow></mrow><mtext>
</mtext><mspace width="2.0em"/><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>S</mi><mi>i</mi></msub><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><mtext>
</mtext><mspace width="1.0em"/><mo>∧</mo><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>.</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><msub><mi>S</mi><mi>i</mi></msub><mo>.</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></mrow><mo>)</mo></mrow><mo>)</mo></mrow></math></simpara>
</listitem>
</itemizedlist>
<example>
<title>Subtyping with parameterized types</title>
<simpara>Let classes A, B, and C are defined as in the chapter beginning
(<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>). The following subtype relations are
evaluated as indicated:</simpara>
<screen>G&lt;A&gt; &lt;: G&lt;B&gt;                        -&gt; false
G&lt;B&gt; &lt;: G&lt;A&gt;                        -&gt; false
G&lt;A&gt; &lt;: G&lt;A&gt;                        -&gt; true
G&lt;A&gt; &lt;: G&lt;?&gt;                        -&gt; true
G&lt;? extends A&gt; &lt;: G&lt;? extends A&gt;    -&gt; true
G&lt;? super A&gt; &lt;: G&lt;? super A&gt;        -&gt; true
G&lt;? extends A&gt; &lt;: G&lt;? extends B&gt;    -&gt; false
G&lt;? extends B&gt; &lt;: G&lt;? extends A&gt;    -&gt; true
G&lt;? super A&gt; &lt;: G&lt;? super B&gt;        -&gt; true
G&lt;? super B&gt; &lt;: G&lt;? super A&gt;        -&gt; false
G&lt;? extends A&gt; &lt;: G&lt;A&gt;              -&gt; false
G&lt;A&gt; &lt;: G&lt;? extends A&gt;              -&gt; true
G&lt;? super A&gt; &lt;: G&lt;A&gt;                -&gt; false
G&lt;A&gt; &lt;: G&lt;? super A&gt;                -&gt; true
G&lt;? super A&gt; &lt;: G&lt;? extends A&gt;      -&gt; false
G&lt;? extends A&gt; &lt;: G&lt;? super A&gt;      -&gt; false
G&lt;?&gt; &lt;: G&lt;? super A&gt;                -&gt; false
G&lt;? super A&gt; &lt;: G&lt;?&gt;                -&gt; true
G&lt;?&gt; &lt;: G&lt;? extends A&gt;              -&gt; false
G&lt;? extends A&gt; &lt;: G&lt;?&gt;              -&gt; true</screen>
</example>
<simpara><xref linkend="cdVarianceChart"/> shows the subtype relations of parameterized types (of a single generic type), which can be used as a cheat sheet.</simpara>
<figure xml:id="cdVarianceChart">
<title>cdVarianceChart</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cdVarianceChart.png"/>
</imageobject>
<textobject><phrase>cdVarianceChart</phrase></textobject>
</mediaobject>
</figure>
<simpara>Cheat sheet: subtype relation of parameterized types</simpara>
<example>
<title>Subtyping between different generic types</title>
<simpara>Let classes <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>H</mi></math> be two generic classes where:</simpara>
<screen>class G&lt;T&gt; {}
class H&lt;T&gt; extends G&lt;T&gt; {}</screen>
<simpara>Given a simple, non-parameterized class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>, the following
subtype relations are evaluated as indicated:</simpara>
<screen>G&lt;A&gt; &lt;: G&lt;A&gt;                        -&gt; true
H&lt;A&gt; &lt;: G&lt;A&gt;                        -&gt; true
G&lt;A&gt; &lt;: H&lt;A&gt;                        -&gt; false</screen>
</example>
</section>
<section xml:id="parameterized-types-type-inference">
<title>Type Inference</title>
<simpara>Type inference for parameterized types uses the concept of existential types (in Java, a slightly modified version called capture conversion is implemented).</simpara>
<simpara><footnote><simpara>The general concept for checking type conformance and inferring types for generic and parameterized types is described in [<link linkend="Igarashi01a">Igarashi01a</link></simpara></footnote> for <emphasis>Featherweight Java with Generics</emphasis>].</simpara>
<simpara>The concept of existential types with wildcard capture (a special kind of existential type) is published in [<link linkend="Torgersen05">Torgersen05</link>], further developed in [<link linkend="Cameron08b">Cameron08b</link>] (further developed in  [<link linkend="Cameron09a">Cameron09a</link>] [<link linkend="Summers10">Summers10</link>], also see [<link linkend="Wehr08a">Wehr08a</link>] for a similar approach).
The key feature of the Java generic wildcard handling is called capture conversion, described in [<link linkend="Gosling12a">Gosling12a(p.S5.1.10)</link>].
However, there are some slight differences to Java 6 and 7, only with Java 8 similar results can be expected.
All these papers include formal proofs of certain aspects, however even these paper lack proof of other aspect</simpara>
<simpara>The idea is quite simple: All unbound wildcards are replaced with
freshly created new types <footnote><simpara>in the Java 8 spec and compiler, they are called type variables, which are types as well</simpara></footnote>, fulfilling the
constraints defined by the wildcard’s upper and lower bound. These newly
created types are then handled similar to real types during type
inference and type conformance validation.</simpara>
<example>
<title>Existential Type</title>
<simpara>The inferred type of a variable
declared as</simpara>
<simpara><literal>var x: G&lt;? extends A&gt;;</literal>,</simpara>
<simpara>that is the parameterized type, is an existential type
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mn>1</mn></msub></math>, which is a subtype of A. If you have another variable
declared as</simpara>
<simpara><literal>var y: G&lt;? extends A&gt;;</literal></simpara>
<simpara>another type <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mn>2</mn></msub></math> is created, which is also a subtype of A.
Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mn>1</mn></msub><mo>≠</mo><msub><mi>E</mi><mn>2</mn></msub></math>! Assuming typical setter or getter
in G, e.g. <literal>set(T t)</literal> and <literal>T get()</literal>, the following code snippet will produce an error:</simpara>
<simpara><literal>y.set(x.get())</literal></simpara>
<simpara>This is no surprise, as <literal>x.get()</literal> actually returns a type <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mn>1</mn></msub></math>, which
is not a subtype of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mn>2</mn></msub></math>.</simpara>
</example>
<simpara>The upper and lower bound declarations are, of course, still available
during type inference for these existential types. This enables the type
inferencer to calculate the join and meet of parameterized types as
well.</simpara>
<simpara><emphasis role="strong">Req. IDE-12:</emphasis> <link linkend="IDE-12">Join of Parameterized Types</link> (ver. 1)</simpara>
<simpara>The join of two parameterized types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>H</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>m</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math> is the join of the raw types, this join
is then parameterized with the join of the upper bounds of of type
arguments and the meet of the lower bounds of the type arguments.</simpara>
<simpara>For all type rules, we assume that the upper and lower bounds of a
non-generic type, including type variables, simply equal the type
itself, that is for a given type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the following
constraints hold: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mi>T</mi></math></simpara>
<example>
<title>Upper and lower bound of parameterized types</title>
<simpara>Assuming the given classes listed above, the
following upper and lower bounds are expected:</simpara>
<screen>G&lt;A&gt;            -&gt; upperBound = lowerBound = A
G&lt;? extends A&gt;  -&gt; lowerBound = null, upperBound = A
G&lt;? super A&gt;    -&gt; lowerBound = A, upperBound = any
G&lt;?&gt;            -&gt; lowerBound = null, upperBound = any</screen>
<simpara>This leads to the following expected subtype relations: </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-260</link></simpara>
</sidebar>
<screen>(? extends A) &lt;: A  -&gt; true
(? super A) &lt;: A    -&gt; false
A &lt;: (? extends A)  -&gt; false
A &lt;: (? super A)    -&gt; true</screen>
</example>
<simpara>Note that there is a slight difference to Java: In N4JS it is not
possible to use a generic type in a raw fashion, that is to say without
specifying any type arguments. In Java this is possible due to backwards
compatibility with early Java versions in which no generics were
supported.</simpara>
<simpara>In case an upper bound of a type variable shall consist only of a few
members, it seems convenient to use additional structural members, like
on interface I2 in the
example <xref linkend="ex:Use declared interfaces for lower bounds"/> below. However,
type variables must not be constrained using structural types (see
constraint <xref linkend="Use_Site_Structural_Typing"/>). Hence, the recommended
solution is to use an explicitly declared interface that uses definition
site structural typing for these constraints as an upper bound (see
interface in the example).</simpara>
<example>
<title>Use declared interfaces for lower bounds</title>
<screen>interface I1&lt;T extends any with {prop : int}&gt; { // error
}

interface ~J {
    prop : int;
}
interface I2&lt;T extends J&gt; {
}</screen>
</example>
</section>
</section>
</section>
<section xml:id="_primitive_ecmascript_types">
<title>Primitive ECMAScript Types</title>
<simpara>
N4JS provides the same basic types as ECMAScript [<link linkend="ECMA11a">ECMA11a(p.p.28)</link>].</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-40"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-40</link></simpara>
</sidebar>
<note>
<simpara>In ECMAScript, basic types come in two flavors: as primitive types [<link linkend="ECMA11a">ECMA11a(p.S8Types, p.p.28)</link>] and as Objects [<link linkend="ECMA11a">ECMA11a(p.S15, p.p.102)</link>].
In N4JS, primitive types are written with lower cases, object types with first case capitalized.
For example, <literal>String</literal> is the primitive ECMAScript string type, while <literal>String</literal> is an object.</simpara>
</note>
<simpara>The following ECMAScript primitive types are supported, they are written
with lower case letters::</simpara>
<itemizedlist>
<listitem>
<simpara><literal>undefined</literal>: [<link linkend="ECMA11a">ECMA11a(p.S8.3)</link>]; cannot be used in type expression, see void below.</simpara>
</listitem>
<listitem>
<simpara><literal>null</literal> [<link linkend="ECMA11a">ECMA11a(p.S8.3)</link>]; cannot be used in type expression</simpara>
</listitem>
<listitem>
<simpara><literal>boolean</literal>  [<link linkend="ECMA11a">ECMA11a(p.S8.3)</link>]</simpara>
</listitem>
<listitem>
<simpara><literal>string</literal> [<link linkend="ECMA11a">ECMA11a(p.S8.4)</link>]</simpara>
</listitem>
<listitem>
<simpara><literal>number</literal> [<link linkend="ECMA11a">ECMA11a(p.S8.5)</link>]</simpara>
</listitem>
</itemizedlist>
<simpara>Although Object is a primitive type in [<link linkend="ECMA11a">ECMA11a(p.S8.5)</link>], it is interpreted here as an
object type and described in .</simpara>
<simpara>Please note that primitive types are values (= no objects) so they have
no properties and you cannot inherit from them.</simpara>
<section xml:id="_undefined_type">
<title>Undefined Type</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-495"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-495</link></simpara>
</sidebar>
<simpara>The <literal>undefined</literal> type cannot be declared explicitly by the user by means of a type
expression. Every variable that has not been assigned to a value has
this value and type respectively. This applies also to functions that
have no or an empty return statement. Note in ECMAScript there are three
undefined elements:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>undefined</literal> as type (as used here)</simpara>
</listitem>
<listitem>
<simpara><literal>undefined</literal> as value (the only value of the undefined type)</simpara>
</listitem>
<listitem>
<simpara><literal>undefined</literal> is a property of the global object with undefined (value) as initial
value. Since ECMAScript 5 it is not allowed to reassign this property
but this is not enforced by all ECMAScript/JavaScript engines.</simpara>
</listitem>
</itemizedlist>
<simpara>The type <literal>undefined</literal> will be inferred to false in a boolean expression. It is
important to note that something that is not assigned to a value is <literal>undefined</literal> but not <literal>null</literal>.</simpara>
<simpara>Although it is not possible to use <literal>undefined</literal> in a type expression, there are two
ways of declaring an element as undefined:</simpara>
<itemizedlist>
<listitem>
<simpara>For functions, the return type can be declared <literal>void</literal>, which is almost
similar to <literal>undefined</literal>, see <xref linkend="_void_type"/>.</simpara>
</listitem>
<listitem>
<simpara>(Local) Variables can be declared as by using the annotation <literal>@Undefined</literal>. This does not only set the type to <literal>undefined</literal>, but also prevents users from assigning a value to this variable. That is, <literal>@Undefined</literal> basically means that the value of the
variable is constantly set to <literal>undefined</literal>.</simpara>
</listitem>
</itemizedlist>
<example>
<title>Undefined Annotation</title>
<simpara>The following examples illustrate the use of the annotation:</simpara>
<screen>var @Undefined undef;
undef = 1; // will issue an error!</screen>
<simpara>The type <literal>undefined</literal> is a subtype of all types. That is,
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi></mrow><mrow/></math> is an axiom and
true for all types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
</example>
</section>
<section xml:id="_null_type">
<title>Null Type</title>
<simpara>The <literal>null</literal> type cannot be declared explicitly by the user. Only the keyword <literal>null</literal> is inferred to type <literal>null</literal>.</simpara>
<section xml:id="null-type-semantics">
<title>Semantics</title>
<simpara>In contrast to <literal>undefined</literal>, it expresses the intentional absence of a value.</simpara>
<simpara>The <literal>null</literal> type can be assigned to any other type. That is, the type <literal>null</literal> is a
subtype of all other types except <literal>undefined</literal>:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><mi> </mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>}</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>}</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>≠</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi></mrow></math></simpara>
<simpara>Please note that</simpara>
<itemizedlist>
<listitem>
<simpara><literal>null==undefined</literal> evaluates to <literal>true</literal></simpara>
</listitem>
<listitem>
<simpara><literal>null===undefined</literal> evaluates to <literal>false</literal></simpara>
</listitem>
<listitem>
<simpara><literal>typeof null</literal> evaluates to <literal>object</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Only the <literal>null</literal> keyword is inferred to type null. If <literal>null</literal> is assigned to a variable, the type of the variable is not changed. This is true, in particular,
for variable declarations. For example in</simpara>
<screen>var x = null;</screen>
<simpara>the type of variable <literal>x</literal> is inferred to <literal>any</literal> (cf. <xref linkend="Var Statement"/>).</simpara>
<simpara>The type <literal>null</literal> will be inferred to false in a boolean expression.</simpara>
<simpara>The call <literal>typeof null</literal> will return ’object’.</simpara>
</section>
</section>
<section xml:id="_primitive_boolean_type">
<title>Primitive Boolean Type</title>
<simpara>Represents a logical entity having two values, true and false.</simpara>
<simpara>Please note that a boolean primitive is coerced to a number in a
comparison operation so that</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="66.6666*"/>
<colspec colname="col_2" colwidth="33.3334*"/>
<thead>
<row>
<entry align="center" valign="top">Source</entry>
<entry align="center" valign="middle">Result</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var a = true; console.log(a == 1)</programlisting></entry>
<entry align="center" valign="middle"><simpara><emphasis role="strong">prints true</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var b = false; console.log(b == 0)</programlisting></entry>
<entry align="center" valign="middle"><simpara><emphasis role="strong">prints true</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="primitive-boolean-type-semantics">
<title>Semantics</title>
<simpara>The type is subtype of :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow/></math></simpara>
<simpara>Variables of type <literal>boolean</literal> can be auto-converted (coerced) to <literal>Boolean</literal>, as described in <xref linkend="Auto-Boxing and Coercing"/>.</simpara>
</section>
</section>
<section xml:id="_primitive_string_type">
<title>Primitive String Type</title>
<simpara>A finite sequence of zero or more 16-bit unsigned integer values
(elements). Each element is considered to be a single UTF-16 code unit.</simpara>
<simpara>Also string as primitive type has no properties, you can access the
properties available on the object String as string will be coerced to
String on the fly but just for that property call, the original variable
keeps its type:</simpara>
<screen>var a = "MyString"
console.log(typeof a) // string
console.log(a.length) // 8
console.log(typeof a) // string</screen>
<simpara>You can handle a primitive <literal>String</literal> like an object type <literal>String</literal> but with these
exceptions:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>typeof "MyString"</literal> is <literal>'string'</literal> but <literal>typeof new String("MyString")</literal> is <literal>'object'</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"MyString" instanceof String</literal> or <literal>instanceof Object</literal> will return <literal>false</literal>, for <literal>new String("MyString")</literal> both checks evaluate to <literal>true</literal></simpara>
</listitem>
<listitem>
<simpara><literal>console.log(eval("2+2"))</literal> returns <literal>4</literal>, <literal>console.log(eval(new String("2+2")))</literal> returns string <literal>"2+2"</literal></simpara>
</listitem>
</itemizedlist>
<simpara>This marks a difference to Java. In JavaScript, Unicode escape sequences
are never interpreted as a special character.</simpara>
<section xml:id="primitive-string-type-semantics">
<title>Semantics</title>
<simpara>The <literal>string</literal> type is a subtype of <literal>any</literal>:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow/></math></simpara>
<simpara>It is supertype of the N4JS primitive type <literal>pathselector</literal>, and <literal>i18nKey</literal>.
<xref linkend="_primitive_pathselector_and_i18nkey"/></simpara>
<simpara>However, variables of type <literal>string</literal> can be auto-converted (coerced) to <literal>string</literal>, as described in <xref linkend="Autoboxing and coercing"/>.</simpara>
</section>
</section>
<section xml:id="_primitive_number_type">
<title>Primitive Number Type</title>
<simpara>In ECMAScript numbers are usually 64-bit floating point numbers. For
details see [<link linkend="ECMA11a">ECMA11a(p.8.5)</link>].
With prefix <literal>0</literal> you indicate that the number is octal based and with prefix <literal>0x</literal> it is marked as hexadecimal based.</simpara>
<simpara><literal>NaN</literal> can be produced by e.g.  '`0 / 0`’ or ’<literal>1 - x</literal>’. <literal>typeof NaN</literal> will return <literal>number</literal>.</simpara>
<section xml:id="primitive-number-type-semantics">
<title>Semantics</title>
<simpara>The type <literal>number</literal> is subtype of <literal>any</literal>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>a</mi><mi>n</mi><mi>y</mi><mi>}</mi><mi>}</mi><mrow/><mtext>
</mtext></math></simpara>
<simpara>However, variables of type <literal>number</literal> can be auto-converted (coerced) to <literal>Number</literal>, as
described in <xref linkend="Integer Literals"/> .</simpara>
</section>
</section>
<section xml:id="_primitive_type_int">
<title>Primitive Type int</title>
<simpara>Actually ECMAScript defines an internal type <literal>int32</literal>. A number of this type is
returned by the binary or operation using zero as operand, e.g.
ECMAScript’s internal type int32 can be represented in N4JS by a
built-in primitive type called <literal>int</literal>. For details on how numeric literals map to types <literal>number</literal> and <literal>int</literal>, refer to <xref linkend="integer Literals"/>.</simpara>
<important>
<simpara>for the time being, built-in type <literal>int</literal> is synonymous to type <literal>number</literal>. This means one can be assigned to the other and a value declared to be of type <literal>int</literal> may actually be a 64-bit floating point number.
<footnote><simpara>The rationale for having this limited implementation of type is that API designers already want to start providing hints where later only 32-bit integers will be used. For the time being, <emphasis role="strong">this is checked neither statically nor at runtime</emphasis>!</simpara></footnote></simpara>
</important>
</section>
<section xml:id="_primitive_symbol_type">
<title>Primitive Symbol Type</title>
<simpara>The primitive type <literal>symbol</literal> is directly as in ECMAScript 6. Support for symbols is kept to a minimum in N4JS. While this primitive type can be used
without any restrictions, the only value of this type available in N4JS
is the built-in symbol <literal>Symbol.iterator</literal>. Other built-in symbols from ECMAScript 6 and the creation of new symbols are not supported. For more details, see <xref linkend="Primitive Symbol Type Object Type"/>.</simpara>
</section>
</section>
<section xml:id="_primitive_n4js_types">
<title>Primitive N4JS Types</title>
<simpara>Additionally to the primitive ECMAScript types, the following
N4JS-specific primitive types are supported:</simpara>
<itemizedlist>
<listitem>
<simpara>any: enables ECMAScript-like untyped variable declarations</simpara>
</listitem>
<listitem>
<simpara>void: almost similar to undefined, except it can be used as a return
type of functions and methods</simpara>
</listitem>
<listitem>
<simpara>unknown: inferred in case of a type inference error</simpara>
</listitem>
<listitem>
<simpara>pathSelector&lt;T&gt;, i18nKey: subtypes of string</simpara>
</listitem>
</itemizedlist>
<section xml:id="_any_type">
<title>Any Type</title>
<simpara>Any type is the default type of all variables for without a type
declaration. It has no properties. A value of any other type can be
assigned to a variable of type <literal>any</literal>, but a variable declared  <literal>any</literal> can only be assigned to another variable declared with the type <literal>any</literal>.</simpara>
<section xml:id="any-type-semantics">
<title>Semantics</title>
<simpara><literal>any</literal> is supertype of all other types. That is,
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>`</mi><mi>`</mi><mi>a</mi><mi>n</mi><mi>y</mi></mrow><mi>}</mi><mrow/></math>
is an axiom and true for all types.</simpara>
</section>
<section xml:id="any-type-type-inference">
<title>Type Inference</title>
<simpara>If a variable is explicitly declared as type <literal>any</literal>, the inferred type of that variable will always be <literal>any</literal>.</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-106"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-106</link></simpara>
</sidebar>
<section xml:id="_default_type_of_variables">
<title>Default Type of Variables</title>
<simpara>If a type annotation is missing and no initializer is provided, then the
type of a variable is implicitly set to <literal>any</literal>.</simpara>
<simpara>In that case, the inferred type of that variable will always be <literal>any</literal> as well.
If an initializer is provided, the declared type of the variable will be
set to the inferred type of the initializer. Therefore in the latter
case, the inferred type of the variable will always be the type of the
initializer (cf. <xref linkend="Var_Statement"/>).</simpara>
<simpara>If a variable is declared as type , it can be used just as every
variable can be used in raw ECMAScript. Since every property can be get
and set, the types of properties is inferred as as well. This is
formally expressed in <xref linkend="Identifier"/>.</simpara>
</section>
</section>
</section>
<section xml:id="_void_type">
<title>Void Type</title>
<simpara>The type <literal>void</literal> is the type returned by the ECMAScript <literal>void</literal> operator (see <xref linkend="Unary Expressions"/>), which is similar to <literal>undefined</literal>. However, the type <literal>undefined</literal> cannot be expressed explicitly in type
expressions. Instead, it is possible to declare the return type of a
function or method as <literal>void</literal> in order to state that the function does not return anything.</simpara>
<section xml:id="void-type-semantics">
<title>Semantics</title>
<simpara><emphasis role="strong">Req. IDE-13:</emphasis> <link linkend="IDE-13">Void Type</link> (ver. 1)</simpara>
<itemizedlist>
<listitem>
<simpara>The type <literal>void</literal> may only be used to declare the return type of a function or method.</simpara>
</listitem>
<listitem>
<simpara>If a function <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> is declared to return <literal>void</literal>, an error is created if a return statement contains an expression:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>f</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>r</mi><mo>,</mo><mi>μ</mi><mfenced close=")" open="("><mi>r</mi></mfenced><mo>=</mo><mrow><mi>R</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow><mo>,</mo><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>f</mi><mi>:</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo></math></simpara>
</listitem>
<listitem>
<simpara>If a function <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> is declared to return <literal>void</literal>, an error is issued if the function is called in any statement or expression but an expression statement directly: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>f</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>e</mi><mo>,</mo><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>e</mi><mi>f</mi></mfenced><mi>:</mi><mi>μ</mi><mfenced close=")" open="("><mrow><mi>e</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi></mrow></mfenced><mo>=</mo><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>The following type hierarchy is defined: <literal>void</literal> is only a subtype of itself but
not of any other type and no other type is a subtype of void.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow></mrow><mrow/></math>
Since <literal>void</literal> cannot be
used as the type of variables, fields, formal parameters, etc., a
function or method with a return type of void cannot be used as an
lvalue, e.g. it may not appear on the left-hand side of an assignment or
in the argument list of a call expression (note the difference to plain
JavaScript).</simpara>
</section>
</section>
<section xml:id="_unknown_type">
<title>Unknown Type</title>
<simpara>Internally N4JS defines the type <literal>unknown</literal>.
This type cannot be used by the user.
Instead, it is inferred in case of errors.
<literal>unknown</literal> behaves almost similar to <literal>any+</literal>.
However no error messages once a variable or expression has been
inferred to <literal>unknown</literal> in order to avoid consequential errors.</simpara>
</section>
<section xml:id="_primitive_pathselector_and_i18nkey">
<title>Primitive Pathselector and I18nKey</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-55"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-55</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-379"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-379</link></simpara>
</sidebar>
<simpara>N4JS introduces three new types which are subtypes of string. These
types are, in fact, translated to strings and do not add any new
functionality. They are solely defined for enabling additional
validation.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>pathSelector&lt;T&gt;}</literal> is a generic type for specifying path selector expressions. PathSelectors are used to specify a path to a property in a (JSON-like) model tree.</simpara>
</listitem>
<listitem>
<simpara>The type variable defines the context type (or type of the
root of the tree) in which the selector is to be validated. A path
selector is defined as a string literal that has to conform to the path
selector grammar . [<link linkend="PathSelector">PathSelector</link>]. The context type is then used to perform a semantic
validation of the path selector.</simpara>
</listitem>
<listitem>
<simpara>is a string which refers to an internationalization key. The type is
used to reference resource keys specified in resource files. In a
project <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math>, the type defines the transitive set of all
resource keys accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math>. Since resource keys are
specified as strings, this means that the type defines a subset of all
string literals that can be assigned to a variable of type in the
current project. That means that an assignment of a string literal to a
variable of type is only valid if that string literal is contained in
the set defined by . Resource keys are declared in the properties files
of a project and all resource keys from a project are accessible to any
project depending on it.</simpara>
</listitem>
</itemizedlist>
<section xml:id="pathselector-semantics">
<title>Semantics</title>
<simpara>The N4JS primitive types <literal>i18nKey</literal> and <literal>pathSelector&lt;T&gt;</literal> are basically only marker types of strings
for enabling additional validation. Thus, they are completely
interchangeable with string types:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>i</mi><mn>18</mn><mi>n</mi><mi>K</mi><mi>e</mi><mi>y</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>i</mi><mn>18</mn><mi>n</mi><mi>K</mi><mi>e</mi><mi>y</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>T</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>T</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></mrow><mrow/></math></simpara>
<simpara>As special literals for these N4JS types do not exist, the type has to
be explicitly specified in order to enable the additional validation.
Note that this validation cannot be applied for more complicated
expressions with parts which cannot be evaluated at compile time. For
example, cannot be evaluated at compile time.</simpara>
</section>
</section>
</section>
<section xml:id="_built_in_ecmascript_object_types">
<title>Built-in ECMAScript Object Types</title>
<simpara>
N4JS supports all built-in ECMAScript objects [<link linkend="ECMA11a">ECMA11a(p.S15)</link>], interpreted as classes.
Some of these object types are object versions of primitive types. The
object types have the same name as their corresponding primitive type,
but start with an upper case letter.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-40"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-40</link></simpara>
</sidebar>
<simpara>The following types, derived from certain ECMAScript predefined objects
and constructs, are supported by means of built-in types as they are
required by certain expressions.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Object</literal>   [<link linkend="ECMA11a">ECMA11a(p.p111)</link>];</simpara>
</listitem>
<listitem>
<simpara><literal>Function</literal>  [<link linkend="ECMA11a">ECMA11a(p.p117)</link>]; representing functions and function objects <xref linkend="Function_Type"/> but also methods  (<xref linkend="methods"/>)</simpara>
</listitem>
<listitem>
<simpara><literal>Array</literal>    [<link linkend="ECMA11a">ECMA11a(p.1p122)</link>], representing array objects, see <xref linkend="_array_object_type"/></simpara>
</listitem>
<listitem>
<simpara><literal>String</literal> [<link linkend="ECMA11a">ECMA11a(p.p141)</link>]</simpara>
</listitem>
<listitem>
<simpara><literal>Boolean</literal> [<link linkend="ECMA11a">ECMA11a(p.p141)</link>]</simpara>
</listitem>
<listitem>
<simpara><literal>Number</literal> [<link linkend="ECMA11a">ECMA11a(p.p141)</link>]</simpara>
</listitem>
<listitem>
<simpara><literal>RegExp</literal> [<link linkend="ECMA11a">ECMA11a(p.p180)</link>]; they can be constructed by means of special literals (cf. <xref linkend="Literals"/>)</simpara>
</listitem>
<listitem>
<simpara>global object type</simpara>
</listitem>
<listitem>
<simpara><literal>Symbol</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Promise</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Iterator</literal> and <literal>Iterable</literal></simpara>
</listitem>
</itemizedlist>
<simpara>All other ECMAScript types ([<link linkend="ECMA11a">ECMA11a(p.S15)</link>], such as <literal>Math</literal>, <literal>Date</literal>, or <literal>Error</literal> are supported by means of predefined classes.
ECMAScript 2015 types are defined in the ECMAScript
2015 runtime environment. Since they are defined and used similar to
user defined classes, they are not explained in further detail here.
These predefined objects are kind of subtypes of .</simpara>
<section xml:id="ECMAScript-objects-semantics">
<title>Semantics</title>
<simpara>It is not possible to inherit from any of the built-in ECMAScript object
types except for <literal>Object</literal> and <literal>Error</literal>, that is, to use one of these types as supertype
of a class. From the N4JS language’s point of view, these built-in types
are all final.</simpara>
</section>
<section xml:id="_object_type">
<title>Object Type</title>
<simpara><literal>Object</literal> [<link linkend="ECMA11a">ECMA11a(p.S8.6)</link>] is the (implicit) supertype of all declared (i.e., non-primtive) types, including native types.
It models the ECMAScript type <literal>Object</literal>, except that no properties may be dynamically added to it.
In order to declare a variable to which properties can be dynamically added, the type <literal>Object+</literal> has to be declared (cf. <xref linkend="_type_modifiers"/>).</simpara>
</section>
<section xml:id="_function_object_type">
<title>Function Object Type</title>
<simpara>The built-in object type <literal>Function</literal>, a subtype of <literal>Object</literal>, represents all functions, regardless of how they are defined (either via function expression,
function declaration, or method declaration).
They are described in detail in <xref linkend="_function_object_type"/>.</simpara>
<simpara>Since <literal>Function</literal> is the supertype of all functions regardless of number and types
of formal parameters, return type, and number and bounds of type
parameters, it would not normally be possible to invoke an instance of <literal>Function</literal>.
For the time being, however, an instance of <literal>Function</literal> can be invoked, any number
of arguments may be provided and the invocation may be parameterized
with any number of type arguments (which will be ignored), i.e. 
<xref linkend="Function_Call_Constraints"/> and
<xref linkend="Parameterized_Function_Call_Constraints"/> do not apply.</simpara>
</section>
<section xml:id="_array_object_type">
<title>Array Object Type</title>
<simpara>The <literal>Array</literal> type is generic with one type parameter,
which is the item type. An array is accessed with the index operator,
the type of the index parameter is <literal>Number</literal>. The type of the stored values is
<emphasis>typeArgs[0]</emphasis> (cf. <xref linkend="Array_Literal"/>). Due to type erasure, the item type is not
available during runtime, that is to say there are no reflective methods
returning the item type of an array.</simpara>
<simpara><emphasis role="strong">Req. IDE-14:</emphasis> <link linkend="IDE-14">Array Type</link> (ver. 1)</simpara>
<simpara>For an array type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>, the following conditions must be true:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>A</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>1</mn></math></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_string_object_type">
<title>String Object Type</title>
<simpara>Object type version of <literal>string</literal>. It is highly recommend to use the primitive
version only. Note that is is not possible to assign a primitive typed
value to an object typed variable.</simpara>
</section>
<section xml:id="_boolean_object_type">
<title>Boolean Object Type</title>
<simpara>Object type version of <literal>boolean</literal>. It is highly recommend to use the primitive
version only. Note that is is not possible to assign a primitive typed
value to an object typed variable.</simpara>
</section>
<section xml:id="_number_object_type">
<title>Number Object Type</title>
<simpara>Object type version of <literal>number</literal>. It is highly recommend to use the primitive
version only. Note that is is not possible to assign a primitive typed
value to an object typed variable.</simpara>
</section>
<section xml:id="_global_object_type">
<title>Global Object Type</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-245"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-245</link></simpara>
</sidebar>
<simpara>This is the globally accessible namespace which contains element such as
undefined, and in case of browsers, window. Depending on the runtime
environment, the global object may has different properties defined by
means of dynamic polyfills.</simpara>
</section>
<section xml:id="_symbol">
<title>Symbol</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1220"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1220</link></simpara>
</sidebar>
<simpara>The symbol constructor function of ECMAScript 2015. Support for symbols
is kept to a minimum in N4JS:</simpara>
<itemizedlist>
<listitem>
<simpara>creating symbols with <literal>var sym = Symbol("description")</literal> is not supported.</simpara>
</listitem>
<listitem>
<simpara>creating shared symbols with <literal>var sym = Symbol.for("key")</literal> is not supported. Also the inverse <literal>Symbol.keyFor(sym)</literal> is not
supported.</simpara>
</listitem>
<listitem>
<simpara>retrieving built-in symbols via properties in <literal>Symbol</literal> is supported, however,
the only built-in symbol available in N4JS is the iterator symbol that
can be retrieved with <literal>Symbol.iterator</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>The rationale for this selective support for symbols in N4JS is to allow
for the use (and custom definition) of iterators and iterables and their
application in the loop with as little support for symbols as possible.</simpara>
</section>
<section xml:id="_promise">
<title>Promise</title>
<simpara><literal>Promise</literal> is provided as a built-in type as in ECMAScript 2015. Also see
[sec:Asynchronous_Functions] for asynchronous functions.</simpara>
</section>
<section xml:id="_iterator_interface">
<title>Iterator Interface</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1220"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1220</link></simpara>
</sidebar>
<simpara>A structurally typed interface for <emphasis>iterators</emphasis> as defined by the
ECMAScript 6 iterator protocol.</simpara>
<formalpara>
<title>Iterable in N4JS</title>
<para>
<screen>// providedByRuntime
export public interface ~Iterator&lt;T&gt;  {
    public next(): IteratorEntry&lt;T&gt;
}

// providedByRuntime
export public interface ~IteratorEntry&lt;T&gt; {
    public done: boolean;
    public value: T?;
}</screen>
</para>
</formalpara>
<simpara>Interface IteratorEntry was introduced mainly to work around IDEBUG-273; after solving this bug, this interface could be removed and replaced with a corresponding structural type reference as return type of method next() </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/273"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-273</link></simpara>
</sidebar>
</section>
<section xml:id="_iterable_interface">
<title>Iterable Interface</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1220"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1220</link></simpara>
</sidebar>
<simpara>A structurally typed interface for objects that can be iterated over,
i.e. <emphasis>iterables</emphasis> as defined by the ECMAScript 6 iterator protocol.</simpara>
<screen>// providedByRuntime
export public interface ~Iterable&lt;T&gt; {
    public [Symbol.iterator](): Iterator&lt;T&gt;
}</screen>
<simpara>Note that this interface’s method is special in that a symbol is used as
identifier. You can use the ordinary syntax for computed property names
in ECMAScript 6 for overriding / implementing or invoking this method.</simpara>
</section>
</section>
<section xml:id="_built_in_n4js_types">
<title>Built-In N4JS Types</title>
<simpara>N4JS additionally provides some built-in classes which are always available with the need to explicitly import them.</simpara>
<section xml:id="_n4object">
<title>N4Object</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-547"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-547</link></simpara>
</sidebar>
<simpara>Although <literal>N4Object</literal> is a built-in type, it is not the default supertype. It is a
subtype of <literal>Object</literal>.</simpara>
<section xml:id="N4Object-semantics">
<title>Semantics</title>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></mrow><mrow/></math></simpara>
</section>
</section>
<section xml:id="_n4class">
<title>N4Class</title>
<simpara>The type <literal>N4Class</literal> is used for extended reflection in N4JS.</simpara>
</section>
<section xml:id="_iterablen">
<title>IterableN</title>
<simpara>Currently there are built-in types <literal>Iterable2&lt;T1,T2&gt;</literal>&#8230;&#8203;<literal>Iterable9&lt;T1,&#8230;&#8203;,T9&gt;</literal>. They are mainly intended for type system support of array destructuring literals.</simpara>
<simpara>Not documented in detail yet, because we want to gain experience with
current solution, first, and major refinement might be incoming&#8230;&#8203;</simpara>
</section>
</section>
<section xml:id="_type_modifiers">
<title>Type Modifiers</title>
<simpara>Type expressions can be further described with type
modifiers. The type modifiers add additional constraints to the type
expression which are then used to perform a stricter validation of the
source code. Type modifiers can not be used in type arguments.</simpara>
<simpara>The general type modifiers <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mi>o</mi><mi>n</mi><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></math>
and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mi>y</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>i</mi><mi>c</mi></math> can be used for variables, attributes, method
parameters and method types. Optional and variadic modifiers can only be
applied for formal parameters.</simpara>
<section xml:id="_dynamic">
<title>Dynamic</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-144"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-144</link></simpara>
</sidebar>
<simpara>The dynamic type modifier marks a type as being dynamic. A dynamic type
behaves like a normal JavaScript object, so you can read/write any
property and call any method on it. The default behavior for a type is
to be static, that is no new properties can be added and no unknown
properties can be accessed.</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi></math> is always true. Using dynamically
added members of a dynamic type is never type safe. Using the operator
on a subtype of is not allowed.</simpara>
<simpara><emphasis role="strong">Req. IDE-15:</emphasis> <link linkend="IDE-15">Non-Dynamic Primitive Types</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>All primitive types except <literal>any</literal> must not be declared dynamic.</simpara>
</listitem>
<listitem>
<simpara>Only parameterized type references and this type reference can be
declared dynamic. <footnote><simpara>This is a consequence of the syntax definition.</simpara></footnote></simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_optional">
<title>Optional</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-145"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-145</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1076"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1076</link></simpara>
</sidebar>
<simpara>Only formal parameters and return types can be marked as optional.</simpara>
<simpara>An optional formal parameter can be omitted when calling the function /
method; an omitted parameter has the value <literal>undefined</literal>. Every parameter after an
optional parameter also has to be optional or variadic.</simpara>
<simpara>An optional return type indicates that the function / method need not be
left via a return statement with an expression; in that case the return
value is <literal>undefined</literal>. For constraints on using the optional modifier, see <xref linkend="_function_object_type"/>.</simpara>
</section>
<section xml:id="Type_Modifiers_Variadic">
<title>Variadic</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-146"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-146</link></simpara>
</sidebar>
<simpara>Only method parameters can be marked as
variadic. Marking a parameter as variadic indicates that method accepts
a variable number of parameters. A variadic parameter implies that the
parameter is also optional as the cardinality is defined as
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>[</mo><mn>0.</mn><mo>.</mo><mo>*</mo></mrow></math>$]. No further parameter can be defined after a
variadic parameter.</simpara>
<simpara><emphasis role="strong">Req. IDE-16:</emphasis> <link linkend="IDE-16">Variadic and optional parameters</link> (ver. 1)</simpara>
<simpara>For a parameter <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math>, the
following condition must hold: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>p</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></math>.</simpara>
<simpara>A parameter can, however, be declared either optional or variadic. That
is to say that one can either write <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo></math> (optional) or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>, but not <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo></math></simpara>
<simpara>Declaring a variadic method parameter of type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> causes the
type of the method parameter to become <literal>Array&lt;T&gt;</literal>. That is, declaring <literal>function(string &#8230;&#8203;tags)</literal> causes <literal>tags</literal> to be
an <literal>Array&lt;string&gt;</literal> and not just a scalar <literal>string</literal> value.</simpara>
<simpara>To make this work at runtime, the compiler will generate code that
constructs the <literal>method parameter</literal> from the <literal>arguments</literal> parameter explicitly passed to the function.</simpara>
<simpara><emphasis role="strong">Req. IDE-17:</emphasis> <link linkend="IDE-17">Variadic at Runtime</link> (ver. 1)</simpara>
<simpara>
At runtime, a variadic
parameter is never set to undefined. Instead, the array may be empty.
This must be true even if preceding parameters are optionally and not
arguments are passed at runtime.</simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/106"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-106</link></simpara>
</sidebar>
<simpara>For more constraints on using the variadic modifier, see <xref linkend="_function_object_type"/>.</simpara>
</section>
</section>
<section xml:id="_union_and_intersection_type_composed_types">
<title>Union and Intersection Type (Composed Types)</title>
<simpara>Given two or more existing types, it is possible to compose a new type
by forming either the union or intersection of the base types. The
following sections define these <emphasis>union</emphasis> and <emphasis>intersection types</emphasis> in
detail.</simpara>
<section xml:id="_union_type">
<title>Union Type</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-142"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-142</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-385"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-385</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-383"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-383</link></simpara>
</sidebar>
<simpara>Union type reflect the dynamic nature of JavaScript. Union types can be
used almost everywhere (e.g., in variable declarations or in formal
method parameters). The type inferencer usually avoids returning union
types and prefers single typed joins or meets. <emphasis>The most common use
case for union types is for emulating method overloading</emphasis>, as we
describe later on.</simpara>
<simpara><footnote><simpara>For type theory about union types, [<link linkend="Pierce02">Pierce02(p.a15.7)</link></simpara></footnote> and [<link linkend="Igarashi07a">Igarashi07a</link>], other languages that explicitly support the notion of union type include Ceylon [<link linkend="King13a">King13a(p.3.2.4/5)</link>]</simpara>
<section xml:id="union-type-syntax">
<title>Syntax</title>
<simpara>For convenience, we repeat the definition of union type expression:</simpara>
<screen>UnionTypeExpression: 'union' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';</screen>
</section>
<section xml:id="union-type-semantics">
<title>Semantics</title>
<simpara>An union type states that the type of a variable may be one or more
types contained in the union type. In other words, a union type is a
kind of type set, and the type of a variable is contained in the type
set. Due to interfaces, a variable may conform to multiple types.</simpara>
<simpara><emphasis role="strong">Req. IDE-18:</emphasis> <link linkend="IDE-18">Union Type</link> (ver. 1)</simpara>
<simpara>For a given union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></math>, the following conditions must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Non-empty: At least one element has to be specified:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>≠</mo><mi>∅</mi></math> (<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>n</mi><mo>≥</mo><mn>1</mn><mo>)</mo></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Non-dynamic: The union type itself must not be declared dynamic:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>¬</mo><mi>U</mi><mo>.</mo><mi>d</mi><mi>y</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>i</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>Non-optional elements:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>¬</mo><mi>T</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></math></simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-19:</emphasis> <link linkend="IDE-19">Union Type Subtyping Rules</link> (ver. 1)</simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> be an union type.</simpara>
<itemizedlist>
<listitem>
<simpara>The union type is a common supertype of all its element types:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></mrow><mrow><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>More generally, a type is a subtype of a union type, if it is a
subtype of at least one type contained in the union:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></mrow><mrow><mo>∃</mo><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A union type is a subtype of a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>, if all types of
the union are subtypes of that type. <footnote><simpara>This rule is a generalization of the sub typing rules given in [<link linkend="Igarashi07a">Igarashi07a(p.p.40)</link></simpara></footnote>}]
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>U</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow><mrow><mo>∀</mo><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Commutativity: The order of element does not matter:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>A</mi><mo>,</mo><mi>B</mi></mrow><mo>=</mo><mrow><mi>B</mi><mo>,</mo><mi>A</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Associativity:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>A</mi><mo>,</mo><mrow><mi>B</mi><mo>,</mo><mi>C</mi></mrow></mrow><mo>=</mo><mrow><mrow><mi>A</mi><mo>,</mo><mi>B</mi></mrow><mo>,</mo><mi>C</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Uniqueness of elements: A union type may not contain duplicates
(similar to sets): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>k</mi><mo>≤</mo><mi>n</mi><mo>,</mo><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>:</mi><msub><mi>T</mi><mi>i</mi></msub><mo>≠</mo><msub><mi>T</mi><mi>k</mi></msub></math></simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-20:</emphasis> <link linkend="IDE-20">Implicit simplification of union types</link> (ver. 1)</simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> be an union type. The following simplification rules
are always automatically applied to union types.</simpara>
<itemizedlist>
<listitem>
<simpara>Simplification of union type with one element: If a union type
contains only one element, it is reduced to the element:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi></math></simpara>
</listitem>
<listitem>
<simpara>Simplification of union types of union types: A union type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> containing another union types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>V</mi></math> is
reduced to a single union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>W</mi></math>, with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>W</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>=</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>∪</mo><mi>V</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>m</mi></msub><mo>,</mo><msub><mi>S</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>n</mi></msub></mrow><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>m</mi></msub></mrow><mo>,</mo><msub><mi>S</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>n</mi></msub></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Simplification of union type with undefined or null: Since undefined
is the bottom type, and null is kind of a second button type, they are
removed from the union: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow><mo>,</mo><msub><mi>T</mi><mi>k</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>}</mi><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><msub><mi>T</mi><mi>k</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mtext>
</mtext><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><mo>,</mo><msub><mi>T</mi><mi>k</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>}</mi><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mrow><mi>k</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>,</mo><msub><mi>T</mi><mi>k</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mtext>
</mtext></math> Note that the simplification rules for union types
with one element are applied first.</simpara>
</listitem>
<listitem>
<simpara>The structural typing strategy is propagated to the types of the
union: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mi>…</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>Remarks:</simpara>
<itemizedlist>
<listitem>
<simpara>The simplification rules may be applied recursively.</simpara>
</listitem>
<listitem>
<simpara>For given types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>, and the union type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><mrow><mi>A</mi><mo>,</mo><mi>B</mi></mrow></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>≠</mo><mi>B</mi></math>. The types are
equivalent, however: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>=</mo><mi>U</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>=</mo><mi>A</mi></math>.</simpara>
</listitem>
</itemizedlist>
<simpara><footnote><simpara>This is different from Ceylon ( [<link linkend="King13a">King13a(p.3.2.3)</link></simpara></footnote>), in
which the union is defined to be <literal>the same type as</literal> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>.
Although the meaning of <literal>same</literal> is not clear, it is possibly used as a
synonym for <literal>equivalent</literal>.]</simpara>
<simpara>Let A, B, and C be defined as in the chapter beginning (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>)</simpara>
<simpara>The following subtyping relations with union types are to be evaluated
as follows <footnote><simpara>See Example <link linkend="Type Examples">Class Hierarchy</link> for class definitions.</simpara></footnote>:</simpara>
<screen>A &lt;: union{A}                                   -&gt; true
A &lt;: union{A,B}                                 -&gt; true
B &lt;: union{A,B}                                 -&gt; true
C &lt;: union{A,B}                                 -&gt; true
A &lt;: union{B,C}                                 -&gt; false
B &lt;: union{B,C}                                 -&gt; true
C &lt;: union{B,C}                                 -&gt; true
union{A} &lt;: A                                   -&gt; true
union{B} &lt;: A                                   -&gt; true
union{B,C} &lt;: A                                 -&gt; true
union{A,B} &lt;: B                                 -&gt; false
union{X,Z} &lt;: union{Z,X}                        -&gt; true
union{X,Y} &lt;: union{X,Y,Z}                      -&gt; true
union{X,Y,Z} &lt;: union{X,Y}                      -&gt; false</screen>
<simpara>The simplification constraints are used by the type inferrer. It may be
useful, however, to define union types with superfluous elements, as the
next example demonstrates</simpara>
<example>
<title>Superfluous elements in union type</title>
<programlisting language="n4js" linenumbering="unnumbered">class A{}
class B extends A{}
class C extends A{}

function foo(p: union{A,B}) {..}</programlisting>
</example>
<simpara>Although <literal>B</literal> is superfluous, it may indicate that the function handles
parameters of type differently than one of type <literal>A</literal> or <literal>C</literal>.</simpara>
<simpara>Although a union type is a <literal><link linkend="Acronyms">LCST</link></literal> of its contained (non-superfluous) types, the
type inferrer usually does not create new union types when computing the
join of types. If the join of types including at least one union type is
calculated, the union type is preserved if possible. The same is true
for meet.</simpara>
<simpara>For the definition of join and meet for union types, we define how a
type is added to a union type:</simpara>
<simpara><emphasis role="strong">Req. IDE-21:</emphasis> <link linkend="IDE-21">Union of union type</link> (ver. 1)</simpara>
<simpara>The union of union types is defined similar to the union of sets.
The union is not simplified, but it contains no duplicates.</simpara>
<simpara>If a type A is contained in a union type, then the union type is a
common supertype, and (since it is the union itself) also the <literal><link linkend="Acronyms">LCST</link></literal> of both types.
This finding is the foundation of the definition of join of a (non-union) type with a union type:</simpara>
<simpara><emphasis role="strong">Req. IDE-22:</emphasis> <link linkend="IDE-22">Join with Union Type</link> (ver. 1)</simpara>
<simpara>The join <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> of a union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> with a type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is the union of both types:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mfenced close=")" open="("><mrow><mi>U</mi><mi>T</mi></mrow></mfenced><mo>=</mo><mi>J</mi></mrow><mrow><mi>J</mi><mo>=</mo><mi>U</mi><mo>∪</mo><mi>T</mi></mrow></math></simpara>
<variablelist>
<varlistentry>
<term>Remarks: </term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Joining a union type with another type is not similar to joining the
elements of the union type directly with another type. That is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>A</mi><mi> </mi><mrow><mtext>join</mtext></mrow><mi> </mi><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>o</mi><mi>n</mi><mrow><mo>{</mo></mrow></mrow><mi>B</mi><mo>,</mo><mi>C</mi><mrow><mo>}</mo></mrow><mo>≠</mo><mi>A</mi><mi> </mi><mrow><mtext>join</mtext></mrow><mi> </mi><mi>B</mi><mi> </mi><mrow><mtext>join</mtext></mrow><mi> </mi><mi>C</mi></math></simpara>
</listitem>
<listitem>
<simpara>The computed join is simplified according to the constraints defined
above.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara><emphasis role="strong">Req. IDE-23:</emphasis> <link linkend="IDE-23">Meet with Union Type</link> (ver. 1)</simpara>
<simpara>The meet of union types is defined as the meet of the elements.
That is <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>S</mi></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mi>S</mi><msub><mi>T</mi><mi>n</mi></msub><mi>S</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>m</mi></msub></mrow></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mi>m</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mi>m</mi></msub></mrow></math></simpara>
<simpara>Remarks:</simpara>
<itemizedlist>
<listitem>
<simpara>The meet of a union type with another type is not a union type itself.
This gets clear when looking at the definition of meet and union type.
While for a given <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><mrow><mi>A</mi><mo>,</mo><mi>B</mi></mrow></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></math>, the opposite <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math> is usually not true
(unless <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> can be simplified to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>). So, for
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mi>U</mi></math>, usually <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> cannot be the meet.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-24:</emphasis> <link linkend="IDE-24">Upper and Lower Bound of a Union Type</link> (ver. 1)</simpara>
<simpara>
The upper and lower bound of a union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math> is a union type <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>U</mi><mi>'</mi></msup></math>
containing the upper and lower bound of the elements of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>,</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced></mrow><mtext>
</mtext><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced></mrow><mtext>
</mtext></math></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-260</link></simpara>
</sidebar>
</section>
<section xml:id="_warnings">
<title>Warnings</title>
<simpara>In case the <literal>any</literal> type is used in a union type, all other types in the union
type definition become obsolete. However, defining other typers along
with the <literal>any</literal> type might seem reasonable in case those other types are
treated specifically and thus are mentioned explicitly in the
definition. Nevertheless the use of the <literal>any</literal> type produces a warning, since
its use can indicate a misunderstanding of the union type concept and
since documentation can also be done in a comment.</simpara>
<simpara><emphasis role="strong">Req. IDE-25:</emphasis> <link linkend="IDE-25">Any type in union types</link> (ver. 1)</simpara>
<simpara>No union type shall conatin an type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>n</mi><mi>y</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi></math></simpara>
<simpara>Similar to the documentary purpose of using specific classes along with
the <literal>any</literal> type is the following case. When two types are used, one of them a
subtype of the other, then this subtype is obsolete. Still it can be
used for documentary purposes. However, a warning will be produced to
indicate unecessary code. The warning is only produced when both of the
types are either classes or interfaces, since e.g. structural types are
supertypes of any classes or interfaces.</simpara>
<simpara><emphasis role="strong">Req. IDE-26:</emphasis> <link linkend="IDE-26">Redundant subtypes in union types</link> (ver. 1)</simpara>
<simpara>Union types shall not
contain class or interface types which are a subtype of another class or
interface type that also is contained in the union type.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mo>∃</mo><mi>T</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mfenced close=")" open="("><mrow><mi>T</mi><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi><mo>∧</mo><mi>i</mi><mi>s</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>O</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∧</mo><mi>i</mi><mi>s</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>O</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>T</mi><mi>T</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</section>
</section>
<section xml:id="_intersection_type">
<title>Intersection Type</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-142"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-142</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-385"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-385</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-383"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-383</link></simpara>
</sidebar>
<simpara>Intersection type reflects the dynamic nature of JavaScript, similar to
union type. As in Java, intersection type is used to define the type
boundaries of type variables in type parameter definitions. They are
inferred by the type inferencer for type checking (as a result of join
or meet). In contrast to Java, however, intersection type can be
declared explicitly by means of intersection type expression.
<footnote><simpara>For type theory about intersection types, see and , other languages supporting explicit notion of intersection type include Ceylon [<link linkend="Pierce02a">Pierce02a(p.15.7)</link></simpara></footnote> and [<link linkend="Laurent12a">Laurent12a</link>], other languages supporting explicit notion of intersection type include Ceylon
[<link linkend="King13a">King13a(p.3.2.4/5)</link>].</simpara>
<section xml:id="intersection-type-syntax">
<title>Syntax</title>
<simpara>For convenience, we repeat the definition of intersection type
expression and of type variables in which intersection types can be
defined as in Java:</simpara>
<screen>InterSectionTypeExpression: 'intersection' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';

TypeVariable:   name=IDENTIFIER ('extends' declaredUpperBounds+=ParameterizedTypeRefNominal ('&amp;' declaredUpperBounds+=ParameterizedTypeRefNominal)*)?</screen>
</section>
<section xml:id="intersection-type-semantics">
<title>Semantics</title>
<simpara>An intersection type may contain several interfaces but only one class.
It virtually declares a subclass of this one class and implements all
interfaces declared in the intersection type. If no class is declared in
the intersection type, the intersection type virtually declares a
subclass of an N4Object instead. This virtual subclass also explains why
only one single class may be contained in the intersection.</simpara>
<simpara><emphasis role="strong">Req. IDE-27:</emphasis> <link linkend="IDE-27">Intersection Type</link> (ver. 1)</simpara>
<simpara>For a given intersection type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, the
following conditions must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The intersection must contain at least one type:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>≠</mo><mi>∅</mi></math></simpara>
</listitem>
<listitem>
<simpara>Only one class must be contained in the intersection type:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>(</mo><mrow><mo>∃</mo><mi>C</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mi>μ</mi><mn>169</mn><mi>;</mi><mo>=</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>}</mi><mo>)</mo></mrow><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>∖</mo><mi>C</mi><mi>:</mi><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>}</mi></mrow></math></simpara>
<simpara>For the time being, only a warning is produced when more than one class
is contained in the intersection type .</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-2302"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-2302</link></simpara>
</sidebar>
</listitem>
<listitem>
<simpara>Non-optional elements:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>¬</mo><mi>T</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> be an intersection type.</simpara>
<itemizedlist>
<listitem>
<simpara>An intersection type is a subtype of another type, if at least one of
its contained types is a subtype of that type: footnote:[This rule is a
generalization of the subtyping rules given in</simpara>
</listitem>
</itemizedlist>
<simpara>[<link linkend="Laurent12a">Laurent12a</link>]Table 2, $\cap^1_l$ and $\cap^2_l$</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>I</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow><mrow><mo>∃</mo><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow></math></simpara>
<itemizedlist>
<listitem>
<simpara>A type is a subtype of an intersection type, if it is a subtype of all
types contained in the intersection type: <footnote><simpara>This rule is a generalization of the subtyping rules given in [<link linkend="Laurent12a">Laurent12a</link></simpara></footnote>Table 2, $\cap^1_l$ and $\cap^2_l$</simpara>
</listitem>
</itemizedlist>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>I</mi></mrow><mrow><mo>∀</mo><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
<itemizedlist>
<listitem>
<simpara>Non-optional elements:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mo>¬</mo><mi>T</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></math></simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-28:</emphasis> <link linkend="IDE-28">Implicit simplification of intersection types</link> (ver. 1)</simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> be an
intersection type. The following simplification rules are always
automatically applied to intersection types.</simpara>
<itemizedlist>
<listitem>
<simpara>The structural typing strategy is propagated to the types of the
intersection: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mi>…</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>These subtyping rules are similar to Ceylon.
<footnote><simpara>In Ceylon, for a given union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo>|</mo><msub><mi>T</mi><mn>2</mn></msub></math> and intersection type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>T</mi><mn>2</mn></msub></math> (with ’|’ is union and ’&amp;’ is intersection), <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>1</mn></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>2</mn></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>U</mi></math> is true, and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>1</mn></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>I</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>2</mn></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>I</mi></math> is true. We should define that as well (if it is not already defined). Cf [<link linkend="King13a">King13a(p.3.2.4/5)</link></simpara></footnote>]</simpara>
<simpara>During validation, intersection types containing union or other
intersection types may be inferred. In this case, the composed types are
flattened. The aforementioned constraints must hold. We also implicitly
use this representation in this specification.</simpara>
<example>
<title>Subtyping with intersection type</title>
<simpara>Let A, B, and C be defined as in the chapter beginning
(<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>)</simpara>
<simpara>The following subtyping relations with intersection types are to be
evaluated as follows <footnote><simpara>See Example <link linkend="Type Examples">Class Hierarchy</link> for class definitions.</simpara></footnote>:</simpara>
<screen>A &lt;: intersection{A}                            -&gt; true
A &lt;: intersection{A,A}                          -&gt; true
intersection{A,X} &lt;: A                          -&gt; true
intersection{X,A} &lt;: A                          -&gt; true
A &lt;: intersection{A,X}                          -&gt; false
intersection{A,X} &lt;: intersection{X,A}          -&gt; true
H12 &lt;: intersection{I1,I2}                      -&gt; true
intersection{I1,I2} &lt;: H12                      -&gt; false
H1 &lt;: intersection{I1,I2}                       -&gt; false
H23 &lt;: intersection{I1,I2}                      -&gt; false
B &lt;: intersection{A}                            -&gt; true
intersection{I1,I2} &lt;: I                        -&gt; true
H12 &lt;: intersection{I,I2}                       -&gt; true
A &lt;: intersection{A,Any}                        -&gt; true
intersection{A,Any} &lt;: A                        -&gt; true</screen>
</example>
<simpara><emphasis role="strong">Req. IDE-29:</emphasis> <link linkend="IDE-29">Join with Intersection Type</link> (ver. 1)</simpara>
<simpara>The join of intersection types is defined as the join of the elements. That is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>S</mi></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mi>S</mi><msub><mi>T</mi><mi>n</mi></msub><mi>S</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>m</mi></msub></mrow></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mi>m</mi></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mi>m</mi></msub></mrow></math></simpara>
<simpara><emphasis role="strong">Req. IDE-30:</emphasis> <link linkend="IDE-30">Meet with intersection Type</link> (ver. 1)</simpara>
<simpara>The meet of intersection types is defined over their elements. That is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mi>S</mi></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mi>S</mi><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><mi>S</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>S</mi><mi>m</mi></msub></mrow></mrow><mrow><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mn>1</mn></msub><msub><mi>S</mi><mi>m</mi></msub><mo>,</mo><mspace width="1em"/><mo>,</mo><mspace width="1em"/><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><msub><mi>S</mi><mi>m</mi></msub></mrow></math></simpara>
<simpara><emphasis role="strong">Req. IDE-31:</emphasis> <link linkend="IDE-31">Upper and Lower Bound of an Intersection Type</link> (ver. 1)</simpara>
<simpara>
The upper and lower bound of an intersection type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> is a union type
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>I</mi><mi>'</mi></msup></math> containing the upper and lower bound of the elements of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>,</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced></mrow><mtext>
</mtext><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced><mo>,</mo><mo>,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>T</mi><mn>1</mn></msub></mfenced></mrow><mtext>
</mtext></math></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-260</link></simpara>
</sidebar>
</section>
<section xml:id="_warnings_2">
<title>Warnings</title>
<simpara>Using <literal>any</literal> types in intersection types is obsolete since they do not change
the resulting intersection type. E.g. the intersection type of A, B and <literal>any</literal>
is equivialent to the intersection type of A and B. However, using the <literal>any</literal>
type is no error because it can be seen as a neutral argument to the
intersection. Nevertheless the use of the <literal>any</literal> type produces a warning, since
its use can indicate a misunderstanding of the intersection type concept
and since it always can be omitted.</simpara>
<simpara><emphasis role="strong">Req. IDE-32:</emphasis> <link linkend="IDE-32">Any type in intersection types</link> (ver. 1)</simpara>
<simpara>No intersection type shall conatin an type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>n</mi><mi>y</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi></math></simpara>
<simpara>The use of the <literal>any</literal> type in an intersection type is similar to the following
case. When two types are used, one of them a supertype of the other,
then this supertype is obsolete. Hence, a warning will be produced to
indicate unecessary code. The warning is only produced when both of the
types are either classes or interfaces, since e.g. structural types are
supertypes of any classes or interfaces.</simpara>
<simpara><emphasis role="strong">Req. IDE-33:</emphasis> <link linkend="IDE-33">Redundant supertypes in intersection types</link> (ver. 1)</simpara>
<simpara>Intersection types shall not contain class or interface types which are a supertype of
another class or interface type that also is contained in the
intersection type. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mo>∃</mo><mi>T</mi><mi>T</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mfenced close=")" open="("><mrow><mi>T</mi><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi><mo>∧</mo><mi>i</mi><mi>s</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>O</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∧</mo><mi>i</mi><mi>s</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>O</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>T</mi><mi>T</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</section>
</section>
<section xml:id="_composed_types_in_wildcards">
<title>Composed Types in Wildcards</title>
<simpara>Composed types may appear as the bound of a wildcard. The following
constraints apply
<footnote><simpara>see "Covariance and contravariance with unions and intersections" at <link xl:href="http://ceylon-lang.org/documentation/1.1/tour/generics/">http://ceylon-lang.org/documentation/1.1/tour/generics/</link></simpara></footnote></simpara>
<simpara><emphasis role="strong">Req. IDE-34:</emphasis> <link linkend="IDE-34">Composed Types as Bound of a Wildcard</link> (ver. 1)</simpara>
<simpara>A composed type may appear as the upper or lower bound of a wildcard. In the covariant case,
the following subtype relations apply:</simpara>
<screen>union{ G&lt;? extends A&gt;, G&lt;? extends B&gt; }  &lt;:  G&lt;? extends union{A,B}&gt;
G&lt;? extends intersection{A,B}&gt;  &lt;:  intersection{ G&lt;? extends A&gt;, G&lt;? extends B&gt; }</screen>
<simpara>In the contra variant case, the following subtype relations apply:</simpara>
<screen>union{ G&lt;? super A&gt;, G&lt;? super B&gt; }  &lt;:  G&lt;? super intersection{A,B}&gt;
G&lt;? super union{A,B}&gt;  &lt;:  intersection{ G&lt;? super A&gt;, G&lt;? super B&gt; }</screen>
</section>
<section xml:id="_property_access_for_composed_types">
<title>Property Access for Composed Types</title>
<simpara>It is possible to directly access properties of union and intersection
types. The following sections define which properties are accessible.</simpara>
<section xml:id="_properties_of_union_type">
<title>Properties of Union Type</title>
<simpara>As an (unfortunately oversimplified) rule of thumb, the properties of a
union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo>|</mo><msub><mi>T</mi><mn>2</mn></msub></math> are simply the intersection of the
properties
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mo>=</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mo>∩</mo><msub><mi>T</mi><mn>2.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi></math>. It is
not quite that simple, however, as the question of "equality" with
regards to properties has to be answered.</simpara>
<simpara><emphasis role="strong">Req. IDE-35:</emphasis> <link linkend="IDE-35">Members of an Union Type</link> (ver. 1)</simpara>
<simpara>For a given union type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo>|</mo><msub><mi>T</mi><mn>2</mn></msub></math>, the following
constraints for its members must hold:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>a</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>:</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi> </mi><mi>k</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mn>2</mn></mfenced><mi>:</mi><mo>∃</mo><mi> </mi><msub><mi>a</mi><mi>k</mi></msub><mo>∈</mo><msub><mi>T</mi><mi>k</mi></msub><mo>.</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>:</mi><msub><mi>a</mi><mi>k</mi></msub><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mfenced close=")" open="("><mrow><msub><mi>a</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow><mrow><msub><mi>a</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>a</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>a</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><msub><mi>a</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><msub><mi>a</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></math></simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>m</mi><mo>∈</mo><mi>U</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mi>:</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><mi> </mi><msub><mi>m</mi><mn>1</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo>,</mo><msub><mi>m</mi><mn>2</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>2.</mn></msub><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo>,</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mrow><mtext>with</mtext></mrow><mi> </mi><mi>p</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>∧</mo><msup><mi>p</mi><mi>'</mi></msup><mo>=</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>∧</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>=</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>,</mo><mrow><mtext>WLOG</mtext></mrow><mi> </mi><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>≤</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="1.2em"/><mo>∀</mo><mi>k</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mn>2</mn></mfenced><mi>:</mi><msub><mi>m</mi><mi>k</mi></msub><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mfenced close=")" open="("><mrow><msub><mi>m</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow><mrow><msub><mi>m</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>m</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>|</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mo>∀</mo><mi> </mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mi>:</mi><msub><mi>p</mi><mi>i</mi></msub><mi> </mi><mrow><mtext>exists with</mtext></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∨</mo><msub><msup><mi>p</mi><mi>'</mi></msup><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd></mtr><mtr><mtd><msub><msup><mi>p</mi><mi>'</mi></msup><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>+</mo><mrow><mtext>"</mtext><mtext>"</mtext></mrow><mo>+</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr/><mtr><mtd><msub><msup><mi>p</mi><mi>'</mi></msup><mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∧</mo><msub><msup><mi>p</mi><mi>'</mi></msup><mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mtd><mtd/></mtr><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd><mtd/></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr/><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd><mtd/></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr/><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∧</mo><mi>i</mi><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mo>-</mo><mn>1</mn></mtd><mtd/></mtr><mtr><mtd><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd><mtd/></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mrow><mo>(</mo><mi>l</mi><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mo>∧</mo><mo>¬</mo><mfenced close=")" open="("><mrow><msub><msup><mi>p</mi><mi>'</mi></msup><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>∧</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></mrow></mfenced><mo>∧</mo><mo>∃</mo><mi>v</mi><mo>∈</mo><mrow><mo>{</mo><mrow><msup><mi>p</mi><mi>'</mi></msup><mo>&lt;</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow><mo>,</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>&lt;</mo><mo>/</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow><mi>v</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>:</mi><msub><mi>p</mi><mi>l</mi></msub><mi> </mi><mrow><mtext>exists with</mtext></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>l</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>v</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mi>v</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow></mrow></math></simpara>
<simpara>Remarks on union type’s members:</simpara>
<itemizedlist>
<listitem>
<simpara>Fields of the same type are merged to a composed field with the same
type. Fields of different types are merged to a getter and setter.</simpara>
</listitem>
<listitem>
<simpara>The return type of a composed getter is the <emphasis>union</emphasis> type of the return
types of the merged getters.</simpara>
</listitem>
<listitem>
<simpara>The type of a composed setter is the <emphasis>intersection</emphasis> type of the types
of the merged setters.</simpara>
</listitem>
<listitem>
<simpara>Fields can be combined with getters and/or setters:</simpara>
<itemizedlist>
<listitem>
<simpara>fields combined with getters allow read-access.</simpara>
</listitem>
<listitem>
<simpara>non-const fields combined with setters allow write-access.</simpara>
</listitem>
<listitem>
<simpara>non-const fields combined with getters <emphasis>and</emphasis> setters, i.e. each type
has either a non-const field or both a getter and a setter of the given
name, allow both read- and write-access.</simpara>
<simpara>Again, types need not be identical; for read-access the <emphasis>union</emphasis> of the
fields’ types and the getters’ return types is formed, for write-access
the <emphasis>intersection</emphasis> of the fields’ types and the setters’ types is
formed. In the third case above, types are combined independently for
read- and write-access if the getters and setters have different types.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>The name of a method’s parameter is only used for error or warning
messages and cannot be referenced otherwise.</simpara>
</listitem>
<listitem>
<simpara>The return type of a composed method is the <emphasis>union</emphasis> type of the return
types of the merged methods.</simpara>
</listitem>
<listitem>
<simpara>A composed method parameter’s type is the <emphasis>intersection</emphasis> type of the
merged parameters types.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_properties_of_intersection_type">
<title>Properties of Intersection Type</title>
<simpara>As an (unfortunately oversimplified) rule of thumb, the properties of an
intersection type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>T</mi><mn>2</mn></msub></math> are the union of properties
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mo>=</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mo>∪</mo><msub><mi>T</mi><mn>2.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi></math>. It is
not quite that simple, however, as the question of "equality” with
regards to properties has to be answered.</simpara>
<simpara><emphasis role="strong">Req. IDE-36:</emphasis> <link linkend="IDE-36">Members of an Intersection Type</link> (ver. 1)</simpara>
<simpara>For a given intersection type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>T</mi><mn>2</mn></msub></math>, the following
constraints for its members must hold:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>a</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>s</mi><mi>:</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mo>∃</mo><msub><mi>a</mi><mn>1</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><mrow><msub><mi>a</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mfenced><mo>∨</mo><mfenced close=")" open="("><mrow><mo>∃</mo><msub><mi>a</mi><mn>2</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>2.</mn></msub><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>s</mi></mrow><mrow><msub><mi>a</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>a</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>a</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><msub><mi>a</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>a</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow></mfenced></mtd></mtr><mtr><mtd><msub><mi>a</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>a</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>a</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>a</mi><mn>2</mn></msub><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><msub><mi>a</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mo>≤</mo><msub><mi>a</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow></mfenced></mtd></mtr><mtr><mtd><msub><mi>a</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>a</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>a</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>a</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>a</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><msub><mi>a</mi><mn>2</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mtd></mtr><mtr><mtd><msub><mi>a</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>a</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mtd></mtr><mtr><mtd><msub><mi>a</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow><mfenced close=")" open="("><mrow><msub><mi>a</mi><mn>2</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mfenced></mtd></mtr></mtable></mfenced></math></simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mi>:</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mo>∃</mo><msub><mi>m</mi><mn>1</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></mrow><mrow><msub><mi>m</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mfenced><mo>∨</mo><mfenced close=")" open="("><mrow><mo>∃</mo><msub><mi>m</mi><mn>2</mn></msub><mo>∈</mo><msub><mi>T</mi><mn>1.</mn></msub><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></mrow><mrow><msub><mi>m</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mfenced><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mrow><mtext>with</mtext></mrow><mi> </mi><mi>p</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mrow><mtext>if</mtext></mrow><mi> </mi><msub><mi>m</mi><mn>1</mn></msub><mi> </mi><mrow><mtext>exists</mtext></mrow><mi> </mi><msup><mi>p</mi><mi>'</mi></msup><mo>=</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi> </mi><mrow><mtext>(else</mtext><mspace width="1ex"/><mrow><msup><mi>p</mi><mi>'</mi></msup><mo>=</mo><mi>∅</mi></mrow><mtext>)</mtext></mrow><mo>,</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mrow><mtext>if</mtext></mrow><mi> </mi><msub><mi>m</mi><mn>2</mn></msub><mi> </mi><mrow><mtext>exists</mtext></mrow><mi> </mi><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>=</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi> </mi><mrow><mtext>(else</mtext><mspace width="1ex"/><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>=</mo><mi>∅</mi></mrow><mtext>)</mtext></mrow><mo>,</mo><mrow><mtext>WLOG</mtext></mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>≤</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="1.0em"/><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>m</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>m</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>m</mi><mn>2</mn></msub><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow></mfenced></mtd></mtr><mtr><mtd><msub><mi>m</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>m</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>m</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>m</mi><mn>2</mn></msub><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi><mo>≤</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mrow></mfenced></mtd></mtr><mtr><mtd><msub><mi>m</mi><mn>2.</mn></msub><mi>a</mi><mi>c</mi><mi>c</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>m</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mi>m</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>&amp;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>m</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>m</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><msub><mi>m</mi><mn>2</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mtd></mtr><mtr><mtd><msub><mi>m</mi><mn>1.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mi>m</mi><mn>1</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mtd></mtr><mtr><mtd><msub><mi>m</mi><mn>2.</mn></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow><mfenced close=")" open="("><mrow><msub><mi>m</mi><mn>2</mn></msub><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mfenced></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mo>∀</mo><mi> </mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mi>:</mi><msub><mi>p</mi><mi>i</mi></msub><mi> </mi><mrow><mtext>exists with</mtext></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∨</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><msup><mi>p</mi><mi>'</mi></msup><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd></mtr><mtr><mtd><msub><msup><mi>p</mi><mi>'</mi></msup><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>+</mo><mrow><mtext>"</mtext><mtext>"</mtext></mrow><mo>+</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr/><mtr><mtd><msub><msup><mi>p</mi><mi>'</mi></msup><mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>|</mo><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∧</mo><msub><msup><mi>p</mi><mi>'</mi></msup><mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mtd><mtd/></mtr><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd><mtd/></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>=</mo><mrow><mo>(</mo><mrow><mo>∃</mo><mi>k</mi><mo>≤</mo><mi>m</mi><mi>i</mi><mi>n</mi><mfenced close=")" open="("><mrow><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>-</mo><mn>1</mn></mrow><mi>i</mi></mfenced><mi>:</mi><msup><mi>p</mi><mi>'</mi></msup><mo>&lt;</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mi>k</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>)</mo></mrow><mo>∨</mo><mfenced close=")" open="("><mrow><mo>∃</mo><mi>k</mi><mo>≤</mo><mi>i</mi><mi>:</mi><msup><mi>p</mi><mi>'</mi></msup><msub><mi>'</mi><mi>k</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mfenced close="" open="{"><mtable><mtr/><mtr><mtd><msub><mrow><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi></mrow><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mo>≥</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>∧</mo><mi>i</mi><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mo>-</mo><mn>1</mn></mtd><mtd/></mtr><mtr><mtd><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mtext>else</mtext></mrow></mtd><mtd/></mtr></mtable></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mrow><mo>(</mo><mi>l</mi><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mo>|</mo><mo>=</mo><mo>|</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>|</mo><mo>∧</mo><mi>l</mi><mi>g</mi><mi>t</mi><mi>;</mi><mn>0</mn><mo>∧</mo><mo>¬</mo><mrow><mo>(</mo><mrow><mi>p</mi><mo>&lt;</mo><mo>/</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>)</mo></mrow><mo>∧</mo><mo>∃</mo><mi>v</mi><mo>∈</mo><mrow><mo>{</mo><mrow><msup><mi>p</mi><mi>'</mi></msup><mo>&lt;</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow><mo>,</mo><msup><mi>p</mi><mi>'</mi></msup><mi>'</mi><mo>&lt;</mo><mo>/</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo><mrow><mi>l</mi><mo>-</mo><mn>1</mn></mrow><mo>}</mo></mrow><mi>v</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>:</mi><msub><mi>p</mi><mi>l</mi></msub><mi> </mi><mrow><mtext>exists with</mtext></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>l</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>v</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>=</mo><mi>v</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><msub><mi>p</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow></mrow></mrow></mrow></math></simpara>
<simpara>Remarks on intersection type’s methods:</simpara>
<itemizedlist>
<listitem>
<simpara>The name of a method’s parameter is only used for error or warning
messages and cannot be referenced otherwise.</simpara>
</listitem>
<listitem>
<simpara>The return type of a method is the <emphasis>intersection</emphasis> type of the return
types of the merged methods.</simpara>
</listitem>
<listitem>
<simpara>A method parameter’s type is the <emphasis>union</emphasis> type of the merged parameters
types.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section xml:id="_constructor_and_classifier_type">
<title>Constructor and Classifier Type</title>
<simpara>A class definition as described in <xref linkend="_classes"/> declares types. Often, it is
necessary to access these types directly, for example to access static
members or for dynamic construction of instances. These two use cases
are actually slightly different and N4JS provides two different types,
one for each use case: constructor and classifier type.<footnote><simpara>The classifier type is, in fact, the <literal>type type</literal> or <literal>metatype</literal> of a type. We use the term classifier type in the specification to avoid the bogus <literal>type type</literal> terminology.</simpara></footnote> The constructor is basically the
classifier type with the additional possibility to call it via in order
to create new instances of the declared type.</simpara>
<simpara>Both <literal>meta</literal> types are different from Java’s type <literal>Class&lt;T&gt;</literal>, as the latter has a defined set of members, while the N4JS metatypes will have members
according to a class definition. The concept of constructors as
metatypes is similar to ECMAScript 2015 [<link linkend="ECMA15a">ECMA15a(p.14.5)</link>]..</simpara>
<section xml:id="_syntax_3">
<title>Syntax</title>
<screen>ConstructorTypeRef returns ConstructorTypeRef: 'constructor' '{' typeArg = [TypeArgument] '}';

ClassifierTypeRef returns ClassifierTypeRef: 'type' '{' typeArg = [TypeRef] '}';</screen>
</section>
<section xml:id="_semantics_2">
<title>Semantics</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-786"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-786</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>Static members of a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> are actually members of the
classifier type .</simpara>
</listitem>
<listitem>
<simpara>The keyword in a static method of a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> actually
binds to the classifier type .</simpara>
</listitem>
<listitem>
<simpara>The constructor type is a subtype of the classifier type :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>T</mi><mi>:</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>T</mi></mfenced><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close="}" open="{"><mi>T</mi></mfenced><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></math></simpara>
</listitem>
<listitem>
<simpara>If a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math> is a subtype (subclass) of a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>, then the classifier type also is a subtype of :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close="}" open="{"><mi>B</mi></mfenced><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close="}" open="{"><mi>A</mi></mfenced><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></mrow><mrow><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>If a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math> is a subtype (subclass) of a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>, and if the constructor function of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math> is a
subtype of the constructor function of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>, then the
classifier type also is a subtype of :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>B</mi></mfenced><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mrow><mo>{</mo><mi>A</mi><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></mrow></mrow><mi>}</mi><mrow><mrow><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>B</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mrow></math>
The subtype relation of the constructor function is
defined in . In the case of the default constructor, the type of the
object literal argument depends on required attributes.</simpara>
<simpara>This subtype relation for the constructor type is enforced if the
constructor of the super class is marked as <literal>final</literal>, see <xref linkend="Constructor"/> for details.</simpara>
</listitem>
<listitem>
<simpara>The type of a classifier declaration or classifier expression is the
constructor of that class:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>C</mi><mi>:</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mrow><mo>[</mo><mi>C</mi></mrow></mrow></mrow></math>}}
            {\mu&#169; \in \{ \type{classifierDefinition} \} }
\end{aligned}\]]</simpara>
</listitem>
<listitem>
<simpara>A class cannot be called as a function in ECMAScript. Thus, the
constructor and type type are only subtype of :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>T</mi><mi>:</mi><mtext>
</mtext><mo>∀</mo><mi>T</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>T</mi></mfenced></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close="}" open="{"><mi>T</mi></mfenced></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>If the type argument of the constructor is not a declared type
(i.e., a wildcard or a type variable with bounds), the constructor
cannot be used in a new expression. Thus, the constructor function
signature becomes irrelevant for subtype checking. In that case, the
following rules apply: 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>S</mi></mfenced></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>T</mi></mfenced></mrow></mrow><mrow><mi>S</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>.</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mo>.</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>≠</mo><mrow><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>W</mi><mi>i</mi><mi>t</mi><mi>h</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></mrow></mrow></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/221"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-221</link></simpara>
</sidebar>
<simpara>Note that this is only true for the right hand side
of the subtyping rule. A constructor type with a wildcard is never a
subtype of a constructor type without a wildcard.</simpara>
<simpara>The figure <xref linkend="cdConstructorClassifierType"/> shows the subtype relations defined by the preceding rules.</simpara>
<figure xml:id="cdConstructorClassifierType">
<title>Classifier and Constructor Type Subtype Relations</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cdConstructorClassifierType.png"/>
</imageobject>
<textobject><phrase>cdConstructorClassifierType</phrase></textobject>
</mediaobject>
</figure>
<simpara>Consequences:</simpara>
<itemizedlist>
<listitem>
<simpara>Overriding of static methods is possible and by using the constructor
or classifier type, polymorphism for static methods is possible as well.</simpara>
<example>
<title>Static Polymorphism</title>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    static foo(): string { return "A"; }
    static bar(): string { return this.foo(); }
}
class B extends A {
    @Override
    static foo(): string { return "B"; }
}

A.bar(); // will return "A"
B.bar(); // will return "B", as foo() is called polymorphical</programlisting>
</example>
</listitem>
<listitem>
<simpara>It is even possible to refer to the constructor of an abstract class.
The abstract class itself cannot provide this constructor (it only
provides a type..), that is to say only concrete subclasses can provide
constructors compatible to the constructor.</simpara>
<example>
<title>Constructor of Abstract Class</title>
<programlisting language="n4js" linenumbering="unnumbered">abstract class A {}
class B extends A {}
function f(ctor: constructor{A}): A { return new ctor(); }

f(A); // not working: type{A} is not a subtype of constructor{A}.
f(B); // ok</programlisting>
</example>
</listitem>
</itemizedlist>
<simpara>Allowing wildcards on constructor type references has pragmatic reasons.
The usage of constructor references usually indicates very dynamic
scenarios. In some of these scenarios, e.g., in case of dynamic creation
of objects in the context of generic testing or injectors, arbitrary
constructors may be used. Of course, it won’t be possible to check the
correct new expression call in these cases – and using new expressions
is prevented by N4JS if the constructor reference contains a wildcard.
But other constraints, implemented by the client logic, may guarantee
correct instantiation via more dynamic constructors, for example via the
ECMAScript 2015 reflection API. In order to simplify these scenarios and
preventing the use of <literal>any</literal>, wildcards are supported in constructors. Since a
constructor with a wildcard cannot be used in a new expression anyway,
using a classifier type is usually better than using a constructor type
with wildcard.</simpara>
<simpara>Using wildcards on classifier types would have the same meaning as using
the upper bound directly. That is, a type reference <literal>type{? extends C}</literal> can simply be replaced with <literal>type{c}</literal>, and <literal>type{?}</literal> with <literal>type{any}</literal>.</simpara>
<simpara>To conclude this chapter, let us compare the different types introduced
above depending on whether they are used with wildcards or not:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>having a value of type <literal>constructor{C}</literal>, we know we have &#8230;&#8203;</simpara>
<itemizedlist>
<listitem>
<simpara>a constructor function of <literal>{C}</literal> or a subclass of <literal>{C}</literal>,</simpara>
</listitem>
<listitem>
<simpara>that can be used for instantiation (i.e. the represented class is not
abstract),</simpara>
</listitem>
<listitem>
<simpara>that has a signature compatible to the owned or inherited constructor
of <literal>{C}</literal>.</simpara>
<simpara>This means we have the constructor function of class <literal>{C}</literal> (but only if is
non-abstract) or the constructor function of any non-abstract subclass
of <literal>{C}</literal> with an override compatible signature to that of `{C}&#8217;s constructor
function.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>having a value of type <literal>constructor{? extends C}</literal>, we know we have &#8230;&#8203;</simpara>
<itemizedlist>
<listitem>
<simpara>a constructor function of <literal>{C}</literal> or a subclass of <literal>{C}</literal>,</simpara>
</listitem>
<listitem>
<simpara>that can be used for instantiation (i.e. the represented class is not
abstract).</simpara>
<simpara>So, same situation as before except that we know nothing about the
constructor function’s signature. However, if <literal>{C}</literal> has a covariant
constructor, cf. <xref linkend="Covariant_Constructors"/>, we can still conclude that we have an override compatible constructor function to that of <literal>{C}</literal>, because classes with
covariant constructors enforce all their subclasses to have override
compatible constructors.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>have a value of type <literal>type{? extends C}</literal> or <literal>type{C}</literal> (the two types are equivalent), we know we
have &#8230;&#8203;</simpara>
<itemizedlist>
<listitem>
<simpara>an object representing a type (often constructor functions are used
for this, e.g. in the case of classes, but could also be a plain object,
e.g. in the case of interfaces),</simpara>
</listitem>
<listitem>
<simpara>that represents type <literal>{C}</literal> or a subtype thereof,</simpara>
</listitem>
<listitem>
<simpara>that cannot be used for instantiation (e.g. could be the constructor
function of an abstract class, the object representing an interface,
etc.).</simpara>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
<simpara>Slightly simplified, we can say that in the first above case we can
always use the value for creating an instance with <literal>new</literal>, in the second case
only if the referenced type has a covariant constructor, cf. <xref linkend="Covariant_Constructors"/>, and never
in the third case.</simpara>
</section>
<section xml:id="_constructors_and_prototypes_in_ecmascript_2015">
<title>Constructors and Prototypes in ECMAScript 2015</title>
<simpara><link linkend="Constructors and prototypes">The figure below for two classes A and B in ECMAScript 2015</link> shows the constructors, prototypes, and the relations between them for
the following ECMAScript 2015 code.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">class A {}
class B extends A {}

var b = new B();</programlisting>
<simpara>Note that the diagram shows plain ECMAScript 2015 only. Further note
that <literal>A</literal> is defined without an  <literal>extends</literal> clause, which is what ECMAScript 2015 calls a <emphasis>base class</emphasis> (as opposed to a <emphasis>derived class</emphasis>). The constructor of a
base class always has Function.prototype as its prototype. If we had
defined <literal>A</literal> as <literal>class A extends Object {}</literal> in the listing above, then the constructor of <literal>A</literal> would have Object’s constructor as its prototype (depicted in as a dashed red
arrow), which would make a more consistent overall picture.</simpara>
<figure xml:id="Constructors_and_prototypes">
<title>Constructors and prototypes for two classes A and B in ECMAScript 2015 (not N4JS!)</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/ctorsProtosInES6.png"/>
</imageobject>
<textobject><phrase>ctorsProtosInES6</phrase></textobject>
</mediaobject>
</figure>
<simpara>Base classes in the above sense are not available in N4JS. If an N4JS
class does not provide an <literal>extends</literal> clause, it will implicitly inherit from
built-in class <literal>N4Object</literal>, if it provides an <literal>extends</literal> clause stating <literal>Object</literal> as its super type, then it corresponds to what is shown in <xref linkend="Constructors and prototypes"/> with the red dashed arrow.</simpara>
</section>
</section>
<section xml:id="_this_type">
<title>This Type</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-377"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-377</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-785"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-785</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/228"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-228</link></simpara>
</sidebar>
<simpara>The keyword may represent either a literal (cf. <xref linkend="ex:This keyword and type in instance and static context"/>) or may refer to the type. In this section, we describe the latter case.</simpara>
<simpara>Typical use cases of the type include:</simpara>
<itemizedlist>
<listitem>
<simpara>declaring the return type of instance methods</simpara>
</listitem>
<listitem>
<simpara>declaring the return type of static methods</simpara>
</listitem>
<listitem>
<simpara>as formal parameter type of constructors in conjunction with use-site
structural typing</simpara>
</listitem>
<listitem>
<simpara>the parameter type of a function type expression, which appears as
type of a method parameter</simpara>
</listitem>
<listitem>
<simpara>the parameter type in a return type expression (<literal>this</literal>,<literal>constructor{this}</literal>)</simpara>
</listitem>
<listitem>
<simpara>an existential type argument inside a return type expression for
methods (e.g.<literal>ArrayList&lt;? extends this&gt; method(){&#8230;&#8203;}</literal>)</simpara>
</listitem>
</itemizedlist>
<simpara>The precise rule where it may appear is given below in <xref linkend="req:37 This Type"/>.</simpara>
<simpara>The <literal>this</literal> type is similar to a type variable, and it is bound to the declared
or inferred type of the receiver. If it is used as return type, all
return statements of the methods must return the <literal>this</literal> keyword or a variable
value implicitly inferred to a <literal>this</literal> type (e.g. <literal>var x = this; return x;</literal>).</simpara>
<simpara>[[Simple This Type]]
.Simple This Type</simpara>
<screen>class A {
    f(): this {
        return this;
    }
})
class B extends A {}

var a: A; var b: B;
a.f(); // returns something with the type of A
b.f(); // returns something with the type of B</screen>
<simpara><literal>this</literal> can be thought of as a type variable which is implicitly substituted with
the declaring class (i.e. this type used in a class <literal>{A}</literal> actually means <literal>&lt;? extends A&gt;</literal>).</simpara>
<section xml:id="this-type-syntax">
<title>Syntax</title>
<screen>ThisTypeRef returns ThisTypeRef:
    ThisTypeRefNominal | ThisTypeRefStructural;

ThisTypeRefNominal returns ThisTypeRefNominal:
    {ThisTypeRefNominal} 'this'
;

ThisTypeRefStructural  returns ThisTypeRefStructural:
        typingStrategy=TypingStrategyUseSiteOperator
        'this'
        ('with' '{' ownedStructuralMembers+=TStructMember* '}')?
;</screen>
<simpara>The keyword <literal>this</literal> and the type expression <literal>this</literal> look similar, however they can refer
to different types. The type always refers to the type of instances of a
class. The <literal>this</literal> keyword refers to the type of instances of the class in case
of instance methods, but to the classifier the of the class in case of
static methods. See  <xref linkend="This_Keyword"/> for details.</simpara>
<simpara>[[ex:This keyword and type in instance and static context]]
Note that the following code is not working, because some usages below are
not valid in N4JS. This is only to demonstrate the types.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    instanceMethod() {
        var c: this = this;
    }
    static staticMethod() {
        var C: type{this} = this;
    }
}</programlisting>
<simpara>Structural typing and additional members in structural referenced types
is described in <xref linkend="Structural_Typing"/>.</simpara>
</section>
<section xml:id="this-keyword-semantics">
<title>Semantics</title>
<simpara><emphasis role="strong">Req. IDE-37:</emphasis> <link linkend="IDE-37">This Type</link> (ver. 1)</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-538"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-538</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>used in the context of a class is actually inferred to an existential
type inside the class itself.</simpara>
</listitem>
<listitem>
<simpara>the type may only be used</simpara>
<itemizedlist>
<listitem>
<simpara>as the type of a formal parameter of a constructor, if and only if
combined with use-site structural typing.</simpara>
</listitem>
<listitem>
<simpara>at covariant positions within member declarations, except for static
members of interfaces.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>Remarks</simpara>
<itemizedlist>
<listitem>
<simpara>Due to the function subtype relation and constraints on overriding
methods (in which the overriding method has to be a subtype of the
overridden method), it is not possible to use the type in formal
parameters but only as return type. The following listing demonstrates
that problem:</simpara>
<screen>class A {
    bar(x: this): void { ... } // error
    // virtually defines: bar(x: A): void
}
class B extends A {
    // virtually defines: bar(x: B): void
}</screen>
<simpara>As the <literal>this</literal> type is replaced similar to a type variable, the virtually
defined method <literal>bar</literal> in is not override compatible with <literal>bar</literal> in <literal>{A}</literal>.</simpara>
<simpara>In case of constructors, this problem does not occur because a subclass
constructor does not need to be override compatible with the constructor
of the super class. Using <literal>this</literal> as the type of a constructor’s parameter,
however, would mean that you can only create an instance of the class if
you already have an instance (considering that due to the lack of method
overloading a class can have only a single constructor), making creation
of the first instance impossible. Therefore, <literal>this</literal> is also disallowed as the
type of a constructor’s parameter.</simpara>
</listitem>
<listitem>
<simpara>The difference between the type <literal>this</literal> and the keyword <literal>this</literal> is when and how the
actual type is set: The actual type of the <literal>this</literal> type is computed at compile
(or validation) time and is always the containing type (of the member in
which the type expression is used) or a subtype of that type – this is
not a heuristic, this is so by definition. In contrast, the actual type
of the keyword <literal>this</literal> is only available at runtime, while the type used at
compilation time is only a heuristically computed type, in other words,
a good guess.</simpara>
</listitem>
<listitem>
<simpara>The value of the <literal>this</literal> type is, in fact, not influenced by any <literal>@This</literal> annotations.
Instead of using <literal>this</literal> in these cases, the type expressions in the <literal>@This</literal> annotations can be used.</simpara>
</listitem>
<listitem>
<simpara>The <literal>this</literal> type is always bound to the instance-type regardless of the
context it occurs in (non-static or static). To refer to the
this-classifier (static type) the construct <literal>type{this}</literal> is used. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-785"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-785</link></simpara>
</sidebar>
<simpara>[[ex:this type in function-type-expression]]</simpara>
<screen>class A {
    alive: boolean = true;
    methodA(func: {function(this)}): string {
       func(this);   // applying the passed-in function
       return "done";
    }
}</screen>
<simpara>The use of <literal>this</literal> type is limited to situations where it cannot be referred in
mixed co- and contra-variant ways. In the following example the problem
is sketched up. <footnote><simpara>The phenomenon is described in IDEBUG-263</simpara></footnote></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/263"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-263</link></simpara>
</sidebar>
<simpara>[[ex:problems with this type and type arguments]]</simpara>
<screen>// Non-working example, see problem in line 15.
class M&lt;V&gt; {  public value: V;  }
class A {
    public store: M&lt;{function(this)}&gt;; // usually not allowed, but let's assume it would be possible----
}
class B extends A { public x=0; } // type of store is M&lt;{function(B)}&gt;

var funcA = function(a: A) {/*...something with a...*/}
var funcB = function(b: B) { console.log(b.x); }
var a: A = new A();  var b: B = new B();
b.store.value = funcA  // OK, since {function(A)} &lt;: {function(B)}
b.store.value = funcB  // OK.

var a2: A = b; // OK, since B is a subtype of A
a2.store.value( a ) // RUNTIME ERROR, the types are all correct, but remember b.store.value was assigned to funcB, which can only handle subtypes of B !</screen>
</section>
</section>
<section xml:id="_enums">
<title>Enums</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-327"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-327</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-980"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-980</link></simpara>
</sidebar>
<simpara>Enums are an ordered set of literals. Although enums are not true
classes, they come with built-in methods for accessing value, name and
type name of the enum.</simpara>
<simpara>In N4JS, two flavours of enumerations are distinguished: ordinary enums
(N4JS) and string based enums. Ordinary enums (or in short, enums) are
used while programming in N4JS. String based enums are introduced to
access enumerations derived from standards, mainly developed by the W3C,
in order to access the closed set of string literals defined in webIDL
syntax.</simpara>
<section xml:id="_enums_n4js">
<title>Enums (N4JS)</title>
<simpara>Definition and usage of an enumeration:</simpara>
<screen>// assume this file to be contained in a package "myPackage"
enum Color {
    RED, GREEN, BLUE
}

enum Country {
    DE : "276",
    US : "840",
    TR : "792"
}

var red: Color = Color.RED;
var us: Country = Country.US;

console.log(red.name); // --&gt; RED
console.log(red.value); // --&gt; RED
console.log(red.n4class.fqn); // --&gt; myPackage.Color
console.log(red.toString()); // --&gt; RED

console.log(us.name); // --&gt; US
console.log(us.value); // --&gt; 840
console.log(us.n4classfqn); // --&gt; myPackage.Country
console.log(us.toString()); // --&gt; 840</screen>
<section xml:id="enums-syntax">
<title>Syntax</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-8"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-8</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-327"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-327</link></simpara>
</sidebar>
<screen>N4EnumDeclaration:
        annotations+=Annotation*
        (accessModifier=N4JSTypeAccessModifier)?
        'enum' name=IDENTIFIER
        '{'
            literals+=N4EnumLiteral (',' literals+= N4EnumLiteral)*
        '}' ;

N4EnumLiteral:
        name=IDENTIFIER (':' value=StringLiteral)?</screen>
</section>
<section xml:id="enums-semantics">
<title>Semantics</title>
<simpara>The enum declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> is of type <literal>type{E}</literal> and every enumeration is
implicitly derived from <literal>{N4Enum}</literal>. There are similarities to other languages such
as Java, for example, where the literals of an enum are treated as final
static fields with the type of the enumeration and the concrete
enumeration provides specific static methods including the literals.
This leads to the following typing rules:</simpara>
<simpara><emphasis role="strong">Req. IDE-38:</emphasis> <link linkend="IDE-38">Enum Type Rules</link> (ver. 1)</simpara>
<simpara>For a given enumeration declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> with literals <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>L</mi></math>, the following
type rules are defined:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Every enumeration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> is a subtype of the base type :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>E</mi></mrow><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mi>}</mi><mi>}</mi><mrow/></math></simpara>
</listitem>
<listitem>
<simpara>Every literal <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>L</mi></math> of an enumeration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> is
of the type of the enumeration: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>L</mi><mi>:</mi><mi>E</mi></mrow><mrow><mi>L</mi><mo>∈</mo><mi>E</mi><mo>.</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi></mrow></math> That means that every literal is a subtype of :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>L</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></mrow><mrow><mi>L</mi><mo>∈</mo><mi>E</mi><mo>.</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Since the implementation of enumerations may vary per runtime, enum
literals are not objects: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>L</mi><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo></mrow><mrow><mi>L</mi><mo>∈</mo><mi>E</mi><mo>.</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi></mrow></math></simpara>
</listitem>
</orderedlist>
<simpara>The base enumeration type is defined as follows <footnote><simpara>This is pseudo N4JS code as it is not possible to infer from <literal>any</literal> or define abstract static methods.</simpara></footnote></simpara>
<screen>/**
 * Base class for all enumeration, literals are assumed to be static constant fields of concrete subclasses.
 */
public object N4Enum extends any {

    /**
     * Returns the name of a concrete literal
     */
    public get name(): string

    /**
     * Returns the value of a concrete literal. If no value is
     * explicitly set, it is similar to the name.
     */
    public get value(): string

    /**
     * Returns a string representation of a concrete literal, it returns
     * the same result as value()
     */
     public toString(): string

    /**
     * Returns the meta class object of this enum literal for reflection.
     * The very same meta class object can be retrieved from the enumeration type directly.
     */
    public static get n4type(): N4EnumType

    //IDE-785 this as return type in static

    /**
     * Returns array of concrete enum literals
     */
    public static get literals(): Array&lt;? extends this&gt;

    /**
     * Returns concrete enum literal that matches provided name,
     * if no match found returns undefined.
     */
    public static findLiteralByName(name: string): this

    /**
     * Returns concrete enum literal that matches provided value,
     * if no match found returns undefined.
     */
    public static findLiteralByValue (value: string): this
}</screen>
<simpara>Enums do not define a type hierarchy except that they are subtypes of <literal>N4Enum</literal>.
In particular, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></math> for all enums. Still,
enums could be used similarly to objects:</simpara>
<itemizedlist>
<listitem>
<simpara>enum types could be used on the right hand side of the <literal>instanceof</literal> operator.</simpara>
</listitem>
<listitem>
<simpara>enum variables could be used with the <literal>typeof</literal> operator, returning the simple
name of the enumaration.</simpara>
</listitem>
<listitem>
<simpara>enum variables used with the <literal>+</literal> operator will always be converted to <literal>string</literal>.</simpara>
</listitem>
<listitem>
<simpara>enum variables must not be used in a context in which a boolean or number type is expected.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-39:</emphasis> <link linkend="IDE-39">Unique literal names</link> (ver. 1)</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>i</mi><mo>,</mo><mi>j</mi><mi>:</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi><mrow><mo>[</mo><mi>i</mi></mrow></math>.name = literals[j].name \iff i = j$]
Literal names have to be unique.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Req. IDE-40:</emphasis> <link linkend="IDE-40">Enum Literals are Singletons</link> (ver. 1)</simpara>
<simpara>Enum literals are singletons:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><msub><mi>e</mi><mn>1</mn></msub><mo>,</mo><msub><mi>e</mi><mn>2</mn></msub><mo>,</mo><mi>μ</mi><mfenced close=")" open="("><msub><mi>e</mi><mn>1</mn></msub></mfenced><mo>=</mo><mi>μ</mi><mfenced close=")" open="("><msub><mi>e</mi><mn>2</mn></msub></mfenced><mo>=</mo><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>∧</mo><msub><mi>e</mi><mn>1</mn></msub><mo>=</mo><msub><mi>e</mi><mn>2</mn></msub><mi>:</mi><msub><mi>e</mi><mn>1</mn></msub><mo>&lt;</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>=</mo><mo>=</mo><mi>}</mi><msub><mi>e</mi><mn>2</mn></msub><msub><mi>e</mi><mn>1</mn></msub><mo>&lt;</mo><mo>/</mo><mi>l</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>&gt;</mo><mo>=</mo><mo>=</mo><mo>=</mo><mi>}</mi><msub><mi>e</mi><mn>2</mn></msub></math></simpara>
<simpara>[[ex:Enumeration List]]
Due to the common base type <literal>N4Enum</literal> it is possible to define generics accepting only enumeration, as shown in this example:</simpara>
<screen>enum Color { R, G, B}

class EList&lt;T extends N4Enum&gt; {
    add(t: T) {}
    get(): T { return null; }
}

var colors: EList&lt;Color&gt;;
colors.add(Color.R);
var c: Color = colors.get();</screen>
</section>
</section>
<section xml:id="_string_based_enums">
<title>String-Based Enums</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1221"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1221</link></simpara>
</sidebar>
<simpara>In current web standards [<link linkend="W3C:Steen:14:XL">W3C:Steen:14:XL</link>], definitions of enumerations are often given in webIDL syntax.
While the webIDL-definition assembles a set of unique
string literals as a named enum-entity, the language binding to
ECMAScript refers to the usage of the members of these enumerations
only. Hence, if an element of an enumeration is stored in a variable or
field, passed as a parameter into a method or function or given back as
a result, the actual type in JavaScript will be <literal>string</literal>. To provide the N4JS
user with some validations regarding the validity of a statement at
compile time, a special kind of subtypes of <literal>string</literal> are introduced: the
string-based enum using the <literal>@StringBased</literal> annotation. (See also other string-based
types like <literal>pathSelector&lt;T&gt;</literal> and <literal>i18nKey</literal> in <xref linkend="_primitive_pathselector_and_i18nkey"/>.)</simpara>
<simpara>String-based enums do not have any kind of runtime representation;
instead, the transpiler will replace each reference to a literal of a
string-based enum by a corresponding string literal in the output code.
Furthermore, no meta-information is available for string-based enums,
i.e. the <literal>n4type</literal> property is not available. The only exception is the static
getter <literal>literals</literal>: it is available also for string-based enums and has the same
meaning. In case of string-based enums, however, there won’t be a getter
used at runtime; instead, the transpiler replaces every read access to
this getter by an array literal containing a string literal for each of
the enum’s literals.</simpara>
<simpara><emphasis role="strong">Req. IDE-41:</emphasis> <link linkend="IDE-41">String-Based Enum Type Rules</link> (ver. 1)</simpara>
<simpara>For a string-based enum declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mi>S</mi></msub></math> with literals
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>L</mi><mi>S</mi></msub></math> the following type rules are defined:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Every string-based enumeration <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mi>S</mi></msub></math> is a subtype of the
base type <literal>N4StringBasedEnum</literal>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><msub><mi>E</mi><mi>S</mi></msub></mrow><mrow><mi>N</mi><mn>4</mn><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mi>w</mi><mi>h</mi><mi>i</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>t</mi><mi>s</mi><mi>e</mi><mi>l</mi><mi>f</mi><mi>i</mi><mi>s</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>l</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>t</mi><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>a</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow><mrow><mrow><mi>N</mi><mn>4</mn><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mrow><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>N</mi><mn>4</mn><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
<listitem>
<simpara><literal>N4StringBasedEnum</literal> is a subtype of <literal>string</literal>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>N</mi><mn>4</mn><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
<listitem>
<simpara>Each literal in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>L</mi><mi>S</mi></msub></math> of a string-based enumeration
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>E</mi><mi>S</mi></msub></math> is of the type of the string-based enumeration.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>l</mi><msub><mi>E</mi><mi>S</mi></msub></mrow><mrow><mi>l</mi><mo>∈</mo><msub><mi>E</mi><mi>S</mi></msub><mo>.</mo><msub><mi>L</mi><mi>S</mi></msub></mrow></math></simpara>
</listitem>
<listitem>
<simpara><xref linkend="req:39Unique literal names"/> also applies for <literal>N4StringBasedEnum</literal>.</simpara>
</listitem>
<listitem>
<simpara>[<xref linkend="req:40Enum Literals are Singletons"/>]
also applies for <literal>N4StringBasedEnum</literal>.</simpara>
</listitem>
<listitem>
<simpara>References to string-based enums may only be used in the following
places:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>in type annotations</simpara>
</listitem>
<listitem>
<simpara>in property access expressions to refer to one of the enum’s
literals</simpara>
</listitem>
<listitem>
<simpara>in property access expressions to read from the static getter <literal>literals</literal></simpara>
<simpara>In particular, it is invalid to use the type of a string-based enum as a
value, as in</simpara>
<programlisting language="n4js" linenumbering="unnumbered">    @StringBased enum Color { RED, GREEN, BLUE }
    var c = Color;</programlisting>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<formalpara>
<title>Gecko-Engine webIDL XMLHttpRequestResponseType as taken from [<link linkend="W3C:Steen:14:XL">W3C:Steen:14:XL</link>]</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">enum XMLHttpRequestResponseType {
  "",
  "arraybuffer",
  "blob",
  "document",
  "json",
  "text" //, ... and some mozilla-specific additions
}</programlisting>
</para>
</formalpara>
<simpara>Compatible Definition of this Enumeration in N4JS, provided through a
runtime-library definition:</simpara>
<formalpara>
<title>File in source-folder: w3c/dom/XMLHttpRequestResponseType.n4js</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">@StringBased enum XMLHttpRequestResponseType {
  vacant : "",
  arrayBuffer : "arraybuffer",
  blob : "blob",
  document : "document",
  json : "json",
  text : "text"
 }</programlisting>
</para>
</formalpara>
<simpara>Usage of the enumeration in the definition files of the runtime-library.
Note the explicit import of the enumeration.</simpara>
<formalpara>
<title>XMLHttpRequestResponse.n4jsd</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">@@ProvidedByRuntime
import XMLHttpRequestResponseType from "w3c/dom/XMLHttpRequestResponseType";
@Global
export external public class XMLHttpRequestResponse extends XMLHttpRequestEventTarget {
  // ...
  // Setter Throws TypeError Exception
  public responseType: XMLHttpRequestResponseType;
  // ...
}</programlisting>
</para>
</formalpara>
<simpara>Client code importing the runtime-library as defined above can now use
the Enumeration in a type-safe way:</simpara>
<formalpara>
<title>String-Based Enumeration Usage</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">import XMLHttpRequestResponseType from "w3c/dom/XMLHttpRequestResponseType";

public function process(req: XMLHttpRequest) : void {
  if( req.responseType == XMLHttpRequestResponseType.text ) {
    // do stuff ...
  } else {
       // signal unrecognized type.
       var errMessage: req.responseType + " is not supported"; // concatination of two strings.
       show( errMessage );
  }
}</programlisting>
</para>
</formalpara>
</section>
</section>
</chapter>
</part>
<part xml:id="_classifiers">
<title>Classifiers</title>
<chapter xml:id="_n4js_specific_classifiers">
<title>N4JS Specific Classifiers</title>
<simpara>N4JS provides three new metatypes: class, interface, and
enums. In this section we describe classes and interfaces. These
metatypes, called <emphasis>classifiers</emphasis>, share some common properties which
are described before type specific properties are outlined in the
following sections.</simpara>
<simpara>All of these metatypes can be marked with type access modifiers:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">enum N4JSTypeAccessModifier: project | public;</programlisting>
<section xml:id="_properties_2">
<title>Properties</title>
<simpara>Properties defined by syntactic elements:</simpara>
<variablelist>
<varlistentry>
<term><literal>annotations</literal>: </term>
<listitem>
<simpara>Arbitrary annotations, see <xref linkend="Annotations"/> for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>accessModifier</literal>: </term>
<listitem>
<simpara>N4JS type access modifier: <literal>public</literal>, or <literal>project</literal>;  <literal>public</literal> can be combined with <literal>@Internal</literal>; if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></math> is <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></math> the default is else the
default is <literal>private</literal>.
task:IDE-84[]</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>name</literal>: </term>
<listitem>
<simpara>The simple name of a classifier. If the classifier is defined by an
anonymous class expression, an artificial but unique name is created.
The name needs to be a valid identifier, see <xref linkend="Valid_Names"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typePars</literal>: </term>
<listitem>
<simpara>Collection of type parameters of a generic classifier; empty by default.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ownedMembers</literal>: </term>
<listitem>
<simpara>Collection of owned members, i.e. methods and fields defined directly in
the classifier and, if present, the explicitly defined constructor.
Depending on the concrete classifier, additional constraints are
defined.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typingStrategy</literal>: </term>
<listitem>
<simpara>The definition-site typing strategy. By default nominal typing is used.
See <xref linkend="Structural_Typing"/>for details.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following pseudo properties are defined via annotations:</simpara>
<variablelist>
<varlistentry>
<term><literal>export</literal>: </term>
<listitem>
<simpara>Boolean property set to true if the <literal>export</literal> modifier is set. If value is true,
the classifier may be accessible outside the project. task:IDE-84[]</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>final</literal>: </term>
<listitem>
<simpara>Boolean property which is set to final if annotation <literal>@Final</literal> is set. Also see
<xref linkend="Final_Extensibility"/></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>deprecated</literal>: </term>
<listitem>
<simpara>Boolean property set to true if annotation <literal>@Deprecated</literal> is set.
task:IDE-138[]</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>We additionally define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>acc</literal>: </term>
<listitem>
<simpara>Type access modifier as described in <xref linkend="Accessibility_of_Types"/>, it is the aggregated value of the
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></math> and the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></math> property.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>owned{Fields|Methods|Getters|Setters|Accessors}</literal>: </term>
<listitem>
<simpara>Filters ownedMembers by metatype, short for<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>∈</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>μ</mi><mfenced close=")" open="("><mi>x</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow></math> etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>members</literal>: </term>
<listitem>
<simpara>Reflexive transitive closure of all members of a classifier and its
super classifiers, see below on how this is calculated.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fields|methods|getters|setters|accessors</literal>: </term>
<listitem>
<simpara>Filters members by metatype, short for<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>∈</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>μ</mi><mfenced close=")" open="("><mi>x</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow></math> etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>superClassifiers</literal>: </term>
<listitem>
<simpara>Classes and interface may extend or implement classes or interfaces. Any
class or interface extended or interface implemented is called <emphasis>super
classifier</emphasis>. We distinguish the directly subtyped classifiers and from
the transitive closure of supertypes <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><msup><mi>s</mi><mo>*</mo></msup></math></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_common_semantics_of_classifiers">
<title>Common Semantics of Classifiers</title>
<simpara><emphasis role="strong">Req. IDE-42:</emphasis> <link linkend="IDE-42">Subtyping of Classifiers</link> (ver. 1)</simpara>
<simpara>For a given type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, and supertypes<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>=</mo><mfenced close="}" open="{"><msub><mi>S</mi><mn>1</mn></msub><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><msub><mi>S</mi><mi>n</mi></msub></mfenced></math> directly subtyped
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>,<?asciidoc-br?>
the following constraints must be true:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The supertypes must be accessible to the subtype:
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>S</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>S</mi><mi>n</mi></msub></math> must be accessible to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>All type parameters of the direct supertypes have to be bound by
type arguments in the subtype and the type arguments have to be
substitutable types of the type parameters.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mn>0</mn><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mi>k</mi><mi>:</mi><mo>∀</mo><mi>P</mi><mo>∈</mo><msub><mi>S</mi><mi>i</mi></msub><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∃</mo><mi>A</mi><mo>∈</mo><msub><mi>C</mi><mo>.</mo></msub><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mi>:</mi><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>A</mi><mi>P</mi></mfenced><mo>∧</mo><mi>A</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>P</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi></math></simpara>
</listitem>
<listitem>
<simpara>Wildcards may not be used as type argument when binding a
supertype’s type parameters.</simpara>
</listitem>
<listitem>
<simpara>A classifier cannot be directly subtyped directly multiple times:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><msub><mi>S</mi><mi>i</mi></msub><mo>,</mo><msub><mi>S</mi><mi>j</mi></msub><mfenced close=")" open="("><mi>i</mi><mrow><mi>j</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mn>1.</mn><mo>.</mo><mi>n</mi></mrow></mfenced></mrow></mfenced><mi>:</mi><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><msub><mi>S</mi><mi>j</mi></msub><mi>i</mi><mo>=</mo><mi>j</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>In order to simplify the following constraints, we use the pseudo
property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math> to refer to all members of a classifier.
This includes all members directly declared by the classifier itself,
i.e. the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></math>, and all members inherited from its
super classifiers. The concrete mechanisms for inheriting a member are
different and further constraint (cf. <xref linkend="Redefinition_of_Members"/>). A classifier only inherits its members from its direct supertypes, although the supertypes may contains
members inherited from their supertypes.</simpara>
</section>
<section xml:id="_classes">
<title>Classes</title>
<section xml:id="_definition_of_classes">
<title>Definition of Classes</title>
<simpara>Classes are either declared with a class declaration on top level, or
they can be used as anonymous classes in expressions. The latter may
have a name, which may be used for error messages and reflection.</simpara>
<simpara>At the current stage, class expressions are effectively disabled at
least until the semantics of them are finalized in ECMAScript 6.</simpara>
<simpara>In N4JS (as in many other languages) multi-inheritance of classes is not
supported. Although the <literal>diamond problem</literal> (of functions being defined
in both superclasses) could be solved via union and intersection types,
this would lead to problems when calling these super implementations.
This is particularly an issue due to JavaScript not supporting multiple
prototypes.
<footnote><simpara>E.g., for given <literal>class A{ foo(A):A{}} class B{ foo(B):B{}}</literal>, a class C could be defined as <literal>class C{ foo(union{A,B}):intersection{A,B}{}}</literal>. In this case it would then be a syntactical problem (and even worse - a conceptual problem) of how to call the super methods defined in A and Bfrom C.</simpara></footnote>
Interfaces, however, allow for multi-inheritance. Since the
former can also define functions with bodies, this is not a hard
restriction.</simpara>
<section xml:id="class-syntax">
<title>Syntax</title>
<formalpara>
<title>Syntax N4 Class Declaration and Expression</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">N4ClassDeclaration &lt;Yield&gt;:
    =&gt;(
        {N4ClassDeclaration}
        annotations+=Annotation*
        (declaredModifiers+=N4Modifier)*
        'class' typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield&gt;?
    )
    TypeVariables?
    ClassExtendsClause&lt;Yield&gt;?
    Members&lt;Yield&gt;
;

N4ClassExpression &lt;Yield&gt;:
    {N4ClassExpression}
    'class' name=BindingIdentifier&lt;Yield&gt;?
    ClassExtendsClause&lt;Yield&gt;?
    Members&lt;Yield&gt;;


fragment ClassExtendsClause &lt;Yield&gt;*:
    'extends' (
          =&gt;superClassRef=ParameterizedTypeRefNominal ('implements' ClassImplementsList)?
        | superClassExpression=LeftHandSideExpression&lt;Yield&gt;
    )
    | 'implements' ClassImplementsList
;

fragment ClassImplementsList*:
    implementedInterfaceRefs+=ParameterizedTypeRefNominal
    (',' implementedInterfaceRefs+=ParameterizedTypeRefNominal)*
;

fragment Members &lt;Yield&gt;*:
    '{'
    ownedMembers+=N4MemberDeclaration&lt;Yield&gt;*
    '}'
;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="class-properties">
<title>Properties</title>
<simpara>These are the properties of class, which can be specified by the user:
Syntax N4 Class Declaration and Expression</simpara>
<variablelist>
<varlistentry>
<term><literal>abstract</literal>: </term>
<listitem>
<simpara>Boolean flag indicating whether class may be instantiable; default is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></math>, see <xref linkend="_abstract_classes"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>external</literal>: </term>
<listitem>
<simpara>Boolean flag indicating whether class is a declaration without
implementation or with an external (non-N4JS) implementation; default is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></math>, see <xref linkend="Definition_Site_Structural_Typing"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>defStructural</literal>: </term>
<listitem>
<simpara>Boolean flag indicating whether subtype relation uses nominal or
structural typing, see <xref linkend="Definition_Site_Structural_Typing"/> for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>superType/sup</literal>: </term>
<listitem>
<simpara>The type referenced by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math> is called direct
superclass of a class, and vice versa the class is a direct subclass of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>. Instead of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>, we
sometimes simply write <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi></math>. The derived set
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><msup><mi>p</mi><mo>+</mo></msup></math> is defined as the transitive closures of all direct
and indirect superclasses of a class. If no supertype is explicitly
stated, classes are derived from <literal>N4Object</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>implementedInterfaces$/$interfaces$]</literal>: </term>
<listitem>
<simpara>Collection of interfaces directly <emphasis>implemented</emphasis> by the class; empty by
default. Instead of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></math>, we simply write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></math>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ownedCtor</literal>: </term>
<listitem>
<simpara>Explicit constructor of a class (if any), see <xref linkend="Constructor"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>And we additionally define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>ctor</literal>: </term>
<listitem>
<simpara>Explicit or implicit constructor of a class, see .</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fields</literal>: </term>
<listitem>
<simpara>Further derived properties for retrieving all methods (property
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></math>), fields (property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi></math>), static
members (property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>O</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math>), etc. can easily be
added by filtering properties <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math> or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="class-type-inference">
<title>Type Inference</title>
<simpara>The type of a class declaration or class expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>
(i.e., a class definition in general) is of type <literal>{C}</literal> if it is not abstract,
that is if it can be instantiated. If it is abstract, the type of the
definition simply is <literal>{C}</literal>:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>C</mi><mi>:</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>C</mi></mrow></mrow><mrow><mo>¬</mo><mi>C</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>C</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>C</mi></mrow></mrow><mrow><mi>C</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></mrow></math></simpara>
<simpara><emphasis role="strong">Req. IDE-43:</emphasis> <link linkend="IDE-43">Structural and Nominal Supertypes</link> (ver. 1)</simpara>
<simpara>The type of supertypes and implemented interfaces is always the nominal type, even
if the supertype is declared structurally.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>T</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>:</mi><mi>S</mi></mrow><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>T</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi></mrow><mi>S</mi></mfenced></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>I</mi><mi>:</mi><mi>S</mi></mrow><mrow><mi>I</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>I</mi><mi>S</mi></mfenced></mrow></math></simpara>
</section>
</section>
<section xml:id="class-semantics">
<title>Semantics</title>
<simpara>This section deals with the (more or less) type-independent constraints
on classes.</simpara>
<simpara>Class expressions are not fully supported at the moment. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-171"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-171</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="transitive_closure_of_members">Transitive closure of members</link></simpara>
<simpara>The reflexive transitive closure of members of a class is indirectly defined
by the override and implementation constraints defined in .</simpara>
<simpara>Note that since overloading is forbidden, the following constraint is
true:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><msub><mi>m</mi><mn>1</mn></msub><mo>,</mo><msub><mi>m</mi><mn>2</mn></msub><mo>∈</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><msub><mi>m</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><msub><mi>m</mi><mn>1</mn></msub><mo>=</mo><msub><mi>m</mi><mn>2</mn></msub><mo>∨</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>P</mi><mi>a</mi><mi>i</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>1</mn></msub><msub><mi>m</mi><mn>2</mn></msub></mfenced></math>
<footnote><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>P</mi><mi>a</mi><mi>i</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>1</mn></msub><msub><mi>m</mi><mn>2</mn></msub></mfenced></math> is defined as follows: <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>1</mn></msub></mfenced><mo>=</mo><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>2</mn></msub></mfenced><mo>=</mo><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></mrow></mfenced><mo>∨</mo><mfenced close=")" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>1</mn></msub></mfenced><mo>=</mo><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><msub><mi>m</mi><mn>2</mn></msub></mfenced><mo>=</mo><mrow><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></mrow></mfenced></math></simpara></footnote></simpara>
<simpara>Remarks: Class and method definition is quite similar to the proposed
ECMAScript version 6 draft [<link linkend="ECMA15a">ECMA15a(p.S13.5)</link>], except that an N4 class and members may
contain</simpara>
<itemizedlist>
<listitem>
<simpara>annotations, abstract and access modifiers</simpara>
</listitem>
<listitem>
<simpara>fields</simpara>
</listitem>
<listitem>
<simpara>types</simpara>
</listitem>
<listitem>
<simpara>implemented interfaces</simpara>
</listitem>
</itemizedlist>
<simpara>Note that even <literal>static</literal> is used in ECMAScript 6.</simpara>
<simpara>Mixing in members (i.e. interface’s methods with default implementation
or fields) is similar to mixing in members from roles as defined in [<link linkend="Dart13a">Dart13a(p.S9.1)</link>]. It is also similar to default implementations in Java 8 [<link linkend="Gosling15a">Gosling15a</link>]. In Java, however,
more constraints exist, (for example, methods of interfaces must be
public).</simpara>
<simpara>This first example shows a very simple class with a field, a constructor and a method.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    data: any;

    constructor(data: any) {
        this.data = data;
    }

    foo(): void { }
}</programlisting>
<simpara>[[ex:Extend and implement]]
The following example demonstrate how a class can extend a superclass and implement an
interface.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I {
    foo(): void
}
class C{}
class X extends C implements I {
    @Override
    foo(): void {}
}</programlisting>
<simpara>A class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is a subtype of another classifier
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> (which can be a class or interface) if the other
classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is (transitively) contained in the supertypes
(superclasses or implemented interfaces) of the class:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>T</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mi> </mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mrow><mo>[</mo><mi>T</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow></mrow></math>\ right}{left=right}[shortcut] \\
\infer{\tee \type{TClass}\ left \subtype[TClass]\ right}{\tee  left.superType.declaredType \subtype right}\end{aligned}\]]</simpara>
<simpara><emphasis role="strong">Req. IDE-44:</emphasis> <link linkend="IDE-44">Implicit Supertype of Classes</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The implicit supertype of all classes is <literal>N4Object</literal>. All classes with no
explicit supertype are inherited from <literal>N4Object</literal>.</simpara>
</listitem>
<listitem>
<simpara>If the supertype is explicitly set to <literal>Object</literal>, then the class is not
derived from <literal>N4Object</literal>. Meta-information is created similar to an <literal>N4Object</literal>-derived class. Usually, there is no reason to explicitly derive a class from <literal>Object</literal>.</simpara>
</listitem>
<listitem>
<simpara>External classes are implicitly derived from , unless they are
annotated with <literal>@N4JS</literal>(cf.<xref linkend="External_Declarations"/>).</simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_final_modifier">
<title>Final Modifier</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-147"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-147</link></simpara>
</sidebar>
<simpara>Extensibility refers to whether a given classifier can be subtyped.
Accessibility is a prerequisite for extensibility. If a type cannot be
seen, it cannot be subclassed. The only modifier influencing the
extensibility directly is the annotation <literal>@Final</literal>, which prevents all subtyping.
The following table shows how to prevent other projects or vendors from
subtyping by also restricting the accessibility of the constructor:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Extensibility of Types</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="center" valign="top">Type <literal>C</literal> Settings</entry>
<entry align="center" valign="top" namest="col_2" nameend="col_4">Subclassed in</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Project</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Vendor</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">World</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>C.final</literal></simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>C.ctor.accessModifier=\lenum{project}</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>C.ctor.accessModifier=\lenum{public@Internal}</literal></simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>yes</simpara></entry>
<entry align="center" valign="top"><simpara>no</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Since interfaces are always to be implemented, they must not be declared
final.</simpara>
</section>
<section xml:id="_abstract_classes">
<title>Abstract Classes</title>
<simpara>A class with modifier <literal>abstract</literal> is called an <emphasis>abstract class</emphasis> and has its
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></math> property set to true. Other classes are called
<emphasis>concrete</emphasis> classes.</simpara>
<simpara><emphasis role="strong">Req. IDE-45:</emphasis> <link linkend="IDE-45">Abstract Class</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must be declared abstract if it owns or
inherits one or more abstract members and neither C nor any interfaces
implemented by C implements these members. 
A concrete class has to, therefore, implement all abstract members of its superclasses’
implemented interfaces. Note that a class may implement fields with
field accessors and vice versa. </simpara>
</listitem>
<listitem>
<simpara>An abstract class may not be instantiated. </simpara>
</listitem>
<listitem>
<simpara>An abstract class cannot be set to final (with annotation @Final).</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-553"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-553</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-553"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-553</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-148"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-148</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Req. IDE-46:</emphasis> <link linkend="IDE-46">Abstract Member</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A member declared as abstract must not have a method body (in
contrary a method not declared as abstract have to have a method body). </simpara>
</listitem>
<listitem>
<simpara>Only methods, getters and setters can be declared as abstract
(fields cannot be abstract). </simpara>
</listitem>
<listitem>
<simpara>It is not possible to inherit from an abstract class which contains
abstract members which are not visible in the subclass.</simpara>
</listitem>
<listitem>
<simpara>An abstract member cannot be set to final (with annotation @Final). </simpara>
</listitem>
<listitem>
<simpara>Static members may not be declared abstract.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-553"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-553</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-553"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-553</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-553"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-553</link></simpara>
</sidebar>
</section>
<section xml:id="_non_instantiable_classes">
<title>Non-Instantiable Classes</title>
<simpara>To make a class non-instantiable outside a defining compilation unit,
i.e. disallow creation of instances for this class, simply declare the
constructor as private.  This can be used for singletons.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-149"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-149</link></simpara>
</sidebar>
</section>
<section xml:id="_superclass">
<title>Superclass</title>
<simpara><emphasis role="strong">Req. IDE-47:</emphasis> <link linkend="IDE-47">Superclass</link> (ver. 1)</simpara>
<simpara>For a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> with a supertype
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>=</mo><mi>C</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi></math>, the following constraints must hold</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi></math> must reference a class declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> must be be extendable in the project of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>∉</mo><mi>C</mi><mo>.</mo><mi>s</mi><mi>u</mi><msup><mi>p</mi><mo>+</mo></msup></math></simpara>
</listitem>
<listitem>
<simpara>All abstract members in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> must be accessible from
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>M</mi><mo>∈</mo><mi>S</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>M</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>⇒</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math><?asciidoc-br?>
(note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> need not be an owned member of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> and that this constraint applies even if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>
is abstract).</simpara>
</listitem>
</itemizedlist>
<simpara>All members of superclasses become members of a class. This is true even
if the owning classes are not directly accessible to a class. The
member-specific access control is not changed.</simpara>
</section>
</section>
<section xml:id="_interfaces">
<title>Interfaces</title>
<simpara>   </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-169"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-169</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-328"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-328</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1236"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1236</link></simpara>
</sidebar>
<section xml:id="_definition_of_interfaces">
<title>Definition of Interfaces</title>
<section xml:id="interfaces-syntax">
<title>Syntax</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-8"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-8</link></simpara>
</sidebar>
<formalpara>
<title>Syntax N4 Interface Declaration</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">N4InterfaceDeclaration &lt;Yield&gt;:
    =&gt; (
        {N4InterfaceDeclaration}
        annotations+=Annotation*
        (declaredModifiers+=N4Modifier)*
        'interface' typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield&gt;?
    )
    TypeVariables?
    InterfaceImplementsList?
    Members&lt;Yield&gt;
;

fragment InterfaceImplementsList*:
    'implements' superInterfaceRefs+=ParameterizedTypeRefNominal
        (',' superInterfaceRefs+=ParameterizedTypeRefNominal)*
;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="interfaces-properties">
<title>Properties</title>
<simpara>These are the additional properties of interfaces, which can be
specified by the user:</simpara>
<simpara>Collection of interfaces extended by this interface; empty by default.
Instead of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></math>, we simply write
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi></math>.</simpara>
</section>
<section xml:id="interfaces-type-inference">
<title>Type Inference</title>
<simpara>The type of an interface declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> is of type <literal>I</literal>:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>I</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>I</mi></mrow></mrow><mrow/></math></simpara>
</section>
<section xml:id="interfaces-semantics">
<title>Semantics</title>
<simpara>Interfaces are used to describe the public <link linkend="AC">API</link> of a classifier. The main
requirement is that the instance of an interface, which must be an
instance of a class since interfaces cannot have instances, provides all
members declared in the interface. Thus, a (concrete) class implementing
an interface must provide implementations for all the fields, methods,
getters and setters of the interface (otherwise it the class must be
declared abstract). The implementations have to be provided either
directly in the class itself, through a superclass, or by the interface
if the member has a default implementation.</simpara>
<simpara>A field declaration in an interface denotes that all implementing
classes can either provide a field of the same name and the same(!) type
or corresponding field accessors. If no such members are defined in the
class or a (transitive) superclass, the field is mixed in from the
interface automatically. This is also true for the initializer of the
field.</simpara>
<simpara>All instance methods, getters and setters declared in an interface are
implicitly abstract if they do not provide a default implementation. The
modifier <literal>abstract</literal> is not required, therefore, in the source code. The following
constraints apply:</simpara>
<simpara><emphasis role="strong">Req. IDE-48:</emphasis> <link linkend="IDE-48">Interfaces</link> (ver. 1)</simpara>
<simpara>For any interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, the following must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Interfaces may not be instantiated.</simpara>
</listitem>
<listitem>
<simpara>Interfaces cannot be set to final (with annotation @Final):
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>¬</mo><mi>I</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>Members of an interface must not be declared private. The default
access modifier in interfaces is the the type’s visibility or , if the
type’s visibility is .</simpara>
</listitem>
<listitem>
<simpara>Members of an interface, except methods, must not be declared :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>⇒</mo><mi>m</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></math> (note: not allowing field accessors to be declared
final was a deliberate decision, because it would complicate the
internal handling of member redefinition; might be reconsidered at a
later time)</simpara>
</listitem>
<listitem>
<simpara>The literal may not be used in the initializer expression of a field
of an interface.<?asciidoc-br?>
This restriction is required, because the order of implementation of
these fields in an implementing class cannot be guaranteed. This applies
to both instance and static fields in interfaces, but in case of static
fields, <literal>this</literal> is also disallowed due to <xref linkend="StaticMembersOfInterfaces"/>.</simpara>
</listitem>
</orderedlist>
<simpara>It is possible to declare members in interfaces with a smaller
visibility as the interface itself. In that case, clients of the
interface may be able to use the interface but not to implement it.</simpara>
<simpara>In order to simplify modeling of runtime types, such as elements,
interfaces do not only support the notation of static methods but
constant data fields as well. Since <link linkend="AC">IDL</link> [<link linkend="OMG14a">OMG14a</link>] is used to describe these elements in specifications (and mapped to JavaScript via rules described in [<link linkend="W3C12a">W3C12a</link>])
constant data fields are an often-used technique there and they can be
modeled in N4JS 1:1.</simpara>
<simpara>As specified in <xref linkend="Defining and Calling Constructors"/>, interfaces
cannot contain a constructor i.e.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><msup><mo>≠</mo><mi>'</mi></msup><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><msup><mi>r</mi><mi>'</mi></msup></math>.</simpara>
<simpara>[[ex:Simple Interfaces]]
The following example shows
the syntax for defining interfaces. The second interface extends the
first one. Note that methods are implicitly defined abstract in
interfaces.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I {
    foo(): void
}
interface I2 extends I {
    someText: string;
    bar(): void
}</programlisting>
<simpara>If a classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> <emphasis>implements</emphasis> an interface
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, we say <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> is <emphasis>implemented</emphasis> by
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>. If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> redefines members declared in
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, we say that these members are <emphasis>implemented</emphasis> by
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>. Members not redefined by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> but with a
default implementations are <emphasis>mixed in</emphasis> or <emphasis>consumed by</emphasis> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>.
We all cases we call <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>A the <emphasis>implementor</emphasis>.</simpara>
<simpara>Besides the general constraints described in <xref linkend="Common_Semantics_of_Classifiers"/>, the following constraints must hold for extending or implementing interfaces:</simpara>
<simpara><emphasis role="strong">Req. IDE-49:</emphasis> <link linkend="IDE-49">Extending Interfaces</link> (ver. 1)</simpara>
<simpara>For a given type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, and <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close="}" open="{"><msub><mi>I</mi><mn>1</mn></msub><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><msub><mi>I</mi><mi>n</mi></msub></mfenced></math> directly extended by
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, the following constraints must be true:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Only interfaces can extend interfaces:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>,</mo><msub><mi>I</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>I</mi><mi>n</mi></msub></math> must be interfaces.</simpara>
</listitem>
<listitem>
<simpara>An interface may not directly extend the same interface more than
once:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub><mo>=</mo><msub><mi>I</mi><mi>j</mi></msub><mo>⇒</mo><mi>i</mi><mo>=</mo><mi>j</mi></math> for any
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>,</mo><mi>j</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mn>1.</mn><mo>.</mo><mi>n</mi></mrow></mfenced></math>.</simpara>
</listitem>
<listitem>
<simpara>An interface may (indirectly) extend the same interface
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> more than once only if</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> is not parameterized, or</simpara>
</listitem>
<listitem>
<simpara>in all cases <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> is extended with the same type
arguments for all invariant type parameters.</simpara>
<simpara>Note: for type parameters of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> that are declared covariant
or contravariant on definition site, different type arguments may be
used.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>All abstract members in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><mi>n</mi></mfenced></math>, must be accessible from
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><mi>n</mi></mfenced><mi>:</mi><mi>M</mi><mo>∈</mo><msub><mi>I</mi><mi>i</mi></msub><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>∧</mo><mi>M</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>⇒</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math><?asciidoc-br?>
(note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> need not be an owned member of
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math>).</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-50:</emphasis> <link linkend="IDE-50">Implementing Interfaces</link> (ver. 1)</simpara>
<simpara>For a given type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, and <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close="}" open="{"><msub><mi>I</mi><mn>1</mn></msub><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><msub><mi>I</mi><mi>n</mi></msub></mfenced></math> directly implemented
by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, the following constraints must be true:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Only classes can implement interfaces: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must be a
Class.</simpara>
</listitem>
<listitem>
<simpara>A class can only implement interfaces: <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>I</mi><mi>n</mi></msub></math>
must be interfaces.</simpara>
</listitem>
<listitem>
<simpara>A class may not directly implement the same interface more than
once:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub><mo>=</mo><msub><mi>I</mi><mi>j</mi></msub><mo>⇒</mo><mi>i</mi><mo>=</mo><mi>j</mi></math> for any
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>,</mo><mi>j</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mn>1.</mn><mo>.</mo><mi>n</mi></mrow></mfenced></math>.</simpara>
</listitem>
<listitem>
<simpara>A class may (indirectly) implement the same interface
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> more than once only if</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> is not parameterized, or</simpara>
</listitem>
<listitem>
<simpara>in all cases <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> is implemented with the same type
arguments for all invariant type parameters.</simpara>
<simpara>Note: for type parameters of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi></math> that are declared covariant
or contravariant on definition site, different type arguments may be
used.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>All abstract members in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><mi>n</mi></mfenced></math>, must be accessible from
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>i</mi><mo>∈</mo><mfenced close="}" open="{"><mn>1</mn><mrow><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi></mrow><mi>n</mi></mfenced><mi>:</mi><mi>M</mi><mo>∈</mo><msub><mi>I</mi><mi>i</mi></msub><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>∧</mo><mi>M</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>⇒</mo></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math><?asciidoc-br?>
(note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> need not be an owned member of
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math>).</simpara>
</listitem>
</orderedlist>
<simpara>For default methods in interfaces, see <xref linkend="Default_Methods_in_Interfaces"/>.</simpara>
</section>
</section>
</section>
<section xml:id="_generic_classifiers">
<title>Generic Classifiers</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-38"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-38</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-39"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-39</link></simpara>
</sidebar>
<simpara>Classifiers can be declared generic by defining a type parameter via <literal>type-param</literal>.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="generic_classifiers">Generic Classifiers</link></simpara>
<simpara>A generic classifier is a
classifier with at least one type parameter. That is, a given classifier
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is generic if and only if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>C</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>≥</mo><mn>1</mn></math>.</simpara>
<simpara>If a classifier does not define any type parameters, it is not generic,
even if its superclass or any implemented interface is generic.</simpara>
<simpara>The format of the type parameter expression is described in <xref linkend="_parameterized_types"/>. The type variable defined by the type parameter’s type expression can be used
just like a normal type inside the class definition.</simpara>
<simpara>If using a generic classifier as type of a variable, it may be
parameterized. This is usually done via a type expression (cf.
<xref linkend="sec:Parameterized_Types"/>) or via <literal>type-arg</literal> in case of supertypes. If a generic
classifier defines multiple type variables, these variables are bound in
the order of their definition. In any case, all type variables have to
be bound. That means in particular that raw types are not allowed. (cf <xref linkend="Parametrized_Types"/> for details).</simpara>
<simpara>If a generic classifier is used as super classifier, the type arguments
can be type variables. Note that the type variable of the super
classifier is not lifted, that is to say that all type variables are to
be explicitly bound in the type references used in the <literal>extend</literal>, <literal>with</literal>, or <literal>implements</literal> section using <literal>type-arg</literal>. If a type variable is used in to bound a type variable of a type parameter, it has to fulfil possible type constraints (upper/lower
bound) specified in the type parameter.</simpara>
<example>
<title>Generic Type Definition and Usage as Type of Variable</title>
<simpara>This example demonstrates how to define a generic type and how to refer to it in a
variable definition.</simpara>
<screen>export class Container&lt;T&gt; {
    private item: T;

    getItem(): T {
        return this.item;
    }

    setItem(item: T): void {
        this.item = item;
    }
}</screen>
</example>
<simpara>This type can now be used as a type of a variable as follows</simpara>
<programlisting language="n4js" linenumbering="unnumbered">import Container from "p/Container"

var stringContainer: Container&lt;string&gt; = new Container&lt;string&gt;();
stringContainer.setItem("Hello");
var s: string = stringContainer.getItem();</programlisting>
<simpara>In line 3, the type variable <literal>T</literal> of the generic class <literal>Container</literal> is bound to <literal>string</literal>.</simpara>
<example>
<title>Binding of type variables with multiple types</title>
<simpara>For a given generic class <literal>G</literal></simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A{}
class B{}
class C extends A{}

class G&lt;S, T extends A, U extends B&gt; {
}</programlisting>
<simpara>the variable definition</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var x: G&lt;Number,C,B&gt;;</programlisting>
<simpara>would bind the type variables as follows:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="66.6668*"/>
<tbody>
<row>
<entry align="center" valign="top"><simpara><literal>S</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>Number</literal></simpara></entry>
<entry align="center" valign="top"><simpara>Bound by first type argument, no bound constraints defined for <literal>S</literal>.</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>T</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>C</literal></simpara></entry>
<entry align="center" valign="top"><simpara>Bound by second type argument, <literal>C</literal> must be a subtype of in order to fulfill the type constraint.</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>U</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>B</literal></simpara></entry>
<entry align="center" valign="top"><simpara>Bound by third type argument, <literal>extends</literal> is reflexive, that is <literal>B</literal> fulfills the
type constraint.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</example>
<simpara><emphasis role="strong">Req. IDE-51:</emphasis> <link linkend="IDE-51">Generic Superclass, Type Argument with Type Variable</link> (ver. 1)</simpara>
<simpara>For a given generic superclass <literal>SuperClass</literal></simpara>
<programlisting language="n4js" linenumbering="unnumbered">class SuperClass&lt;S, T extends A, U extends B&gt; {};</programlisting>
<simpara>and a generic subclass <literal>SubClass</literal></simpara>
<programlisting language="n4js" linenumbering="unnumbered">class SubClass&lt;X extends A&gt; extends SuperClass&lt;Number, X, B&gt; {..};</programlisting>
<simpara>the variable definition</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var s: SubClass&lt;C&gt;;</programlisting>
<simpara>would bind the type variables as follows:<?asciidoc-br?></simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="66.6668*"/>
<thead>
<row>
<entry align="center" valign="top">TypeVariable</entry>
<entry align="center" valign="top">Bound to</entry>
<entry align="center" valign="top">Explanation</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara><literal>SuperClass.S</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>Number</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type variable <literal>s</literal> of supertype <literal>SuperClass</literal> is bound to <literal>Number</literal>.</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>SuperClass.T</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>SubClass.X=C</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type variable <literal>T</literal> of supertype <literal>SuperClass</literal> is bound to type variable <literal>X</literal> of <literal>SubClass</literal>. It gets
then indirectly bound to <literal>C</literal> as specified by the type argument of the
variable definition.</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>SuperClass.U</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>B</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Type variable <literal>U</literal> of supertype <literal>SuperClass</literal> is auto-bound to <literal>C</literal> as no explicit binding for the third type variable is specified.</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><literal>SubClass.X</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>C</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Bound by first type argument specified in variable definition.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_definition_site_variance">
<title>Definition-Site Variance</title>
<simpara>In addition to use-site declaration of variance in the form of Java-like
wildcards, N4JS provides support for definition-site declaration of
variance as known from languages such as C# and Scala.</simpara>
<simpara>The <emphasis>variance</emphasis> of a parameterized type states how its subtyping relates
to its type arguments’ subtyping. For example, given a parameterized
type and plain types and , we know</simpara>
<itemizedlist>
<listitem>
<simpara>if <literal>G</literal> is <emphasis role="strong">covariant</emphasis> w.r.t. its parameter <literal>T</literal>, then
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>B</mi><mi>A</mi><mo>⇒</mo><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>B</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>A</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>if <literal>G</literal> is <emphasis role="strong">contravariant</emphasis> w.r.t. its parameter <literal>T</literal>, then
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>B</mi><mi>A</mi><mo>⇒</mo><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>A</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>B</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>if <literal>G</literal> is <emphasis role="strong">invariant</emphasis> w.r.t. its parameter <literal>T</literal>, then
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>B</mi><mi>A</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>A</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>B</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mtext>
</mtext><mi>B</mi><mi>A</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>A</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>G</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>B</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>Note that variance is declared per type parameter, so a single
parameterized type with more than one type parameter may be, for
example, covariant w.r.t. one type parameter and contravariant
w.r.t. another.</simpara>
<simpara>Strictly speaking, a type parameter/variable itself is not co- or
contravariant; however, for the sake of simplicity we say " <literal>T</literal> is
covariant" as a short form for "`G` is covariant with respect to its type
parameter <literal>T</literal> " (for contravariant and invariant accordingly).</simpara>
<simpara>To declare the variance of a parameterized classifier on definition
site, simply add keyword <literal>in</literal> or <literal>out</literal> before the corresponding type parameter:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class ReadOnlyList&lt;out T&gt; { // covariance
    // ...
}

interface Consumer&lt;in T&gt; { // contravariance
    // ...
}</programlisting>
<simpara>In such cases, the following constraints apply.</simpara>
<simpara><emphasis role="strong">Req. IDE-174:</emphasis> <link linkend="IDE-174">Definition-Site Variance</link> (ver. 1)</simpara>
<simpara>Given a parameterized type with a type parameter , the following must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>T</literal> may only appear in variance-compatible positions:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>if <literal>T</literal> is declared on definition site to be <emphasis role="strong">covariant</emphasis>, then it may
only appear in covariant positions within the type’s non-private member
declarations.</simpara>
</listitem>
<listitem>
<simpara>if <literal>T</literal> is declared on definition site to be <emphasis role="strong">contravariant</emphasis>, then it
may only appear in contravariant positions within the type’s non-private
member declarations.</simpara>
</listitem>
<listitem>
<simpara>if <literal>T</literal> is <emphasis role="strong">invariant</emphasis>, i.e. neither declared covariant nor declared
contravariant on definition site, then it may appear in any position
(where type variables are allowed).</simpara>
<simpara>Thus, no restrictions apply within the declaration of private members
and within the body of field accessors and methods.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>definition-site variance may not be combined with incompatible
use-site variance:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>if <literal>T</literal> is declared on definition site to be <emphasis role="strong">covariant</emphasis>, then no
wildcard with a <emphasis role="strong">lower</emphasis> bound may be provided as type argument for <literal>T</literal>.</simpara>
</listitem>
<listitem>
<simpara>if <literal>T</literal> is declared on definition site to be <emphasis role="strong">contravariant</emphasis>, then no
wildcard with an <emphasis role="strong">upper</emphasis> bound may be provided as type argument for <literal>T</literal>.</simpara>
</listitem>
<listitem>
<simpara>if <literal>T</literal> is <emphasis role="strong">invariant</emphasis>, i.e. neither declared covariant nor declared
contravariant on definition site, then any kind of wildcard may be
provided as type argument.</simpara>
<simpara>Unbounded wildcards are allowed in all cases.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<informalexample>
<simpara>For illustration purposes, let’s compare use-site and definition-site
declaration of variance. Since use-site variance is more familiar to the
Java developer, we start with this flavor.</simpara>
</informalexample>
<programlisting language="n4js" linenumbering="unnumbered">class Person {
    name: string;
}
class Employee extends Person {}

interface List&lt;T&gt; {
    add(elem: T)
    read(idx: int): T
}

function getNameOfFirstPerson(list: List&lt;? extends Person&gt;): string {
    return list.read(0).name;
}</programlisting>
<simpara>Function <literal>getNameOfFirstPerson</literal> below takes a list and returns the name of the first person in
the list. Since it never adds new elements to the given list, it could
accept <literal>List</literal>s of any subtype of <literal>Person</literal>, for example a <literal>List&lt;Employee&gt;</literal>. To allow this, its formal
parameter has a type of <literal>List&lt;? extends Person&gt;</literal> instead of <literal>List&lt;Person&gt;</literal>. Such use-site variance is useful whenever an invariant type, like <literal>List</literal> above, is being used in a way such that it can be treated as if it were co- or contravariant.</simpara>
<simpara>Sometimes, however, we are dealing with types that are inherently
covariant or contravariant, for example an <literal>ImmutableList</literal> from which we can only read elements would be covariant. In such a case, use-site declaration of
variance is tedious and error-prone: we would have to declare the
variance wherever the type is being used and would have to make sure not
to forget the declaration or otherwise limit the flexibility and
reusability of the code (for example, in the above code we could not
call <literal>getNameOfFirstPerson</literal> with a <literal>List&lt;Employee&gt;</literal>).</simpara>
<simpara>The solution is to declare the variance on declaration site, as in the
following code sample:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface ImmutableList&lt;out T&gt; {
//  add(elem: T)  // error: such a method would now be disallowed
    read(idx: int): T
}

function getNameOfFirstPerson2(list: ImmutableList&lt;Person&gt;): string {
    return list.read(0).name;
}</programlisting>
<simpara>Now we can invoke <literal>getNameOfFirstPerson2</literal> with a <literal>List&lt;Employee&gt;</literal> even though the implementor of <literal>getNameOfFirstPerson2</literal> did not add a
use-site declaration of covariance, because the type <literal>ImmutableList</literal> is declared to be covariant with respect to its parameter <literal>T</literal>, and this applies globally
throughout the program.</simpara>
</section>
</chapter>
<chapter xml:id="_members">
<title>Members</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-381"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-381</link></simpara>
</sidebar>
<simpara>A member is either a method (which may be a special constructor
function), a data field, or a getter or a setter. The latter two
implicitly define an accessor field. Similar to object literals, there
must be no data field with the same name as a getter or setter.</simpara>
<simpara>Redefinition of members (overriding, implementation and consumption) is
described in <xref linkend="Redefinition_of_Members"/>.</simpara>
<section xml:id="_syntax_4">
<title>Syntax</title>
<formalpara>
<title>Syntax N4JS member access modifier</title>
<para>
<screen>enum N4JSMemberAccessModifier: private | project | protected | public;

N4MemberDeclaration: N4MethodDeclaration | N4FieldDeclaration | N4GetterDeclaration | N4SetterDeclaration;</screen>
</para>
</formalpara>
<section xml:id="_properties_3">
<title>Properties</title>
<simpara>Members share the following properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>annotations</literal> </term>
<listitem>
<simpara>Arbitrary annotations, see <xref linkend="Annotations"/> for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>accessModifier$</literal> </term>
<listitem>
<simpara>N4JS member access modifier: <literal>private</literal>, <literal>project</literal>, <literal>potected</literal>, or <literal>public</literal>; the latter two can be combined with <literal>@Internal</literal>; default is <literal>project</literal> for classes and private interfaces. For a non-private interface defaults to the interface’s visibility. task:IDE-84[]</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>name</literal> </term>
<listitem>
<simpara>The simple name of the member, that is an identifier name (cf. <xref linkend="Valid_Names"/>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>static</literal> </term>
<listitem>
<simpara>Boolean property to distinguish instance from classifier members, see <xref linkend="_static_members"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following pseudo properties are defined via annotations:</simpara>
<variablelist>
<varlistentry>
<term><literal>deprecated</literal> </term>
<listitem>
<simpara>Boolean property set to true if annotation <literal>@Deprecated</literal> is set.
task:IDE-138[]</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>And we additionally define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>acc</literal> </term>
<listitem>
<simpara>Member access modifier as described in <xref linkend="Accessibility_of_Members"/>, it is the aggregated value of
the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></math> and the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></math> property.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>owner</literal> </term>
<listitem>
<simpara>Owner classifier of the member.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typeRef</literal> </term>
<listitem>
<simpara>Type of the member—this is the type of a field or the type of the method
which is a function type (and not the return type).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>assignability</literal> </term>
<listitem>
<simpara>Enumeration, may be one of the following values:<?asciidoc-br?></simpara>
<simpara><literal>set</literal>:  Member may only be set, i.e. it could only be used on the left hand
  side of an assignment.<?asciidoc-br?></simpara>
<simpara><literal>get</literal>:
  Member may only be retrieved, i.e. it could only be used on the right
  hand side of an assignment. This is the default setting for methods.</simpara>
<simpara><literal>any</literal>:
  Member may be set or retrieved, i.e. it could only be used on the left
  or right hand side of an assignment. This is the default setting for
  fields.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></math> is related but not equal to
writable modifiers used for fields. We define a partial order on this
enumeration as follows: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>l</mi><mi>t</mi><mi>;</mi><mfenced close=")" open="("><mi>l</mi><mi>r</mi></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>:</mi><mi>:</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close="}" open="{"><mfenced close=")" open="("><mrow><mi>s</mi><mi>e</mi><mi>t</mi></mrow><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mfenced><mfenced close=")" open="("><mrow><mi>g</mi><mi>e</mi><mi>t</mi></mrow><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mfenced></mfenced></math></simpara>
</note>
<variablelist>
<varlistentry>
<term><literal>abstract</literal> </term>
<listitem>
<simpara>All members have a flag <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></math>, which is user-defined
for methods, getters and setter, but which is always false for fields.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following pseudo property is set to make fields compatible with
properties of an object literal, however it cannot be changed:</simpara>
<variablelist>
<varlistentry>
<term><literal>configurable</literal> </term>
<listitem>
<simpara>Boolean flag reflecting the property descriptor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi><mi>i</mi><mi>g</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math>, this is always set to false for members.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_semantics_3">
<title>Semantics</title>
<simpara>The members of a given classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must be named such
that the following constraints are met:</simpara>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-550"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-550</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-551"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-551</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Req. IDE-52:</emphasis> <link linkend="IDE-52">Member Names</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>No two members may have the same name, except one is static and the
other is non-static:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><msub><mi>m</mi><mn>1</mn></msub><mo>,</mo><msub><mi>m</mi><mn>2</mn></msub><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><msub><mi>m</mi><mn>1</mn></msub><mo>≠</mo><msub><mi>m</mi><mn>2</mn></msub><mi>:</mi><msub><mi>m</mi><mn>1.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>≠</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∨</mo><msub><mi>m</mi><mn>1.</mn></msub><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>≠</mo><msub><mi>m</mi><mn>2.</mn></msub><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>The member name must be a valid identifier name, see .</simpara>
</listitem>
</orderedlist>
<simpara>Thus, over_loading_ of methods is not supported <footnote><simpara>In order to emulate method overloading, union types are to be used.</simpara></footnote> and no field
may have the same name as a method. However, over_riding_ of methods,
getters, and setters are possible, see <xref linkend="_redefinition_of_members"/>. Static members may also have the same name as non-static members
<footnote><simpara>cite[ECMA15a(p214)</simpara></footnote>, <literal>ClassBody : ClassElementList</literal> indicates that it is possible to have the same name for instance and static members.].</simpara>
<simpara>The dollar character <literal>$</literal> is not allowed for user-defined member
identifier, as the dollar sign is used for rewriting private members.</simpara>
</section>
</section>
<section xml:id="_methods">
<title>Methods</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-8"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-8</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link></simpara>
</sidebar>
<simpara>Methods are simply JavaScript functions. They are defined
similarly to methods as proposed in [<link linkend="ECMA15a">ECMA15a(p.S13.5)</link>] except for the type information
and some modifiers.</simpara>
<section xml:id="_syntax_5">
<title>Syntax</title>
<formalpara>
<title>Syntax Method Declaration</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">N4MethodDeclaration &lt;Yield&gt;:
    =&gt; ({N4MethodDeclaration}
        annotations+=Annotation*
        accessModifier=N4JSMemberAccessModifier?
        (abstract?=’abstract’ | static?=’static’)?
        TypeVariables?
        (
                generator?='*' LiteralOrComputedPropertyName&lt;Yield&gt; -&gt; MethodParamsReturnAndBody &lt;Generator=true&gt;
            |   AsyncNoTrailingLineBreak LiteralOrComputedPropertyName&lt;Yield&gt; -&gt; MethodParamsReturnAndBody &lt;Generator=false&gt;
        )
    ) ';'?
;

fragment MethodParamsAndBody &lt;Generator&gt;*:
    StrictFormalParameters&lt;Yield=Generator&gt;
    (body=Block&lt;Yield=Generator&gt;)?
;

fragment MethodParamsReturnAndBody &lt;Generator&gt;*:
    StrictFormalParameters&lt;Yield=Generator&gt;
    (':' returnTypeRef=TypeRef)?
    (body=Block&lt;Yield=Generator&gt;)?
;

fragment LiteralOrComputedPropertyName &lt;Yield&gt;*:
    name=IdentifierName | name=STRING | name=NumericLiteralAsString
    | '[' (=&gt;((name=SymbolLiteralComputedName&lt;Yield&gt; | name=StringLiteralAsName) ']') | computeNameFrom=AssignmentExpression&lt;In=true,Yield&gt; ']')
;

SymbolLiteralComputedName &lt;Yield&gt;:
    BindingIdentifier&lt;Yield&gt; ('.' IdentifierName)?
;

BindingIdentifier &lt;Yield&gt;:
    IDENTIFIER
    | &lt;!Yield&gt; 'yield'
    | N4Keyword
;

IdentifierName: IDENTIFIER | ReservedWord | N4Keyword;
NumericLiteralAsString: DOUBLE | INT | OCTAL_INT | HEX_INT | SCIENTIFIC_INT;
StringLiteralAsName: STRING;

// see ~\autoref{sec:Asynchronous_Functions}~
fragment AsyncNoTrailingLineBreak *: (declaredAsync?='async' NoLineTerminator)?;

fragment StrictFormalParameters &lt;Yield&gt;*:
    '(' (fpars+=FormalParameter&lt;Yield&gt; (',' fpars+=FormalParameter&lt;Yield&gt;)*)? ')'
;

FormalParameter &lt;Yield&gt;:
    {FormalParameter} BindingElementFragment&lt;Yield&gt;
;

fragment BindingElementFragment &lt;Yield&gt;*:
    (=&gt; bindingPattern=BindingPattern&lt;Yield&gt;
    | annotations+=Annotation*
        (
            variadic?='...'? name=BindingIdentifier&lt;Yield&gt; ColonSepTypeRef?
        )
    )
    ('=' initializer=AssignmentExpression&lt;In=true, Yield&gt;)?
;

fragment ColonSepTypeRef*:
    ':' declaredTypeRef=TypeRef
;</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_properties_4">
<title>Properties</title>
<simpara>Methods have all the properties of members and the following additional
properties can be explicitly defined:</simpara>
<variablelist>
<varlistentry>
<term><literal>abstract</literal> </term>
<listitem>
<simpara>Method is declared but not defined.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typePars</literal> </term>
<listitem>
<simpara>Collection of type parameters of a generic method; empty by default.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>returnTypeRef</literal> </term>
<listitem>
<simpara>Return type of the method, default return type is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mstyle mathvariant="italic"><mi>V</mi><mi>o</mi><mi>i</mi><mi>d</mi></mstyle></math>. The type of the method as a member of the
owning classifier is not the method’s return type but is instead a
function type.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fpars</literal> </term>
<listitem>
<simpara>List of formal parameters, may be left empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>body</literal> </term>
<listitem>
<simpara>The body of the method (this is not available in the pure types model)</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following pseudo properties are defined via annotations:</simpara>
<variablelist>
<varlistentry>
<term><literal>final</literal> </term>
<listitem>
<simpara>Boolean flag set to true if annotation <literal>@Final</literal> is set. Flag indicates that
method must not be overridden in subclasses; see <xref linkend="Final_Methods"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>declaresOverride</literal> </term>
<listitem>
<simpara>Flag set to true if annotation <literal>@Overrides</literal> is set. Flag indicates that method must
override a method of a superclass; see , .</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Additionally, we define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>overrides</literal> </term>
<listitem>
<simpara>True if method overrides a super method or implements an interface
method, false otherwise.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>typeRef</literal> </term>
<listitem>
<simpara>Type of the method. This is, in fact, a function type (and not the
return type).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>enumerable</literal> </term>
<listitem>
<simpara>The following pseudo property is set to make methods compatible with
properties of an object literal, however it cannot be changed:</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Boolean flag reflecting the property descriptor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math>, this is always set to false for methods.</simpara>
</section>
<section xml:id="_semantics_4">
<title>Semantics</title>
<simpara>Since methods are ECMAScript functions, all constraints specified in
<xref linkend="Function_Type"/> apply to methods as well. This section describes default values and
function type conformance which is required for overriding and
implementing methods.</simpara>
<simpara>In addition, method declarations and definitions have to comply with the
constraints for naming members of classifiers (cf. <xref linkend="Member_Names"/>)
and with the constraints detailed in the following sections on final
methods (<xref linkend="Final_Methods"/>), abstract methods (<xref linkend="Abstract_Methods"/>
and method overriding and implementation (<xref linkend="_overriding_of_members"/>, <xref linkend="_implementation_of_members"/>).</simpara>
<simpara>The following constraints are defined for methods in ECMAScript 6 [<link linkend="ECMA15a">ECMA15a(p.207)</link>]</simpara>
<simpara><emphasis role="strong">Req. IDE-53:</emphasis> <link linkend="IDE-53">Method Definition ECMAScript 6</link> (ver. 1)</simpara>
<itemizedlist>
<listitem>
<simpara><literal>It is a Syntax Error if any element of the BoundNames of
StrictFormalParameters also occurs in the VarDeclaredNames of
FunctionBody.</literal></simpara>
</listitem>
<listitem>
<simpara><literal>It is a Syntax Error if any element of the BoundNames of
StrictFormalParameters also occurs in the LexicallyDeclaredNames of
FunctionBody.</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Methods – like functions – define a variable execution environment and
therefore provide access to the actual passed-in parameters through the
implicit variable inside of their bodies (c.f. <xref linkend="Arguments_Objects"/>).</simpara>
<simpara>Methods are similar to function definitions but they must not be
assigned to or from variables. The following code issues an error
although the type of the method would be compatible to the type of the
variable :</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    m(): void {}
}
var v: {function():void} = new C().m;</programlisting>
<simpara><emphasis role="strong">Req. IDE-54:</emphasis> <link linkend="IDE-54">Method Assignment</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Different from ECMAScript 2015, methods are defined as readonly,
that is, it is not possible to dynamically re-assign a property defined
as method with a new value. This is because assigning or re-assigning a
method breaks encapsulation. Methods are the <link linkend="AC">API</link> of a class, their
implementation is internal to the class.</simpara>
</listitem>
<listitem>
<simpara>When assigning a method to a variable, a warning is issued since
this would lead to an detached this reference inside the method when it
is called without explicitly providing the receiver. No warning is
issued only if it is guaranteed that no problems will occur:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>The method’s body can be determined at compile time (i.e., it has
been declared <literal>@Final</literal>) and it lacks usages of <literal>this</literal> or <literal>super</literal>. This is true for instance and static methods.</simpara>
</listitem>
<listitem>
<simpara>The method is the constructor. </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/224"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-224</link></simpara>
</sidebar>
</listitem>
</orderedlist>
<note>
<simpara>The following code demonstrates problems arising when
methods are assigned to variables in terms of function expressions.
Given are two classes and instances of each class as follows:</simpara>
</note>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    m(): void { }
    static k(): void {}
}
class D extends C {
    @Override m(): void { this.f()}
    f(): void {}

    @Override static k(): void { this.f()}
    static f(): void {}
}
var c: C = new C();
var d: C = new D(); // d looks like a C</programlisting>
<simpara>Assigning an instance method to a variable could cause problems, as the
method assumes this to be bound to the class in which it is defined.
This may work in some cases, but will cause problems in particular in
combination with method overriding:</simpara>
<screen>var v1: {@This(C)function():void} = c.m;
var v2: {@This(C)function():void} = d.m;

v1.call(c);
v2.call(c);</screen>
<simpara>Calling <literal>c.m</literal> indirectly via <literal>v1</literal> with <literal>c</literal> as this object will work. However, it won’t
work for <literal>v2</literal>: the method is overridden in <literal>D</literal>, and the method in expects other
methods available in <literal>D</literal> but not in <literal>C</literal>. That is, the last call would lead to a
runtime error as method <literal>f</literal> which is called in <literal>D.m</literal> won’t be available.</simpara>
<simpara>The same scenario occurs in case of static methods if they are retrieved
polymorphically via the variables of type <literal>constructor{C}</literal>:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var ctor: constructor{C} = C;
var dtor: constructor{C} = D;

var v3: {@This(constructor{C})function():void} = ctor.k;
var v4: {@This(constructor{C})function():void} = dtor.k;</programlisting>
<simpara>In both cases, the problem could be solved by restricting these kinds of
assignments to final methods only. In the static case, the problem would
also be solved by accessing the static method directly via the class
type (and not polymorphically via the constructor). Both restrictions
are severe but would be necessary to avoid unexpected runtime problems.</simpara>
<simpara>The following example shows a problem with breaking the encapsulation of
a class.</simpara>
<screen>class C {
    x: any = "";
    f(): void { this.g(this); }
    g(c: C): void { c.h(); }
    h(): void {}
}
class D extends C {

    @Override f(): void {
        this.g(this.x);
    }
    @Override g(c: any) {
        // do nothing, do not call h())
    }
}

var c = new C();
var d = new D();

var v5: {@This(C)function():void} = c.f;
var v6: {@This(C)function():void} = d.f;

v5.call(c)
v6.call(c)</screen>
<simpara>In <literal>D</literal>, method <literal>g</literal> is overridden to accept more types as the original method
defined in <literal>C</literal>. Calling this new method with receiver type <literal>C</literal> (as done in the
last line) will cause problems, as in <literal>D</literal> not only <literal>f</literal> has been adapted but also <literal>g</literal>. Eventually, this would lead to a runtime error as well.</simpara>
</section>
<section xml:id="_final_methods">
<title>Final Methods</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-157"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-157</link></simpara>
</sidebar>
<simpara>By default, methods can be overridden. To prevent a method from being
overridden, it must be annotated with <literal>@Final</literal>.</simpara>
<simpara>Of course, a method cannot be declared both abstract and final
(cf. <xref linkend="Abstract_Member"/>). Private methods are implicitly declared
final. Because static methods can be overridden in subclasses (which is
different to Java), they also can be marked as final.</simpara>
<simpara>Default methods in interfaces, cf. <xref linkend="sec:Default_Methods_in_Interfaces"/>, may also be declared <literal>@Final</literal>.</simpara>
<example>
<title>Final Methods in Interfaces</title>
<simpara>If a method in an interface is provided with a body, it may be declared
final. This will ensure that the given method’s body will be in effect
for all instances of the interface. Note that this means that; (a) a
class implementing that interface must not define a method with the same
name and (b) a class inheriting a method of that name cannot implement
this interface. The latter case is illustrated here:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I {
    @Final m(): void {}
}

class C1 {
    m(): void {}
}

// error at "I": "The method C1.m cannot override final method I.m."
class C2 extends C1 implements I {
}</programlisting>
</example>
</section>
<section xml:id="_abstract_methods">
<title>Abstract Methods</title>
<simpara>A method can be declared without defining it, i.e. without providing a
method body, and is then called an <emphasis>abstract method</emphasis>. Such methods
must be declared with modifier <literal>abstract</literal> and have their property
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></math> set to true. Constraints for abstract methods are
covered in <xref linkend="Abstract_Member"/> (see <xref linkend="Abstract_Classes"/>).</simpara>
<simpara>In interfaces, methods are always abstract by default and they do not
have to be marked as abstract. If a method in an interface provides a
body, then this is the default implementation. See <xref linkend="_implementation_of_members"/> about how the default implementation may be mixed in the consumer.</simpara>
</section>
<section xml:id="_generic_methods">
<title>Generic Methods</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-38"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-38</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-39"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-39</link></simpara>
</sidebar>
<simpara>Methods of generic classes can, of course, refer to the type variables
defined by type parameters of the generic class. These type variables
are used similarly to predefined or declared types. Additionally,
methods may be declared generic independently from their containing
class. That is to say that type parameters (with type variables) can be
defined for methods as well, just like for generic functions (see
<xref linkend="Generic Functions"/>).</simpara>
<simpara><emphasis role="strong">Req. IDE-55:</emphasis> <link linkend="IDE-55">Type variable names for generic methods</link> (ver. 1)</simpara>
<simpara>For a given generic method <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math> of a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, the following
constraint must hold:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>t</mi><msub><mi>p</mi><mi>m</mi></msub><mo>∈</mo><mi>m</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>t</mi><msub><mi>p</mi><mi>C</mi></msub><mo>∈</mo><mi>C</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>t</mi><msub><mi>p</mi><mi>m</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>≠</mo><mi>t</mi><msub><mi>p</mi><mi>C</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
<simpara>Since type variables can be used similarly to types in the scope of a
generic class, a generic method may refer to a type variable of its
containing class.</simpara>
<screen>class C {
    &lt;T&gt; foo(p: T p): T { return p;}
};</screen>
<simpara>If a generic type parameter is not used as a formal parameter type or
the return type, a warning is generated unless the method overrides a
member inherited from a super class or interface.</simpara>
</section>
</section>
<section xml:id="_default_methods_in_interfaces">
<title>Default Methods in Interfaces</title>
<simpara>If a method declared in an interface defines a body, then this is the
so-called <emphasis>default implementation</emphasis> and the method is called a <emphasis>default
method</emphasis>. This will be mixed into an implementor of the interface if,
and only if, neither the implementing class nor any of its direct or
indirect superclasses already provides an implementation for this
method; for details see <xref linkend="_member_consumption"/>. Since the implementor is not known, some constraints exist for the body. I.e., no access to super is possible,
cf. <xref linkend="req:Access_Super_Member_with_Super_Literal"/>.</simpara>
<simpara>In order to declare an interface to provide a default implementation in
a definition file, annotation <literal>@ProvidesDefaultImplementation</literal> can be used, cf.
<xref linkend="req:External_class_interface_members"/>.</simpara>
<simpara>When a method in an interface is provided with a default implementation,
it may even be declared <literal>@Final</literal>, see <xref linkend="Final_Methods"/>.</simpara>
<section xml:id="_asynchronous_methods">
<title>Asynchronous Methods</title>
<simpara>N4JS implements the async/await concept proposed for ECMAScript 7, which
provides a more convenient and readable syntax for writing asynchronous
code compared to using built-in type Promise directly. This concept can
be applied to methods in exactly the same way as to declared functions.
See <xref linkend="Asynchronous_Functions"/> and <xref linkend="Asynchronous_Arrow_Functions"/> for details.</simpara>
</section>
</section>
<section xml:id="_constructors">
<title>Constructors</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-159"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-159</link></simpara>
</sidebar>
<simpara>A constructor is a special function defined on a class which returns an
instance of that class. The constructor looks like a normal method with
name "constructor". The constructor can be defined explicitly or
implicitly and every class has an (implicit) constructor.</simpara>
<simpara>For a given a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, the constructor is available via
two properties:</simpara>
<simpara>the explicitly defined constructor (if any).</simpara>
<simpara>the explicit or implicit constructor.</simpara>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is provided with an explicit constructor, we have
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math>. Note that
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∉</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></math> in all cases.</simpara>
<simpara>The return type of the constructor of a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>. If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> has type parameters
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msub><mi>T</mi><mi>n</mi></msub></math>, then the return type is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><msub><mi>T</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub><mi>g</mi><mi>t</mi><mi>;</mi></math>. The constructor is called with the
operator. Since the return type of a constructor is implicitly defined
by the class, it is to be omitted. By this definition, a constructor
looks like the following:</simpara>
<screen>class C {
    public constructor(s: string) {
        // init something
    }
}</screen>
<simpara>Constructors define a variable execution environment and therefore
provide access to the actual passed-in parameters through the implicit
variable inside of their bodies (c.f. <xref linkend="Arguments_Object"/>).</simpara>
<simpara><emphasis role="strong">Req. IDE-56:</emphasis> <link linkend="IDE-56">Defining and Calling Constructors</link> (ver. 1)</simpara>
<simpara>For a constructor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> of a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, the following conditions
must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must neither be abstract nor static nor final and
it must not be annotated with <literal>@Override</literal>.</simpara>
</listitem>
<listitem>
<simpara>If a class does not explicitly define a constructor then the
constructor’s signature of the superclass constructor is assumed.</simpara>
</listitem>
<listitem>
<simpara>If a class defines a constructor with formal parameters then this
constructor has to be called explicitly in constructors defined in
subclasses.</simpara>
</listitem>
<listitem>
<simpara>If a super constructor is called explicitly, this call must be the
only expression of an expression statement which has to be the first
statement of the body.</simpara>
</listitem>
<listitem>
<simpara>Constructors may appear in interfaces, but some restrictions apply:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>constructors in interfaces must not have a body.</simpara>
</listitem>
<listitem>
<simpara>constructors in interfaces or their containing interface or one of
its direct or indirect super interfaces must be annotated with <literal>@CovariantConstructor</literal>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>A constructor must not have an explicit return type declaration.</simpara>
</listitem>
<listitem>
<simpara>The implicit return type of a constructor is <literal>this?</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>Properties of object literals may be called <literal>constructor</literal>. However they are not
recognized as constructors in these cases.</simpara>
<simpara><emphasis role="strong">Req. IDE-57:</emphasis> <link linkend="IDE-57">Initialization of Final Fields in the Constructor</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Required attributes must be initialized:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi>a</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>:</mi><mi>a</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi><mo>∃</mo><mi>e</mi><mo>∈</mo><mi>r</mi><mo>.</mo><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>:</mi><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>e</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>Note on syntax: ECMAScript 6 defines constructors similarly, [<link linkend="ECMA15a">ECMA15a(p.S13.5)</link>]. In
ECMAScript 6 the super constructor is not called automatically as well.</simpara>
<simpara>The super literal used in order to call super methods is further
described in <xref linkend="Super_keyword"/>.</simpara>
<section xml:id="_structural_this_type_in_constructor_and_spec_parameter">
<title>Structural This Type in Constructor and Spec Parameter</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-651"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-651</link></simpara>
</sidebar>
<simpara>The use of a structural this reference as a formal parameter type is
possible only in constructors. This parameter can be annotated with <literal>@Spec</literal>
which causes the compiler to generate initialization code.</simpara>
<simpara>Simply using <literal>$~~$this</literal> as a type in the constructor causes the constructor to
require an object providing all public fields of the class for
initialization purposes. The fields have to be set manually as shown in
the following code snippet.</simpara>
<screen>class A{
    public s: string;
    public constructor(src: ~~this) {
        this.s = src.s;
    }
}</screen>
<simpara>Remarks:</simpara>
<itemizedlist>
<listitem>
<simpara>The type of the formal parameter <literal>this</literal> refers to the
structural field type, see for details on structural typing. It contains
all public fields of the type.</simpara>
</listitem>
<listitem>
<simpara>Subclasses may override the constructor and introduce additional
parameters. They have to call the super constructor explicitly, however,
providing a parameter with at least all required attributes of the
superclass. Usually the type <literal>this</literal> is replaced with the actual subclass, but
in the case of a <literal>super()</literal> call the <literal>this</literal> type of structural formal parameters is
replaced with the <literal>this</literal> type of the superclass, hence only required fields of
the superclass must be present. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/262"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-262</link></simpara>
</sidebar>
<simpara>As with other structural references, it is possible to add the
structural reference with additional structural members, which can be
used to initialize private fields which become not automatically part of
the structural field type. For example:</simpara>
<screen>class A{
    public s: string;
    private myPrivateNumber: number;
    public constructor(src: ~~this with { x: number; }) {
        this.s = src.s;
        this.myPrivateNumber = src.x;
    }
}</screen>
<simpara>Defining additional members may become a problem if a subclass defines
public fields with the same name, as the <literal>$~~$this</literal> type will contain these fields
in the subclass. This is marked as an error in the subclass.</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/81"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-81</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Req. IDE-58:</emphasis> <link linkend="IDE-58">Names of additional members of structural this type in constructor</link> (ver. 1)</simpara>
<simpara>If the structural this type is used in a constructor of a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, and if this structural reference contains an additional
structural member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>M</mi></math>, the following constraints must hold
true:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>For any subclass <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> (the subclass does not define its own
constructor), <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> must not contain a public member with same
name as <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>M</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>S</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>C</mi><mo>,</mo><mi>S</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>M</mi><mo>∈</mo><mi>S</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="5.0em"/><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>S</mi><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> itself must not contain a public member with same
name as <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>M</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>S</mi><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
</orderedlist>
<section xml:id="_field_name_conflicts_with_structural_member_name">
<title>Field name conflicts with structural member name</title>
<simpara>The situation described in <xref linkend="req:Fields_and_constructor_this_type_members"/> is
demonstrated in the following code fragment:</simpara>
<screen>class A {
    private myPrivateNumber: number;
    public constructor(src: ~~this with { x: number; }) {
        this.myPrivateNumber = src.x;
    }
}

class B extends A {
    public x: number; // will cause an error message
}</screen>
<variablelist xml:id="spec-style-constructor">
<varlistentry>
<term>@Spec-style Constructor </term>
<listitem>
<simpara>The tedious process of copying the members of the parameter to the
fields of the class can be automated via the annotation if the argument
has <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math> structural
initializer field typing. For more details about this typing can be
found in <xref linkend="sec:Structural_Read_only_Write_only_and_Initializer_Field_Typing"/>. This can be used as shown in the following listing:</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>class A {
    public constructor(@Spec spec: ~i~this) {}
}</screen>
<simpara><emphasis role="strong">Req. IDE-59:</emphasis> <link linkend="IDE-59">Spec-style Constructor</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Annotation <literal>@Spec</literal> may only appear on a formal parameter of a constructor.</simpara>
</listitem>
<listitem>
<simpara>Only a single formal parameter of a constructor may be annotated
with  <literal>@Spec</literal>.</simpara>
</listitem>
<listitem>
<simpara>If a formal parameter is annotated with <literal>@Spec</literal>, the parameter’s type must
be <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math> or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math> (i.e. use-site
structurally typed <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math>).</simpara>
</listitem>
<listitem>
<simpara>Fields provided by the parameter, but not defined in the structural
field type, are <emphasis>not</emphasis> used to set fields.</simpara>
</listitem>
<listitem>
<simpara>Non-<literal>public</literal> fields explicitly added to the spec
parameter are copied as well. </simpara>
</listitem>
<listitem>
<simpara>Even if the <literal>@Spec</literal> annotation is used, the super constructor must be called
accordingly.</simpara>
</listitem>
<listitem>
<simpara>The type of an additional member which match owned non-public field
must be subtype of the field’s type: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>s</mi><mo>∈</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>:</mi><mtext>
</mtext><mspace width="2.0em"/><mo>∃</mo><mi>f</mi><mo>∈</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>⇒</mo><mi>s</mi><mi>f</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math> constructor
ignores superfluous properties provided by an object literal. These
ignored properties are <emphasis>not</emphasis> used to set
non-<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math> fields.</simpara>
</listitem>
<listitem>
<simpara>Since use-site structural initializer field types can be defined via
public, non-static, non-optional writable fields,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></math> constructor accepts
those properties provided by an object literal which has the
corresponding readble fields. These properties will be initialzed.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/134"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-134</link></simpara>
</sidebar>
<example>
<title>Anonymous Interface in Constructor</title>
<simpara>The base class <literal>A</literal> in the examples redefines the constructor already defined in <literal>N4Object</literal>. This is not
generally necessary and is only used here to make the example legible.</simpara>
<screen>class A {
    public s: string;
    public constructor(@Spec spec: ~i~this) {
        // initialization of s is automatically generated
    }
}
class B extends A {
    public t: string;
    private n: number;
    public constructor(spec: ~~this with {n: number;}) {
        super(spec);    // only inherited field s is set in super constructor
    }
}</screen>
</example>
<example>
<title>Spec Object and Subclasses</title>
<screen>class A1 {
    public s: string;
    public n: number;
    public constructor(@Spec spec: ~i~this) {}
}
class B extends A1 {
    public constructor() {
        super({s:"Hello"}); // &lt;-- error, n must be set in object literal
    }
}
class C extends A1 {
    public constructor() {
        super({s:"Hello"}); // &lt;-- error, n must be set in object literal
        this.n = 10; // &lt;-- this has no effect on the super constructor!
    }
}

class A2 {
    public s: string;
    public n: number?; // now n is optional!
    public constructor(@Spec spec: ~i~this) {}
}
class D extends A2 {
    public constructor() {
        super({s:"Hello"}); // and this is ok now!
        this.n = 10; // this explains why it is optional
    }
}

class A3 {
    public s: string;
    public n: number = 10; // now n is not required in ~~this
    public constructor(@Spec spec: ~i~this) {}
}
class E extends A3 {
    public constructor() {
        super({s:"Hello"}); // and this is ok now!
    }
}</screen>
<simpara>The last case (class E) demonstrates a special feature of the typing
strategy modifier in combination with the <literal>tihs</literal> type, see <xref linkend="Structural_Typing"/> for details.</simpara>
<simpara>The constructor in class <literal>B</literal> contains an error because the super constructor
expects all required attributes in <literal>A1</literal> to be set. The additional
initialization of the required field <literal>A1.n</literal> as seen in <literal>C</literal> does not change that
expectation. In this example, the field <literal>n</literal> should not have been defined as
required in the first place.</simpara>
<simpara>Optional fields like <literal>n?</literal> in class <literal>A2</literal> or fields with default values like <literal>n=10</literal> in
class <literal>A3</literal> are not required to be part of the <literal>spec</literal> object.</simpara>
</example>
<example>
<title>Superfluous Properties in Spec-style Constructor</title>
<simpara>Each non-<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math> field has to be set in the constructor
via the <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>w</mi><mi>i</mi><mi>t</mi><mi>h</mi></mrow></math> to the parameter otherwise
properties are <emphasis>not</emphasis> used to set non-<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math>
fields.</simpara>
<screen>class C {
    public s: string;
    n: number;
    constructor(@Spec spec: ~i~this) {}
}

// n is ignored here
new C( { s: "Hello", n: 42 });

// but:
var ol = { s: "Hello", n: 42 };
// "ol may be used elsewhere, we cannot issue warning here" at "ol"
new C(ol) ;

// of course this is true for all superfluous properties
// weird is not used in constructor
new C( { s: "Hello", weird: true } );</screen>
</example>
</section>
</section>
<section xml:id="_callable_constructors">
<title>Callable Constructors</title>

</section>
<section xml:id="_covariant_constructors">
<title>Covariant Constructors</title>
<simpara>Usually, the constructor of a subclass need not be override compatible
with the constructor of its super class. By way of annotation <literal>@CovariantConstructor</literal> it is
possible to change this default behavior and enforce all subclasses to
have constructors with override compatible signatures. A subclass can
achieve this by either inheriting the constructor from the super class
(which is usually override compatible, with the special case of <literal>@Spec</literal>
constructors) or by defining a new constructor with a signature
compatible to the inherited constructor. The same rules as for method
overriding apply.</simpara>
<simpara>The <literal>@CovariantConstructor</literal> annotation may be applied to the constructor, the containing
classifier, or both. It can also be used for interfaces; in fact,
constructors are allowed in interfaces only if they themselves or the
interface is annotated with <literal>@CovariantConstructor</literal> (see
<xref linkend="req:Defining_and_Calling_Constructors"/>).</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="covariant_constructor">Covariant Constructor</link></simpara>
<simpara>A classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is said to <literal><emphasis>have a covariant constructor</emphasis></literal> if and
only if one of the following applies:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> has a direct super class <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>C</mi><mi>'</mi></msup></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>C</mi><mi>'</mi></msup></math> is annotated with <literal>@CovariantConstructor</literal> or <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>C</mi><mi>'</mi></msup></math> has a constructor annotated with <literal>@CovariantConstructor</literal>.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> has a directly implemented interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>
and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> is annotated with  <literal>@CovariantConstructor</literal> or <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> has a
constructor annotated with <literal>@CovariantConstructor</literal>.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> has a direct super class or directly implemented
interface that <literal><emphasis>has a covariant constructor</emphasis></literal> (as defined here).</simpara>
</listitem>
</orderedlist>
<simpara>Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> does not need to have an owned(!) constructor;
also a constructor inherited from a super class can be declared
covariant.</simpara>
<simpara>The following rules apply to covariant constructors.</simpara>
<simpara><emphasis role="strong">Req. IDE-60:</emphasis> <link linkend="IDE-60">Covariant Constructors</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Annotation <literal>@CovariantConstructor</literal> may only be applied to classes, interfaces, and
constructors. Annotating a constructor with this annotation, or its
containing classifier, or both have all the same effect.</simpara>
</listitem>
<listitem>
<simpara>Given a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> with an owned constructor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> and a super class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>u</mi><mi>p</mi></math> that has a
covariant constructor (owned or inherited, see ), then</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>u</mi><mi>p</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must be accessible from
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>,</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must be override compatible with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow><mrow><mi>S</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mfenced></math></simpara>
<simpara>This constraint corresponds to <xref linkend="req:Overriding_Members"/> except for the <literal>Override</literal>
annotation, which is not required, here.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Given a classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> implementing interface
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> has a covariant constructor (owned
or inherited, see <xref linkend="def:Covariant_Constructors"/>), we require</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must be accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>,</simpara>
</listitem>
<listitem>
<simpara>an implementation-compatible constructor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must be
defined in C with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow><mrow><mi>I</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow></mfenced></math></simpara>
<simpara>This constraint corresponds to <xref linkend="req:Implementation_of_Interface_Members"/>
except for the <literal>@Override</literal> annotation, which is not required, here.</simpara>
</listitem>
<listitem>
<simpara>Given a classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> without an owned constructor and
an extended class or interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>u</mi><mi>p</mi></math> that has a covariant
constructor (owned or inherited, see <xref linkend="def:Covariant_Constructors"/>), we require the inherited constructor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> within the context of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> to be override compatible to itself in the context of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>u</mi><mi>p</mi></math>. Using notation <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi><mrow><mo>[</mo><mi>T</mi></mrow></math>$] to denote that a
member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math> is to be treated as defined in container type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, which means the this-binding is set to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>,
we can write: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mrow><mo>(</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mrow><mo>[</mo><mi>C</mi></mrow></mrow></math>, ctor[Sup])
    \end{aligned}\]] This constraint does not correspond to any of the
constraints for the redefinition of ordinary members.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>The following example demonstrates a use case for covariant
constructors. It shows a small class hierarchy using covariant
constructors, <literal>Cls</literal> and <literal>Cls2</literal>, together with a helper function <literal>createAnother</literal> that creates and returns a new instance of the same type as its argument <literal>value</literal>.</simpara>
<example>
<title>Covariant Constructors</title>
<screen>class A {}
class B extends A {}

@CovariantConstructor
class Cls {
    constructor(p: B) {}
}
class Cls2 extends Cls {
    constructor(p: A) { // it's legal to generalize the type of parameter 'p'
        super(null);
    }
}

function &lt;T extends Cls&gt; createAnother(value: T, p: B): T {
    let ctor = value.constructor;
    return new ctor(p);
}

let x = new Cls2(new A());
let y: Cls2;

y = createAnother(x, new B());</screen>
</example>
<simpara>In the code of <xref linkend="ex:Covariant_Constructors"/> we would get an error if we changed the type of parameter <literal>p</literal> in the constructor of <literal>Cls2</literal> to some other type that is not a super type of <literal>B</literal>,
i.e. the type of the corresponding parameter of <literal>Cls</literal>’s constructor. If we
removed the <literal>@CovariantConstructor</literal> annotation on <literal>Cls</literal>, we would get an error in the new expression inside function <literal>createAnother</literal>.</simpara>
<simpara>The next example illustrates how to use <literal>@CovariantConstructor</literal> with interfaces and shows a behavior that might be surprising at first sight.</simpara>
<example>
<title>Covariant Constructors in Interfaces</title>
<screen>@CovariantConstructor
interface I {
    constructor(p: number)
}

class C implements I {
    // no constructor required!
}

class D extends C {
    // XPECT errors --&gt; "Signature of constructor of class D does not conform to overridden constructor of class N4Object: {function(number)} is not a subtype of {function()}." at "constructor"
    constructor(p: number) {}
}</screen>
</example>
<simpara>Interface <literal>I</literal> declares a covariant constructor expecting a single parameter
of type <literal>number</literal>. Even though class <literal>C</literal> implements <literal>I</literal>, it does not need to define an
owned constructor with such a parameter. According to
<xref linkend="req:Covariant_Constructors"/>, it is enough for <literal>C</literal> to have a constructor,
either owned or inherited, that is override compatible with the one
declared by <literal>I</literal>. Class <literal>C</literal> inherits the default constructor from <literal>N4Object</literal>, which does not have any arguments and is thus override compatible to <literal>I</literal>’s
constructor.</simpara>
<simpara>In addition, subclasses are now required to have constructors which are
override compatible with the constructor of class <literal>C</literal>, i.e. the one
inherited from <literal>N4Object</literal>. The above example shows that this is violated even when
repeating the exact same constructor signature from interface <literal>I</literal>, because
that constructor now appears on the other side of the subtype test
during checking override compatibility.</simpara>
</section>
</section>
<section xml:id="_data_fields">
<title>Data Fields</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-381"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-381</link></simpara>
</sidebar>
<simpara>A data field is a simple property of a class. There must be no getter or
setter defined with the same name as the data field. In ECMAScript 6, a
class has no explicit data fields. It is possible, however, to
implicitly define a data field by simply assigning a value to a variable
of the this element (e.g. <literal>this.x = 10</literal> implicitly defines a field <literal>x</literal>).
Data fields in N4JS are similar to these implicit fields in ECMAScript 6 except that
they are defined explicitly in order to simplify validation and user
assistance.</simpara>
<section xml:id="data-fields-syntax">
<title>Syntax</title>
<screen>N4FieldDeclaration &lt;Yield&gt;:
    {N4FieldDeclaration}
    annotations+=Annotation*
    FieldDeclarationImpl&lt;Yield&gt;
;

fragment FieldDeclarationImpl &lt;Yield&gt;*:
    accessModifier=N4JSMemberAccessModifier?
    (static?=’static’ | const?=’const’)?
    LiteralPropertyName&lt;Yield&gt; ColonSepTypeRef? ('=' expression=Expression&lt;In=true,Yield&gt;)? ';'
;</screen>
</section>
<section xml:id="data-fields-properties">
<title>Properties</title>
<simpara>Fields have the following properties which can be explicitly defined:</simpara>
<variablelist>
<varlistentry>
<term><literal>typeRef</literal> </term>
<listitem>
<simpara>Type of the field; default value is <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mi>n</mi><mi>y</mi></math>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>expr</literal> </term>
<listitem>
<simpara>Initializer expression, i.e. sets default value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>static</literal> </term>
<listitem>
<simpara>Boolean flag set to true if field is a static field.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>const</literal> </term>
<listitem>
<simpara>Boolean flag set to true if field cannot be changed. Note that const
fields are automatically static. Const fields need an initializer. Also
see <xref linkend="sec:Assignment_Modifiers"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Note that <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi></math> is <emphasis>not</emphasis> the (reversed) value of the
property descriptor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math> as the latter is checked at
runtime while const may or may not be checked at runtime.</simpara>
<simpara>The following pseudo properties are defined via annotations for setting
the values of the property descriptor:</simpara>
<variablelist>
<varlistentry>
<term><literal>enumerable</literal> </term>
<listitem>
<simpara>Boolean flag reflecting the property descriptor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>n</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math>, set via annotation <literal>@Enumerable(true|false)</literal>.
The default value is <math xmlns="http://www.w3.org/1998/Math/MathML"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>declaredWriteable</literal> </term>
<listitem>
<simpara>Boolean flag reflecting the property descriptor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math>,
set via annotation <literal>@Writeable(true|false)</literal>. The default value is <math xmlns="http://www.w3.org/1998/Math/MathML"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>final</literal> </term>
<listitem>
<simpara>Boolean flag making the field read-only, and it must be set in the
constructor. Also see <xref linkend="Assignment_Modifiers"/>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Derived values for fields</simpara>
<variablelist>
<varlistentry>
<term><literal>readable</literal> </term>
<listitem>
<simpara>Always true for fields.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>abstract</literal> </term>
<listitem>
<simpara>Always false for fields.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>writeable</literal> </term>
<listitem>
<simpara>Set to false if field is declared const or final. In the latter case, it
may be set in the constructor (cf. <xref linkend="_assignment_modifiers"/>).</simpara>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="data-fields-semantics">
<title>Semantics</title>
<simpara><emphasis role="strong">Req. IDE-61:</emphasis> <link linkend="IDE-61">Attributes</link> (ver. 1)</simpara>
<simpara>For any attribute <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi></math> if a
class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A required data field must not define an initializer:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>a</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>There must be no other member with the same name of a data field
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math>. In particular, there must be no getter or setter
defined with the same name: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi> </mi><mi>m</mi><mo>∈</mo><mi>f</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>m</mi><mo>≠</mo><mi>f</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>≠</mo><mi>f</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>If a subclass should set a different default value, this has to be done
in the constructor of the subclass.</simpara>
<simpara>For the relation of data fields and field accessors in the context of
extending classes or implementing interfaces see <xref linkend="Redefinition_of_Members"/>.</simpara>
</section>
<section xml:id="data-fields-type-inference">
<title>Type Inference</title>
<simpara>The type of a field is the type of its declaration:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>f</mi><mi>:</mi><mi>d</mi></mrow><mrow/><mtext>
</mtext></math></simpara>
<simpara>The type of a field declaration is either the declared type or the
inferred type of the initializer expression:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>≠</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>≠</mo><mtext>
</mtext><mi>E</mi><mo>=</mo><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>E</mi><mo>∉</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>,</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>E</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow><mi>e</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></math></simpara>
<simpara>If the type contains type variables they are substituted according to
type parameters which are provided by the reference:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>T</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mi> </mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>t</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
</section>
</section>
<section xml:id="_assignment_modifiers">
<title>Assignment Modifiers</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-946"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-946</link></simpara>
</sidebar>
<simpara>Assignment of data fields can be modified by the assignment modifiers
(similar to constant variable declarations, see <xref linkend="Const"/>) and <literal>@Final</literal>.</simpara>
<simpara><emphasis role="strong">Req. IDE-62:</emphasis> <link linkend="IDE-62">Const Data Fields</link> (ver. 1)</simpara>
<simpara>For a data field <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> marked as <literal>const</literal>, the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>An initializer expression must be provided in the declaration
(except in n4jsd files): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo></math></simpara>
</listitem>
<listitem>
<simpara>A constant data field is implicitly static and must be accessed only
via the classifier type. It is not possible, therefore, to use the <literal>this</literal>
keyword in the initializer expression of a constant field:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>s</mi><mi>u</mi><mi>b</mi><mo>∈</mo><mi>f</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><msup><mi>r</mi><mo>*</mo></msup><mi>:</mi><mi>s</mi><mi>u</mi><mi>b</mi><mo>=</mo><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></math></simpara>
</listitem>
<listitem>
<simpara>A constant data field must not be annotated with <literal>@Final</literal>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mo>⇒</mo><mo>¬</mo><mi>f</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>Constant data fields are not writeable (cf. <xref linkend="req:Write_Acccess"/>):
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mo>⇒</mo><mo>¬</mo><mi>f</mi><mo>.</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math></simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-63:</emphasis> <link linkend="IDE-63">Final Data Fields</link> (ver. 1)</simpara>
<simpara>For a data field <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> marked as <literal>@Final</literal>, the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A final data field must not be modified with <literal>const</literal> or <literal>static</literal>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>⇒</mo><mo>¬</mo><mi>f</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mo>∧</mo><mo>¬</mo><mi>f</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>A final data field is not writeable: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>f</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>⇒</mo><mo>¬</mo><mi>f</mi><mo>.</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math> A final field
may, however, be set in the constructor. See <xref linkend="req:Write_Acccess"/> for
details.</simpara>
</listitem>
<listitem>
<simpara>A final data field must be either initialized by an initializer
expression or in the constructor. If the field is initialized in the
constructor, this may be done either explicitly or via a spec-style
constructor. 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>f</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mo>∃</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>:</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>f</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi></mrow><mi>f</mi></mfenced></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi><mo>∧</mo><mo>∃</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mo>∈</mo><mi>f</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mo>∧</mo><mo>∃</mo><mi>s</mi><mi>m</mi><mo>∈</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>s</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>f</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow></mfenced></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/575"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-575</link></simpara>
</sidebar>
</section>
<section xml:id="_field_accessors_getter_setter">
<title>Field Accessors (Getter/Setter)</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-160"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-160</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-381"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-381</link></simpara>
</sidebar>
<simpara>Instead of a simple data field, a field can be defined by means of the
getter and setter accessor methods. These accessor methods are similar
to the accuser methods in object literals:</simpara>
<section xml:id="field-acessors-syntax">
<title>Syntax</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-8"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-8</link></simpara>
</sidebar>
<screen>N4GetterDeclaration &lt;Yield&gt;:
    =&gt; ({N4GetterDeclaration}
    annotations+=Annotation*
    accessModifier=N4JSMemberAccessModifier?
    (abstract?='abstract' | static?='static')?
    GetterHeader&lt;Yield&gt;)
    (body=Block&lt;Yield&gt;)? ';'?
;

fragment GetterHeader &lt;Yield&gt;*:
    ('get' -&gt; LiteralOrComputedPropertyName &lt;Yield&gt; '(' ')' ColonSepTypeRef?)
;

N4SetterDeclaration &lt;Yield&gt;:
    =&gt;({N4SetterDeclaration}
        annotations+=Annotation*
        accessModifier=N4JSMemberAccessModifier?
        (abstract?='abstract' | static?='static')?
        'set'
        -&gt;LiteralOrComputedPropertyName &lt;Yield&gt;
    )
    '(' fpar=FormalParameter&lt;Yield&gt; ')' (body=Block&lt;Yield&gt;)? ';'?
;</screen>
<simpara>Notes with regard to syntax: Although ECMAScript 6 does not define
fields in classes, it defines getter and setter methods similarly (cf. [<link linkend="ECMA15a">ECMA15a(p.S13.3, p.p.209)</link>]).</simpara>
</section>
<section xml:id="_getter_and_setter">
<title>Getter and Setter</title>
<simpara>[[ex:Getter and Setter]]
The getter and setter implementations usually reference data fields internally. These are to be declared explicitly (although ECMAScript allows creating fields on
the fly on their first usage (see task IDE-422 )).
The following example demonstrates a typical usage of getter and setter in combination with a data field.
The getter lazily initializes the field on demand. The setter performs
some notification.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-422"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-422</link></simpara>
</sidebar>
<formalpara>
<title>Getter Setter</title>
<para>
<screen>class A {}

class C {
    private _data: A = null;

    public get data(): A {
        if (this._data==null) {
            this._data = new A();
        }
        return this._data;
    }

    public set data(data: A) {
        this._data = data;
        this.notifyListeners();
    }

    notifyListeners(): void {
        // ...
    }
}</screen>
</para>
</formalpara>
</section>
<section xml:id="field-acessors-properties">
<title>Properties</title>
<simpara>Derived values for field accessors:</simpara>
<variablelist>
<varlistentry>
<term><literal>readable</literal> </term>
<listitem>
<simpara>True for getters and false for setters.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>writable</literal> </term>
<listitem>
<simpara>False for getters and true for setters.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="field-accessors-semantics">
<title>Semantics</title>
<simpara>There must be no field or method with the same name as a field accessor
(follows from <xref linkend="req:Member_Names"/>). In addition, the following
constraints must hold:</simpara>
<simpara><emphasis role="strong">Req. IDE-64:</emphasis> <link linkend="IDE-64">Field Accessors</link> (ver. 1)</simpara>
<itemizedlist>
<listitem>
<simpara>The return type of a getter must not be <literal>void</literal>.</simpara>
</listitem>
<listitem>
<simpara>The type of the parameter of a setter must not be <literal>void</literal>.</simpara>
</listitem>
<listitem>
<simpara>If a getter <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi></math> is defined or consumed (from an interface)
or merged-in (via static polyfill) in a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> and a
setter <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>g</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><mi>s</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>g</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math> is inherited by
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> from one of its super classes, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must
define a setter <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>s</mi><mi>'</mi></msup></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>s</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>g</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><msup><mi>s</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>g</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math>
<footnote><simpara>This is required, because in Javascript a getter shadows a corresponding setter defined further up in the prototype chain; likewise a setter shadows a corresponding getter.</simpara></footnote>.
The same applies to setters, accordingly.</simpara>
</listitem>
<listitem>
<simpara><xref linkend="req:Overriding_Members"/>, <xref linkend="req:Consumption_of_Interface_Members"/>, and
<xref linkend="req:Implementation_of_Interface_Members"/> apply to field accessors
accordingly (getter / setter overriding).</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>A getter and setter with the same name need not have the same
type, i.e. the getter’s return type need not be the same as a subtype of
the type of the setter’s parameter (the types can be completely
unrelated).
<footnote><simpara>Thus, the type of one accessor is not used to infer the type of the other one. E.g., from <literal>set x(string s)</literal>, we cannot infer <literal>get x()</literal> to return <literal>string</literal> — instead, the getter is inferred to return <literal>any</literal>.</simpara></footnote></simpara>
</note>
<simpara>Getters and setters – like functions – define a variable execution
environment and therefore provide access to the actual passed-in
parameters through the implicit <literal>arguments</literal> variable inside of their bodies (c.f. <xref linkend="Arguments_Objects"/>).</simpara>
</section>
</section>
</section>
<section xml:id="_static_members">
<title>Static Members</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-151"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-151</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-505"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-505</link></simpara>
</sidebar>
<simpara>Static data fields, field accessors and methods are quite similar to
instance members, however they are not members of instances of the type
but the type itself. They are defined similarly to instance members
except that they are specified with the modifier <literal>static</literal>. Since they are
members of the type, the <literal>this</literal> keyword is not bound to instances of the class,
but again to the type itself. This is similar as in ECMAScript 6
([<link linkend="ECMA15a">ECMA15a(p.14.5.15)</link>]).
Since static members are not instance but type members, it is even
possible that a static member has the same name as an instance member.</simpara>
<simpara>Note that static members are not only allowed in classes but also in
interfaces, but there are important differences (for example, no
inheritance of static members of interfaces, cf. Section
<xref linkend="Static_Members_of_Interfaces"/>) .</simpara>
<simpara><emphasis role="strong">Req. IDE-65:</emphasis> <link linkend="IDE-65">Static member not abstract</link> (ver. 1)</simpara>
<simpara>For a static field accessor or method
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math>, the following constraint must hold:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>¬</mo><mi>s</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></math></simpara>
</listitem>
</itemizedlist>
<simpara>Like instance methods, static methods of classes are inherited by
subclasses and it is possible to override static methods in subclasses.
The very same override constraints are valid in this case as well.</simpara>
<section xml:id="_access_from_and_to_static_members">
<title>Access From and To Static Members</title>
<simpara><emphasis role="strong">Req. IDE-66:</emphasis> <link linkend="IDE-66">Accessing Static Members</link> (ver. 1)</simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math> be a static member of class <literal>C</literal>. Except for write-access to
fields, which will be explained later, you can access <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math>
via:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The class declaration instance, i.e. the classifier or constructor type, <literal>constructor{C}</literal>, i.e. <literal>C.m</literal></simpara>
</listitem>
<listitem>
<simpara>The class declaration instance of a subtype, i.e. the classifier or constructor type, i.e. <literal>D.m</literal>, if <literal>D</literal> is a subclass of <literal>C</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>v.m</literal>, if <literal>v</literal> is a variable of type <literal>C</literal> (i.e. classifier type as defined in <xref linkend="Constructor_Type"/>) or a subtype thereof.</simpara>
</listitem>
<listitem>
<simpara><literal>this.m</literal> inside the body of any static method declared in <literal>C</literal> or any sub-class of <literal>C</literal>.</simpara>
</listitem>
<listitem>
<simpara>Via a type variable <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> which upper bound is a subclass
of <literal>C</literal>,<?asciidoc-br?>
e.g., <literal>function &lt;T extends C&gt; f(){T.m}</literal> </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/222"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-222</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Req. IDE-67:</emphasis> <link linkend="IDE-67">Static Member Access</link> (ver. 1)</simpara>
<simpara>It is not possible to access instance members from static members. This is true in
particular for type variables defined by a generic classifier.</simpara>
<simpara><emphasis role="strong">Req. IDE-68:</emphasis> <link linkend="IDE-68">Write-access to static data fields and static setter</link> (ver. 1)</simpara>
<simpara> 
For static data fields and static setter <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> the following constraint must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1071"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1071</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/442"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-442</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>For every assign expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>=</mo><mi>T</mi><mo>.</mo><mi>f</mi><mo>→</mo><mi>T</mi><mo>=</mo><mi>f</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>For every writing unary expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mo>+</mo><mo>+</mo></mrow><mrow><mo>-</mo><mo>-</mo></mrow></mfenced><mo>∧</mo><mi>f</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>T</mi><mo>.</mo><mi>f</mi><mo>→</mo><mi>T</mi><mo>=</mo><mi>f</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi></math>.</simpara>
</listitem>
</itemizedlist>
<simpara>In the special case of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math> being a static data field,
write-access is only possible via the defining type name <literal>C.m</literal>: . So in the
list above, only the first line can be used when assigning values to a
field. Note that this only applies to fields and
set-accessors.
<footnote><simpara>The technical reason for this rule is the way properties are stored in JavaScript. Take for an example subclass-write access : <literal>class C { static f="a";}</literal> with <literal>class D extends C { }</literal>. Now the data field <literal>f</literal> on <literal>C</literal> can also be queried using <literal>D</literal> (<literal>var q=D.f;</literal>) but writing (<literal>D.f="b";</literal>) would introduce a newly created property <literal>f</literal> on class <literal>D</literal>, which differs from the one defined on <literal>C</literal>. It would do this without explicitly overriding the inherited property. Subsequent reads to <literal>D.f</literal> would route to this ’accidentally’ introduced property. Such a behavior would not be expected and therefore has been disallowed. Note that this write restriction applies to data-fields and to field setters.</simpara></footnote></simpara>
<simpara>It is even possible to call a static field accessor or method of a class
using dynamic polymorphism, as demonstrated in the following example:</simpara>
<simpara>Static members of classes, inheritance and polymorphism <anchor xml:id="ex:Polymorphism_and_static_methods" xreflabel="[ex:Polymorphism_and_static_methods]"/></simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    static m(): void { console.log('A#m'); }

    static foo(): void { console.log('A#foo'); }

    static bar(): void {
        this.foo();
    }
}

class B extends A {
    @Override
    static foo(): void { console.log('B#foo'); }
}

A.m(); // will print "A#m"
B.m(); // will print "A#m" (m is inherited by B)

var t: type{A} = A;
t.foo(); // will print "A#foo"
t = B;
t.foo(); // will print "B#foo"

// using 'this':

A.bar(); // will print "A#foo"
B.bar(); // will print "B#foo"</programlisting>
<simpara>This is quite different from Java where static methods are not inherited
and references to static methods are statically bound at compile time
depending on the declared type of the receiver (and not its value):</simpara>
<simpara>Static members in Java <anchor xml:id="ex:Static_members_in_Java" xreflabel="[ex:Static_members_in_Java]"/></simpara>
<programlisting language="java" linenumbering="unnumbered">// !!! JAVA CODE !!!
public class C {

    static void m() { System.out.println("C#m"); }

    public static void main(String[] args) {
        final C c = null;
        c.m();  // will print "C#m" (no NullPointerException at runtime)
    }
}</programlisting>
</section>
<section xml:id="_generic_static_methods">
<title>Generic static methods</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-151"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-151</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-38"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-38</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-39"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-39</link></simpara>
</sidebar>
<simpara>It is not possible to refer to type variables of a generic class, as
these type variables are never bound to any concrete types. A static
method can, however, be declared generic. Generic static methods are
defined similarly to generic instance methods. Since they cannot refer
to type variables of a generic class, the constraint to avoid type
variables with equal names (see
<xref linkend="req:Type_variable_names_for_generic_methods"/>) does not need to hold for
generic static methods.</simpara>
</section>
<section xml:id="_static_members_of_interfaces">
<title>Static Members of Interfaces</title>
<simpara>Data fields, field accessors and methods of interfaces may be declared
static. A few restrictions apply:</simpara>
<simpara><emphasis role="strong">Req. IDE-69:</emphasis> <link linkend="IDE-69">Static Members of Interfaces</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Static members of interfaces may only be accessed directly via the
containing interface’s type name  (this means, of the four ways of
accessing static members of classes defined in <xref linkend="req:Accessing_Static_Members"/> above, only the first one applies to static members of interfaces).</simpara>
</listitem>
<listitem>
<simpara>The <literal>this</literal> literal may not be used in static methods or field accessors of
interfaces and it may not be used in the initializer expression of
static fields of interfaces. See <xref linkend="req:ValidLocationForThisLiteral"/>.</simpara>
</listitem>
<listitem>
<simpara>The <literal>super</literal> literal may not be used in static methods or field accessors of
interfaces (in fact, it may not be used in interfaces at all,
cf. <xref linkend="req:Access_Super_Member_with_Super_Literal"/>).</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/386"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-386</link></simpara>
</sidebar>
<simpara>Note that the <literal>this</literal> type as a return type for methods is only allowed for
instance methods and as an argument type only in constructors
(structurally typed). There is no need to disallow these cases for
static interface methods in the constraints above.</simpara>
<simpara>In general, static members may not be abstract,
cf. <xref linkend="req:Abstract_Member"/>, which applies here as well. Static methods
and field accessors of interfaces, therefore, always have to provide a
body.</simpara>
<simpara>Static members of interfaces are much more restricted than those of
classes. Compare the following example to <xref linkend="ex:Polymorphism_and_static_methods"/> for classes above:</simpara>
<simpara>Example: Static members of interfaces</simpara>
<programlisting xml:id="ex:Static_members_of_interfaces" language="n4js" linenumbering="unnumbered">interface I {
    static m(): void { console.log('I#m'); }
}

interface J extends I {}

I.m(); // prints "I#m"
J.m(); // ERROR! (m is not inherited by J)

var ti: type{I} = I;
ti.m(); // ERROR! (access to m only allowed directly via type name I)
ti = J;
ti.m(); // ERROR! (access to m only allowed directly via type name I)</programlisting>
<simpara>The last line in is the reason why access to static members has to be
restricted to direct access via the type name of the containing
interfaces.</simpara>
</section>
</section>
<section xml:id="_redefinition_of_members">
<title>Redefinition of Members</title>
<simpara>Members defined in classes or interfaces can be redefined by means of
being overridden or implemented in subclasses, sub-interfaces, or
implementing classes. Fields and methods with default implementation
defined in interfaces can be consumed by the implementor, but certain
restrictions apply.</simpara>
<simpara><emphasis role="strong">Req. IDE-70:</emphasis> <link linkend="IDE-70">Override Compatible</link> (ver. 1)</simpara>
<simpara>] A member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is
<emphasis>override compatible</emphasis> to a member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> if and only if the
following constraints hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The name and static modifiers are equal:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>S</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><mi>M</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>S</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>The metatypes are compatible: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mtext>
</mtext><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo>,</mo><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mtext>
</mtext><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo>,</mo><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mtext>
</mtext><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo>,</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>The overridden member must not be declared final:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>¬</mo><mi>S</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>Overridden member declared const can only be overridden (redefined)
by const members: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>S</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mo>⇔</mo><mi>M</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi></math></simpara>
</listitem>
<listitem>
<simpara>It is not possible to override a non-abstract member with an
abstract one: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>¬</mo><mi>M</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>∨</mo><mi>S</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi></math></simpara>
</listitem>
<listitem>
<simpara>The types are compatible: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfenced close=")" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mo>,</mo><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>≠</mo><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>M</mi><mi>S</mi><mtext>
</mtext><mfenced close=")" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>≠</mo><mrow><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mo>∧</mo><mo>¬</mo><mi>S</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>S</mi><mi>M</mi><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>The access modifier is compatible: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>≥</mo><mi>S</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>We define a relation <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><mi>M</mi><mi>S</mi></mfenced></math> accordingly.</simpara>
<simpara>Members overriding or implementing other members must be declared as
override. If a member does not override another, however, it must not be
declared as override.</simpara>
<simpara><emphasis role="strong">Req. IDE-71:</emphasis> <link linkend="IDE-71">Non-Override Declaration</link> (ver. 1)</simpara>
<simpara>If and only if a member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> of a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> (extending a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> and interfaces <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math>) does not override or
implement another member, then it must not be declared as override. That
is the following constraint must hold: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>¬</mo><mi>M</mi><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>∪</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>I</mi><mi>i</mi></msub><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>M</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mtext>
</mtext></math></simpara>
<section xml:id="_overriding_of_members">
<title>Overriding of Members</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-158"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-158</link></simpara>
</sidebar>
<simpara>In general, the N4 platform supports overriding members by redefining
them in sub-classes. This definition allows for overriding of static
methods, but it does not apply to constructors because
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∉</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi></math>.</simpara>
<simpara><emphasis role="strong">Req. IDE-72:</emphasis> <link linkend="IDE-72">Overriding Members</link> (ver. 1)</simpara>
<simpara>Given a class
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> and a superclass <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mi>u</mi><mi>p</mi></math>. If for an instance
or static member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> defined in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> a member
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> exists with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><mi>S</mi><mo>∈</mo><mi>S</mi><mi>u</mi><mi>p</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>S</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><mi>M</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>=</mo><mi>S</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math> then we call <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> the overriding member
and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> the overridden member. In that case the following
constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> must be accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> must be override compatible with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><mi>M</mi><mi>S</mi></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is a field and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is an accessor,
then an additional accessor <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> must exists so that
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mo>,</mo><msup><mi>M</mi><mi>'</mi></msup></math> are an accessor pair for <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mo>∃</mo><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="4.0em"/><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup><mi>S</mi></mfenced><mo>∧</mo><mfenced close="}" open="{"><mrow><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced></mrow><mrow><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced></mrow></mfenced><mo>=</mo><mrow><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> must be declared as override:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>M</mi><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>Remarks:</simpara>
<itemizedlist>
<listitem>
<simpara>An overridden method, getter, or setter may called via <literal>super</literal>. Note that
this is not possible for fields.</simpara>
</listitem>
<listitem>
<simpara>There is no ’hiding’ of fields as in Java, instead there is field
overriding.</simpara>
</listitem>
<listitem>
<simpara>It is not possible to override a field with a consumed getter and an
overridden setter, because the getter is not consumed if there exists a
field in a superclass. In this case, the consuming and extending class
needs to define the accessor pair explicitly. The same is true for other
combination of accessors and fields.</simpara>
</listitem>
<listitem>
<simpara>Overriding a field usually makes only sense if the visibility of the
field is to be increased.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_implementation_of_members">
<title>Implementation of Members</title>
<simpara>   </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-158"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-158</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-700"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-700</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1236"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1236</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="interface_and_class_member_sets">Interface and Class Member Sets</link></simpara>
<simpara>For the following constraints, we define two helper sets
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>C</mi></msub></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>I</mi></msub></math> as follows: Given a
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, and interface <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>I</mi><mi>n</mi></msub></math>, implemented
by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msub><mi>M</mi><mi>C</mi></msub><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>=</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>∪</mo><mfenced close="}" open="{"><mrow><mi>m</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>g</mi><mi>t</mi><mi>;</mi><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></mrow></mfenced><mtext>
</mtext><msub><mi>M</mi><mi>I</mi></msub><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>=</mo><munderover><mo>⋃</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>I</mi><mi>i</mi></msub><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mtext>
</mtext></math> Note that these
sets already contain only non-private data fields.</simpara>
<section xml:id="_member_consumption">
<title>Member Consumption</title>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="member_consumption_and_implementation">Member Consumption and Implementation</link></simpara>
<simpara>A member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> defined in an interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> is <emphasis>consumed</emphasis> by
an implementor <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, if it becomes a member of the class,
that is, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math>.</simpara>
<simpara>A member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is consumed if there is no member defined in
the implementor with the same name and if there is no non-private
non-abstract member with that name inherited by the implementor from its
superclass.footnote:[There had been the idea of preventing static
members of being consumed. However, this would break the type subtype
relation.</simpara>
<simpara>If the implementor defines the member itself, then the member is
implemented rather than consumed.</simpara>
<simpara>The concrete rules are described in the following;</simpara>
<simpara>It is not always possible to directly consume a member. In general, a
rather conservative strategy is used: if two implemented interfaces
define the same (non-abstract) member then the implementor must redefine
the member in order to solve conflicts. Even if the two conflicting
members have the same types, the implementor must redefine them as we
generally assume semantic differences which the consumer has to be aware
of. Data fields defined in interfaces, in particular, are assumed to be
concrete. It is not, therefore, possible to consume a field defined in
two implemented interfaces.</simpara>
<simpara>Given a classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> <footnote><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> could either be a class or an interface.</simpara></footnote>, and interfaces <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>I</mi><mi>n</mi></msub></math>
implemented (or extended) by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, and sets <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>C</mi></msub></math>
and <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>I</mi></msub></math> as defined in . A non-static member
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> defined in any interface <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>i</mi></msub></math> is merged
into the consumer (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>), if for all other (possible) members
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><msub><mi>M</mi><mi>C</mi></msub><mo>∪</mo><msub><mi>M</mi><mi>I</mi></msub><mo>∖</mo><mi>M</mi><mi>:</mi><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∧</mo><mo>¬</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></math> the following constraints hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The other member’s meta type matches the meta type of the merge
candiate: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>=</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mtext>
</mtext><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>≠</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>∈</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mo>,</mo><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>The other member is abstract and not owned by the consumer:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>∨</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mo>⇒</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>∧</mo><msup><mi>M</mi><mi>'</mi></msup><mo>∉</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math></simpara>
</listitem>
<listitem>
<simpara>The merge candidate’s access modifier is not less than the modifier
of the other member: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>∨</mo><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mo>⇒</mo><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>≥</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>The merge candidate’s type compatible with the other member:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mo>,</mo><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>≠</mo><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>M</mi><msup><mi>M</mi><mi>'</mi></msup><mtext>
</mtext><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>∈</mo><mrow><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup></mfenced><mo>≠</mo><mrow><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><msup><mi>M</mi><mi>'</mi></msup><mi>M</mi></math></simpara>
</listitem>
</orderedlist>
<simpara>==== Member Implementation</simpara>
<simpara>For any non-static abstract member <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> defined in an interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>
implemented (or extended) by a classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> must be accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> and one or two
member(s) in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must exist which are
implementation-compatible with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math>. The implementing
member(s) must be declared as override if they are directly defined in
the consumer.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> must be accessible from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>An implementation-compatible member <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> must exist in
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is not a field: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>≠</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><msup><mi>M</mi><mi>'</mi></msup><mi>M</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>⇒</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> is a field, then either an
implementation-compatible field <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>F</mi><mi>'</mi></msup></math> or accessor pair
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>G</mi><mi>'</mi></msup><mo>,</mo><msup><mi>S</mi><mi>'</mi></msup></math> must exist: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>M</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><msup><mi>F</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><msup><mi>F</mi><mi>'</mi></msup><mi>M</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><msup><mi>F</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>⇒</mo><msup><mi>F</mi><mi>'</mi></msup><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><msup><mi>G</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><msup><mi>S</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><msup><mi>G</mi><mi>'</mi></msup><mi>M</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>b</mi><mi>l</mi><mi>e</mi><mfenced close=")" open="("><msup><mi>S</mi><mi>'</mi></msup><mi>M</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><msup><mi>G</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>⇒</mo><msup><mi>G</mi><mi>'</mi></msup><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><msup><mi>S</mi><mi>'</mi></msup><mo>∈</mo><mi>C</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>⇒</mo><msup><mi>S</mi><mi>'</mi></msup><mo>.</mo><mi>o</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfenced></math></simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>Methods defined in interfaces are automatically declared abstract if
they do not provide a default implementation. This can also be expressed
explicitly via adding the <literal>abstract</literal> modifier. If a class implementing an abstract
interface does not implement a method declared in the interface, the
class needs to be declared abstract (cf. <xref linkend="Abstract_Classes"/>).</simpara>
<simpara>Consequences for method implementation:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>It may be require the implementor to explicitly define a method in
order to solve type conflicts produced by methods of different
interfaces with same name but different signatures.</simpara>
</listitem>
<listitem>
<simpara>Methods in an implementor cannot decrease the accessibility of
methods from implemented interfaces, that is
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>M</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo>,</mo><msup><mi>M</mi><mi>'</mi></msup><mo>∈</mo><msub><mi>I</mi><mi>i</mi></msub><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mfenced close=")" open="("><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mi>n</mi></mrow></mfenced><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mi>M</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>⇒</mo><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>≠</mo><mi>p</mi><mi>r</mi><mi>i</mi><mi>v</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>M</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>≥</mo><msup><mi>M</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>Methods in the implementor must be a supertype <footnote><simpara>As defined in <xref linkend="Function_Type"/> for function types.</simpara></footnote> of methods from implemented interfaces.
That is to say the implemented methods are override-compatible.</simpara>
</listitem>
<listitem>
<simpara>There may be several methods <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>M</mi><mi>n</mi></msub></math> defined in
different implemented interfaces and a single owned method
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>C</mi></msub></math>. In this case, the above
constraints must hold for <emphasis>all</emphasis> methods. In particular,
<math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math>’s signature must conform to all conflicting methods’
signatures. This is possible by using union types for the arguments and
an intersection type as return type. Such a method <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> is
said to <emphasis>resolve</emphasis> the conflict between the implemented (and also
inherited) methods.</simpara>
</listitem>
<listitem>
<simpara>Since abstracts methods may become part of the implementor methods,
the implementor must either define these methods or it must be declared
abstract itself. Since interfaces are abstract by default,
responsibility for implementing abstract methods is passed on to any
implementor of interfaces.</simpara>
</listitem>
<listitem>
<simpara>If two implemented interfaces provide (non-abstract) members with
the same name, they are not automatically consumed by the implementor
even if the types would be similar. In these cases, the implementor has
to redefine the members in order to be aware of possible semantic
differences. </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-752"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-752</link></simpara>
</sidebar>
<simpara>There is currently no separate annotation to indicate that methods are
implemented or overridden in order to solve conflicts.
We always use the <literal>@Override</literal> annotation.</simpara>
<simpara>[[ex:Method Consumption]]</simpara>
<simpara><link linkend="tab:methodConsumption">Table Method Consumption</link> shows simple examples of above rules.
Assuming that <literal>class C</literal> extends super <literal>class S</literal> and implements interface <literal>I1</literal> and <literal>I2</literal>:</simpara>
<screen>class C extends S implements I1, I2 {...}</screen>
<simpara>The columns describe different scenarios in which a method (with same
name) is defined in different classifiers. We assume that the defined
methods are always non-abstract (i.e. have default implementations),
non-private and have the same signature. The last row shows which method
will be actually used in class <literal>C</literal>. If the method is defined in class <literal>C</literal>, and
if this method is printed bold, then this means that the method is
required to be defined in <literal>C</literal> in order to solve conflicts.</simpara>
<table xml:id="tab:methodConsumption" frame="all" rowsep="1" colsep="1">
<title>Consumption of methods</title>
<tgroup cols="7">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="12.5*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="12.5*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<colspec colname="col_6" colwidth="12.5*"/>
<colspec colname="col_7" colwidth="12.5*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Interface <literal>I1</literal></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Interface <literal>I2</literal></emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I2</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I2</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I2</subscript></emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">class <literal>S</literal></emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>S</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>S</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>S</subscript></emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">class <literal>C</literal></emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>C</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">M<subscript>C</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>C</subscript></emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∈</mo><mi>C</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi></math></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>I1</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>C</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>C</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>S</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>S</subscript></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis>M<subscript>C</subscript></emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<variablelist>
<varlistentry>
<term>Consuming Field Initializers </term>
<listitem>
<simpara><anchor xml:id="consuming-field-initializers" xreflabel="[consuming-field-initializers]"/>
Aside from the fields themselves, an implementor <emphasis>always</emphasis> consumes the
field initialization if the field is consumed – this is how the
consumption is noticed at runtime.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>[[ex:Field and Field Initializer Consumption]]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">/* XPECT  output ~~~
&lt;==
stdout:
s: C , t: D ,u: I1 ,v: I2
stderr:
==&gt;
~~~ */

interface I0 {
    v: string = "I0";
}

interface I1 {
    s: string = "I1";
    t: string = "I1";
    u: string = "I1";
}

interface I2 extends I1, I0 {
    @Override
    t: string = "I2";
    @Override
    v: string = "I2";
}

class C {
    s: string = "C";
}

class D extends C implements I1, I2 {
    @Override
    t: string = "D";
}

var d = new D();

console.log(
    "s:", d.s, ", t:", d.t, ",u:", d.u, ",v:", d.v
)</programlisting>
<simpara>We expect the following output (for each field):</simpara>
<itemizedlist>
<listitem>
<simpara><literal>d.s = "C"</literal> : <literal>s</literal>: is inherited from <literal>C</literal>, so it is not consumed from <literal>I1</literal> (or <literal>I2</literal>). Consequently,
the initializer of <literal>s</literal> in <literal>C</literal> is used.</simpara>
</listitem>
<listitem>
<simpara><literal>d.t = "D"</literal>: <literal>t</literal> is defined in <literal>D</literal>, solving a conflict stemming from the definition of <literal>t</literal> in <literal>I1</literal> and <literal>I2</literal>. Thus, the initializer of <literal>t</literal> in <literal>D</literal> is used.</simpara>
</listitem>
<listitem>
<simpara><literal>d.u = "I1"</literal> : <literal>u</literal> is only defined in <literal>I1</literal>, thus the initializer defined in <literal>I1</literal> is used.</simpara>
</listitem>
<listitem>
<simpara><literal>d.v = "I2"</literal> : <literal>v</literal> is overridden in <literal>I2</literal>, so is the field initializer. This is why <literal>d.v</literal> must be assigned to <literal>I2</literal> and not <literal>I0</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>= Structural Typing
   </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-673"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-673</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-680"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-680</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-688"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-688</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-691"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-691</link></simpara>
</sidebar>
<simpara>In general, N4JS uses nominal typing. This is to say that a duck is a
duck only if it is declared to be a duck. In particular when working
with external APIs, it is more convenient to use structural or duck
typing. That is, a thing that can swim and quacks like a duck, is a
duck.</simpara>
<simpara>Interfaces or classes can be used for this purpose with a <emphasis>typing
strategy modifier</emphasis> . Given a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the simple `~
` (tilde)
can be added to its declaration (on definition-site) or in a reference (on
use-site) to indicate that the type system should use structural typing
rather than nominal typing.<footnote><simpara>This kind of typing is used by TypeScript only. By defining a structural typed classifier or reference, it basically behaves as it would behave – without that modifier – in TypeScript.</simpara></footnote> This means that some other type must provide the same
members as type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> to be deemed a structural subtype.
However, the operator cannot be used anymore with the type or reference
as this operator relies on the declaration information (or at least the
closest thing available at runtime). In this case, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is,
therefore, always a structural subtype of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>~</mi><mi>T</mi></math>.</simpara>
<simpara>Sometimes it is convenient to refer only to the fields of a classifier,
for example when the initial field values are to be provided in a
variable passed to the constructor. In that case, the type can be
modified with <literal>~~
</literal> (two tildes). This is only possible on use-site, i.e.
on type references. Furthermore, only on the use-site, it is possible to
consider only either readable or writable or fields by using the
read-only <literal>r </literal> or write-only <literal>w </literal> structural field typing. For
initialization blocks, it is even possible to use structural initializer
field typing via the <literal>i </literal> operator.</simpara>
<simpara>== Syntax</simpara>
<simpara>Structural typing is specified using the typing strategy modifier. There
are two modifiers defined; one for definition-site and one for use-site
structural typing.</simpara>
<formalpara xml:id="lst:Structural_Type_Operator_and_References">
<title>Structural Type Operator and References</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">TypingStrategyUseSiteOperator returns TypingStrategy:
    '~' ('~' | STRUCTMODSUFFIX)?;

TypingStrategyDefSiteOperator returns TypingStrategy:
    '~';

terminal STRUCTMODSUFFIX:
    ('r' | 'i' | 'w') '~'
;

ParameterizedTypeRefStructural returns ParameterizedTypeRefStructural:
    definedTypingStrategy=TypingStrategyUseSiteOperator
    declaredType=[Type|TypeReferenceName]
    (=&gt; '&lt;' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '&gt;')?
    (=&gt; 'with' '{' astStructuralMembers+=TStructMember* '}')?
;

ThisTypeRefStructural returns ThisTypeRefStructural:
    definedTypingStrategy=TypingStrategyUseSiteOperator
    'this'
    ('with' '{' astStructuralMembers+=TStructMember* '}')?
;</programlisting>
</para>
</formalpara>
<simpara>== Definition Site Structural Typing</simpara>
<simpara>An interface or class can be defined to be used with structural typing
by adding the structural modifier to its definition (or, in case of
external classes, to the declaration). This changes the default type
system strategy from nominal to structural typing for that type. That
means that all types with the same members as the specified type are
subtypes of that type, except for subtypes of <literal>N4Object</literal>. In the latter case,
programmers are enforced to nominal declare the type relation.</simpara>
<simpara>If a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is declared as structural at its definition,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi></math> is true.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The structurally defined type cannot be used on the right hand side
of the <literal>instanceof</literal> operator:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mi> </mi><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><mi>f</mi></mrow><mi> </mi><mi>T</mi><mo>⇒</mo><mo>¬</mo><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structurally defined type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> either</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>if it is not a subtype of <literal>N4Object</literal> <footnote><simpara>We enforce programmers of N4JS to use nominal typing, therefore, it is not possible to bypass that principle by declaring a type as structural for normally defined classes (except those explicitly derived from <literal>N4Object</literal>).</simpara></footnote> but it contains all public,
non-static members of that type <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mrow><mi>X</mi><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mspace width="3.0em"/><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mtext>
</mtext><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>,</mo><mi>m</mi><mo>≠</mo><mi>T</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="2.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="2.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>m</mi></mrow><mtext>
</mtext><mrow><mspace width="2.0em"/><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mi>m</mi></mfenced><mo>=</mo><mrow><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow><mi>m</mi><msup><mi>m</mi><mi>'</mi></msup></mrow></mrow></math>or</simpara>
</listitem>
<listitem>
<simpara>if it is a subtype of <literal>N4Object</literal> which explicitly extends or implements the
structurally defined type. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mi>X</mi><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>T</mi><mo>∈</mo><mi>X</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><msup><mi>s</mi><mo>*</mo></msup></mrow></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A structurally defined type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is implicitly derived
from <literal>Object</literal> if no other type is specified. In particular, a structurally
defined type must not be inherited from <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>T</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mrow><mrow><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow></math> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>⇒</mo><mi>T</mi><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>∧</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>∉</mo><mi>T</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><msup><mi>s</mi><mo>*</mo></msup></math></simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>[[ex:Declaration Site Structural Typing]]
The following snippet demonstrates the effect of definition-site
structural types by comparing them to nominal declared types:</simpara>
<simpara>[[lst:Declaration Site Structural Typing]]</simpara>
<formalpara>
<title>Declaration Site Structural Typing</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">interface ~Tilde { x; y; }
interface Nominal { x; y; }
class C { public x; public y;}
class D extends C implements Tilde { }

function f(p: Tilde) {}
function g(p: Nominal) {}

f(new C());         // error: nominal typing, C does not implement ~Tilde
f(new D());         // ok, D is a nominal subtype (as it implements Tilde)
f({x:10,y:10});     // ok: Tilde is used with structural typing for non-N4-classifiers</programlisting>
</para>
</formalpara>
<simpara>Definition site structural typing may lead to unexpected results. For
example;</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C{}
class ~E extends C{}</programlisting>
<simpara>It may be unexpected, but <literal>E</literal> is not a subtype of <literal>C</literal>, i.e.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi><mi>C</mi></math>! E.g., <literal>instanceof</literal> won’t work with <literal>E</literal>, while it works
with <literal>C</literal>!</simpara>
<simpara>== Use-Site Structural Typing</simpara>
<simpara>Use-site structural typing offers several typing strategy modifiers to
define the accessability of public properties of classes and interfaces.
They can be used e.g. on variable declarations like this: `var c : ~C
` .
The table <xref linkend="tab:Available_Fields_of_Structural_Types"/> shows which properties
of structural types can be accessed in the different type strategies.
For example, when using the write-only structural strategy (i.e.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>), only the writeable fields, can be accessed
for writing. In the table, the term field to both, public datafields and
accessors of type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>. Non-public properties are never
accessable in use-site structural types. In any field-structural type,
methods of the referenced nominal type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> are not
available. The initializer structural typing provides readable fields
for every writeable field of the references type.</simpara>
<simpara>[[tab:Available Fields of Structural Types]]</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Available Fields of Structural Types</title>
<tgroup cols="6">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6666*"/>
<colspec colname="col_6" colwidth="16.667*"/>
<thead>
<row>
<entry align="left" valign="top">Property of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
<entry align="center" valign="top"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
<entry align="center" valign="top"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
<entry align="center" valign="top"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
<entry align="center" valign="top"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
<entry align="center" valign="top"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>public method</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>public writable field</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>public readable field</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>∅</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara>writable fields</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>Multiple structural typing strategies can be nested when there are
multiple use sites, like in the
example <xref linkend="ex:Nested Structural Typing Strategies"/> below at the locations
ST1 and ST2. In the example, the datafield <literal>a.field</literal> has the nested structural
type <literal>{\tsInitFld A}</literal> and thus the datafield <literal>a.field.df</literal> is
readable. Nested structural types are evaluated on the fly when doing
subtype checks.</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-12</link></simpara>
</sidebar>
<simpara>[[ex:Nested Structural Typing Strategies]]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    public df : string;
}
interface I&lt;T&gt; {
    public field : ~r~T; // ST1
}
var a : ~i~A; // ST2</programlisting>
<simpara>The following example demonstrates the effect of the structural type
modifiers:</simpara>
<simpara>[[ex:Effect of structural type modifiers on use-site]]
Let’s assume the type defined on
the left. The following <emphasis>pseudo</emphasis> code snippets explicitly list the type
with its members virtually created by a structural modifier. Note that
this is pseudo code, as there are no real or virtual types created.
Instead, only the subtype relation is defined accordingly:</simpara>
<simpara>Effect of structural type modifiers on use-site</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="center" valign="top" namest="col_1" nameend="col_3"><simpara><emphasis role="strong">Effect of structural type modifiers on use-site</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var c:C

class C {
    private x;
    public y;
    public f()
    private g()
    public get z():Z
    public set z(z:Z)
}
interface I {
    a;
    func();
}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var cstructural:~C

class cstructural {

    public y;
    public f()

    public get z():Z
    public set z(z:Z)
}
interface ~I {
    a;
    func();
}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var cfields:~~C

class cfields {

    public y;


    public get z():Z
    public set z(z:Z)
}
interface ~~I {
    a;

}</programlisting></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis role="strong">Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Field Type</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var crofields:~r~C

class crofields {

    public get y():Y


    public get z():Z

}
interface ~r~I {
    public get a():A

}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var cwofields:~w~C

class cwofields {

    public set y(y:Y)



    public set z(z:Z)
}
interface ~w~I {
    public set a(a:A)

}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">var cinitfields:~i~C

class cinitfields {

    public get y():Y


    public get z():Z

}
interface ~i~I {
    public get a():A

}</programlisting></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Read-only Field Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Write-only Field Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Initializer Field Type</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Note that even if a type is defined without the structural modifier, it
is not possible to use <literal>instanceof</literal> for variables declared as structural, as shown in
the next example:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">class C {..}
interface I {..}

foo(c: C, i: I) {
    c instanceof C; // ok
    c instanceof I; // ok
}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">class C {..}
interface I {..}

foo(c: ~C, i: ~I) {
    °\color{red}{\underline{c}}° instanceof C; // error
    °\color{red}{\underline{c}}° instanceof I; // error
}</programlisting></entry>
<entry align="left" valign="top"><programlisting language="n4js" linenumbering="unnumbered">class C {..}
interface I {..}

foo(c: ~~C, i: ~~I) {
    °\color{red}{\underline{c}}° instanceof C; // error
    °\color{red}{\underline{c}}° instanceof I; // error
}</programlisting></entry>
</row>
<row>
<entry align="center" valign="top"><simpara><emphasis role="strong">Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Type</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara><emphasis role="strong">Structural Field Type</emphasis></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara>If a type is referenced with the structural type modifier `~</simpara>
</listitem>
<listitem>
<simpara>If a type is referenced with
the structural read-only field type modifier `~r~</simpara>
</listitem>
<listitem>
<simpara>If a type is referenced with the structural write-only field type modifier `~w~</simpara>
</listitem>
</itemizedlist>
<simpara>We call <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the (nominal) type T, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the
structural version of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the
structural field version of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>
the structural read-only field, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the structural
write-only field and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> the structural
initializer field version of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The structural version of a type is a supertype of the nominal type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi></math></simpara>
</listitem>
<listitem>
<simpara>The structural field version of a type is a supertype of the
structural type: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi></math></simpara>
</listitem>
<listitem>
<simpara>The structural read-only field version of a type is a supertype of
the structural field type: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi></math></simpara>
</listitem>
<listitem>
<simpara>The structural write-only field version of a type is a supertype of
the structural field type: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>T</mi><mi>T</mi></math></simpara>
</listitem>
<listitem>
<simpara>The structural (field) version of a type cannot be used on the right
hand side of the <literal>instanceof</literal> operator: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>x</mi><mi> </mi><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><mi>f</mi></mrow><mi> </mi><mi>E</mi><mo>⇒</mo><mi>E</mi><mi>:</mi><mi>T</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>¬</mo><mfenced close=")" open="("><mrow><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="6.0em"/><mo>∨</mo><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="6.0em"/><mo>∨</mo><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>R</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>O</mi><mi>n</mi><mi>l</mi><mi>y</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="6.0em"/><mo>∨</mo><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>W</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>O</mi><mi>n</mi><mi>l</mi><mi>y</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="6.0em"/><mo>∨</mo><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>I</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi></mrow></mfenced></math> That is,
the following code will always issue an error: `x instanceof ~T</simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structural version of a
type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, if it contains all public, non-static
members of the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>:
<footnote><simpara>Note that due to this relaxed definition (compared with definition-site structural types) it is possible to pass an <literal>N4Object</literal> instance to a function of method with a declared structural type parameter.</simpara></footnote>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∉</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>,</mo><mi>m</mi><mo>≠</mo><mi>T</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="2.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="2.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>m</mi></mrow></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structural field version of
a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, if it contains all public, non-static and
non-optional fields of the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∉</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></mrow><mtext>
</mtext><mrow><mrow><mspace width="1.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi></mrow><mi>:</mi><mi>m</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∨</mo><mi> </mi><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>:</mi><msub><mi>T</mi><mi>m</mi></msub><mo>∧</mo><mi>m</mi><mi>:</mi><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub><mo>∧</mo><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>≥</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structural read-only field
version of a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, if it contains all public,
non-optional and non-static readable fields of the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>T</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∉</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></mrow><mtext>
</mtext><mrow><mrow><mspace width="1.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi></mrow><mi>:</mi><mi>m</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∨</mo><mi> </mi><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>:</mi><msub><mi>T</mi><mi>m</mi></msub><mo>∧</mo><mi>m</mi><mi>:</mi><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub><mo>∧</mo><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>≥</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structural write-only field
version of a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, if it contains all public,
non-optional and non-static writable fields of the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>T</mi><mo>.</mo><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∉</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mtext>
</mtext><mrow><mrow><mspace width="1.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi></mrow><mi>:</mi><mi>m</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∨</mo><mi> </mi><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>:</mi><msub><mi>T</mi><mi>m</mi></msub><mo>∧</mo><mi>m</mi><mi>:</mi><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub><mo>∧</mo><msub><mi>T</mi><mi>m</mi></msub><mo>=</mo><msub><mi>T</mi><msup><mi>m</mi><mi>'</mi></msup></msub></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>≥</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a subtype of a structural field version of
a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></math>, if it contains all public, non-static
and non-optional fields, either defined via data fields or field get
accessors, of the inferred type of <literal>this</literal>. <emphasis>All fields which have an
initializer are handled as if they were optional.</emphasis>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow><mrow><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>:</mi><mi>T</mi></mrow><mtext>
</mtext><mrow><mo>∀</mo><mi>m</mi><mo>∈</mo><mi>T</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>T</mi><mo>.</mo><mi>s</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mo>,</mo><mi>m</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∉</mo><mrow><mi>N</mi><mn>4</mn><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>,</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>,</mo><mo>¬</mo><mi>m</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi></mrow><mtext>
</mtext><mrow><mrow><mspace width="1.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi></mrow><mi>:</mi><mi>m</mi><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>∨</mo><mi>m</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo></mrow><mtext>
</mtext><mrow><mspace width="1.0em"/><mo>∨</mo><mi> </mi><mo>∃</mo><msup><mi>m</mi><mi>'</mi></msup><mo>∈</mo><mi>X</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mo>∪</mo><mi>X</mi><mo>.</mo><mi>g</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>:</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mo>=</mo><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow><mo>∧</mo><mo>¬</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><mtext>
</mtext><mrow><mspace width="3.0em"/><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mi>m</mi></mrow><mo>∧</mo><msup><mi>m</mi><mi>'</mi></msup><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>≥</mo><mi>m</mi><mo>.</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>a</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>A structural field type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is a subtype of a
structural type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>, if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> only
contains fields (except methods inherited from <literal>Object</literal>) and if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>X</mi></math>. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>T</mi><mi>X</mi></mrow><mrow><mi>X</mi><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo>∖</mo><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mo>.</mo><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>s</mi><mo>=</mo><mi>∅</mi><mo>∧</mo><mi>T</mi><mi>X</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Use-site structural typing cannot be used for declaring supertypes
of classes or interfaces. That is to say that structural types cannot be
used after <literal>extends</literal>, <literal>implements</literal> or <literal>eith</literal> in type declarations.
<footnote><simpara>This is already constrained by the grammar.</simpara></footnote></simpara>
</listitem>
</orderedlist>
<simpara>Note that all members of <literal>N4Object</literal> are excluded. This implies that extended
reflective features (cf. <xref linkend="reflection_meta-information"/> ) are not available in the context of structural typing. The <literal>instanceof</literal> operator is still working as described in <xref linkend="Relational_Expression"/>, in
that it can be used to check the type of an instance.</simpara>
<simpara>If a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is a (nominal) subtype of T, it is, of course,
also a subtype of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>X</mi><mi>T</mi></mrow><mrow><mi>X</mi><mi>T</mi></mrow></math>
This is only a shortcut for the type inference defined above.</simpara>
<simpara>If a type is structurally typed on both definition and use-site, the rules for
use-site structural typing (<xref linkend="req:Use_Site_Structural_Typing"/>) are
applied.</simpara>
<simpara>Use-Site Structural Typing</simpara>
<simpara>The following example demonstrates the effect of the structural (field)
modifier, used in this case for function parameters.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I { public x: number; public foo()};
class C { public x: number; public foo() {}};

function n(p: I) {}
function f(p: ~I) {}
function g(p: ~~I) {}

n(new C());     // error: nominal typing, C does not implement I
f(new C());     // ok: C is a (structural) subtype of ~I
f({x:10});      // error, the object literal does not provide function foo()
g({x:10});      // ok: object literal provides all fields of I</programlisting>
<simpara>[[ex:Structural types variable and instanceof operator]]
It is possible to use a variable typed with a structural version of a type on the left hand side of the <literal>instanceof</literal> operator, as demonstrated in this example:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    public x;
    public betterX() { return this.x||1;}
}

function f(p: ~~C) {
    if (p instanceof C) {
        console.log((p as C).betterX);
    } else {
        console.log(p.x||1);
    }
}</programlisting>
<simpara>The following table describes the member availability of <literal>X</literal> in various
typing scenarios. Such as <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6669*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Member of type <emphasis>X</emphasis></emphasis></simpara></entry>
<entry align="center" valign="top"><simpara>`~~X</simpara></entry>
<entry align="center" valign="top"><simpara>`~r~X</simpara></entry>
<entry align="center" valign="top"><simpara>`~w~X</simpara></entry>
<entry align="center" valign="top"><simpara>`~i~X</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>private m0;</literal></simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public set m1(m) { }</literal></simpara></entry>
<entry align="center" valign="top"><simpara>write</simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="center" valign="top"><simpara>write</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public get m2() {&#8230;&#8203;}</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>&#8201;&#8212;&#8201;</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public m3;</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read/write</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>write</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public m4 = 'init.m4';</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read/write</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>write</simpara></entry>
<entry align="center" valign="top"><simpara>read <emphasis>?</emphasis>]</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public m5: any?;</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read<emphasis>?</emphasis>/write</simpara></entry>
<entry align="center" valign="top"><simpara>read<emphasis>?</emphasis></simpara></entry>
<entry align="center" valign="top"><simpara>write</simpara></entry>
<entry align="center" valign="top"><simpara>read<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>?</mi></math></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Final public m6 = 'init.m6';</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Final public m7;</literal></simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>read</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public get m8() {&#8230;&#8203;}</literal></simpara></entry>
<entry align="center" valign="middle" morerows="1"><simpara>read/write</simpara></entry>
<entry align="center" valign="middle" morerows="1"><simpara>read</simpara></entry>
<entry align="center" valign="middle" morerows="1"><simpara>write</simpara></entry>
<entry align="center" valign="middle" morerows="1"><simpara>read</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>public set m8(m) { }</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>== Structural Read-only, Write-only and Initializer Field Typing</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1777"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1777</link></simpara>
</sidebar>
<simpara>Structural read-only, write-only and initializer field typings are
extensions of structural field typing. Everything that is defined for
the field structural typing must comply with these extension field
typings. For the read-only type, readable fields (mutable and ones) and
setters are considered, for the write-only type; only the setters and
mutable fields are considered. Due to the hybrid nature of the
initializer type it can act two different ways. To be more precise, a
type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> (structural initializer field type) is a supertype
of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Y</mi></math> (structural initializer field type) if for each
public, non-static, non-optional writable field (mutable data field of
setter) of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math>, there is a corresponding, public, non-static
readable field of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Y</mi></math>. All public member fields with
annotation are considered to be mandatory in the initializer field
typing constructors. The already-initialized fields can be either
omitted from, or can be re-initialized via, an initializer field typing
style constructor.</simpara>
<simpara>Subtype relationship between structural field typing
[[ex:Subtype relationship between structural field typing]]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A1 {
    public s: string;
}

class A2 {
    public set s(s: string) { }
    public get s(): string { return null; }
}

class A3 {
    @Final public s: string = null;
}

class A4 {
    public get s(): string { return null; }
}

class A5 {
    public set s(s: string) { }
}</programlisting>
<informaltable role="matrix" frame="all" rowsep="1" colsep="1">
<tgroup cols="19">
<colspec colname="col_1" colwidth="5.2631*"/>
<colspec colname="col_2" colwidth="5.2631*"/>
<colspec colname="col_3" colwidth="5.2631*"/>
<colspec colname="col_4" colwidth="5.2631*"/>
<colspec colname="col_5" colwidth="5.2631*"/>
<colspec colname="col_6" colwidth="5.2631*"/>
<colspec colname="col_7" colwidth="5.2631*"/>
<colspec colname="col_8" colwidth="5.2631*"/>
<colspec colname="col_9" colwidth="5.2631*"/>
<colspec colname="col_10" colwidth="5.2631*"/>
<colspec colname="col_11" colwidth="5.2631*"/>
<colspec colname="col_12" colwidth="5.2631*"/>
<colspec colname="col_13" colwidth="5.2631*"/>
<colspec colname="col_14" colwidth="5.2631*"/>
<colspec colname="col_15" colwidth="5.2631*"/>
<colspec colname="col_16" colwidth="5.2631*"/>
<colspec colname="col_17" colwidth="5.2631*"/>
<colspec colname="col_18" colwidth="5.2631*"/>
<colspec colname="col_19" colwidth="5.2642*"/>
<tbody>
<row>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~~A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A3</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A4</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A5</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A3</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A4</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A5</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A3</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A4</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A5</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">A1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~A1</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~~A1</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A1</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A2</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A3</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A4</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A5</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A1</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A2</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A3</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A4</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~w~A5</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A1</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A2</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~i~A3</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A4</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">~r~A5</emphasis></simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"><simpara>✓</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>== Public Setter Annotated With <literal>ProvidesInitializer</literal></simpara>
<simpara>Public setters with <literal>ProvidesInitializer</literal> annotation can declare optional fields implemented by means of field accessors instead of data fields. Data fields with an
initializer are treated as optional in the initializer field type.</simpara>
<simpara>It is important to note that it is valid to use the <literal>ProvidesInitializer</literal> annotation for
setters in <literal>n4js</literal> files and not only definition files.</simpara>
<simpara>[[ex:Setters with @ProvidesInitializer treated as optional]]</simpara>
<screen>class C {
    private _y: int = 1;

    public get y() { return this._y; }
    @ProvidesInitializer
    public set y(v: int) { this._y = v; }

    public constructor(@Spec spec: ~i~this) { }
}

console.log(new C({}).y); // 1
console.log(new C({y: 42}).y); //24</screen>
<simpara>== Structural Types With Optional Fields</simpara>
<simpara>Public optional fields become a member of the structural (field) type as
well. But they will be optional in the structural type, that is to say
it is not necessary to define the field.</simpara>
<simpara>If a type defines an optional field then this type is always compatible
with a type that does not define a field with same name and type but is
equal in all other members.</simpara>
<simpara>[[ex:Optional field on one side]]</simpara>
<formalpara>
<title>Optional field on one side</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    public s: number;
    public t: string?;
}
class D {
    public s: number;
}
function f(c: ~C) {}
f(new D()); // ok: D is a (structural) subtype of ~C
function g(~D d) {}
g(new C()); // ok: C is a (structural) subtype of ~D</programlisting>
</para>
</formalpara>
<simpara>[[ex:Optional field on one side]]</simpara>
<formalpara>
<title>Optional field on one side</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    public s: number;
    public t: string?;
}
class D {
    public s: number;
    public t: string?;
}
class E {
    public s: number;
    public t: number?;
}
class F {
    public s: number;
    public t: string;
}
function f(c: ~C) {}
f(new D()); // ok: D is a (structural) subtype of ~C
f(new E()); // error: E is not (structural) subtype of ~C, as t types differ (string vs number)
f(new F()); // ok: F is a (structural) subtype of ~C
function g(f: ~F) {}
g(new C()); // ok: C is a (structural) subtype of ~F</programlisting>
</para>
</formalpara>
<simpara>== Structural Types With Access Modifier</simpara>
<simpara>The access modifier of the subtype have to provide equal or higher
visibility.</simpara>
<simpara>Access modifier in structural typing
[[ex:Access modifier in structural typing]]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    public s: number;
}
class D {
    project s: number;
}
function f(c: ~C) {}
f(new D()); // error: D is no (structural) subtype of ~C, as visibility of s in D is lower
function g(d: ~D) {}
g(new C()); // ok: C is a (structural) subtype of ~D, as visibility of s in C is greater-than-or-equal to s in D</programlisting>
<simpara>== Structural Types With Additional Members</simpara>
<simpara>It is possible to add additional members when structurally referencing a
declared type.</simpara>
<simpara>=== Syntax</simpara>
<screen>TStructMember:
    TStructGetter | TStructGetterES4 | TStructSetter | TStructMethod | TStructMethodES4 | TStructField;

TStructMethod:
    =&gt;
    ({TStructMethod} ('&lt;' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '&gt;')?
    returnTypeRef=TypeRef name=TypesIdentifier '(')
        (fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)? ')'
    ';'?;

TStructMethodES4 returns TStructMethod:
    =&gt;
    ({TStructMethod} ('&lt;' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '&gt;')?
        name=TypesIdentifier '(')
        (fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)? ')'
        (':' returnTypeRef=TypeRef)?
    ';'?;

TStructField:
    (
        typeRef=TypeRef name=TypesIdentifier
        | name=TypesIdentifier (':' typeRef=TypeRef)?
    )
    ';';

TStructGetter:
    =&gt; ({TStructGetter}
    declaredTypeRef=TypeRef
    'get'
    name=TypesIdentifier)
    '(' ')' ';'?;

TStructGetterES4 returns TStructGetter:
    =&gt; ({TStructGetter}
    'get'
    name=TypesIdentifier)
    '(' ')' (':' declaredTypeRef=TypeRef)? ';'?;

TStructSetter:
    =&gt; ({TStructSetter}
    'set'
    name=TypesIdentifier)
    '(' fpar=TAnonymousFormalParameter ')' ';'?;

TAnonymousFormalParameter:
    typeRef=TypeRef variadic?='...'? name=TIdentifier?
    | variadic?='...'? (=&gt; name=TIdentifier ':') typeRef=TypeRef;</screen>
<simpara>==== Semantics</simpara>
<simpara>It is only possible to add additional members to a type if use-site structural
typing is used. The following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>For all additional members defined in a structural type reference,
the constraints for member overriding (<xref linkend="req:Overriding_Members"/>) apply
as well.</simpara>
</listitem>
<listitem>
<simpara>All additional members have the access modifier set to
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>c</mi></mrow></math>.</simpara>
</listitem>
<listitem>
<simpara>Type variables must not be augmented with additional structural
members.</simpara>
</listitem>
</orderedlist>
<simpara>Additional fields may be declared optional in the same way as fields in
classes. The rules given in <xref linkend="Structural Types With Optional Fields"/> apply accordingly. Consider the following example:</simpara>
<simpara>Additional optional members in structural typing</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    public f1: number;
}

var c1: ~C with { f3: string; } c1;
var c2: ~C with { f3: string?; } c2;

c1 = { f1:42 };  // error: "~Object with { number f1; } is not a subtype of ~C with { string f3; }."
c2 = { f1:42 };  // ok!!</programlisting>
<simpara>Augmenting a type variable T with additional structural members can
cause collisions with another member of a type argument for T. Hence,
type variables must not be augmented with additional structural members
like in the following example.</simpara>
<simpara>Forbidden additional structural members on type variables</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I&lt;T&gt; {
    public field : ~T with {prop : int} // error "No additional structural members allowed on type variables."
}</programlisting>
<simpara>Using an additional structural member on a type variable T could be seen
as a constraint to T. However, constraints like this should be rather
stated using an explicit interface like in the example below.</simpara>
<simpara>Use explicitly defined Interfaces</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface ~J {
    prop : int;
}
interface II&lt;T extends J&gt; {
}</programlisting>
<simpara>= Functions</simpara>
<simpara>Functions, be they function declarations, expressions or even methods,
are internally modeled by means of a function type. In this chapter, the
general function type is described along with its semantics and type
constraints. Function definitions and expressions are then introduced in
terms of statements and expressions. Method definitions and special
usages are described in <xref linkend="_methods"/></simpara>
<simpara>== Function Type</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link></simpara>
</sidebar>
<simpara>A function type is modeled as (see [<link linkend="ECMA11a">ECMA11a(p.S13, p.p.98)</link>] in ECMAScript.</simpara>
<simpara>Function types can be defined by means of;</simpara>
<itemizedlist>
<listitem>
<simpara>A function object (<xref linkend="Function_Object_Type"/>).</simpara>
</listitem>
<listitem>
<simpara>A function type expression (<xref linkend="Type_Expressions"/>).</simpara>
</listitem>
<listitem>
<simpara>A function declaration (<xref linkend="Function_Definition"/>).</simpara>
</listitem>
<listitem>
<simpara>A method declaration (<xref linkend="_methods"/>).</simpara>
</listitem>
</itemizedlist>
<simpara>=== Properties</simpara>
<simpara>In any case, a function type declares the signature of a function and
allows validation of calls to that function. A function type has the
following properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>typePars</literal> </term>
<listitem>
<simpara>(0-indexed) list of type parameters (i.e. type variables) for generic
functions.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fpars</literal> </term>
<listitem>
<simpara>(0-indexed) list of formal parameters.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>returnType</literal> </term>
<listitem>
<simpara>(possibly inferred) return type (expression) of the function or method.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>name</literal> </term>
<listitem>
<simpara>Name of function or method, may be empty or automatically generated (for
messages).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>body</literal> </term>
<listitem>
<simpara>The body of the function, it contains statements <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>m</mi><mi>t</mi><mi>s</mi></math>.
The body is null if a function type is defined in a type expression, and
it is the last argument in case of a function object constructor, or the
content of the function definition body.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Additionally, the following pseudo properties for functions are defined:</simpara>
<variablelist>
<varlistentry>
<term><literal>thisTypeRef</literal> </term>
<listitem>
<simpara>The this type ref is the type to which the <literal>this</literal>-keyword would be evaluated
if used inside the function or member. The inference rules are described
in <xref linkend="This_Keyword"/>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fpars</literal> </term>
<listitem>
<simpara>List of formal parameters and the this type ref. This is only used for
sub typing rules. If <literal>this</literal> is not used inside the function, then <literal>any</literal> is set
instead of the inferred thisTypeRef to allow for more usages. The
property is computed as follows:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>t</mi><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi> </mi><mrow><mtext>this is used or explicitly declared</mtext></mrow><mi> </mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>+</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>n</mi><mi>y</mi><mo>+</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi></math></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Parameters (in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi></math>) have the following properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>name</literal> </term>
<listitem>
<simpara>Name of the parameter.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>type</literal> </term>
<listitem>
<simpara>Type (expression) of the parameter. Note that only parameter types can
be variadic or optional.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The function definition can be annotated similar to <xref linkend="_methods"/> except that
the <literal>final</literal> and <literal>abstract</literal> modifiers aren’t supported for function declarations. A function declaration is always final and never abstract. Also, a function has no
property advice set.</simpara>
<bridgehead xml:id="_semantics_5" renderas="sect3">Semantics</bridgehead>
<simpara>Type Given a function type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math>, the following
constraints must be true:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Optional parameters must be defined at the end of the (formal)
parameter list. In particular, an optional parameter must not be
followed by a non-optional parameter:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi> </mi><mi>k</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>i</mi><mi>:</mi><mo>¬</mo><mi>F</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>k</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>v</mi><mi>a</mi><mi>r</mi></math></simpara>
</listitem>
<listitem>
<simpara>Only the last parameter of a method may be defined as variadic
parameter:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>d</mi><mi>i</mi><mi>c</mi><mi>i</mi><mo>=</mo><mo>|</mo><mi>F</mi><mo>.</mo><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>-</mo><mn>1</mn></math></simpara>
</listitem>
<listitem>
<simpara>If a function explicitly defines a return type, the last statement
of the transitive closure of statements of the body must be a return
statement:</simpara>
<screen>math:[\[\begin{aligned}    F.typeRef \neq Undefined \to \\
        &amp; |f.body.stmts|&gt;0 \\
        &amp; \land f.body.stmts^*_{|f.body.stmts^*|-1} isa\ \lstnfbnf{ReturnStatement}
        \end{aligned}\]]</screen>
</listitem>
<listitem>
<simpara>If a function explicitly defines a return type, all return
statements must return a type conform to that type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>F</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>≠</mo><mi>U</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>r</mi><mo>∈</mo><mi>F</mi><mo>.</mo><mi>b</mi><mi>o</mi><mi>d</mi><mi>y</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>m</mi><mi>t</mi><mi>s</mi><mo>,</mo><mi>r</mi><mi> </mi><mi>i</mi><mi>s</mi><mi>a</mi><mi> </mi><mrow><mi>R</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mrow><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>F</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mrow></math></simpara>
</listitem>
</orderedlist>
<simpara>=== Type Inference <anchor xml:id="function-type-inference" xreflabel="[function-type-inference]"/></simpara>
<simpara>For the given non-parameterized function types<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msub><mi>L</mi><mn>0</mn></msub><mo>,</mo><msub><mi>L</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msub><mi>L</mi><mi>k</mi></msub></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>s</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>0</mn></math><?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msub><mi>R</mi><mn>0</mn></msub><mo>,</mo><msub><mi>R</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msub><mi>R</mi><mi>n</mi></msub></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>s</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>0</mn></math>,<?asciidoc-br?>
we say <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> conforms to <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>,
written as <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>, if and only if:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow></math><?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∨</mo><mfenced close=")" open="("><mrow><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><mo>∧</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></mrow></mfenced></math><?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∨</mo><mfenced close=")" open="("><mrow><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>∧</mo><mo>¬</mo><mfenced close=")" open="("><mrow><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>∧</mo><mo>¬</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mo>≤</mo><mi>n</mi></math>:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>k</mi><mi>:</mi><mfenced close=")" open="("><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mfenced close=")" open="("><mrow><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>∨</mo><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mrow></mfenced></mrow></mfenced><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>k</mi><mi>:</mi><msub><mi>L</mi><mi>i</mi></msub><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><msub><mi>R</mi><mi>i</mi></msub></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>L</mi><mi>k</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mi>k</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mi>n</mi><mi>:</mi><msub><mi>L</mi><mi>K</mi></msub><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><msub><mi>R</mi><mi>i</mi></msub></math></simpara>
<simpara>else (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>n</mi></math>):</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mi>:</mi><mfenced close=")" open="("><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mfenced close=")" open="("><mrow><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>∨</mo><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mrow></mfenced></mrow></mfenced><mo>∧</mo><mfenced close=")" open="("><mrow><msub><mi>R</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mi>:</mi><msub><mi>L</mi><mi>i</mi></msub><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><msub><mi>R</mi><mi>i</mi></msub></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mi> </mi><mi>n</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mi>k</mi><mi>:</mi><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mo>∨</mo><msub><mi>L</mi><mi>i</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>R</mi><mi>n</mi></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mo>∀</mo><mi> </mi><mi>i</mi><mo>,</mo><mi>n</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mi>k</mi><mi>:</mi><msub><mi>L</mi><mi>i</mi></msub><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><msub><mi>R</mi><mi>n</mi></msub></math></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara><xref linkend="cdVarianceFunctionChart"/> shows a simple example with the function type conformance relations.</simpara>
<figure xml:id="cdVarianceFunctionChart">
<title>Function Variance Chart</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cdVarianceFunctionChart.png"/>
</imageobject>
<textobject><phrase>cdVarianceFunctionChart</phrase></textobject>
</mediaobject>
</figure>
<simpara><literal>{function()} $&lt;:$ {function(A)} $&lt;:$ {function(A, A)}</literal> might be surprising for Java programmers. However, in JavaScript it is
possible to call a function with any number of arguments independently
from how many formal parameters the function defines. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-433"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-433</link></simpara>
</sidebar>
<simpara>If a function does not define a return type, <literal>any</literal> is assumed if at least one
of the (indirectly) contained return statements contains an expression.
Otherwise is assumed. This is also true if there is an error due to
other constraint violations. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>f</mi><mrow><mi>'</mi><mrow><mo>(</mo><mi>'</mi></mrow></mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi> </mi><msup><mrow><mi>'</mi><mo>)</mo></mrow><mi>'</mi></msup><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>s</mi><mfenced close=")" open="("><mi>f</mi><mi>F</mi></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>F</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><mi>r</mi><mo>∈</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mi>F</mi></mfenced><mi>:</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>≠</mo></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>f</mi><mrow><mi>'</mi><mrow><mo>(</mo><mi>'</mi></mrow></mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>l</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi> </mi><msup><mrow><mi>'</mi><mo>)</mo></mrow><mi>'</mi></msup><mi>:</mi><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow></mrow><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>s</mi><mfenced close=")" open="("><mi>f</mi><mi>F</mi></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>F</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>r</mi><mo>∈</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mi>F</mi></mfenced><mi>:</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>≠</mo></mrow></math>
with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mi>F</mi></mfenced><mi>:</mi><mi>R</mi><mi>E</mi><mi>T</mi><mi>S</mi></mrow><mrow><mfenced close="}" open="{"><mrow><mi>r</mi><mo>∈</mo><mi>F</mi><mo>.</mo><mi>b</mi><mi>o</mi><mi>d</mi><mi>y</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo>|</mo><mi>μ</mi><mfenced close=")" open="("><mi>r</mi></mfenced><mo>=</mo><mrow><mi>R</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></mrow></mfenced><mo>∪</mo><munder><mo>⋃</mo><mrow><mi>s</mi><mo>∈</mo><mi>F</mi><mo>.</mo><mi>b</mi><mi>o</mi><mi>d</mi><mi>y</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi></mrow></munder><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mi>s</mi></mfenced></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mi>s</mi></mfenced><mi>:</mi><mi>R</mi><mi>E</mi><mi>T</mi><mi>S</mi></mrow><mrow><mfenced close="}" open="{"><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mo>∈</mo><mi>s</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo>|</mo><mi>μ</mi><mfenced close=")" open="("><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></mfenced><mo>=</mo><mrow><mi>R</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></mrow></mfenced><mo>∪</mo><munder><mo>⋃</mo><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mo>∈</mo><mi>s</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi></mrow></munder><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>s</mi><mfenced close=")" open="("><mrow><mi>s</mi><mi>u</mi><mi>b</mi></mrow></mfenced></mrow></math></simpara>
<simpara>Function type conformance
[[ex:Function type conformance]]
The following incomplete snippet demonstrates the usage of two function variables
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>1</mn></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>2</mn></math>, in which
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>f</mi><mn>2</mn></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>f</mi><mn>1</mn></mrow></math> must hold true according to
the aforementioed constraints. A function <literal>bar</literal> declares a parameter
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>1</mn></math>, which is actually a function itself. <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>2</mn></math>
is a variable, to which a function expression is a assigned. Function <literal>bar</literal> is
then called with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>2</mn></math> as an argument. Thus, the type of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>2</mn></math> must be a subtype of the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mn>1</mn></math>’s type.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">function bar(f1: {function(A,B):C}) { ... }

var f1: {function(A,B):C} = function(p1,p2){...};
bar(f1);</programlisting>
<simpara>The type of can be explicitly set via the annotation.</simpara>
<simpara>Function Subtyping
[[ex:Function Subtyping]]</simpara>
<screen>function f(): A {..}
function p(): void {..}

fAny(log: {function():any}) {...}
fVoid(f: {function():void}) {..}
fA(g: {function():A}) {...}

fAny(f);    // --&gt; ok       A &lt;: any
fVoid(f);   // --&gt;error     A !&lt;: void
fA(f);      // --&gt; ok (easy)    A &lt;: A

fAny(p);    // --&gt; ok       void &lt;: any
fVoid(p);   // --&gt; ok       void &lt;: void
fA(p);      // --&gt; error    void !&lt;: A</screen>
<simpara>Subtyping with function types
[[ex:Subtyping_with function types]]
If classes A, B, and C are defined as previously mentioned
(<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math>)</simpara>
<simpara>The following subtyping relations with function types are to be
evaluated as follows:</simpara>
<screen>{function():void} &lt;: {function():void}              -&gt; true
{function(A):A} &lt;: {function(A):A}                  -&gt; true
{function(A):void} &lt;: {function(B):void}            -&gt; true
{function():B} &lt;: {function():A}                    -&gt; true
{function(A):B} &lt;: {function(B):A}                  -&gt; true
{function(A):A} &lt;: {function(B):void}               -&gt; true (!)
{function(A):A} &lt;: {function(B):any}                -&gt; true
{function(A):A} &lt;: {function(B)}                    -&gt; true
{function(A):void} &lt;: {function(B):any}             -&gt; false (!)
{function(A):void} &lt;: {function(B)}                 -&gt; true
{function(A):void} &lt;: {function(B):A}               -&gt; false</screen>
<simpara>The following examples demonstrate the effect of optional and variadic
parameters:</simpara>
<screen>{function(A)} &lt;: {function(B)}                      -&gt; true
{function(A...)} &lt;: {function(A)}                   -&gt; true
{function(A, A)} &lt;: {function(A)}                   -&gt; false
{function(A)} &lt;: {function(A,A)}                    -&gt; true (!)
{function(A, A...)} &lt;: {function(A)}                -&gt; true
{function(A)} &lt;: {function(A,A...)}                 -&gt; true (!)
{function(A, A...)} &lt;: {function(B)}                -&gt; true
{function(A?)} &lt;: {function(A?)}                    -&gt; true
{function(A...)} &lt;: {function(A...)}                -&gt; true
{function(A?)} &lt;: {function(A)}                     -&gt; true
{function(A)} &lt;: {function(A?)}                     -&gt; false
{function(A...)} &lt;: {function(A?)}                  -&gt; true
{function(A?)} &lt;: {function(A...)}                  -&gt; true (!)
{function(A,A...)} &lt;: {function(A...)}              -&gt; false
{function(A,A?)} &lt;: {function(A...)}                -&gt; false
{function(A?,A...)} &lt;: {function(A...)}             -&gt; true
{function(A...)} &lt;: {function(A?,A...)}             -&gt; true
{function(A...)} &lt;: {function(A?)}                  -&gt; true
{function(A?,A?)} &lt;: {function(A...)}               -&gt; true (!)
{function(A?,A?,A?)} &lt;: {function(A...)}            -&gt; true (!)
{function(A?)} &lt;: {function()}                      -&gt; true (!)
{function(A...)} &lt;: {function()}                    -&gt; true (!)</screen>
<simpara>The following examples demonstrate the effect of optional return types:</simpara>
<screen>{function():void} &lt;: {function():void}              -&gt; true
{function():X}    &lt;: {function():void}              -&gt; true
{function():X?}   &lt;: {function():void}              -&gt; true
{function():void} &lt;: {function():Y}                 -&gt; false
{function():X}    &lt;: {function():Y}                 -&gt; X &lt;: Y
{function():X?}   &lt;: {function():Y}                 -&gt; false (!)
{function():void} &lt;: {function():Y?}                -&gt; true (!)
{function():X}    &lt;: {function():Y?}                -&gt; X &lt;: Y
{function():X?}   &lt;: {function():Y?}                -&gt; X &lt;: Y</screen>
<simpara>The following examples show the effect of the annotation:</simpara>
<screen>{@This(A) function():void} &lt;: {@This(X) function():void}    -&gt; false
{@This(B) function():void} &lt;: {@This(A) function():void}    -&gt; false
{@This(A) function():void} &lt;: {@This(B) function():void}    -&gt; true
{@This(any) function():void} &lt;: {@This(X) function():void}  -&gt; true
{function():void} &lt;: {@This(X) function():void}             -&gt; true
{@This(A) function():void} &lt;: {@This(any) function():void}  -&gt; false
{@This(A) function():void} &lt;: {function():void}             -&gt; false</screen>
<simpara>For the given function types<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msub><mi>L</mi><mn>0</mn></msub><mo>,</mo><msub><mi>L</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msub><mi>L</mi><mi>k</mi></msub></math><?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msub><mi>R</mi><mn>0</mn></msub><mo>,</mo><msub><mi>R</mi><mn>1</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msub><mi>R</mi><mi>n</mi></msub></math>,<?asciidoc-br?>
we say <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> conforms to <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>,
written as <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>, if and only if:</simpara>
<itemizedlist>
<listitem>
<simpara>if <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mo>|</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>0</mn></math>:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>
(cf. <xref linkend="def:Function_Type_Conformance_NonParameterized"/>)</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>else if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>g</mi><mi>t</mi><mi>;</mi><mn>0</mn><mo>∧</mo><mo>|</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mn>0</mn></math>:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo><mi>:</mi><mfenced close=")" open="("><mrow/></mfenced><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>
(cf. <xref linkend="def:Function_Type_Conformance_NonParameterized"/>)</simpara>
<simpara>(i.e. there exists a substitution <math xmlns="http://www.w3.org/1998/Math/MathML"/> of type
variables in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> so that after substitution it
becomes a subtype of <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math> as defined by
<xref linkend="def:Function_Type_Conformance_NonParameterized"/>)</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>else if <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>=</mo><mo>|</mo><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo></math>:</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close="}" open="{"><mrow><msubsup><mi>V</mi><mi>i</mi><mi>r</mi></msubsup><mo>←</mo><msubsup><mi>V</mi><mi>i</mi><mi>l</mi></msubsup><mo>|</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow></mfenced><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math>
( accordingly)</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mi>:</mi><mtext>
</mtext><mrow><msubsup><mi>V</mi><mi>i</mi><mi>l</mi></msubsup><mo>.</mo><mstyle mathvariant="italic"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mstyle></mrow><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><mrow><msubsup><mi>V</mi><mi>i</mi><mi>r</mi></msubsup><mo>.</mo><mstyle mathvariant="italic"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mstyle></mrow></math></simpara>
<simpara>with <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msubsup><mi>V</mi><mn>0</mn><mi>l</mi></msubsup><mo>,</mo><msubsup><mi>V</mi><mn>1</mn><mi>l</mi></msubsup><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msubsup><mi>V</mi><mi>n</mi><mi>l</mi></msubsup></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>=</mo><msubsup><mi>V</mi><mn>0</mn><mi>r</mi></msubsup><mo>,</mo><msubsup><mi>V</mi><mn>1</mn><mi>r</mi></msubsup><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><msubsup><mi>V</mi><mi>n</mi><mi>r</mi></msubsup></math><?asciidoc-br?>
(i.e. we replace each type variable in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math> by the
corresponding type variable at the same index in <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math>
and check the constraints from<xref linkend="def:Function_Type_Conformance_NonParameterized"/> as if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></msub></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>F</mi><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow></msub></math> were non-parameterized functions and, in
addition, the upper bounds on the left side need to be supertypes of the
upper bounds on the right side).</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>Note that the upper bounds on the left must be supertypes of the
right-side upper bounds (for similar reasons why types of formal
parameters on the left are required to be supertypes of the formal
parameters’ types in ). Where a particular type variable is used, on co-
or contra-variant position, is not relevant:</simpara>
<example>
<title>Bounded type variable at co-variant position in function type</title>
<screen>class A {}
class B extends A {}

class X {
    &lt;T extends B&gt; m(): T { return null; }
}
class Y extends X {
    @Override
    &lt;T extends A&gt; m(): T { return null; }
}</screen>
<simpara>Method <literal>m</literal> in <literal>Y</literal> may return an <literal>A</literal>, thus breaking the contract of m in <literal>X</literal>, but only if it is parameterized to do so, which is not allowed for clients of <literal>X</literal>, only those of <literal>Y</literal>. Therefore, the override in the above example is valid.</simpara>
</example>
<simpara>The subtype relation for function types is also applied for method
overriding to ensure that an overriding method’s signature conforms to
that of the overridden method, see <xref linkend="req:Overriding_Members"/> (applies to
method comnsumption and implementation accordingly, see
<xref linkend="req:Consumption_of_Interface_Members"/> and
<xref linkend="req:Implementation_of_Interface_Members"/>). Note that this is very
different from Java which is far more restrictive when checking
overriding methods. As Java also supports method overloading: given two
types <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>,</mo><mi>B</mi></math> with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>A</mi></math> and a super class
method <literal>void m(B param)</literal>, it is valid to override <literal>m</literal> as <literal>void m(A param)</literal> in N4JS but not in Java. In Java this would be handled as method overloading and therefore an <literal>@Override</literal> annotation on <literal>m</literal> would produce an error.</simpara>
<simpara>The upper bound of a function type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> is a function type with the lower bound types of the parameters and the upper bound of the return type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mfenced close=")" open="("><msub><mi>P</mi><mn>1</mn></msub><mrow/><msub><mi>P</mi><mi>n</mi></msub></mfenced><mi>:</mi><mi>R</mi></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mfenced close=")" open="("><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>P</mi><mn>1</mn></msub></mfenced></mrow><mrow/><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>P</mi><mi>n</mi></msub></mfenced></mrow></mfenced><mi>:</mi><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mn>174</mn><mi>;</mi></math>
The lower bound of a function type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> is a function type
with the upper bound types of the parameters and the lower bound of the
return type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><mrow><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mfenced close=")" open="("><msub><mi>P</mi><mn>1</mn></msub><mrow/><msub><mi>P</mi><mi>n</mi></msub></mfenced><mi>:</mi><mi>R</mi></mrow></mfenced><mi>:</mi><mo>=</mo><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mfenced close=")" open="("><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>P</mi><mn>1</mn></msub></mfenced></mrow><mrow/><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mfenced close=")" open="("><msub><mi>P</mi><mi>n</mi></msub></mfenced></mrow></mfenced><mi>:</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mn>174</mn><mi>;</mi></math></simpara>
<simpara>=== Autoboxing of Function Type</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-830"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-830</link></simpara>
</sidebar>
<simpara>Function types, compared to other types like String, come only in on
flavour: the Function object representation. There is no primitive
function type. Nevertheless, for function type expressions and function
declarations, it is possible to call the properties of Function object
directly. This is similar to autoboxing for strings.</simpara>
<formalpara>
<title>Access of Function properties on functions</title>
<para>
<screen>// function declaration
var param: number = function(a,b){}.length // 2

function a(x: number) : number { return x*x; }
// function reference
a.length; // 1

// function variable
var f = function(m,l,b){/*...*/};
f.length; // 3

class A {
    s: string;
    sayS(): string{ return this.s; }
}

var objA: A = new A();
objA.s = "A";

var objB = {s:"B"}

// function variable
var m = objA.sayS; // method as function, detached from objA
var mA: {function(any)} = m.bind(objA); // bind to objA
var mB: {function(any)} = m.bind(objB); // bind to objB

m()  // returns: undefined
mA() // returns: A
mB() // returns: B

m.call(objA,1,2,3);  // returns: A
m.apply(objB,[1,2,3]); // returns: B
m.toString(); // returns: function sayS(){ return this.s; }</screen>
</para>
</formalpara>
<simpara>=== Arguments Object</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-662"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-662</link></simpara>
</sidebar>
<simpara>A special arguments object is defined within the body of a function. It
is accessible through the implicitly-defined local variable named ,
unless it is shadowed by a local variable, a formal parameter or a
function named <literal>arguments</literal> or in the rare case that the function
itself is called ’arguments’ [<link linkend="ECMA11a">ECMA11a(p.S10.5, p.pp59)</link>]. The argument object has array-like behavior even though it is not of type <literal>array</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara>All actual passed-in parameters of the current execution context can
be retrieved by <math xmlns="http://www.w3.org/1998/Math/MathML"><mn>0</mn><mo>-</mo><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>d</mi></math> index access.</simpara>
</listitem>
<listitem>
<simpara>The <literal>length</literal> property of the arguments object stores the actual number of
passed-in arguments which may differ from the number of formally defined
number of parameters <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi></math> of the containing function.</simpara>
</listitem>
<listitem>
<simpara>It is possible to store custom values in the arguments object, even
outside the original index boundaries.</simpara>
</listitem>
<listitem>
<simpara>All obtained values from the arguments object are of type <literal>any</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>In non-strict ES mode the property holds a reference to the function
executed [<link linkend="ECMA11a">ECMA11a(p.S10.6, p.pp61)</link>].</simpara>
<simpara>In N4JS and in ES strict mode the use of <literal>arguments.callee</literal> is
prohibited.</simpara>

<simpara>In N4JS, the formal parameters of the function cannot be named <literal>arguments</literal>. This applies to all variable execution environments like field accessors (getter/setter, <xref linkend="Field_Accessor"/>), methods (<xref linkend="_methods"/>) and
constructors (<xref linkend="Constructor"/>), where <literal>FormalParameter</literal> type is used.</simpara>
</section>
<section xml:id="_usage_of_arguments_object">
<title>Usage of arguments object</title>
<programlisting xml:id="ex:Usage_of_arguments_object" language="n4js" linenumbering="unnumbered">// regular function
function a1(s1: string, n2: number) {
    var l: number = arguments.length;
    var s: string = arguments[0] as string;
}

class A {
    // property access
    get s(): string { return ""+arguments.length; } // 0
    set s(n: number) { console.log( arguments.length ); }  // 1
    // method
    m(arg: string) {
        var l: number = arguments.length;
        var s: string = arguments[0]  as string;
    }
}

// property access in object literals
var x = {
    a:5,
    get b(): string {
        return ""+arguments.length
    }
}

// invalid:
function z(){
    arguments.length // illegal, see next lines
    // define arguments to be a plain variable of type number:
    var arguments: number = 4;
}</programlisting>
<simpara>== ECMAScript 5 Function Definition</simpara>
<simpara>=== Function Declaration</simpara>
<simpara>==== Syntax</simpara>
<simpara>A function can be defined as described in [<link linkend="ECMA11a">ECMA11a(p.S13, p.p.98)</link>] and additional annotations can be specified.
Since N4JS is based on [<link linkend="ECMA15a">ECMA15a</link>], the syntax contains constructs not available in [<link linkend="ECMA11a">ECMA11a</link>].
The newer constructs defined only in [<link linkend="ECMA15a">ECMA15a</link>] and proposals already implemented in N4JS are described in <xref linkend="ECMAScript 2015 Function Definition"/> and <xref linkend="ECMAScript Proposals Function Definition"/>.</simpara>
<simpara>In contrast to plain JavaScript, function declarations can be used in
blocks in N4JSl. This is only true, however, for N4JS files, not for
plain JS files. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1043"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1043</link></simpara>
</sidebar>
<formalpara>
<title>Syntax Function Declaration and Expression</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">FunctionDeclaration &lt;Yield&gt;:
    =&gt; ({FunctionDeclaration}
        annotations+=Annotation*
        (declaredModifiers+=N4Modifier)*
        -&gt; FunctionImpl &lt;Yield,Yield,Expression=false&gt;
    ) =&gt; Semi?
;


fragment AsyncNoTrailingLineBreak *: (declaredAsync?='async' NoLineTerminator)?;

fragment FunctionImpl&lt;Yield, YieldIfGenerator, Expression&gt;*:
    'function'
    (
        generator?='*' FunctionHeader&lt;YieldIfGenerator,Generator=true&gt; FunctionBody&lt;Yield=true,Expression&gt;
    |   FunctionHeader&lt;Yield,Generator=false&gt; FunctionBody&lt;Yield=false,Expression&gt;
    )
;

fragment FunctionHeader&lt;Yield, Generator&gt;*:
    TypeVariables?
    name=BindingIdentifier&lt;Yield&gt;?
    StrictFormalParameters&lt;Yield=Generator&gt;
    (-&gt; ':' returnTypeRef=TypeRef)?
;

fragment FunctionBody &lt;Yield, Expression&gt;*:
        &lt;Expression&gt; body=Block&lt;Yield&gt;
    |   &lt;!Expression&gt; body=Block&lt;Yield&gt;?
;</programlisting>
</para>
</formalpara>
<simpara>Properties of the function declaration and expression are described in
in <xref linkend="Function Type"/>.</simpara>
<simpara>For this specification, we introduce a supertype
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>D</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></math> for both,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math>. This supertype contains all common
properties of these two subtypes, that is, all properties of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math>.</simpara>
<simpara>[Function Declaration with Type
Annotation][ex:Function_Declaration_with_Type_Annotation]</simpara>
<screen>// plain JS
function f(p) { return p.length }
// N4JS
function f(p: string): number { return p.length }</screen>
<simpara>==== Semantics</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-224"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-224</link></simpara>
</sidebar>
<simpara>A function defined in a class’s method (or method modifier) builder is a
method, see <xref linkend="_methods"/> for details and additional constraints.
The metatype of a function definition is function type (<xref linkend="Function Type"/>), as a function declaration is only a different syntax for creating a object.
Constraints for function type are described in <xref linkend="Function Type"/>. Another consequence is that the inferred type of a function definition <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi></math> is simply its function type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math>. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>F</mi><mrow><mi>f</mi><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi></mrow></math> Note that the type
of a function definition is different from its return type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi></math>!</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In plain JavaScript, function declarations must only be located on
top-level, that is they must not be nested in blocks. Since this is
supported by most JavaScript engines, only a warning is issued.</simpara>
</listitem>
</orderedlist>
<simpara>=== Function Expression</simpara>
<simpara>A function expression [<link linkend="ECMA11a">ECMA11a(p.S11.2.5)</link>] is quite similar to a function declaration. Thus,
most details are explained in .</simpara>
<simpara>==== Syntax <anchor xml:id="function-expression-syntax" xreflabel="[function-expression-syntax]"/></simpara>
<screen>FunctionExpression:
         ({FunctionExpression}
            FunctionImpl&lt;Yield=false,YieldIfGenerator=true,Expression=true&gt;
         )
;</screen>
<simpara>==== Semantics and Type Inference</simpara>
<simpara>In general, the inferred type of a function expression simply is the
function type as described in <xref linkend="Function Type"/>. Often, the signature of a function
expression is not explicitly specified but it can be inferred from the
context. The following context information is used to infer the full
signature:</simpara>
<itemizedlist>
<listitem>
<simpara>If the function expression is used on the right hand side of an
assignment, the expected return type can be inferred from the left hand
side.</simpara>
</listitem>
<listitem>
<simpara>If the function expression is used as an argument in a call to another
function, the full signature can be inferred from the corresponding type
of the formal parameter declaration.</simpara>
</listitem>
</itemizedlist>
<simpara>Although the signature of the function expression may be inferred from
the formal parameter if the function expression is used as argument,
this inference has some conceptual limitations. This is demonstrated in
the next example.</simpara>
<simpara>Example: Inference Of Function Expression’s Signature</simpara>
<simpara>In general, <literal>{function():any}</literal> is a subtype of <literal>{function():void}</literal> (cf. <xref linkend="Function Type"/>). When the return type of a function
expression is inferred, this relation is taken into account which may
lead to unexpected results as shown in the following code snippet:</simpara>
<screen>function f(cb: {function():void}) { cb() }
f(function() { return 1; });</screen>
<simpara>No error is issued: The type of the function expression actually is
inferred to <literal>{function():any}</literal>, because there is a return statement with an expression.
It is not inferred to <literal>{function():void}</literal>, even if the formal parameter of <literal>f</literal> suggests that.
Due to the previously-stated relation <literal>{function():any} &lt;: {function():void}</literal> this is correct – the client (in this
case function <literal>f</literal>) works perfectly well even if <literal>cb</literal> returns something.
The contract of arguments states that the type of the argument is a subtype
of the type of the formal parameter. This is what the inferencer takes
into account!</simpara>
<simpara>== ECMAScript 2015 Function Definition</simpara>
<simpara>=== Generator Functions</simpara>
<simpara>Cf. [<link linkend="ECMA15a">ECMA15a(p.S14.4)</link>], also see [<link linkend="Kuizinas14a">Kuizinas14a</link>]. Syntax supported, semantic and transpilation not
supported yet.</simpara>
<simpara>=== Arrow Function Expression</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-252"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-252</link></simpara>
</sidebar>
<simpara>This is an ECMAScript 6 expression (see [<link linkend="ECMA15a">ECMA15a(p.S14.2)</link>]) for simplifying the definition of anonymous function expressions, aka
lambdas or closures. The ECMAScript Specification calls this a function
definition even though they may only appear in the context of
expressions.</simpara>
<simpara>Along with Assignments, Arrow function expressions have the least
precedence, e.g. they serve as the entry point for the expression tree.</simpara>
<simpara>Arrow function expressions can be considered syntactic window-dressing
for old-school function expressions and therefore do not support the
benefits regarding parameter annotations although parameter types may be
given explicitly. The return type can be given as type hint if desired,
but this is not mandatory (if left out, the return type is inferred).
The notation `@=>
` stands for an async arrow function (<xref linkend="Asynchronous Arrow Functions"/>).</simpara>
<simpara>==== Syntax <anchor xml:id="arrow-function-expression-syntax" xreflabel="[arrow-function-expression-syntax]"/></simpara>
<simpara>The simplified syntax reads like this:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ArrowExpression returns ArrowFunction:
    =&gt;(
        {ArrowFunction}
        (
            '('
                ( fpars+=FormalParameterNoAnnotations ( ',' fpars+=FormalParameterNoAnnotations )* )?
            ')'
            (':' returnTypeRef=TypeRef)?
        |   fpars+=FormalParameterNoType
        )
        '=&gt;'
    ) (
        (=&gt; hasBracesAroundBody?='{' body=BlockMinusBraces '}') | body=ExpressionDisguisedAsBlock
    )
;

FormalParameterNoAnnotations returns FormalParameter:
    (declaredTypeRef=TypeRef variadic?='...'?)? name=JSIdentifier
;
FormalParameterNoType returns FormalParameter: name=JSIdentifier;

BlockMinusBraces returns Block: {Block} statements+=Statement*;

ExpressionDisguisedAsBlock returns Block:
    {Block} statements+=AssignmentExpressionStatement
;

AssignmentExpressionStatement returns ExpressionStatement: expression=AssignmentExpression;</programlisting>
<simpara>==== Semantics and Type Inference <anchor xml:id="arrow-function-expression-semantics-and-type-inference" xreflabel="[arrow-function-expression-semantics-and-type-inference]"/></simpara>
<simpara>Generally speaking, the semantics are very similar to the function
expressions but the devil’s in the details:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>arguments</literal>: Unlike normal function expressions, an arrow function does not
introduce an implicit <literal>arguments</literal> variable (<xref linkend="Arguments Object"/>), therefore any occurrence of it in the arrow function’s body has always the same binding as an occurrence of <literal>arguments</literal> in the lexical context enclosing the arrow function.</simpara>
</listitem>
<listitem>
<simpara><literal>this</literal>: An arrow function does not introduce a binding of its own for the <literal>this</literal> keyword. That explains why uses in the body of arrow function have the
same meaning as occurrences in the enclosing lexical scope. As a
consequence, an arrow function at the top level has both usages of <literal>arguments</literal> and <literal>this</literal> flagged as error (the outer lexical context doesn’t provide definitions
for them).</simpara>
</listitem>
<listitem>
<simpara><literal>super</literal>: As with function expressions in general, whether of the arrow
variety or not, the usage of <literal>super</literal> isn’t allowed in the body of arrow
functions.</simpara>
</listitem>
</itemizedlist>
<simpara>In N4JS, a top-level arrow function can’t refer to <literal>this</literal> as there’s no outer lexical context that provides a binding for it.</simpara>

<simpara>In N4JS, a top-level arrow function can’t include usages of <literal>arguments</literal> in its body, again because of the missing binding for it.</simpara>
<simpara>== ECMAScript Proposals Function Definition</simpara>
<simpara>=== Asynchronous Functions
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1175"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1175</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1593"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1593</link></simpara>
</sidebar>
<simpara>To improve language-level support for asynchronous code, there exists an
ECMAScript proposal
<footnote><simpara>see <link xl:href="http://tc39.github.io/ecmascript-asyncawait/">http://tc39.github.io/ecmascript-asyncawait/</link></simpara></footnote> based on Promises which are provided by ES6 as built-in types.
N4JS implements this proposal.
This concept is supported for declared functions and methods (<xref linkend="Asynchronous_Methods"/>) as well
as for function expressions and arrow functions (<xref linkend="Asynchronous Arrow Functions"/>).</simpara>
<simpara>==== Syntax <anchor xml:id="asynchronous-functions-syntax" xreflabel="[asynchronous-functions-syntax]"/></simpara>
<simpara>The following syntax rules are extracted from the real syntax rules.
They only display parts relevant to declaring a function or method as
asynchronous.</simpara>
<screen>AsyncFunctionDeclaration &lt;Yield&gt;:
        (declaredModifiers+=N4Modifier)*
        declaredAsync?='async' NoLineTerminator 'function'
        FunctionHeader&lt;Yield,Generator=false&gt;
        FunctionBody&lt;Yield=false,Expression=false&gt; Semi
;

AsyncFunctionExpression:
        declaredAsync?='async' NoLineTerminator 'function'
        FunctionHeader&lt;Yield=false,Generator=false&gt;
        FunctionBody&lt;Yield=false,Expression=true&gt;
;

AsyncArrowExpression &lt;In, Yield&gt;:
        declaredAsync?='async' NoLineTerminator '('
            (fpars+=FormalParameter&lt;Yield&gt;
                (',' fpars+=FormalParameter&lt;Yield&gt;)*)?
        ')' (':' returnTypeRef=TypeRef)? '=&gt;'
        (   '{' body=BlockMinusBraces&lt;Yield&gt; '}'
            | body=ExpressionDisguisedAsBlock&lt;In&gt;
        )
;

AsyncMethodDeclaration:
    annotations+=Annotation+ (declaredModifiers+=N4Modifier)* TypeVariables?
    declaredAsync?='async' NoLineTerminator LiteralOrComputedPropertyName&lt;Yield&gt;
    MethodParamsReturnAndBody</screen>
<simpara>’async’ is not a reserved word in ECMAScript and it can therefore be
used either as an identifier or as a keyword, depending on the context.
When used as a modifier to declare a function as asynchronous, then
there must be no line terminator after the <literal>async</literal> modifier. This enables the
parser to distinguish between using <literal>async</literal> as an identifier reference and a
keyword, as shown in the next example.</simpara>
<simpara>Async as keyword and identifier</simpara>
<programlisting language="n4js" linenumbering="unnumbered">async  <co xml:id="CO1-1"/>
function foo() {}
// vs
async function bar(); <co xml:id="CO1-2"/></programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>In this snippet, the <literal>async</literal> on line 1 is an identifier reference (referencing a
variable or parameter) and the function defined on line 2 is a
non-asynchronous function. The automatic semicolon insertion adds a
semicolon after the reference on line 1.</para>
</callout>
<callout arearefs="CO1-2">
<para>In contrast, <literal>async</literal> on line 3 is
recognized as a modifier declaring the function as asynchronous.</para>
</callout>
</calloutlist>
<simpara>==== Semantics <anchor xml:id="asynchronous-functions-semantics" xreflabel="[asynchronous-functions-semantics]"/></simpara>
<simpara>The basic idea is to make code dealing with Promises easier to write and
more readable without changing the functionality of Promises. Take this
example:</simpara>
<formalpara>
<title>A simple asynchronous function using async/await.</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">// some asynchronous legacy API using promises
interface DB {}
interface DBAccess {
    getDataBase(): Promise&lt;DB,?&gt;
    loadEntry(db: DB, id: string): Promise&lt;string,?&gt;
}

var access: DBAccess;

// our own function using async/await
async function loadAddress(id: string) : string {
    try {
        var db: DB = await access.getDataBase();
        var entry: string = await access.loadEntry(db, id);
        return entry.address;
    }
    catch(err) {
        // either getDataBase() or loadEntry() failed
        throw err;
    }
}</programlisting>
</para>
</formalpara>
<simpara>The modifier <literal>async</literal> changes the return type of <literal>loadAddress()</literal> from <literal>string</literal> (the declared return type) to <literal>Promise&lt;string,?&gt;</literal> (the actual return type).
For code inside the function, the return
type is still <literal>string</literal>: the value in the return statement of the last line will
be wrapped in a Promise. For client code outside the function and in
case of recursive invocations, the return type is <literal>Promise&lt;string,?&gt;</literal>. To raise an error, simply throw an exception, its value will become the error value of the returned Promise.</simpara>
<simpara>If the expression after an <literal>await</literal> evaluates to a <literal>Promise</literal>, execution of the enclosing asynchronous function will be suspended until either a success value is available (which will then make the entire await-expession evaluate to
this success value and continue execution) or until the Promise is
rejected (which will then cause an exception to be thrown at the
location of the await-expression).
If, on the other hand, the expression
after an <literal>await</literal> evaluates to a non-promise, the value will be simply passed
through. In addition, a warning is shown to indicate the unnecessary <literal>await</literal>
epression.</simpara>
<simpara>Note how method <literal>loadAddress()</literal> above can be implemented without any explicit references to the built-in type Promise.
In the above example we handle the errors of the nested asynchronous calls to <literal>getDataBase()</literal> and <literal>loadEntry()</literal> for demonstration purposes only; if we are not interested in the errors we could simply remove the try/catch block and any errors would be forwarded to the caller of <literal>loadAddress()</literal>.</simpara>
<simpara>Invoking an async function commonly adopts one of two forms: </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/620"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-620</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara><literal>var p: Promise&lt;successType,?&gt; = asyncFn()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>await asyncFn()</literal></simpara>
</listitem>
</itemizedlist>
<simpara>These patterns are so common that a warning is available whenever both</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>Promise</literal> is omitted as expected type; and</simpara>
</listitem>
<listitem>
<simpara><literal>await</literal> is also omitted.</simpara>
</listitem>
</orderedlist>
<simpara>The warning aims at hinting about forgetting to wait for the result, while remaining
non-noisy.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>async</literal> may be used on declared functions and methods, and for function
expressions. and arrow functions.</simpara>
</listitem>
<listitem>
<simpara>A function or method <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> with a declared return type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> that is declared has an actual return type of <literal>async</literal>.</simpara>
<note>
<simpara>for the time being this applies also to functions with a void
return type, producing the actual return type <literal>Promise&lt;void,?&gt;</literal> (to be reconsidered).</simpara>
</note>
</listitem>
<listitem>
<simpara>Given a function or method <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> with a declared return
type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> that is declared , all return statements in
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> must have an expression of type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> (and not
of type ).</simpara>
</listitem>
<listitem>
<simpara><literal>await</literal> can be used in expressions directly enclosed in an async function,
and behaves like a unary operator with the same precedence as in ES6.</simpara>
</listitem>
<listitem>
<simpara>Given an expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mstyle mathvariant="italic"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></mstyle></math> of type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the type of <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>(</mo></mrow></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mstyle mathvariant="italic"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></mstyle><mo>)</mo></mrow></math> is inferred to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is not a Promise or it is inferred to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is a Promise with a success value of type
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>, i.e. <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi></math> .</simpara>
</listitem>
</orderedlist>
<simpara>=== Asynchronous Arrow Functions</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1494"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1494</link></simpara>
</sidebar>
<simpara>An <literal>await</literal> expression is allowed in the body of an async arrow function but not
in the body of a non-async arrow function. The semantics here are
intentional and are in line with similar constraint for function
expressions.</simpara>
<simpara>== N4JS Extended Function Definition</simpara>
<simpara>=== Generic Functions</simpara>
<simpara>A generic function is a function with a list of generic type parameters.
These type parameters can be used in the function signature to declare
the types of formal parameters and the return type. In addition, the
type parameters can be used in the function body, for example when
declaring the type of a local variable.</simpara>
<simpara>In the following listing, a generic function <literal>foo</literal> is defined that has two
type parameters <literal>S</literal> and <literal>T</literal>. Thereby <literal>S</literal> is used as to declare the parameter type <literal>Array&lt;S&gt;</literal> and <literal>T</literal> is used as the return type and to construct the returned value in the function body.</simpara>
<formalpara>
<title>Generic Function Definition</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">function &lt;S,T&gt; foo(s: Array&lt;S&gt;): T { return new T(s); }</programlisting>
</para>
</formalpara>
<simpara>If a generic type parameter is not used as a formal parameter type or
the return type, a warning is generated.</simpara>
<simpara>=== Promisifiable Functions</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-2018"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-2018</link></simpara>
</sidebar>
<simpara>In many existing libraries, which have been developed in
pre-ES6-promise-API times, callback methods are used for asynchronous
behavior. An asynchronous function follows the following conventions:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">'function' name '(' arbitraryParameters ',' callbackFunction ')'</programlisting>
<simpara>Usually the function returns nothing (<literal>void</literal>). The callback function usually
takes two arguments,in which the first is an error object and the other
is the result value of the asynchronous operation. The callback function
is called from the asynchronous function, leading to nested function
calls (aka ’callback hell’).</simpara>
<simpara>In order to simplify usage of this pattern, it is possible to mark such
a function or method as <literal>@Promisifiable</literal>. It is then possible to ’promisify’ an
invocation of this function or method, which means no callback function
argument has to be provided and a will be returned. The function or
method can then be used as if it were declared with <literal>async</literal>. This is
particularly useful in N4JS definition files (.n4jsd) to allow using an
existing callback-based API from N4JS code with the more convenient <literal>await</literal>.</simpara>
<simpara>Given a function with an N4JS signature</simpara>
<programlisting language="n4js" linenumbering="unnumbered">f(x: int, cb: {function(Error, string)}): void</programlisting>
<simpara>This method can be annotated with <literal>Promisifiable</literal> as follows:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@Promisifiable f(x: int, cb: {function(Error, string)}): void</programlisting>
<simpara>With this annotation, the function can be invoked in four different
ways:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">f(42, function(err, result1) { /* ... */ });            // traditional
var promise: Promise&lt;string,Error&gt; = @Promisify f(42);  // promise
var result3: string = await @Promisify f(42);           // long
var result4: string = await f(42);                      // short</programlisting>
<simpara>The first line is only provided for completeness and shows that a
promisifiable function can still be used in the ordinary way by
providing a callback - no special handling will occur in this case.
The second line shows how <literal>f</literal> can be promisified using the <literal>@Promisify</literal> annotation - no callback needs to be provided and instead, a <literal>Promise</literal> will be returned.
We can either use this promise directly or immediately <literal>await</literal> on it, as shown in line 3.
The syntax shown in line 4 is merely shorthand for <literal>await @Promisify</literal>, i.e. the
annotation is optional after <literal>await</literal>.</simpara>
<simpara>A function or method <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> can be annotated with <literal>@Promisifiable</literal> if and only if the following constraints hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Last parameter of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> is a function (the
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi></math>).</simpara>
</listitem>
<listitem>
<simpara>The <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>k</mi></math> has a signature of</simpara>
<itemizedlist>
<listitem>
<simpara><literal>{function(E, T0, T1, &#8230;&#8203;, Tn): V}</literal>, or</simpara>
</listitem>
<listitem>
<simpara><literal>{function(T0, T1, &#8230;&#8203;, Tn): V}</literal></simpara>
<simpara>in which <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> is type <literal>Error</literal> or a subtype thereof,
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>0</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></math> are arbitrary types except or its subtypes.
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math>, if given, is then the type of the error value, and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mn>0</mn></msub><mo>,</mo><mn>8230</mn><mi>;</mi><mn>8203</mn><mi>;</mi><mo>,</mo><msub><mi>T</mi><mi>n</mi></msub></math> are the types of the success values of the
asynchronous operation.<?asciidoc-br?>
Since the return value of the synchronous function call is not available when using <literal>@Promisify</literal>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>V</mi></math> is recommended to be <literal>void</literal>, but it can be any type.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>The callback parameter may be optional.
<footnote><simpara>Even in this case, the function will actually be called with the callback method which is then created by the transpiler. However, the callback is not given in the N4JS code).</simpara></footnote></simpara>
</listitem>
</orderedlist>
<simpara>According to <xref linkend="req:Promisifiable"/>, a promisifiable function or method may
or may not have a non-void return type, and that only the first
parameter of the callback is allowed to be of type <literal>Error</literal>, all other
parameters must be of other types.</simpara>
<simpara>A promisifiable function <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> with one of the two valid
signatures given in <xref linkend="req:Promisifiable"/> can be promisified with <literal>Promisify</literal> or
used with <literal>await</literal>, if and only if the following constraints hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Function <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> must be annotated with <literal>@Promisifiable</literal>.</simpara>
</listitem>
<listitem>
<simpara>Using <literal>@Promisify f()</literal> without <literal>await</literal> returns a promise of type <literal>Promise&lt;S,F&gt;</literal> where</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is <literal>IterableN&lt;T0,&#8230;&#8203;,Tn&gt;</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>≥</mo><mn>2</mn></math>, <literal>T</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>=</mo><mn>1</mn></math>, and <literal>void</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>=</mo><mn>0</mn></math>.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> is <literal>E</literal> if given, <literal>void</literal> otherwise.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Using <literal>await @Promisify f()</literal> returns a value of type <literal>IterableN&lt;T0,&#8230;&#8203;,Tn&gt;</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>≥</mo><mn>2</mn></math>, <literal>T</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>=</mo><mn>1</mn></math>, and <literal>void</literal> if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mo>=</mo><mn>0</mn></math>.</simpara>
</listitem>
<listitem>
<simpara>In case of using an <literal>await</literal>, the annotation can be omitted.<?asciidoc-br?>
I.e., <literal>await @Promisify f()</literal> is equivalent to <literal>await f()</literal>.</simpara>
</listitem>
<listitem>
<simpara>Only call expressions using f as target can be promisified, in other
words this is illegal:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var pf = @Promisify f; // illegal code!</programlisting>
</listitem>
</orderedlist>
<simpara>= Conversions and Reflection</simpara>
<simpara>== Auto-Boxing and Coercing</simpara>
<simpara>Coercing is the ability to implicitly cast one (primitive) type to another.
Auto-Boxing is a special kind of coercing in that is the ability to automatically convert a primitive value type, such as <literal>string</literal>, <literal>number</literal>, or <literal>boolean</literal>, to its corresponding Object type version <literal>String</literal>, <literal>Number</literal>, <literal>Boolean</literal>.
The capital letters in the latter are an essential distinction.</simpara>
<simpara>Conversion between primitives and object-representations of a datatype are not automatic in N4JS. Only in the cases of object-method invocations on a primitive type (for <literal>string</literal> to call <literal>"abc".length</literal>, for example) automatic conversion is applied.</simpara>
<simpara>Note that N4JS specific primitive types <literal>pathselector</literal> and <literal>i18nkey</literal> are handled similarly to <literal>string</literal>.</simpara>
<simpara>=== Coercing</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-379"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-379</link></simpara>
</sidebar>
<simpara>In [<link linkend="ECMA11a">ECMA11a</link>], coercing is defined by means of the abstract specification method <literal>ToPrimitive</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.1)</link>], also see [<link linkend="ECMA11a">ECMA11a(p.S9.10)</link>]). Other conversions, such as <literal>ToNumber</literal>, are not directly supported but reflected in the typing rules of expressions.</simpara>
<simpara>We express absence of automatic coercion here by means of subtype
relations:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mrow/><mo>|</mo><mrow><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><mrow><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mrow><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mo>|</mo><mrow><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mo>|</mo><mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mtext>
</mtext></math></simpara>
<simpara>and for the N4JS specific types:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>S</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>T</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mtext>
</mtext><mrow><mrow><mi>i</mi><mn>18</mn><mi>n</mi><mi>K</mi><mi>e</mi><mi>y</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mtext>
</mtext></math></simpara>
<simpara>If a conversion between primitive and object type is desired, we require
the user of N4JS to actively convert the values. The reason for that is
the notably different behavior of object- and primitive-variants of a
type in expression evaluation:</simpara>
<screen>var bool: boolean = false;
var Bool: Boolean = new Boolean( false );

console.log( bool ? "true" : "false"); // prints "false"
console.log( Bool ? "true" : "false"); // prints "true"!</screen>
<simpara>Conversion between a primitive type to its object-variant is achieved by
the <literal>new</literal> operator. The <literal>valueOf()</literal> method converts the object-variant back to a primitive value.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">// objects from literals:
var bo: Boolean = new Boolean( true ); // typeof bo: object
var no: Number = new Number( 42 ); // typeof no: object
var so: String = new String( "foo" ); // typeof so: object

// to primitive
var b: boolean = bo.valueOf(); // typeof b: boolean -- true
var n: number = no.valueOf(); // typeof n: number -- 42
var s: string = so.valueOf(); // typeof s: string -- "foo"

// to object-type
bo = new Boolean( b );
no = new Number( n );
so = new String( s );</programlisting>
<simpara>Conversion of variables of type <literal>Object</literal> or from one primitive type to another is expressed in terms of typing rules for expressions. That is, it is not
possible to convert any <literal>Object</literal> to a primitive in general, but it is possible to do so in the context of certain expressions such as additive operator.
The applied conversions are described in <xref linkend="Auto_Conversion_of_Class_Instances"/></simpara>
<simpara>=== Auto-Boxing of Primitives</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-835"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-835</link></simpara>
</sidebar>
<simpara>In [<link linkend="ECMA11a">ECMA11a</link>], autoboxing is defined by <literal>ToObject</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.9)</link>].</simpara>
<simpara>Auto-boxing is not directly supported in N4JS. Instead, primitive types
virtually have the same members as their corresponding object types. It
is then possible to use the auto-boxing feature when calling a member.
In general, auto-boxing is only supported for accessing built-in
read-only (immutable) properties. For example, <literal>"some string value".split(" ");</literal> is supported but <literal>"some string value".foo=1;</literal> will be rejected as String does not allow properties to be added (cf. vs. , see <xref linkend="Type_Modifiers_Dynamic"/>).</simpara>
<simpara>Auto-boxing often leads to problems, in particular in combination with
dynamic types – this is why it is not directly supported in N4JS. For
example,</simpara>
<screen>var s: String+ = "Hello"; // will produce an error to prevent the following scenario:
s.prop = 1;
console.log(s.prop); // prints "undefined"</screen>
<simpara>=== Auto-Boxing of Function Expressions and Declarations</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-830"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-830</link></simpara>
</sidebar>
<simpara>Function expressions and declarations always define an object of type <literal>Function</literal>, thus coercing or auto-boxing is not required in case of functions:</simpara>
<simpara>It is always possible to use a function expression where a <literal>Function</literal> is required, and to use an object of type <literal>Function</literal> where a function expression is expected.
This is only possible if the function signatures are subtype-compatible,
see <xref linkend="Function_Type"/> for details.</simpara>
<simpara>Still, it is always possible to call members of <literal>Function</literal>, e.g.,
<literal>function(){}.length()</literal>.</simpara>
<simpara>== Auto-Conversion of Objects</simpara>
<simpara>=== Auto-Conversion of Class Instances</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-833"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-833</link></simpara>
</sidebar>
<simpara>All classes defined in N4JS modules implicitly subclass <literal>N4Object</literal>, which is a
plain JavaScript Object type. The same auto-conversion rules defined for
JavaScript <literal>Object</literal> therefore apply to <literal>N4Object</literal> instances as well.</simpara>
<simpara>The basic conversion uses the abstract JavaScript function <literal>ToPrimitive</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.1)</link>], which relays on the specification method <literal>Object</literal>
[<link linkend="ECMA11a">ECMA11a(p.S8.12.8)</link>].
<literal>DefaultValue</literal> calls <literal>valueOf</literal> or <literal>toString</literal> methods if they are defined by the class (in the <literal>methods</literal>-builder).</simpara>
<simpara>Note that according to the [<link linkend="ECMA11a">ECMA11a</link>], in most cases, objects are first converted into primitives. That is, in most cases, no extra hint is passed to
<literal>DefaultValue</literal>. Thus <literal>valueOf</literal> usually takes precedence over toString as
demonstrated in the following example:</simpara>
<simpara>Auto-Conversion</simpara>
<simpara>Assume some classes and corresponding instances defined as follows:</simpara>
<screen>class A {}
class B{
    @Override public toString(): string { return "MyB"}
}
class C{
    @Override public valueOf(): any { return 10}
}
class D{
    @Override public toString(): string { return "MyD"}
    @Override public valueOf(): any { return 20}
}
var a = new A(), b = new B(), c = new C(), d = new D();</screen>
<simpara>Instances of these classes will be converted as demonstrated as follows:</simpara>
<screen>console.log(a+"");                      // [object Object]
console.log(a+1);                       // [object Object]1

console.log(""+b+"");                   // MyB
console.log(1+b+1);                     // 1MyB1

console.log(c+"");                      // 10
console.log(c+1);                       // 11

console.log(d+"");                      // 20
console.log(d+1);                       // 21</screen>
<simpara>==== Auto-Conversion of Interface Instances</simpara>
<simpara>Instances of interfaces actually are instances of classes at runtime.
The auto-conversion rules described in <xref linkend="Auto-Conversion of Class Instances"/> are applied to instances declared as instances of interfaces as well.</simpara>
<simpara>=== Auto-Conversion of Enum Literals</simpara>
<simpara>Enumeration values are objects and thus follow the behavior for
ECMAScript <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></math>. They have a
custom <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>o</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></math> method which returns the name of the
enumeration value.</simpara>
<simpara>== Type Cast and Type Check</simpara>
<simpara>=== Type Cast</simpara>
<simpara>  (IDEBUG-56): Casting to TypeVars</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-161"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-161</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-928"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-928</link></simpara>
</sidebar>
<simpara>Type casts are expressed with the cast expression (<literal>as</literal>), see <xref linkend="As_Expression"/> for details.</simpara>
<simpara>We first define helper rules for the type cast constraints as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>|</mo><mrow><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><mi>T</mi></mfenced></mrow><mrow><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>T</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></mfenced></mrow><mtext>
</mtext><mo>|</mo><mrow><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><mi>T</mi></mfenced></mrow><mrow><mi>μ</mi><mi>T</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></mfenced><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mrow><mi>T</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></mrow></mfenced><mo>≠</mo><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow></mrow><mtext>
</mtext><mo>|</mo><mrow><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced></mrow><mrow><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi></mrow></mfenced></mrow><mtext>
</mtext><mo>|</mo><mrow><mi>i</mi><mi>s</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mfenced close=")" open="("><mi>T</mi></mfenced></mrow><mrow><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mo>∧</mo><mi>T</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi><mo>≠</mo><mi>∅</mi></mrow><mtext>
</mtext><mo>|</mo><mrow><mi>i</mi><mi>s</mi><mi>F</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>B</mi><mi>y</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced></mrow><mrow><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∈</mo><mfenced close="}" open="{"><mrow><mi> </mi><mrow><mi>T</mi><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow></mfenced><mo>∨</mo><mfenced close="}" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mo>∧</mo><mi>T</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>s</mi><mi>i</mi><mi>b</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>t</mi><mi>y</mi><mo>=</mo><mrow><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></mrow></mfenced><mo>)</mo></mrow></math></simpara>
<simpara>Given a type cast expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> in which
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>:</mi><mi>S</mi></math> and and target type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the
following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> must be a classifier, enum, primitive, function type
expression, classifier type, type variable, union or intersection type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∈</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close="}" open="{"><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi></mrow><mrow><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow><mrow><mi>P</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi></mrow><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mrow><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mrow><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mrow><mi>U</mi><mi>n</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is a subtype of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the cast is
unnecessary and a warning will be generated.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> are classes, enums or
primitive types, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> must be a subtype of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>. This is also true if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is an interface
and the type of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> cannot have subtypes, or vice versa.</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mo>(</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="4.0em"/><mo>∨</mo><mfenced close=")" open="("><mrow><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mo>∧</mo><mo>∃</mo><msup><mi>S</mi><mi>'</mi></msup><mo>∈</mo><mi>S</mi><mi>:</mi><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><msup><mi>S</mi><mi>'</mi></msup></mfenced></mrow></mfenced></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∧</mo><mi>i</mi><mi>s</mi><mi>F</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>B</mi><mi>y</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close=")" open="("><mi>S</mi></mfenced></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>F</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mi>B</mi><mi>y</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∧</mo><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mfenced close=")" open="("><mi>S</mi></mfenced></mrow></mfenced></mrow></mfenced><mi>T</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is a class, enum or primitive type and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is a type-variable, then for each given boundary
<math xmlns="http://www.w3.org/1998/Math/MathML"><msubsup><mi>T</mi><mi>i</mi><mrow><mi>u</mi><mi>p</mi></mrow></msubsup></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> of type class, enum or
primitive <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> must be a member of the type hierarchy:
<footnote><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> iterates over all boundaries</simpara></footnote>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>∧</mo><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><mi>S</mi></mfenced></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msub><mo>∀</mo><mrow><msubsup><mi>T</mi><mi>i</mi><mrow><mi>u</mi><mi>p</mi></mrow></msubsup><mo>∈</mo><mi>T</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>B</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>s</mi></mrow></msub><mfenced close=")" open="("><mrow><mi>i</mi><mi>s</mi><mi>C</mi><mi>P</mi><mi>O</mi><mi>E</mi><mfenced close=")" open="("><msubsup><mi>T</mi><mi>i</mi><mrow><mi>u</mi><mi>p</mi></mrow></msubsup></mfenced><mfenced close=")" open="("><mrow><msubsup><mi>T</mi><mi>i</mi><mrow><mi>u</mi><mi>p</mi></mrow></msubsup><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mo>∨</mo><msubsup><mi>T</mi><mi>i</mi><mrow><mi>u</mi><mi>p</mi></mrow></msubsup><mi>:</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>S</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> is a union or intersection type, then the type
cast is valid if it is valid for at least one element of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> are generics, and if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mo>=</mo><mi>T</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn></math>, a cast is possible if type arguments are sub- or
supertypes of each other: <footnote><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> iterates over all type args</simpara></footnote> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>S</mi></mfenced><mo>=</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></mrow><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mi>T</mi></mfenced><mo>=</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></mrow><mo>∧</mo><mi>S</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mo>=</mo><mi>T</mi><mo>&lt;</mo><mo>/</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>p</mi><mi>t</mi><mo>&gt;</mo><mn>0</mn><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mfenced close=")" open="("><mrow><mo>∀</mo><mi> </mi><mi>S</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><msub><mi>g</mi><mi>i</mi></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>T</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><msub><mi>g</mi><mi>i</mi></msub></mrow></mfenced><mo>∨</mo><mfenced close=")" open="("><mrow><mo>∀</mo><mi> </mi><mi>T</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><msub><mi>g</mi><mi>i</mi></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>S</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><msub><mi>g</mi><mi>i</mi></msub></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>It <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is a union type, then the type cast is valid if
it is valid for at least one element of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
</listitem>
<listitem>
<simpara>It <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> is an intersection type, then the type cast is
valid if it is valid for all elements of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
</listitem>
</orderedlist>
<note>
<simpara><literal>any</literal> is a supertype of all other types, thus it is always possible
to cast a variable of type <literal>any</literal> to other (non-composed) types.</simpara>
</note>
<simpara>=== Type Check</simpara>
<simpara>There are basically two ways of testing the type of a variable: <literal>typeof</literal> and <literal>instanceof</literal>. 
N4JS supports type comparison via the ECMAScript <literal>instanceof</literal> operator.
The operator <literal>instanceof</literal> retains its standard ECMAScript behavior (e.g. checking whether a value is an instance of a constructor function), but has additional functionality when used with N4JS types.</simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/293"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-293</link></simpara>
</sidebar>
<simpara>When used with an N4JS class, <literal>instanceof</literal> also supports checking against an interface. For N4JS enumeration values, it can be used to check whether the value is part of a specific enumeration.</simpara>
<simpara><literal>typeof</literal> only returns a string with the name of the ECMAScript type, which is <literal>Object</literal> for all class instances.</simpara>
<simpara>N4 specific <literal>string</literal> types, that is <literal>pathSelector</literal> and <literal>i18nkey</literal> cannot be tested during runtime.
These types, therefore, must not be used in <literal>instanceof</literal> expressions.
The same is true for string-based enums and arrays which cannot be tested during runtime, thus string-based enum and array types are not permitted on the right-hand side of <literal>instancesof</literal> constructs.
For all types for which the evaluation result of <literal>instanceof</literal> could be computed at compile time, the check is unnecessary and thus it is refused by the compiler.
Using structural types on the right-hand side of <literal>instancesof</literal> constructs is also not permitted.</simpara>
<simpara>In order to avoid errors at runtime, the <literal>instanceof</literal> operator defines appropriate constraints, see <xref linkend="Relational_Expression"/> for details.</simpara>
<simpara>Type Check Example</simpara>
<simpara>Given the following classes and variable:</simpara>
<screen>interface I{}
class S{}
class Sub extends S implements I{}

var x = new Sub();</screen>
<simpara><literal>typeof x</literal> will simply return <literal>object</literal>. The following table shows the difference between plain JavaScript <literal>instanceof</literal> and N4JS’s <literal>instanceof</literal>:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Check</entry>
<entry align="center" valign="top">JavaScript</entry>
<entry align="center" valign="top">N4JS</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>x instanceof Sub</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>true</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>x instanceof S</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>true</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>true</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>x instanceof I</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>false</literal></simpara></entry>
<entry align="center" valign="top"><simpara><literal>true</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>== Reflection meta-information
   </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-155"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-155</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-561"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-561</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-137"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-137</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-980"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-980</link></simpara>
</sidebar>
<simpara>All N4JS classes, interfaces and enumerations provide meta-information
that is used by the runtime and standard library.
All classifiers (including enums) provide meta-information by means of a static getter <literal>n4class</literal>.
Since it is static getter, it is actually an instance getter of the
constructor (or classifier) of a type, which is the only way to retrieve
that information in case of interfaces. For enums, this can be retrieved
from instances as well.</simpara>
<simpara>This getter is of type <literal>N4Class</literal> which is a built-in type just like <literal>N4Object</literal>. It contains the following members:</simpara>
<variablelist>
<varlistentry>
<term><literal>fqn</literal> </term>
<listitem>
<simpara>The <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>Q</mi><mi>N</mi></math> of the type.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>n4superType</literal> </term>
<listitem>
<simpara>The <literal>N4Class</literal> of the supertype, may be null if supertype is a not an .</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>allImplementedInterfaces</literal> </term>
<listitem>
<simpara>List of The <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi><mi>Q</mi><mi>N</mi></math> of implemented interfaces (transitively
but without interfaces implemented by supertype)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>get isClass</literal> </term>
<listitem>
<simpara>True if the type is an N4Class.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>get isInterface]</literal> </term>
<listitem>
<simpara>True if the type is an N4Interface.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>This meta-information is currently not available to non-N4 developers.</simpara>
<simpara>=== Reflection for Classes</simpara>
<simpara>The meta-information for classes is available by means of <literal>N4Object</literal>’s static
getter <literal>n4class</literal>. Since it is static getter, it is actually an instance getter of the constructor of a type.</simpara>
<simpara>Reflection with <literal>N4class</literal></simpara>
<simpara>This example demonstrates how these reflective features are accessed:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {}
class B extends A {}
var b = new B();
console.log(B.n4class.fqn);
console.log(b.constructor.n4class.fqn);
console.log(b.constructor.n4class.n4superType.fqn);
console.log(B.n4class.constructor.n4class.fqn);</programlisting>
<simpara>Assuming this code is defined in file <literal>A</literal>, this will output</simpara>
<screen>A.B
A.B
A.A
N4Class</screen>
<simpara>The built-in types <literal>N4Object</literal> and <literal>N4Class</literal> are also accessible.
They are not defined in a module, thus their <link linkend="AC">FQN</link> returns only their simple name.</simpara>
<simpara>Reflection with Built-In Types</simpara>
<programlisting language="n4js" linenumbering="unnumbered">console.log('N4Object.n4class.fqn:      ' + N4Object.n4class.fqn)
console.log('N4Class.n4class.fqn:       ' + N4Class.n4class.fqn)

class A {}
console.log('A.n4class.fqn:             ' + A.n4class.fqn)
console.log('A.n4class.n4superType.fqn: ' + A.n4class.n4superType.fqn)</programlisting>
<simpara>Assuming this code is defined in file <literal>A</literal>, this will output</simpara>
<screen>N4Object.n4class.fqn:      N4Object
N4Class.n4class.fqn:       N4Class
A.n4class.fqn:             A.A
A.n4class.n4superType.fqn: N4Object</screen>
<simpara>Note that classes extending <literal>Object</literal> do not provide the static <literal>n4class</literal> getter, hat is</simpara>
<screen>class B extends Object {}
console.log('B.n4class.fqn:             ' + B.n4class.fqn)</screen>
<simpara>would issue an error as cannot be resolved.</simpara>
<simpara>N4Class.of</simpara>
<simpara>The type has a method to retrieve the meta-information from instances (i.e. or enumeration literals using )
without using the constructor. </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/195"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-195</link></simpara>
</sidebar>
<programlisting language="n4js" linenumbering="unnumbered">class C { }
interface I {}  class IImpl implements I {}
enum E { L }

var c: C = new C();
var i: I = new IImpl();
var e: E = E.L;

console.log(C.n4type.fqn);
console.log(N4Class.of(c).fqn);

console.log(I.n4type.fqn);
console.log(N4Class.of(i).fqn);

console.log(E.n4type.fqn);
console.log(N4EnumType.of(e).fqn);</programlisting>
<simpara>=== Reflection for Interfaces</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-980"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-980</link></simpara>
</sidebar>
<simpara>The meta-information of an interface <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is available via
getter <literal>n4class</literal> defined in the <literal>type{X}</literal>. This field is of type <literal>N4Class</literal> as well. Since an interface cannot have a super classs, the property <literal>n4superTypes</literal> will always be empty.
Calling <literal>isInterface</literal> respectively on the returned <literal>N4Class</literal> instance will return true.</simpara>
<simpara>=== Reflection for Enumerations</simpara>
<screen>var n: number; var b: boolean; var s: string;</screen>
<simpara>The meta-information for enumerations is available by means of the getter <literal>n4class</literal>, either statically by using the enumeration type or (in terms of an
instance getter) via a literal.
Calling <literal>isEnum</literal> on the returned <literal>N4Class</literal> instance will return true.</simpara>
<simpara>== Conversion of primitive types</simpara>
<simpara>Conversion between primitives is given as follows:</simpara>
<screen>var n: number; var b: boolean; var s: string;</screen>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="11.1111*"/>
<colspec colname="col_2" colwidth="11.1111*"/>
<colspec colname="col_3" colwidth="33.3333*"/>
<colspec colname="col_4" colwidth="44.4445*"/>
<thead>
<row>
<entry align="center" valign="middle">From</entry>
<entry align="center" valign="middle">To</entry>
<entry align="left" valign="middle">Conversion</entry>
<entry align="center" valign="top">Example</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="middle"><simpara><literal>string</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>number</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>Number&#8230;&#8203;</literal></simpara></entry>
<entry align="left" valign="top"><screen>n = Number("42");//42</screen></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><literal>string</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>boolean</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>N4Primitives.parseBoolean(&#8230;&#8203;)</literal></simpara></entry>
<entry align="left" valign="top"><screen> b=N4Primitives.parseBoolean("false");</screen></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><literal>number</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>boolean</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>Boolean(&#8230;&#8203;)</literal></simpara></entry>
<entry align="left" valign="top"><screen>b=Boolean(17.5); //true</screen></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><literal>number</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>string</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>Number.toString()</literal></simpara></entry>
<entry align="left" valign="top"><screen>s=42.toString(); //"42"</screen></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><literal>boolean</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>number</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>N4Primitives.toNumber(&#8230;&#8203;)</literal></simpara></entry>
<entry align="left" valign="top"><screen>n=N4Primitives.toNumber(true);</screen></entry>
</row>
<row>
<entry align="center" valign="middle"><simpara><literal>boolean</literal></simpara></entry>
<entry align="center" valign="middle"><simpara><literal>string</literal></simpara></entry>
<entry align="left" valign="middle"><simpara><literal>Boolean.toString()</literal></simpara></entry>
<entry align="left" valign="top"><screen> s=true.toString();//"true" }</screen></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Remarks:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>ECMAScript doesn’t define explicit conversion from string content.
Implicit handling states all strings with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>t</mi><mi>;</mi></math>0==true. <literal>N4Primitives.parseBoolean( x )</literal> yields
true for <literal>x.trim().toLowerCase().equals("true")</literal></simpara>
</listitem>
<listitem>
<simpara>The call to <literal>Boolean(..)</literal> for the arguments <literal>0, -0, null, false, NaN, undefined</literal> and <literal>""</literal> evaluate to <literal>false</literal>. All other values
evaluate to <literal>true</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Number</literal> has several methods for converting a value to string [<link linkend="ECMA11a">ECMA11a(p.S15.7.4)</link>]: <literal>toExponential(), to Fixed(), toPrecision()</literal>.</simpara>
</listitem>
<listitem>
<simpara>ECMAScript doesn’t define explicit conversion from boolean to
number. Implicit handling states true <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>→</mo></math> 1 and
false <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>→</mo></math> 0, which <literal>N4Primitives.toNumber()</literal> yields.</simpara>
</listitem>
</orderedlist>
<simpara>= Expressions</simpara>
<simpara>For all expressions, we define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>containingExpression</literal> </term>
<listitem>
<simpara>The parent expression, in which an expression is contained, may be null.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>containingStatement</literal> </term>
<listitem>
<simpara>The statement in which the expression is (indirectly) contained.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>containingFunctionOrAccessor</literal> </term>
<listitem>
<simpara>The function, method, getter or setter in which the expression is
(indirectly) contained, may be null</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>containingClass</literal> </term>
<listitem>
<simpara>The class in which the expression is (indirectly) contained, may be
null.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>probableThisTarget</literal> </term>
<listitem>
<simpara>The potential target of a this keyword binding, this is not necessarily
the containing class or object literal. In case of instance methods of a
class <literal>T</literal>, this usually is the classifier <literal>T</literal>; in case of static methods, it
is the classifier type <literal>type{type}</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>container</literal> </term>
<listitem>
<simpara>The direct owner of the expression.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The expressions and statements are ordered, describing first the
constructs available in the 5th edition of ECMA-262, referred to as
[<link linkend="ECMA11a">ECMA11a</link>] in the following. It is worth noting that the grammar snippets already use
newer constructs in some cases.</simpara>
<simpara>== ECMAScript 5 Expressions</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-232"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-232</link></simpara>
</sidebar>
<simpara>N4JS supports the same expressions as ECMAScript.
The semantics are described in [<link linkend="ECMA11">ECMA11(p.S11)</link>].
In N4JS, some expressions are extended for supporting the declaration of types, annotations, or
parameterized usages.
These extensions and type-related aspects as well as specific N4JS constraints are described in this section.</simpara>
<simpara>Some operators come in different ’flavors’, that is as binary operator,
unary pre- or postfix operators, or assignment operators. For these
operators, type constraints are only defined for the binary operator
version and the other variants are deduced to that binary version. E.g.,
’+’ and ’=’ are deduced to ’+’ (and simple assignment).</simpara>
<simpara>=== The this Literal
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-229"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-229</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-505"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-505</link></simpara>
</sidebar>
<simpara>This section describes the <literal>this</literal> literal and the semantics of the <literal>@This</literal> annotation, the type <literal>this</literal> is described in <xref linkend="This_Type"/>.</simpara>
<simpara>==== Semantics</simpara>
<simpara>Semantics are similar to the original ECMAScript this keyword, see [<link linkend="ECMA11a">ECMA11a(p.11.1.1, p.p.63)</link>])
Also see [<link linkend="West06a">West06a</link>] and cite:[MozillaJSRef(<link xl:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</link>)]</simpara>
<simpara>Regarding the location where <literal>this</literal> may be used, the following restrictions
apply:</simpara>
<simpara>The literal may not be used in</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>the initializer expression of static data fields in classes.</simpara>
</listitem>
<listitem>
<simpara>the initializer expression of data fields in interfaces (applies to
both static and non-static).</simpara>
</listitem>
<listitem>
<simpara>static methods of interfaces and static field accessors of
interfaces.</simpara>
</listitem>
</orderedlist>
<simpara>See also <xref linkend="req:StaticMembersOfInterfaces"/>.</simpara>
<simpara>The use of <literal>this</literal> is illustrated with some examples as it can often be
confusing. Type inference heuristics and explanations are provided in
the next section.</simpara>
<simpara>In unrestricted mode, <literal>this</literal> is bound to the receiver. If there is no receiver it is bound to the global object, however, we often do not know exactly
what the global object would be.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var name = "global a"; // assume the top level is similar to the global object
this.name; // &lt;-- "global a"
function f() {
    return this.name; // &lt;-- depends on call, usually "global a"
}
var ol1 = {
    name: "John",
    greeting: "Hello " + this.name, // "Hello global a" -- we do not greet John!
}
var ol2 = {
    name: "John",
    f: function() {
        this.name; // usually "John", as we assume f is called like ol2.f()
        var g = function() {
           return this.name; // "global a"
        }
        return g(); // no receiver, this in nested function g will be global scope
    }
}</programlisting>
<simpara>this in strict mode</simpara>
<simpara>In strict mode, <literal>this</literal> is bound to the receiver.
If there is no receiver, it is bound to <literal>undefined</literal>.
Thus, we will probably get a lot of errors:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">"use strict"
var name = "global a"; // assume the top level is similar to the global object
this.name; // &lt;-- error, this is undefined, there is no receiver
function f() {
    return this.name; // &lt;-- depends on call, usually this produces an error as this is undefined
}
var ol1 = {
    name: "John",
    greeting: "Hello " + this.name, // will produce an error, as this is undefined
}
var ol2 = {
    name: "John",
    f: function() {
        this.name; // usually "John", as we assume f is called like ol2.f()
        var g = function() {
           this.name; // an error, see call below:
        }
        return g(); // no receiver, this in nested function g is undefined
    }
}</programlisting>
<simpara>this in N4JS mode</simpara>
<simpara>As in strict mode, <literal>this</literal> is bound to the receiver and if there is no receiver, it is bound to <literal>undefined</literal>. So the example above is also true for N4JS mode. Classes behave slightly differently:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    name = "John";
    greeting  = "Hello " + this.name; // works, in N4JS classes, greeting is "Hello John"

    f() {
        return this.name; // this usually is instance object, similar to object literals.
    }

    g() {
        var h = function() {
            return this.name; // as in object literals: no receiver, no this.
        }
        return h();
    }
}</programlisting>
<simpara>Note that in N4JS classes, is always bound to the instance when used in
field initialization.</simpara>
<simpara>==== Type Inference</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link></simpara>
</sidebar>
<simpara>The type is inferred from the <literal>this</literal> type is bound to. The inference,
therefore, has to consider the original semantics as described in [<link linkend="ECMA11a">ECMA11a(p.10.4., p.10.4.3, p.p.58)</link>].
In ECMAScript the type of this is unfortunately determined by the function call and not by the function definition:</simpara>
<itemizedlist>
<listitem>
<simpara>By default, <literal>this</literal> is bound to the global object [<link linkend="ECMA11a">ECMA11a(p.10.4.1.1)</link>]   . Unfortunately it is often
unknown what the global object will be at run time (e.g., node.js
differs from browsers).</simpara>
</listitem>
<listitem>
<simpara>If a function is called without a receiver, <literal>this</literal> is bound to</simpara>
<itemizedlist>
<listitem>
<simpara>the global object or</simpara>
</listitem>
<listitem>
<simpara>to <literal>undefined</literal> in strict mode.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>If a function is called with a receiver,<literal>this</literal> is bound to the receiver
object.</simpara>
</listitem>
</itemizedlist>
<simpara>Actually, <literal>this</literal> is bound to the newly created object if a function is called
with the <literal>new</literal> operator. If a function is known to be invoked with an explicit
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>A</mi><mi>r</mi><mi>g</mi></math> (<literal>apply()</literal> etc.), the <literal>@This</literal> annotation can be used to explicitly set the this type. This annotation has precedence over otherwise
inferred bindings. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1010"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1010</link></simpara>
</sidebar>
<simpara>In general, the actual this target can not be inferred from the context of the this
keyword. A heuristic is defined, however, to compute the probable this
type:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the this keyword is used in some function annotated with an
annotation , the type specified in the annotation is used. The inferred
type is always nominal. <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mi>:</mi><mi>T</mi></mrow><mrow><mi>f</mi><mo>=</mo><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>O</mi><mi>r</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mtext>
</mtext><mi>f</mi><mo>.</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>A</mi><mi>n</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close=")" open="("><mrow><mi>"</mi><mi>@</mi><mi>T</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>n</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mrow><mo>[</mo><mi>"</mi><mi>@</mi><mi>T</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow></mrow></math>}}\\
        \end{aligned}\]]</simpara>
</listitem>
<listitem>
<simpara>If the this keyword is used in some <emphasis>instance</emphasis> method of a
classifier or in an <emphasis>instance</emphasis> field initializer, is bound to the
itself. If the this keyword is used in some <emphasis>static</emphasis> method of a
classifier or in a <emphasis>static</emphasis> field initializer, the prototype type (or
constructor) of the classifier is used, that is . In both cases, the
target is determined by using the expressions’s pseudo property . If the
this keyword is used in a function expression assigned to an property of
an object literal, the type of the object literal is used. Note that
usually this is the type in instance methods, and the type in static
methods.
 <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mi>:</mi><mi>T</mi></mrow><mrow><mi>T</mi><mo>=</mo><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>T</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>T</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>≠</mo></mrow><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara> In all other cases: Non-strict mode: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mi>:</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></mrow></mrow><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></mrow><mtext>
</mtext></math> Strict mode and N4JS mode:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow><mi>:</mi><mrow><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></mrow><mrow><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mrow><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>≠</mo><mrow><mi>u</mi><mi>n</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi></mrow></mrow><mtext>
</mtext></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-785"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-785</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-185"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-185</link></simpara>
</sidebar>
<simpara>If the actual this type is defined as a structural type, the structural
type information is moved to the this type itself. This is transparent
to the user in general but maybe visible in case of error messages. That
is to say that the actual this type is always a nominal type. This is
indicated by the nominal modifier f
(cf. <xref linkend="req:Type_Inference_Heuristic_for_This_Keyword"/> .1. and 2.).</simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-802"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-802</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>The <literal>@This</literal> annotation is only allowed on declared functions, function
expressions (including arrow functions), methods, and field accessors,
i.e. getters and setters, except static members of interfaces.</simpara>
</listitem>
<listitem>
<simpara>The type declared by way of <literal>@This(..)</literal> an annotation of a method or field
accessor must be a subtype of the member’s containing classifier.</simpara>
</listitem>
</orderedlist>

<simpara>
It is not allowed to use more then one annotation on an element.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-802"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-802</link></simpara>
</sidebar>
<simpara><emphasis role="marked">#</emphasis># Effect of Nominal This Type</simpara>
<simpara>Given the following declaration</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@This(~Object with {a: string;}) f() {}</programlisting>
<simpara>Since the this type is always nominal, <literal>~ Object
` becomes `Object</literal>. In case of method call,
however, the returned value becomes structural again. In case of error
messages the type of the return type is then</simpara>
<programlisting language="n4js" linenumbering="unnumbered">~this[Object] with {a: string;}</programlisting>
<simpara>For the sake of simplicity, additional structural members are usually
omitted in error messages, leading to</simpara>
<programlisting language="n4js" linenumbering="unnumbered">~this[Object]</programlisting>
<simpara>instead of</simpara>
<programlisting language="n4js" linenumbering="unnumbered">this[~Object]</programlisting>
<simpara>This and Function Declaration
[[ex:This and Function Declaration]]
This example demonstrates the usage of functions annotated with <literal>@This</literal>.
By using the argument  <literal>union{A,B}</literal> it is possible to have two completely unrelated classes as the receiver type of the function <literal>logger</literal>. To pass an actual object the <literal>apply()</literal> method of the function is used.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">[language=n4js,escapeinside={^}{^}]
class A {
    log: string() { return "A was logged"; }
}

class B {
    log: string() { return "B was logged"; }
}

@This(union{A,B})
function logger() { console.log("~ "+this.log()+" ~"); }


var a: A = new A();
logger.apply(a,[]); // prints "~ A was logged ~"
logger.apply( new B(),[]) // prints "~ B was logged ~"</programlisting>
<simpara>This and Function Expressions
[[ex:This and Function Expressions]]
In this example a function is created via a function expression. The
function is then assigned to member field of class B. Via annotating the
expression with access to the receiver of type B is enabled.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">[language=n4js,escapeinside={^}{^}]
class B {
    log(): string { return "B was logged"; }     // method
    logMe : {@This(B) function():void}; // reference to a function
}

var b: B = new B();
b.logMe = @This(B) function() { console.log("*&gt;"+this.log()+"&lt;*"); }
b.logMe(); // prints "*&gt;B was logged&lt;*"</programlisting>
<simpara>This and Constructor Functions
[[ex:This and Constructor Functions]]
Note that if a function is called as a constructor function with new, the
type of <literal>this</literal> can be declared via annotation <literal>@This</literal>, as shown in the following
snippet:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">[language=n4js,escapeinside={^}{^}]
@This(
    ~Object with {
        w: number; h: number;
        area: {function():number};
    })
function Box(w: number w, h: number) {
    this.w = w;
    this.h = h;
    this.area = @This(
        ~Object with {
            w: number; h: number;
            area: {function():number};
        }) function() { return this.w * this.h }
}
var bError = Box(1,2)
var bOK = new Box(1,2)</programlisting>
<simpara>Inside the constructor function <literal>Box</literal>, <literal>this</literal> is bound to the structural type
definition due to the annotation.</simpara>
<simpara>Inside the nested function <literal>area</literal>, <literal>this</literal> is bound to the receiver object (if the function is called like <literal>bOk.area()</literal>). Again, this depends on the way the nested
function is called, which can usually not be determined at the
declaration location. The nested function must then be annotated
accordingly.</simpara>
<simpara>When calling this function, the type of this is checked against the
declared this type, which would cause an error in the first case.</simpara>
<simpara>The use of the <literal>@This</literal> annotation is not allowed on methods. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-2313"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-2313</link></simpara>
</sidebar>
<tip>
<simpara>Using constructor functions is not recommended and an error or warning will be created. This is only useful for adapting third-party library code. Even in the latter case, it would probably make more sense to declare a (library) \emph{class} Rectangle rather then defining the constructor function.}</simpara>
</tip>
<simpara>=== Identifier</simpara>
<simpara>==== Syntax</simpara>
<simpara>Identifiers as expressions are identifier references. They are defined
as follows:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">IdentifierRef &lt;Yield&gt;:
    id=[types::IdentifiableElement|BindingIdentifier&lt;Yield&gt;]
;

BindingIdentifier &lt;Yield&gt;:
    IDENTIFIER
    | &lt;!Yield&gt; 'yield'
    | N4Keyword
;</programlisting>
<simpara>==== Semantics</simpara>
<simpara>The type of an identifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> is resolved depending on its
binding and scope respectively (cf. [<link linkend="ECMA11a">ECMA11a(p.10.2.2.1GetIdentifierReference, p.p.56)</link>]  . The following scopes (aka
<emphasis>Lexical Environments</emphasis>) are defined:</simpara>
<itemizedlist>
<listitem>
<simpara>function local; local variables, parameters</simpara>
</listitem>
<listitem>
<simpara>zero or more function closure in case of nested functions</simpara>
</listitem>
<listitem>
<simpara>module</simpara>
</listitem>
<listitem>
<simpara>global</simpara>
</listitem>
</itemizedlist>
<simpara>These scope are nested as illustrated in .</simpara>
<simpara>Note that classes definitions and object literal do not define a scope:
members of a class or properties of an object literal are to be accessed
via <literal>this</literal>. Identifier references always reference declared elements, that is
to say either variable, function, or class declarations. Properties of
object literals or members of a class are referenced via
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>-</mo><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi></math> (see <xref linkend="Property Accessors"/>).</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="fig/scopes.png" align="center"/>
</imageobject>
<textobject><phrase>Scopes</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>An identifier may be bound to a variable (global or local variable,
parameter, variable defined in a function’s closure), or to a property
of an object. The latter case is known as property access as further
described in <xref linkend="Property Accessors"/>.</simpara>
<simpara>If an identifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> is accessed, the bound declared element
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math> must be readable if it is not used on the left-hand side
of an assignment expression. math:[\[\begin{aligned}
&amp; bind(i, D) \\</simpara>
<simpara>&amp; \hspace{2em}\land \not\exists\ \type{AssignmentExpression}\ ae \in i.container^*: \\
&amp; \hspace{3em} ae.left = i \\
&amp; \hspace{4em}\lor (\mu(ae.left)=\type{PropertyAccessExpression} \land ae.left.property=i): \\
&amp; \Rightarrow D.readable \\\end{aligned}\]]</simpara>
<simpara>==== Type Inference</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link></simpara>
</sidebar>
<simpara>An identifier reference <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> is bound to an identifiable
element <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>.</mo><mi>i</mi><mi>d</mi></math>, which is expressed with the function
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mi>i</mi><mrow><mi>i</mi><mo>.</mo><mi>i</mi><mi>d</mi></mrow></mfenced></math>. The type of the reference is then inferred
as follows: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>I</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mi>R</mi><mi>e</mi><mi>f</mi></mrow><mi> </mi><mi>i</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>i</mi><mi>d</mi><mi>r</mi><mi>e</mi><mi>f</mi><mo>.</mo><mi>i</mi><mi>d</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
<simpara>=== Literals</simpara>
<simpara>cf. [<link linkend="ECMA11a">ECMA11a(p.S11.1.3p.63, p.S7.8p.19ff)</link>].</simpara>
<simpara>==== Type Inference</simpara>
<simpara>The type of a literal can directly be derived from the grammar. The
following axioms are defined for literals:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>N</mi><mi>u</mi><mi>l</mi><mi>l</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mrow><mrow/><mrow><mn>7.8</mn><mn>.1</mn></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mi>:</mi><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mrow/><mrow><mn>7.8</mn><mn>.2</mn></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>N</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mi>:</mi><mrow><mi>i</mi><mi>n</mi><mi>t</mi></mrow><mi>o</mi><mi>r</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mrow><mn>7.8</mn><mn>.3</mn></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow/><mrow><mn>7.8</mn><mn>.4</mn></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>R</mi><mi>e</mi><mi>g</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi></mrow><mi>:</mi><mrow><mi>R</mi><mi>e</mi><mi>g</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></mrow></mrow><mrow/><mrow><mn>7.8</mn><mn>.5</mn></mrow></math></simpara>
<simpara>Note that there are no literals specific for <literal>pathSelector</literal> or <literal>i18nkey</literal>.</simpara>
<simpara>==== Integer Literals</simpara>
<simpara>Numeric literals representing integers in the range of JavaScript’s
int32 are inferred to the built-in primitive type <literal>int</literal> instead of <literal>number</literal>. The
following rules apply:</simpara>
<itemizedlist>
<listitem>
<simpara>Numeric literals with a fraction or using scientific notation, e.g. <literal>2.0</literal>
and <literal>2e0</literal>, respectively, are always inferred to <literal>number</literal>, even if they represent
integers in the range of int32.</simpara>
</listitem>
<listitem>
<simpara>Numeric literals that represent integers in the range of JavaScript’s
int32, i.e. from <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>-2</mn><mn>31</mn></msup></math> to <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mn>2</mn><mn>31</mn></msup><mo>-</mo><mn>1</mn></math>, are
inferred to <literal>int</literal>.</simpara>
</listitem>
<listitem>
<simpara>Hexadecimal and octal literals are always interpreted as positive
numbers, so all values above <literal>0x7fffffff</literal> and <literal>017777777777</literal> lie outside the range of int32 and will thus be inferred to <literal>number</literal>; this is an important difference to Java.
See below for further elaboration.</simpara>
</listitem>
</itemizedlist>
<simpara>There are differences to numeric literals in Java:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="12.5*"/>
<colspec colname="col_4" colwidth="25*"/>
<colspec colname="col_5" colwidth="12.5*"/>
<thead>
<row>
<entry align="left" valign="top"></entry>
<entry align="center" valign="top" namest="col_2" nameend="col_3">Java</entry>
<entry align="center" valign="top" namest="col_3" nameend="col_4">JavaScript &amp; N4JS</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Literal</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Value</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Type</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Value</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Type</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>2147483648</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>2147483647</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>0x7fffffff</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>0x80000000</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>+2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>0xffffffff</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>4294967295</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>0x100000000</literal></simpara></entry>
<entry align="center" valign="top" namest="col_2" nameend="col_3"><simpara><emphasis role="strong">n/a</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>4294967296</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>017777777777</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>2147483647</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>020000000000</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>+2147483648</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>037777777777</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>-1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>4294967295</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>040000000000</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>0</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>int</literal></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>4294967296</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>0100000000000</literal></simpara></entry>
<entry align="center" valign="top" namest="col_2" nameend="col_3"><simpara><emphasis role="strong">n/a</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis>8589934592</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>number</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The literals <literal>0x100000000</literal> and <literal>0100000000000</literal> produce a syntax error in Java.</simpara>
<simpara>Until IDE-1881  is complete, all built-in operations always return a <literal>number</literal> even if all operands are of type <literal>int</literal>. For the time being, we therefore interpret <literal>-1</literal> as
a negative integer literal (inferred to <literal>int</literal>), but <literal>-(1)</literal> as the negation of a
positive integer literal (inferred to <literal>number</literal>).</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1881"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1881</link></simpara>
</sidebar>
<simpara>=== Array Literal</simpara>
<simpara>==== Syntax</simpara>
<simpara>cf [<link linkend="ECMA11a">ECMA11a(p.S11.1.4, p.p.63)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ArrayLiteral &lt;Yield&gt; returns ArrayLiteral:
    {ArrayLiteral} '['
        elements+=ArrayPadding* (
            elements+=ArrayElement&lt;Yield&gt;
            (',' elements+=ArrayPadding* elements+=ArrayElement&lt;Yield&gt;)*
            (trailingComma?=',' elements+=ArrayPadding*)?
        )?
    ']'
;

/**
 * This array element is used to pad the remaining elements, e.g. to get the
 * length and index right
 */
ArrayPadding returns ArrayElement: {ArrayPadding} ',';

ArrayElement &lt;Yield&gt; returns ArrayElement: {ArrayElement} spread?='...'? expression=AssignmentExpression&lt;In=true,Yield&gt;;</programlisting>
<simpara>==== Type Inference</simpara>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-342"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-342</link></simpara>
</sidebar>
<simpara>In general, an array literal is inferred as
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>T</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math> (similar to the type of <literal>new Array()</literal>).
The interesting question is the binding of the type variable <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>.</simpara>
<simpara>The type of an array padding <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is inferred as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>:</mi><mrow><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mrow><mrow/><mtext>
</mtext></math></simpara>
<simpara>The element type of an array literal is simply inferred as the
(simplified) union of the type elements of the array. Thus, the type of
an array literal <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi></math> is inferred as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mfenced close=")" open="("><mi>a</mi></mfenced><mi>:</mi><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>T</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>a</mi><mo>.</mo><mrow><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi></mrow><mi>:</mi><msub><mi>T</mi><mi>e</mi></msub><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mo>⋃</mo><msub><mi>T</mi><mi>e</mi></msub></mrow></math></simpara>
<simpara>In other languages not supporting union types, the element type is often
inferred as the join (<link linkend="AC">LCST</link>) of the element types. Using a union type here
preserves more information (as the actual types are still known). For
many use cases the behavior is similar though, as the members of a union
type are the members of the join of the elements of the union.</simpara>
<simpara>Note that <literal>typeof [1,2,3]</literal> does not return <literal>Array&lt;number&gt;</literal> (as ECMAScript is not aware of the generic array type), but <literal>Object</literal>.</simpara>
<simpara>The type for all variables declared in this example is inferred to<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>g</mi><mi>t</mi><mi>;</mi></mrow></math>:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var names1          = ["Walter", "Werner"];
var names2          = new Array("Wim", "Wendelin");
var names3          = new Array&lt;string&gt;(3); // length is 3
var names4: Array&lt;string&gt;;</programlisting>
<simpara>Empty array literals are inferred to <literal>any</literal>, by default. We are not using <literal>Array&lt;?&gt;</literal> here
because then a typical JavaScript pattern would no longer be supported:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var a = [];
a.push('hello'); // would fail if a and thus [] were inferred to Array&lt;?&gt;</programlisting>
<simpara>There is an important exception, however: if a type expectation exists
for the empty array literal and the expected type is <literal>Array&lt;T&gt;</literal>, then this will be
used as the type of the array literal.</simpara>
<simpara>An empty array literal will be inferred as
follows:</simpara>
<itemizedlist>
<listitem>
<simpara>If there is a type expectation for the empty array literal and the
expected type is <literal>T</literal>, for any type <literal>T</literal>, then the type of the empty array
literal will be inferred to <literal>Array&lt;T&gt;</literal>.</simpara>
</listitem>
<listitem>
<simpara>Otherwise, the type of the empty array literal will be inferred to <literal>Array&lt;any</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>=== Object Literal</simpara>
<simpara>==== Syntax  <anchor xml:id="object-literal-syntax" xreflabel="[object-literal-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.1.5, p.p.65ff)</link>]
The syntax of an object literal is given by:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ObjectLiteral &lt;Yield&gt;: {ObjectLiteral}
    '{'
        ( propertyAssignments+=PropertyAssignment&lt;Yield&gt;
          (',' propertyAssignments+=PropertyAssignment&lt;Yield&gt;)* ','?
        )?
    '}'
;

PropertyAssignment &lt;Yield&gt;:
      PropertyNameValuePair&lt;Yield&gt;
    | PropertyGetterDeclaration&lt;Yield&gt;
    | PropertySetterDeclaration&lt;Yield&gt;
    | PropertyMethodDeclaration&lt;Yield&gt;
    | PropertyNameValuePairSingleName&lt;Yield&gt;
;


PropertyMethodDeclaration &lt;Yield&gt;:
    =&gt; ({PropertyMethodDeclaration}
        annotations+=Annotation*
        TypeVariables? returnTypeRef=TypeRef?
            (
                generator?='*'  LiteralOrComputedPropertyName&lt;Yield&gt; -&gt;MethodParamsAndBody&lt;Generator=true&gt;
                | LiteralOrComputedPropertyName&lt;Yield&gt; -&gt;MethodParamsAndBody &lt;Generator=false&gt;
            )
        )
    ';'?
;

PropertyNameValuePair &lt;Yield&gt;:
    =&gt; (
        {PropertyNameValuePair}
        annotations+=Annotation*
        declaredTypeRef=TypeRef? LiteralOrComputedPropertyName&lt;Yield&gt; ':'
    )
    expression=AssignmentExpression&lt;In=true,Yield&gt;
;

/*
 * Support for single name syntax in ObjectLiteral (but disallowed in actual object literals by ASTStructureValidator
 * except in assignment destructuring patterns)
 */
PropertyNameValuePairSingleName &lt;Yield&gt;:
    declaredTypeRef=TypeRef?
    identifierRef=IdentifierRef&lt;Yield&gt;
    ('=' expression=AssignmentExpression&lt;In=true,Yield&gt;)?
;

PropertyGetterDeclaration &lt;Yield&gt;:
    =&gt;(
        {PropertyGetterDeclaration}
        annotations+=Annotation*
        GetterHeader&lt;Yield&gt;
    )
    body=Block&lt;Yield=false&gt;
;

PropertySetterDeclaration &lt;Yield&gt;:
    =&gt;(
        {PropertySetterDeclaration}
        annotations+=Annotation*
        'set'
        -&gt;LiteralOrComputedPropertyName &lt;Yield&gt;
    )
    '(' fpar=FormalParameter&lt;Yield&gt; ')' body=Block&lt;Yield=false&gt;
;</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">import Address from "my/Address";
var simple = {name: "Walter", age: 72, address: new Address()};</programlisting>
<simpara>==== Properties</simpara>
<simpara>PropertyAssignments have common properties of PropertyNameValuePair,
PropertyGetterDeclaration, and PropertySetterDeclaration:</simpara>
<variablelist>
<varlistentry>
<term><literal>annotations</literal> </term>
<listitem>
<simpara>The annotations of the property assignment.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>name</literal> </term>
<listitem>
<simpara>The name of the property. This may be an identifier, a string or a
numeric literal. When comparing names, we implicitly assume the name to
be converted to an identifier, even if this identifier is not a valid
ECMAScript identifier.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>declaredType</literal> </term>
<listitem>
<simpara>The declared type of the property which may be null. This property is a
pseudo property for PropertySetterDeclaration, in this case it is
derived from the declared type of the setter’s formal parameter.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Additionally, we introduce the following pseudo properties to simplify
constraints:</simpara>
<variablelist>
<varlistentry>
<term><literal>isAccessor</literal> </term>
<listitem>
<simpara>The read-only boolean property. This is true if the property assignment
is a setter or getter declaration. This is comparable to ECMAScript’s
spec function <literal>IsAccessoprDescriptor</literal>.
For a given property assignment <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> this is
semantically equivalent to
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>=</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>G</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mo>∨</mo><mi>μ</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>=</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>S</mi><mi>e</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></math>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isData</literal> </term>
<listitem>
<simpara>The read-only boolean property. This is true if the property assignment
is a name value pair. For a given property assignment <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math>
this is semantically equivalent to
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>=</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>i</mi><mi>r</mi></mrow></math>. It is comparable to
ECMAScript’s spec function <literal>isDataDescriptor</literal>. The equation
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mi>s</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>=</mo><mo>¬</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>a</mi><mi>t</mi><mi>a</mi></math> is always true.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>==== Semantics <anchor xml:id="properties-semantics" xreflabel="[properties-semantics]"/></simpara>
<simpara>For a given object literal <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>l</mi></math> the
following constraints must hold (cf. [<link linkend="ECMA11a">ECMA11a(p.p.66)</link>]:</simpara>
<itemizedlist>
<listitem>
<simpara>Object literal may not have two PropertyNameValuePairs with the same
name in strict mode (cf. 4.a): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>t</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>p</mi><mi>a</mi><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo>,</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><msup><mi>a</mi><mi>'</mi></msup><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><msup><mi>a</mi><mi>'</mi></msup><mo>.</mo><mi>i</mi><mi>s</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mo>∧</mo><mi>p</mi><msup><mi>a</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
<listitem>
<simpara>Object literal may not have PropertyNameValuePair and
PropertyGetterDeclaration/PropertySetterDeclaration with the same name
(cf. 4.b/c):<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><mi>a</mi><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo>,</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><mi>g</mi><mi>s</mi><mi>d</mi><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>g</mi><mi>s</mi><mi>d</mi></mrow></mfenced><mo>≠</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>N</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>i</mi><mi>r</mi></mrow><mo>∧</mo><mi>p</mi><mi>g</mi><mi>s</mi><mi>d</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
<listitem>
<simpara>Object literal may not have multiple PropertyGetterDeclaration or
PropertySetterDeclaration with the same name (cf. 4.d):
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><mi>g</mi><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mo>,</mo><mi>p</mi><mi>g</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><msup><mi>g</mi><mi>'</mi></msup><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mrow><mi>p</mi><mi>g</mi></mrow><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mrow><mi>p</mi><msup><mi>g</mi><mi>'</mi></msup></mrow></mfenced><mo>=</mo><mi>μ</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>g</mi></mrow></mfenced><mo>∧</mo><mi>p</mi><msup><mi>g</mi><mi>'</mi></msup><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>g</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
<listitem>
<simpara>It is a SyntaxError if the Identifier <literal>eval</literal> or the Identifier
<literal>arguments</literal> occurs as the Identifier in a PropertySetParameterList of
a PropertyAssignment that is contained in strict code or if its
FunctionBody is strict code.
[<link linkend="ECMA11a">ECMA11a(p.p.66)</link>]</simpara>
</listitem>
<listitem>
<simpara>If two or more property assignments have the same name (and the
previous conditions hold), then the types of these assignments must
<literal>conform</literal>. That is to say that the inferred (but not declared) type of
all assignments must be type of probably declared types and if the types
are explicitly declared, they must be equal.</simpara>
</listitem>
<listitem>
<simpara>In N4JS mode, the name of a property must be a valid N4JSIdentifier:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>p</mi><mi>a</mi><mo>∈</mo><mi>o</mi><mi>l</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>s</mi><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>a</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow></mfenced><mo>=</mo><mrow><mi>N</mi><mn>4</mn><mi>J</mi><mi>S</mi><mi>I</mi><mi>d</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>==== Scoping and linking</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-173"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-173</link></simpara>
</sidebar>
<programlisting language="n4js" linenumbering="unnumbered">var p = {
    f: function() {
        console.log("p´s f");
    },
    b: function() {
        this.f();
    },
    o: {
        nested: "Hello"
    }
};
p.b();
p.o.nested;</programlisting>
<itemizedlist>
<listitem>
<simpara>Other properties within an object literal property can be accessed
using this. In the expression of property name value pairs, however,
<literal>this</literal> is not be bound to the containing object literal, but usually
to undefined or global.</simpara>
</listitem>
<listitem>
<simpara>The properties of an object literal are accessible from outside.</simpara>
</listitem>
<listitem>
<simpara>Nested properties of an object literal are also accessible from
outside.</simpara>
</listitem>
</itemizedlist>
<simpara>==== Type Inference <anchor xml:id="type-inference-3" xreflabel="[type-inference-3]"/>
  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-343"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-343</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-691"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-691</link></simpara>
</sidebar>
<simpara>An object literal implicitly extends <literal>Object</literal>, therefore, object literal types use structural typing. For details see <xref linkend="Structural_Typing"/>.
From a type systems point of view, the two variables <literal>ol</literal> and <literal>st</literal> below have the same type.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var ol = {
    s: "hello",
    n: 42
}
var st: ~Object with { s: string; n: number;};</programlisting>
<simpara>=== Parenthesized Expression and Grouping Operator</simpara>
<simpara>The grouping operator is defined here as a parenthesized expression.</simpara>
<simpara>==== Syntax <anchor xml:id="parenthesized-expression-grouping-syntax" xreflabel="[parenthesized-expression-grouping-syntax]"/></simpara>
<simpara>cf. [<link linkend="ECMA11a">ECMA11a(p.S11.1.6, p.p.67)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ParenExpression &lt;Yield&gt;: '(' expression=Expression&lt;In=true,Yield&gt; ')';</programlisting>
<simpara>==== Type Inference <anchor xml:id="Grouping-Operator-type-inference" xreflabel="[Grouping-Operator-type-inference]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The type of the grouping operator simply is the type of its nested
expression. The type if a parenthesized expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>e</mi></math> is
inferred as follows:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>'</mi><mrow><mo>(</mo><mi>'</mi></mrow></mrow><mi>e</mi><msup><mrow><mi>'</mi><mo>)</mo></mrow><mi>'</mi></msup><mi>:</mi><mi>T</mi></mrow><mrow><mi>e</mi><mi>:</mi><mi>T</mi></mrow><mrow><mn>11.1</mn><mn>.6</mn></mrow></math></simpara>
<simpara>Parenthesized Expression Type Examples
[[ex:Parenthesized Expression Type Examples]]
In the following listing, the type of the plain
expressions is equivalent to the parenthesized versions:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A{} class B extends A{}
var f: boolean; var a: A a; var b: B;

/* simple       &lt;-&gt;     parenthesized */
10;                     (10);
"hello";                ("hello");
true;                   (true);
a;                      (a);
10-5;                   (10-5);
f?a:b                   (f?a:b);</programlisting>
<simpara>=== Property Accessors</simpara>
<simpara>==== Syntax <anchor xml:id="property-accessor-syntax" xreflabel="[property-accessor-syntax]"/></simpara>
<simpara>Property accessors in N4JS are based on [<link linkend="ECMA11a">ECMA11a(p.S11.2.1, p.p.67ff)</link>]. They cannot only be used for
accessing properties of an object, but also for accessing members of a
class instance. In order to support parameterized calls, the syntax is
extended to optionally allow type arguments.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ParameterizedPropertyAccessExpression:
    target=PrimaryExpression&lt;Yield&gt; ParameterizedPropertyAccessExpressionTail&lt;Yield&gt;
;

IndexedAccessExpression:
    target=PrimaryExpression&lt;Yield&gt; IndexedAccessExpressionTail&lt;Yield&gt;
;

fragment IndexedAccessExpressionTail &lt;Yield&gt;*:
    '[' index=Expression&lt;In=true,Yield&gt; ']'
;

fragment ParameterizedPropertyAccessExpressionTail &lt;Yield&gt;*:
    '.' TypeArguments? property=[types::IdentifiableElement|IdentifierName]
;</programlisting>
<simpara>Note that in [<link linkend="ECMA11a">ECMA11a</link>], the <literal>index access</literal> is called <literal><emphasis>bracket notation</emphasis></literal>.</simpara>
<simpara>==== Properties <anchor xml:id="properties-1" xreflabel="[properties-1]"/></simpara>
<simpara>We define the following properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>target</literal> </term>
<listitem>
<simpara>The receiver of the property access.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>index</literal> </term>
<listitem>
<simpara>The index expression in case of an IndexedAccessExpression (returns
<math xmlns="http://www.w3.org/1998/Math/MathML"/> otherwise).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>property</literal> </term>
<listitem>
<simpara>The name of the property in case of non-indexed-access expressions
(returns <math xmlns="http://www.w3.org/1998/Math/MathML"/> otherwise, although the index may be
interpreted as property name).</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>We define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>isDotAccess</literal> </term>
<listitem>
<simpara>Read-only boolean property, returns true for non-index access expression
(similar to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>≠</mo><mrow><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>e</mi><mi>d</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></math>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isIndexAccess</literal> </term>
<listitem>
<simpara>Read-only boolean property, returns true for index access expression
(similar to <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>=</mo><mrow><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>e</mi><mi>d</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></math>.<?asciidoc-br?>
The equation <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>=</mo><mo>¬</mo><mi>p</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi></math> is
always true.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>name</literal> </term>
<listitem>
<simpara>Returns the name of the property. This is either the
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi></math> converted to a simple name or the index converted
to a name (where possible) if it is an indexed-accessed expression.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>==== Semantics <anchor xml:id="property-acessors-semantics" xreflabel="[property-acessors-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-12"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-12</link></simpara>
</sidebar>
<simpara>The parameterization is part of the property access in case of generic
methods. For generic functions, a parameterized function call is
introduced (cf. ). The constraints are basically similar.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If dot notation is used in N4JS mode, the referenced property must
exist unless receiver is a dynamic type: <?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>∧</mo><mo>¬</mo><mi>R</mi><mo>.</mo><mi>d</mi><mi>y</mi><mi>n</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∃</mo><mi>m</mi><mo>∈</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></math></simpara>
</listitem>
<listitem>
<simpara>If dot notation is used and the referenced property exists, then the
property must be accessible:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo>∧</mo><mo>¬</mo><mi>R</mi><mo>.</mo><mi>d</mi><mi>y</mi><mi>n</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mo>∃</mo><mi>m</mi><mo>∈</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow></mfenced><mi>α</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>a</mi><mi>e</mi></mrow><mi>m</mi></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>If dot notation is used and the referenced property exists and this
property is a member with a declared <literal>@This</literal> type (only possible for methods or
field accessors), then the receiver must be a subtype of the declared <literal>@This</literal>
type.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-422"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-422</link></simpara>
</sidebar>

<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-656"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-656</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1734"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1734</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>A limited form of computed-name indexed-access is allowed in N4JS
mode. In case the receiver is of dynamic type, the index can be any
expression . Otherwise, the indexed-access is limited in that the index
must be a string literal. Feasible targets of such accesses are the same
as for dot-access.</simpara>
<simpara>This notation is useful when interoperating with libraries that define
members whose names contain special characters (for example, a field
name starting with commercial-at).</simpara>
</listitem>
<listitem>
<simpara>Additionally, an indexed-access expression is allowed when targeting
one of the types</simpara>
<simpara>or subtypes, for (not including subtypes of and not for and ), and for
dynamic types. It is not allowed to access members of enums in
particular. That is to say, for an indexed-access expression
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mi>a</mi><mi>e</mi></math>, the following constraint must hold:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mi>a</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>T</mi><mo>,</mo><mi>T</mi><mo>∈</mo><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mo>,</mo><mi>A</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>I</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∨</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>i</mi><mi>a</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>In N4JS mode, if the receiver is an array and is not dynamic, in
case of index access the index expression must be a number:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi></mrow><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi></mrow><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mrow><mo>[</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></math>
        \end{aligned}\]]</simpara>
</listitem>
<listitem>
<simpara>In N4JS mode, if the receiver is a subtype of types or and is not
dynamic, in case of index access the index expression must be a
number:  <?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mfenced close=")" open="("><mrow><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mo>∨</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>In N4JS mode, if the receiver is an iterable and is not dynamic, in
case of index access the index expression must be a property access
expression to the built-in symbol :<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>=</mo><mrow><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi></mrow><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>I</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>μ</mi><mfenced close=")" open="("><mrow><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi></mrow></mfenced><mo>=</mo><mrow><mi>I</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mi>e</mi><mi>d</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mi>S</mi><mi>y</mi><mi>m</mi><mi>b</mi><mi>o</mi><mi>l</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mo>=</mo><mi>"</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>"</mi><mtext>
</mtext></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/238"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-238</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-837"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-837</link></simpara>
</sidebar>
<simpara>Although index access is very limited, it is still possible to use
immediate instances of <literal>Object</literal> in terms of a map (but this applies only to index access, not the dot notation):</simpara>
<simpara>Object as Map</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var map: Object = new Object();
map["Kant"] = "Imperative";
map["Hegel"] = "Dialectic";
map.spinoza = "Am I?";  // error: Couldn't resolve reference to IdentifiableElement 'spinoza'.</programlisting>
<simpara>For a parameterized property access expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>a</mi><mi>e</mi></math>, the
following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The receiver or target must be a function or method:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>The number of type arguments must match the number of type
parameters of the generic function or method:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>|</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mo>=</mo><mo>|</mo><mi>p</mi><mi>a</mi><mi>e</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo></math></simpara>
</listitem>
<listitem>
<simpara>The type arguments of a parameterized property access expression
must be subtypes of the boundaries of the parameters of the called
generic method.</simpara>
</listitem>
</orderedlist>
<simpara>Also see constraints on read (<xref linkend="req:Read_Access_to_Identifier"/>) and write
(<xref linkend="req:Write_Acccess"/>) access.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-5" xreflabel="[type-inference-5]"/>
  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-182"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-182</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-183"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-183</link></simpara>
</sidebar>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.2.1, p.p.67ff)</link>]</simpara>
<simpara>We define the following type inferencing rules for property accessors:</simpara>
<itemizedlist>
<listitem>
<simpara>The type of an indexed-access expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is inferred
as follows task:IDE-342]: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>:</mi><mi>T</mi></mrow><mrow><mo>¬</mo><mi>p</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>d</mi><mi>y</mi><mi>n</mi><mo>∨</mo><mi>p</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mo>[</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow></math> &amp; \tee p.target: \type{Array&lt;T&gt;}} \\
    &amp; \infer{\tee p: \type{any}}{else}
    \end{aligned}\]]</simpara>
</listitem>
<listitem>
<simpara>The type of a property access expression is inferred as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi> </mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>:</mi><mi>T</mi></mrow><mrow><mn>174</mn><mi>;</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>:</mi><mi>R</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>The type of a parameterized access expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is
inferred as follows: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>:</mi><mi>T</mi></mrow><mrow><mo>∃</mo><mi>m</mi><mo>∈</mo><mi>p</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>:</mi><mi>m</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>p</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>m</mi><mi>:</mi><mi>T</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>p</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>
<simpara>=== New Expression
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-192"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-192</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-204"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-204</link></simpara>
</sidebar>
<simpara>cf. [<link linkend="ECMA11a">ECMA11a(p.S11.2.2, p.p.68)</link>]</simpara>
<simpara>==== Syntax <anchor xml:id="new-expression-syntax" xreflabel="[new-expression-syntax]"/></simpara>
<screen>NewExpression: 'new' callee=MemberExpression&lt;Yield&gt; (-&gt; TypeArguments)?
        (=&gt; withArgs?='(' Arguments&lt;Yield&gt;? ')' )?</screen>
<screen>import Address from "my/Address";

var a = new Address();
// a.type := my/Address

class C&lt;T&gt; {
    constructor(param: T) {}
}
var c = new C&lt;string&gt;("hello");</screen>
<simpara>==== Semantics <anchor xml:id="new-expression-semantics" xreflabel="[new-expression-semantics]"/></simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mi>e</mi></math> be a new expression, with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mi>e</mi><mo>.</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>e</mi><mi>e</mi><mi>:</mi><mi>C</mi></math>. The following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The callee must be a constructor type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>C</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mi>?</mi></mfenced></mrow></math> or a constructable type.</simpara>
</listitem>
<listitem>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi></math> be the type argument of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, that is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>=</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>O</mi></math>. In that case,</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi></math> must not be an interface or enum:
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>μ</mi><mn>169</mn><mi>;</mi><mo>∉</mo><mfenced close="}" open="{"><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi></mrow><mrow><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi></math> must not contain any wildcards.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>O</mi></math> must not be a type variable.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is not a constructor type, it must be a
constructable type, that is one of the following:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfenced close="}" open="{"><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mrow><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mrow><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mrow><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow><mrow><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow><mrow><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi></mrow><mrow><mi>D</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><mrow><mi>R</mi><mi>e</mi><mi>g</mi><mi>E</mi><mi>x</mi><mi>p</mi></mrow><mrow><mi>E</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi></mrow></mfenced></math>
In particular, it must not refer to a primitive type or a defined
functions (i.e., subtypes of ) cannot be used in new-expressions in
N4JS.</simpara>
</listitem>
</orderedlist>
<simpara>Remarks:</simpara>
<simpara>to 1) The type of an abstract class <literal>A</literal> is <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi></mrow></math>.
Or in other words: Only instantiable classes have an inferred type of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mfenced close="}" open="{"><mrow><mo>.</mo><mo>.</mo></mrow></mfenced></math>.</simpara>
<simpara>to 2) Even though it is possible to use the constructor type of an
abstract class – concrete subclasses with override compatible
constructor signature will be subclasses of this constructor.</simpara>
<simpara>to 3) It is not possible to refer to union or intersection at that
location. So this is not explicitly denied here since it is not possible
anyway.</simpara>
<simpara>Abstract classes and construction
[[ex:Abstract classes and construction]]
The following examples demonstrates the usage of abstract
classes and constructor types, to make the first two constraints more
clearer:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */

abstract class A {}
class B extends A {}

// XPECT errors --&gt; "Cannot instantiate abstract class A." at "A"
var x = new A();
// XPECT noerrors --&gt;
var y = new B();

function foo(ctor : constructor{A}) {
    // XPECT noerrors --&gt;
    return new ctor();
}

// XPECT errors --&gt; "type{A} is not a subtype of constructor{A}." at "A"
foo(A);
// XPECT noerrors --&gt;
foo(B);</programlisting>
<simpara>==== Type Inference <anchor xml:id="type-inference-6" xreflabel="[type-inference-6]"/></simpara>
<simpara>The type of a new expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mi>e</mi></math> is inferred as follows:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>n</mi><mi>e</mi><mi>:</mi><mi>C</mi></mrow><mrow><mi>n</mi><mi>e</mi><mo>.</mo><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>e</mi><mi>e</mi><mi>:</mi><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>C</mi></mrow></mrow></math></simpara>
<simpara>For classes, constructors are described in <xref linkend="Constructor"/>.</simpara>
<simpara>In N4JS it is not allowed to call new on a plain function. For example:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">function foo() {}
var x = new foo();</programlisting>
<simpara>will issue an error.</simpara>
<simpara>=== Function Expression</simpara>
<simpara>See <xref linkend="Functions.adoc"/> for details.</simpara>
<simpara>=== Function Calls
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-186"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-186</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-851"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-851</link></simpara>
</sidebar>
<simpara>In N4JS, a function call [<link linkend="ECMA11a">ECMA11a(p.S11.2.3)</link>] is similar to a method call. Additionally to
the ECMAScript’s CallExpression, a ParameterizedCallExpression is
introduced to allow type arguments passed to plain functions.</simpara>
<simpara>==== Syntax
 <anchor xml:id="function-calls-syntax" xreflabel="[function-calls-syntax]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-177"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-177</link></simpara>
</sidebar>
<simpara>Similar to [<link linkend="ECMA11a">ECMA11a(p.S11.2.3, p.p.68ff)</link>], a function call is defined as follows:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">CallExpression &lt;Yield&gt;:
    target=IdentifierRef&lt;Yield&gt;
    ArgumentsWithParentheses&lt;Yield&gt;
;

ParameterizedCallExpression &lt;Yield&gt;:
    TypeArguments
    target=IdentifierRef&lt;Yield&gt;
    ArgumentsWithParentheses&lt;Yield&gt;
;

fragment ArgumentsWithParentheses &lt;Yield&gt;*:
    '(' Arguments&lt;Yield&gt;? ')'
;

fragment Arguments &lt;Yield&gt;*:
    arguments+=AssignmentExpression&lt;In=true,Yield&gt; (',' arguments+=AssignmentExpression&lt;In=true,Yield&gt;)* (',' spread?='...' arguments+=AssignmentExpression&lt;In=true,Yield&gt;)?
    | spread?='...' arguments+=AssignmentExpression&lt;In=true,Yield&gt;
;</programlisting>
<simpara>==== Semantics <anchor xml:id="function-calls-semantics" xreflabel="[function-calls-semantics]"/></simpara>
<simpara>For a given call expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> bound to a method or function
declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math>, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>If less arguments are provided than formal parameters were declared,
the missing formal parameters must have been declared optional:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mi>l</mi><mi>t</mi><mi>;</mi><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>∀</mo><mo>|</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>:</mi><msub><mi>F</mi><mi>p</mi></msub><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mo>.</mo><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>If more arguments are provided than formal parameters were declared,
the last formal parameter must have been declared variadic:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>|</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mi>g</mi><mi>t</mi><mi>;</mi><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mrow><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>d</mi><mi>i</mi><mi>c</mi></math></simpara>
</listitem>
<listitem>
<simpara>Types of provided arguments must be subtypes of the formal parameter
types:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mn>0</mn><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>m</mi><mi>i</mi><mi>n</mi><mfenced close=")" open="("><mrow><mo>|</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo></mrow><mrow><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo></mrow></mfenced><mi>:</mi><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><msub><mi>s</mi><mi>i</mi></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub></math></simpara>
</listitem>
<listitem>
<simpara>If more arguments are provided than formal parameters were declared,
the type of the exceeding arguments must be a subtype of the last
(variadic) formal parameter type:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∀</mo><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>l</mi><mi>t</mi><mi>;</mi><mi>i</mi><mo>≤</mo><mo>|</mo><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><mi>s</mi><mo>|</mo><mi>:</mi><mi>f</mi><mo>.</mo><mi>a</mi><mi>r</mi><mi>g</mi><msub><mi>s</mi><mi>i</mi></msub><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mrow><mo>|</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>-</mo><mn>1</mn></mrow></msub></math></simpara>
</listitem>
</itemizedlist>

<itemizedlist>
<listitem>
<simpara>The number of type arguments in a parameterized call expression must
be equal to the number of type parameters of the generic function /
method and the type arguments must be subtypes of the corresponding
declared upper boundaries of the type parameters of the called generic
function.</simpara>
</listitem>
</itemizedlist>
<simpara>Note that (for a limited time), constraints
<xref linkend="req:Function_Call_Constraints"/> and
<xref linkend="req:Parameterized_Function_Call_Constraints"/> are not applied if the the
type of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> is <literal>Function</literal>. See <xref linkend="Function_Object_Type"/>.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-7" xreflabel="[type-inference-7]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link></simpara>
</sidebar>
<simpara>A call expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></math> is bound to a method (<xref linkend="_methods"/>) or function
declaration (which may be part of a function definition (<xref linkend="Function_Definition"/> or specified via a function type <xref linkend="Fucntion_Type"/>) <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> (via evaluation of <literal>MemberExpression</literal>. The type of the call is inferred from the function declaration or type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> as follows:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><mi>F</mi></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>F</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>T</mi></mrow></math></simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-205"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-205</link></simpara>
</sidebar>
<simpara>A generic method invocation may be parameterized as well. This is rarely
required as the function argument types are usually inferred from the
given arguments. In some cases, for instance with pathSelectors, this is
useful. In that case, the type variable defined in the generic method
declaration is explicitly bound to types by using type arguments. See
<xref linkend="Property_Accessors"/> for semantics and type inference.</simpara>
<simpara>[[ex:Generic Method Invocation]]
This examples demonstrate how to explicitly
define the type argument in a method call in case it cannot be inferred
automatically.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C {
    static &lt;T&gt; foo(p: pathSelector&lt;T&gt;): void {..}
};
C.&lt;my.Address&gt;foo("street.number");</programlisting>
<simpara>Note that in many cases, the type inferencer should be able to infer the
type automatically. For example, for a method</simpara>
<programlisting language="n4js" linenumbering="unnumbered">function &lt;T&gt; bar(c: T, p: pathSelector&lt;T&gt;): void {..};</programlisting>
<simpara>and a function call</simpara>
<programlisting language="n4js" linenumbering="unnumbered">bar(context, "some.path.selector");
[source,n4js]</programlisting>
<simpara>the type variable <literal>T</literal> can be automatically bound to the type of variable <literal>context</literal>.</simpara>
<simpara>=== Postfix Expression</simpara>
<simpara>==== Syntax <anchor xml:id="postfix-expression-syntax" xreflabel="[postfix-expression-syntax]"/></simpara>
<programlisting language="n4js" linenumbering="unnumbered">PostfixExpression returns Expression: LeftHandSideExpression
         (=&gt;({PostfixExpression.expression=current} /* no line terminator here */ op=PostfixOperator))?
    ;
enum PostfixOperator: inc='++' | dec='--';</programlisting>
<simpara>==== Semantics and Type Inference <anchor xml:id="semantics-and-type-inference" xreflabel="[semantics-and-type-inference]"/></simpara>
<simpara>The type inference and constraints for postfix operators <literal><literal>` and
</literal><math xmlns="http://www.w3.org/1998/Math/MathML"><mo>-</mo><mo>-</mo></math>`</literal>, cf.
[<link linkend="ECMA11a">ECMA11a(p.S11.3.1, p.p.70)</link>], [<link linkend="ECMA11a">ECMA11a(p.S11.3.1, p.p.70)</link>], are defined similarly to their prefix
variants (unary expressions), see <xref linkend="Unary Expression"/>.</simpara>
<simpara> For a given postfix expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mo>+</mo><mo>+</mo></mrow><mrow><mo>-</mo><mo>-</mo></mrow></mfenced></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>T</mi></math>,
the following constraints must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>In N4JS mode, the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> of the expression must be a
number.<?asciidoc-br?></simpara>
</listitem>
<listitem>
<simpara>If
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mspace width="0.278em"/><mi>p</mi><mi>a</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>∧</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"/> both <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>e</mi><mi>t</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>e</mi><mi>t</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> must be defined. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-737"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-737</link></simpara>
</sidebar>
<simpara>=== Unary Expression</simpara>
<simpara>==== Syntax <anchor xml:id="unary-expression-syntax" xreflabel="[unary-expression-syntax]"/></simpara>
<variablelist>
<varlistentry>
<term>We define the following unary operators and expression, similar to [<link linkend="ECMA11a">ECMA11a(p.p.70ff)</link>]</term>
<listitem>
</listitem>
</varlistentry>
</variablelist>
<programlisting language="n4js" linenumbering="unnumbered">UnaryExpression returns Expression:
      PostfixExpression
    | ({UnaryExpression} op=UnaryOperator expression=UnaryExpression);
enum UnaryOperator: delete | void | typeof | inc='++' | dec='--' | pos='+' | neg='-' | inv='$\sim$' | not='!';</programlisting>
<simpara>==== Semantics <anchor xml:id="unary-expression-semantics" xreflabel="[unary-expression-semantics]"/></simpara>
<simpara>For semantics of the delete operator, see also cite:[MozillaJSRef(<link xl:href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/delete">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/delete</link>)]</simpara>
<simpara>For a given unary expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>e</mi></mrow></math>, the following constraints must
hold:</simpara>
<itemizedlist>
<listitem>
<simpara>In strict mode, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math> must be a reference to a
property of an object literal, a member of a class type, or to a
property of the global type (i.e., the reference must be bound, and the
bound target must not be a variable).</simpara>
</listitem>
<listitem>
<simpara>In N4JS mode, the referenced property or member must not be declared
in the containing type and the containing type reference must be
declared dynamic.</simpara>
</listitem>
</itemizedlist>

<simpara>There are no specific constraints defined for with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow></math></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>

<simpara>There are no specific constraints defined for unary expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math>
with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>o</mi><mi>f</mi></mrow></math>. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>

<simpara>For a given unary expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mo>+</mo><mo>+</mo></mrow><mrow><mo>-</mo><mo>-</mo></mrow></mfenced></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>T</mi></math>,
the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>If mode is N4JS,  the type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math> of the expression must be a
number <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>U</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>y</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
<listitem>
<simpara>If
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mspace width="0.278em"/><mi>p</mi><mi>a</mi><mfenced close=")" open="("><mi>p</mi></mfenced><mo>∧</mo><mi>p</mi><mi>a</mi><mo>.</mo><mi>i</mi><mi>s</mi><mi>D</mi><mi>o</mi><mi>t</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi></math>
<math xmlns="http://www.w3.org/1998/Math/MathML"/> both <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>e</mi><mi>t</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>e</mi><mi>t</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> must be defined. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-768"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-768</link></simpara>
</sidebar>

<simpara>For a given unary expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>∈</mo><mfenced close="}" open="{"><mo>+</mo><mo>-</mo><mo>∼</mo></mfenced></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>T</mi></math>, the following constraints must hold: </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>In N4JS mode, the type T of the expression must be a number:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mrow><mi>U</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>y</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>

<simpara>There are no specific constraints defined for with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>u</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mo>!</mo></math>.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-8" xreflabel="[type-inference-8]"/></simpara>
<simpara>The following operators have fixed types independent of their operand
types:
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<screen>math:[\[\begin{aligned}
&amp;\infer{\tee \lstnfbnf{'delete'}\ expression: \type{boolean}}{}     \tag{\S 11.4.1}\\
&amp;\infer{\tee \lstnfbnf{'void'}\ expression: \type{undefined}}{}     \tag{\S 11.4.2}\\
&amp;\infer{\tee \lstnfbnf{'typeof'}\ expression: \type{string}}{}  \tag{\S 11.4.3}\\
&amp;\infer{\tee \lstnfbnf{('++'|'$--$'|'+'|'$-$'|'~')}\ expression: \type{number}}{}   \tag{\S 11.4.4-8}\\
&amp;\infer{\tee \lstnfbnf{'!'}\ expression: \type{boolean}}{}  \tag{\S 11.4.9}\end{aligned}\]]</screen>
<simpara>=== Multiplicative Expression</simpara>
<simpara>==== Syntax <anchor xml:id="multiplicative-expression-syntax" xreflabel="[multiplicative-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.p.73ff)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">MultiplicativeExpression returns Expression: UnaryExpression
      (=&gt;({MultiplicativeExpression.lhs=current} op=MultiplicativeOperator) rhs=UnaryExpression)*;
enum MultiplicativeOperator: times='*' | div='/' | mod='%';</programlisting>
<simpara>==== Semantics <anchor xml:id="multiplicative-expression-semantics" xreflabel="[multiplicative-expression-semantics]"/></simpara>
<simpara>For a given multiplicative expression the following constraints must hold in N4JS
mode :</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The types of the operands must be subtypes of number:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>M</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>
<simpara>==== Type Inference
  <anchor xml:id="type-inference-9" xreflabel="[type-inference-9]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The inferred type of a multiplicative expression always is number:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>M</mi><mi>u</mi><mi>l</mi><mi>t</mi><mi>i</mi><mi>p</mi><mi>l</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
<simpara>=== Additive Expression</simpara>
<simpara>==== Syntax <anchor xml:id="additive-expression-syntax" xreflabel="[additive-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.p.75ff)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">AdditiveExpression returns Expression: MultiplicativeExpression
    (=&gt;({AdditiveExpression.lhs=current} op=AdditiveOperator) rhs=MultiplicativeExpression)*;
enum AdditiveOperator: add='+' | sub='-';</programlisting>
<simpara>==== Semantics <anchor xml:id="additive-expression-semantics" xreflabel="[additive-expression-semantics]"/></simpara>
<simpara>
For a given additive expression the following constraints must hold in
N4JS mode:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The types of the operands must be subtypes of number if the operator
is not ’+’, otherwise, any type could be used:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>A</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi> </mi><mi>e</mi><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow><mi>e</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>≠</mo><mi>A</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>v</mi><mi>e</mi><mi>O</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>.</mo><mi>A</mi><mi>D</mi><mi>D</mi></mrow></math></simpara>
</listitem>
</itemizedlist>
<simpara>==== Type Inference <anchor xml:id="type-inference-10" xreflabel="[type-inference-10]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The type of an additive expression is usually inferred to . The result
for the addition operator may only be a number if both operands are
numbers, booleans, or one is boolean or number and the other is
undefined or null.</simpara>
<simpara>We first define two helper rules to simplify the addition operator
condition:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mo>[</mo><mi>n</mi><mi>b</mi></mrow></math>{nb(T)}{T = \type{number} \lor T = \type{boolean}}
&amp;\infer[nb]{nb(expr)}{nb\tee expr}\\
&amp;\infer[un]{un(T)}{T = \type{undefined} \lor T = \type{null}}
&amp;\infer[un]{un(expr)}{un\tee expr.lhs \lor un\tee expr.rhs}\end{aligned}\]]</simpara>
<simpara>The type of an additive expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> is inferred as
follows: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>e</mi><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow><mrow><mi>e</mi><mo>.</mo><mi>o</mi><mi>p</mi><msup><mo>=</mo><mi>'</mi></msup><msup><mo>+</mo><mi>'</mi></msup><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>¬</mo><mfenced close=")" open="("><mrow><mi>n</mi><mi>b</mi><mfenced close=")" open="("><mrow><mi>e</mi><mo>.</mo><mi>l</mi><mi>h</mi><mi>s</mi></mrow></mfenced><mo>∧</mo><mi>n</mi><mi>b</mi><mfenced close=")" open="("><mrow><mi>e</mi><mo>.</mo><mi>r</mi><mi>h</mi><mi>s</mi></mrow></mfenced></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>¬</mo><mrow><mo>(</mo><mi>u</mi><mi>n</mi><mfenced close=")" open="("><mi>e</mi></mfenced><mo>∧</mo><mfenced close=")" open="("><mrow><mi>n</mi><mi>b</mi><mfenced close=")" open="("><mrow><mi>e</mi><mo>.</mo><mi>l</mi><mi>h</mi><mi>s</mi></mrow></mfenced><mo>∨</mo><mi>n</mi><mi>b</mi><mfenced close=")" open="("><mrow><mi>e</mi><mo>.</mo><mi>r</mi><mi>h</mi><mi>s</mi></mrow></mfenced></mrow></mfenced></mrow></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>e</mi><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mtext>
</mtext></math></simpara>
<formalpara>
<title>Type of addition expression</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">1+2;            // number 3
"1"+"2";        // string "12"
"1"+2;          // string "12"
1+true;         // number 2
false+1;        // number 1
"1"+true;       // string "1true"
"1"+null;       // string "1null"
1+null;         // number 1
1+undefined;    // number NaN
"1"+undefined;  // string "1undefined"</programlisting>
</para>
</formalpara>
<simpara>=== Bitwise Shift Expression</simpara>
<simpara>==== Syntax <anchor xml:id="bitwise-shift-expression-syntax" xreflabel="[bitwise-shift-expression-syntax]"/></simpara>
<simpara> Cf. [<link linkend="ECMA11a">ECMA11a(p.p.76f)</link>]</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-288"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-288</link></simpara>
</sidebar>
<programlisting language="n4js" linenumbering="unnumbered">ShiftExpression returns Expression: AdditiveExpression
    (=&gt;({ShiftExpression.lhs=current} op=ShiftOperator rhs=AdditiveExpression))*
;

ShiftOperator returns ShiftOperator:
      '&gt;' '&gt;' '&gt;'? // SHR, USHR
    | '&lt;' '&lt;'  // SHL
    ;</programlisting>
<simpara>==== Semantics <anchor xml:id="bitwise-shift-expression-semantics" xreflabel="[bitwise-shift-expression-semantics]"/></simpara>
<simpara>For a given bitwise shift expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> the following constraints must hold in N4JS mode:  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-771"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-771</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The types of the operands must be both number.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>B</mi><mi>i</mi><mi>t</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>S</mi><mi>h</mi><mi>i</mi><mi>f</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi> </mi><mi> </mi><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>
<simpara>==== Type Inference <anchor xml:id="type-inference-11" xreflabel="[type-inference-11]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The type returned by a bitwise shift expression is always :</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi> </mi><mfenced close=")" open="("><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfenced><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mrow><mn>11.7</mn><mn>.1</mn><mo>/</mo><mn>2</mn></mrow><mtext>
</mtext></math></simpara>
<simpara>=== Relational Expression</simpara>
<simpara>==== Syntax <anchor xml:id="relational-expression-syntax" xreflabel="[relational-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.p.77ff)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">RelationalExpression returns Expression: ShiftExpression
    (=&gt;({RelationalExpression.lhs=current} op=RelationalOperator) rhs=ShiftExpression)*;

RelationalExpressionNoIn returns Expression: ShiftExpression
    (=&gt;({RelationalExpression.lhs=current} op=RelationalOperatorNoIn) rhs=ShiftExpression)*;

enum RelationalOperator:
    lt='&lt;' | gt='&gt;' | lte='&lt;=' | gte='&gt;=' | instanceof | in;
RelationalOperatorNoIn returns RelationalOperator:
    '&lt;' | '&gt;' | '&lt;=' | '&gt;=' | 'instanceof';</programlisting>
<simpara>==== Semantics <anchor xml:id="relational-expression-semantics" xreflabel="[relational-expression-semantics]"/></simpara>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>For a given relational expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>l</mi><mi>t</mi><mi>;</mi></mrow><mrow><mi>g</mi><mi>t</mi><mi>;</mi></mrow><mrow><mn>8656</mn><mi>;</mi></mrow><mrow><mi>g</mi><mi>t</mi><mi>;</mi><mo>=</mo></mrow></mfenced></math>
in N4JS mode, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>The operands must have the same type and the type must be either a
number, string, or boolean: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mn>8656</mn><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>l</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mfenced></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mn>8656</mn><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>l</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>O</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>O</mi><mo>∉</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mn>8656</mn><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mfenced></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mn>8656</mn><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi>:</mi><mi>O</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>O</mi><mo>∉</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi><mo>,</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mtext>
</mtext></math></simpara>
</listitem>
</itemizedlist>

<simpara>For a given relational expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> with
 <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><mi>f</mi></mrow></math>, the following constraints
must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The right operand of the instanceof operator must be a <literal>Function</literal>
<footnote><simpara>Only <literal>Function</literal> implements the ECMAScript specification property <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mo>[</mo><mrow><mo>[</mo><mi>h</mi><mi>a</mi><mi>s</mi><mi>I</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow></mrow></math></simpara></footnote>$].
Thus instanceof expressions are rewritten by the compiler for other types.
Note that a reference to a class returns the constructor type, which actually is a function itself.
In other words, <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><msup><mi>f</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow></mrow></mrow><mrow/><mtext>
</mtext></math>
is contained in the the first type rule.] 
, an object type
reference
<footnote><simpara>Includes interfaces, since an interface type reference is a subtype of object type reference: <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi></mrow></mrow><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mrow></math></simpara></footnote>
or an enum type reference.     <?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><msup><mi>f</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mrow><mrow/><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><msup><mi>f</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mrow></mrow><mrow/><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><msup><mi>f</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mrow><mi>N</mi><mn>4</mn><mi>E</mi><mi>n</mi><mi>u</mi><mi>m</mi></mrow></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-652"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-652</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-681"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-681</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/631"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-631</link></simpara>
</sidebar>
<simpara>The type of a definition site structural classifier <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is
not of type <literal>C</literal>. Thus, the <literal>instanceof</literal> operator cannot be used for structural types.
Use-site structural typing is also not possible since `~
` would be
interpreted (by the parser) as a binary operator.</simpara>

<simpara>
For a given relational expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>i</mi><mi>n</mi></mrow></math>, the following constraints must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>The right operand of the in operator must be an <literal>Object</literal>:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><msup><mi>n</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
<listitem>
<simpara>In N4JS mode,the left operand is restricted to be of type <literal>string</literal> or <literal>number</literal>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>i</mi><msup><mi>n</mi><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi> </mi><mi>l</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</orderedlist>
<simpara>A special feature of N4JS is support for interface type references in
combination with the <literal>instance of</literal> operator. The compiler rewrites the code to make this work. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-561"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-561</link></simpara>
</sidebar>
<simpara><literal>instanceof</literal> with Interface</simpara>
<simpara>The following example demonstrates the use of the operator with an interface. This is, of course, not working in pure ECMAScript.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">interface I {}

class A implements I {}
class B extends A {}
class C {}

function f(name: string, p: any) {
    if (p instanceof I) {
        console.log(name + " is instance of I");
    }
}

f("A", new A())
f("B", new B())
f("C", new C())</programlisting>
<simpara>This will print out</simpara>
<programlisting language="n4js" linenumbering="unnumbered">A is instance of I
B is instance of I</programlisting>
<simpara>==== Type Inference <anchor xml:id="type-inference-12" xreflabel="[type-inference-12]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The type of a relational expression always is ;
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mn>8656</mn><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><msup><mo>=</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mi>o</mi><msup><mi>f</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mi>i</mi><msup><mi>n</mi><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi>:</mi><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mrow/><mrow><mn>11.8</mn><mn>.1</mn><mo>-</mo><mn>6</mn></mrow></math></simpara>
<simpara>=== Equality Expression</simpara>
<simpara>==== Syntax <anchor xml:id="equality-expression-syntax" xreflabel="[equality-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.p.80ff)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">EqualityExpression returns Expression: RelationalExpression
    (=&gt;({EqualityExpression.lhs=current} op=EqualityOperator) rhs=RelationalExpression)*;

EqualityExpressionNoIn returns Expression: RelationalExpressionNoIn
    (=&gt;({EqualityExpression.lhs=current} op=EqualityOperator) rhs=RelationalExpressionNoIn)*;


enum EqualityOperator: same='===' | nsame='!==' | eq='==' | neq='!=';</programlisting>
<simpara>==== Semantics <anchor xml:id="equality-expression-semantics" xreflabel="[equality-expression-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>There are no hard constraints defined for equality expressions.</simpara>
<simpara>In N4JSmode, a warning is created if for a given expression
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>h</mi><mi>s</mi><mfenced close=")" open="("><mrow><mi>'</mi><mo>=</mo><mo>=</mo><msup><mo>=</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mo>!</mo><mo>=</mo><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi>r</mi><mi>h</mi><mi>s</mi></math>, neither
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>r</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi></math> nor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>l</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi></math> and no interface or composed
type is involved as the result is constant in these cases.
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-773"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-773</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-260</link></simpara>
</sidebar>
<simpara>Note that a warning is only created if the upper bounds do not match the
described constraints. This is necessary for wildcards. For example in</simpara>
<programlisting language="n4js" linenumbering="unnumbered">// with
class A{} class B extends A{}
function isFirst(ar: Array&lt;? extends A&gt;, b: B): boolean {
    return b === ar[0]
}</programlisting>
<simpara>the type of array elements is <literal>? extends A</literal>.<?asciidoc-br?>
Neither <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>?</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>A</mi></mrow><mi>B</mi></math> nor
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi><mrow><mi>?</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>d</mi><mi>s</mi><mi>A</mi></mrow></math> is true. This
is why the upper bounds are to be used.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-13" xreflabel="[type-inference-13]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>In N4JSmode, using the non-strict equality operators <literal>'=='|'!='</literal> is only allowed for internal developers. External developers have to use the strict equality
operators <literal>'==='|'!=='</literal>. The inferred type of an equality expression always is <literal>boolean</literal>.</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mfenced close=")" open="("><mrow><mi>'</mi><mo>=</mo><msup><mo>=</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mo>!</mo><msup><mo>=</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mo>=</mo><mo>=</mo><msup><mo>=</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mo>!</mo><mo>=</mo><msup><mo>=</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi> </mi><mi>:</mi><mrow><mi>b</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><mi>n</mi></mrow></mrow><mrow/><mn>11.9</mn></math></simpara>
<simpara>=== Binary Bitwise Expression</simpara>
<simpara>==== Syntax <anchor xml:id="binary-bitwise-expression-syntax" xreflabel="[binary-bitwise-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.p.82ff)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">BitwiseANDExpression returns Expression: EqualityExpression
    (=&gt; ({BitwiseANDExpression.lhs=current} '&amp;') rhs=EqualityExpression)*;

BitwiseANDExpressionNoIn returns Expression: EqualityExpressionNoIn
    (=&gt; ({BitwiseANDExpression.lhs=current} '&amp;') rhs=EqualityExpressionNoIn)*;

BitwiseXORExpression returns Expression: BitwiseANDExpression
    (=&gt; ({BitwiseXORExpression.lhs=current} '^') rhs=BitwiseANDExpression)*;

BitwiseXORExpressionNoIn returns Expression: BitwiseANDExpressionNoIn
    (=&gt; ({BitwiseXORExpression.lhs=current} '^') rhs=BitwiseANDExpressionNoIn)*;

BitwiseORExpression returns Expression: BitwiseXORExpression
    (=&gt; ({BitwiseORExpression.lhs=current} '|') rhs=BitwiseXORExpression)*;

BitwiseORExpressionNoIn returns Expression: BitwiseXORExpressionNoIn
    (=&gt; ({BitwiseORExpression.lhs=current} '|') rhs=BitwiseXORExpressionNoIn)*;</programlisting>
<simpara>==== Semantics <anchor xml:id="binary-bitwise-expression-semantics" xreflabel="[binary-bitwise-expression-semantics]"/></simpara>
<simpara> For a given bitwise bitwise expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> the following constraints must hold
in N4JS mode:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The types of the operands must be both number.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>B</mi><mi>i</mi><mi>t</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>B</mi><mi>i</mi><mi>t</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi> </mi><mi> </mi><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/></math></simpara>
</listitem>
</itemizedlist>
<simpara>==== Type Inference <anchor xml:id="type-inference-14" xreflabel="[type-inference-14]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-345"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-345</link></simpara>
</sidebar>
<simpara>The type returned by a binary bitwise expression is always :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi> </mi><mfenced close=")" open="("><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close=")" open="("><mrow><mi>'</mi><mi>a</mi><mi>m</mi><mi>p</mi><msup><mi>;</mi><mi>'</mi></msup><mo>|</mo><msup><mi>'</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup></mrow></mfenced><mi> </mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfenced><mi>:</mi><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><mi>r</mi></mrow></mrow><mrow/><mn>11.10</mn></math></simpara>
<simpara>=== Binary Logical Expression</simpara>
<simpara>==== Syntax <anchor xml:id="binary-logical-expression-syntax" xreflabel="[binary-logical-expression-syntax]"/></simpara>
<programlisting language="n4js" linenumbering="unnumbered">LogicalANDExpression returns Expression: BitwiseORExpression
    (=&gt; ({LogicalANDExpression.lhs=current} '&amp;&amp;') rhs=BitwiseORExpression)*;
LogicalANDExpressionNoIn returns Expression: BitwiseORExpressionNoIn
    (=&gt; ({LogicalANDExpression.lhs=current} '&amp;&amp;') rhs=BitwiseORExpressionNoIn)*;

LogicalORExpression returns Expression: LogicalANDExpression
    (=&gt; ({LogicalORExpression.lhs=current} '||') rhs=LogicalANDExpression)*;
LogicalORExpressionNoIn returns Expression: LogicalANDExpressionNoIn
    (=&gt; ({LogicalORExpression.lhs=current} '||') rhs=LogicalANDExpressionNoIn)*;</programlisting>
<simpara>==== Semantics <anchor xml:id="binary-logical-expression-semantics" xreflabel="[binary-logical-expression-semantics]"/></simpara>
<simpara>For a given binary logical expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>l</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>L</mi></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>r</mi><mi>h</mi><mi>s</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>R</mi></math> the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>In N4JS mode <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>L</mi></math> must not be <literal>undefined</literal> or <literal>null</literal>. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-775"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-775</link></simpara>
</sidebar>
<simpara>==== Type Inference <anchor xml:id="type-inference-15" xreflabel="[type-inference-15]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link></simpara>
</sidebar>
<simpara>The evaluation relies on ECMAScript’s abstract operation <literal>ToBoolean</literal> [<link linkend="ECMA11a">ECMA11a(p.p.43)</link>].
A short-circuit evaluation strategy is used so that depending on the types
of the operands, different result types may be inferred. In particular,
the inferred type usually is not <literal>boolean</literal> ((cf. [<link linkend="ECMA11a">ECMA11a(p.S11.11., p.p.83ff)</link>] ).
The type inference does not take this short-circuit evaluation strategy into account, as it will
affect the result in case one of the types is <literal>null</literal> either or <literal>undefined</literal>, which is not allowed in N4JS mode.</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi> </mi><mi>l</mi><mi>h</mi><mi>s</mi><mi> </mi><mrow><mi>'</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>a</mi><mi>m</mi><mi>p</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup><mo>|</mo><msup><mo>|</mo><mi>'</mi></msup></mrow><mi> </mi><mi>r</mi><mi>h</mi><mi>s</mi><mi>:</mi><mrow/><mi>l</mi><mi>h</mi><mi>s</mi><mo>,</mo><mi>r</mi><mi>h</mi><mi>s</mi><mrow><mo>}</mo></mrow></mrow><mrow/></math></simpara>
<simpara>=== Conditional Expression</simpara>
<simpara>==== Syntax <anchor xml:id="conditional-expression-syntax" xreflabel="[conditional-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.12, p.p.84)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">ConditionalExpression returns Expression: LogicalORExpression
    (=&gt; ({ConditionalExpression.expression=current} '?') trueExpression=AssignmentExpression  ':' falseExpression=AssignmentExpression)?;

ConditionalExpressionNoIn returns Expression: LogicalORExpressionNoIn
    (=&gt; ({ConditionalExpression.expression=current} '?') trueExpression=AssignmentExpression  ':' falseExpression=AssignmentExpressionNoIn)?;</programlisting>
<simpara>==== Semantics <anchor xml:id="conditional-expression-semantics" xreflabel="[conditional-expression-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-776"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-776</link></simpara>
</sidebar>
<simpara>For a given conditional expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>e</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>C</mi><mo>,</mo><mi>e</mi><mo>.</mo><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>T</mi><mo>,</mo><mi>e</mi><mo>.</mo><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>:</mi><mi>F</mi></math> the following constraints
must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>A warning will be issued in N4JSmode if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></math>
evaluates to a constant value. That is to say</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>f</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow><mrow><mi>t</mi><mi>r</mi><mi>u</mi><mi>e</mi></mrow><mrow><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><mrow><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mfenced></math> or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>v</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><mrow><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mfenced></math>.</simpara>
</listitem>
</itemizedlist>
<simpara>There are no specific constraints defined for the condition. The
ECMAScript operation <literal>ToBoolean</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.2, p.p.43)</link>] is used to convert any type to boolean.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-16" xreflabel="[type-inference-16]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-348"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-348</link></simpara>
</sidebar>
<simpara>The inferred type of a conditional expression is the union of the true
and false expression (cf. [<link linkend="ECMA11a">ECMA11a(p.S11.12, p.p.84)</link>]   (): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi> </mi><mrow><mi>'</mi><msup><mi>?</mi><mi>'</mi></msup></mrow><mi>e</mi><mi>t</mi><mi> </mi><mrow><mi>'</mi><msup><mi>:</mi><mi>'</mi></msup></mrow><mi>e</mi><mi>f</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>T</mi><mo>=</mo><mrow><mi>e</mi><mi>t</mi><mo>,</mo><mi>e</mi><mi>f</mi></mrow></mrow></math></simpara>
<simpara>[[ex:Type of Conditional Expressions]]
Given the following declarations:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A{}       class B extends A{}
class C{}       class D extends A{}
class G&lt;T&gt; { field: T; }

var ga: G&lt;A&gt;, gb: G&lt;B&gt;;
    a: A, b: B, c: C, d: D;
var boolean cond;</programlisting>
<simpara>Then the type of the following conditional expression is inferred as
noted in the comments:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">cond ? a : a;                           // A
cond ? a : b;                           // union{A,B}
cond ? a : c;                           // union{A,C}
cond ? b : d;                           // union{B,D}
cond ? (cond ? a : b) : (cond ? c : d); // union{A,B,C,D}
cond ? (cond ? a : b) : (cond ? b : d); // union{A,B,D}
cond ? ga : gb;                         // union{G&lt;A&gt;,G&lt;B&gt;}</programlisting>
<simpara>=== Assignment Expression</simpara>
<simpara>==== Syntax <anchor xml:id="assignment-expression-syntax" xreflabel="[assignment-expression-syntax]"/></simpara>
<programlisting language="n4js" linenumbering="unnumbered">[language=n4bnf,caption={Syntax Assignment Expression},label={lst:EBNFAssignment},escapeinside={^}{^}]
AssignmentExpression &lt;In, Yield&gt;:
    lhs=Expression op=AssignmentOperator rhs=AssignmentExpression&lt;In,Yield&gt;
;
AssignmentOperator:
      '='
    | '*=' | '/=' | '%=' | '+=' | '-='
    | '&lt;&lt;=' | '&gt;&gt;=' | '&gt;&gt;&gt;='
    | '&amp;=' | '^=' | '|='
;</programlisting>
<simpara>==== Semantics <anchor xml:id="assignment-expression-semantics" xreflabel="[assignment-expression-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-349"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-349</link></simpara>
</sidebar>
<simpara>For a given assignment <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></math>
with <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>.</mo><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>'</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></math> the following constraints
must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>.</mo><mi>l</mi><mi>h</mi><mi>s</mi></mrow><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>.</mo><mi>r</mi><mi>h</mi><mi>s</mi></mrow></math></simpara>
</listitem>
</orderedlist>
<simpara>In the following inference rule and the constraint, ’@’ is to be
replaced with the right part of one of the assignment operators listed
above, that is,<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>@</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mi>'</mi><msup><mo>*</mo><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><msup><mo>/</mo><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><msup><mi>%</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><msup><mo>+</mo><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><msup><mo>-</mo><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>l</mi><mi>t</mi><mi>;</mi><mi>l</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><mi>;</mi><mi>g</mi><mi>t</mi><msup><mi>;</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>a</mi><mi>m</mi><mi>p</mi><msup><mi>;</mi><mi>'</mi></msup><mo>,</mo><msup><mi>'</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><msup><mo>|</mo><mi>'</mi></msup></mrow></mfenced></math></simpara>

<simpara>For a given assignment
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi> </mi><mi>o</mi><mi>p</mi><mi> </mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></math>, with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>o</mi><mi>p</mi><mo>=</mo><mrow><mi>'</mi><mi>@</mi><msup><mo>=</mo><mi>'</mi></msup></mrow></math> but
not , both, left and right must be subtypes of <literal>number</literal>.<?asciidoc-br?>
For operator <literal>'+='</literal>,</simpara>
<itemizedlist>
<listitem>
<simpara>if the left-hand side is a <literal>number</literal>, then
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi> </mi><mrow><mi>'</mi><msup><mo>+</mo><mi>'</mi></msup></mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></math> must return a number as well.
The right-hand side must, in fact, be a <literal>number</literal> (and not a <literal>boolean</literal>) here in order to avoid unexpected results.</simpara>
</listitem>
<listitem>
<simpara>if the left-hand side is a <literal>string</literal>, then
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mrow><mi>'</mi><msup><mo>+</mo><mi>'</mi></msup></mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></math> must return a string as well.
That means that the right-hand side can be of <literal>any</literal> type.</simpara>
</listitem>
</itemizedlist>
<simpara>The expected type for the left-hand side is <literal>union{number,string}</literal>.</simpara>
<simpara>The basic idea behind these constraints is that the type of the
left-hand side is not to be changed by the compound assignment.</simpara>

<simpara>For a given assignment expression
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></math>, the left-hand side must be writeable or a
final data field and the assignment must be in the constructor. Let
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi></math> be the bound variable (or field) with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><mi>v</mi></mfenced></math> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>v</mi><mo>.</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mo>∨</mo><mi>v</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>∧</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mi>v</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>=</mo><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mo>∧</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>v</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="2.0em"/><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mrow><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow></mfenced><mo>=</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="4.0em"/><mo>∧</mo><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mi>"</mi><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>"</mi></mrow></math></simpara>
<simpara>The value of writeable is true for setters and usually for variables and
data fields. Assignability of variables and data fields can be
restricted via <literal>const</literal> or the <literal>@Final</literal> annotation. See <xref linkend="Assignment_Modifiers"/>(data fields) and <xref linkend="Const"/> (const variables) for details.</simpara>
<simpara>Also see <xref linkend="req:Read_Access_to_Identifier"/> for read access constraint.</simpara>
<simpara>The left-hand side of an assignment expression may be an array or object
literal and the assignment expression is then treated as a destructuring
assignment. See <xref linkend="Destructuring"/> for details.</simpara>
<simpara>==== Type Inference <anchor xml:id="type-inference-17" xreflabel="[type-inference-17]"/>
 </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-349"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-349</link></simpara>
</sidebar>
<simpara>Similarly to [<link linkend="ECMA11a">ECMA11a(p.S11.1, p.p.84ff)</link>], we define type inference for simple assignment (<literal>=</literal>) and compound assignment (<literal>op=</literal>) individually.</simpara>
<simpara>The type of the assignment is simply the type of the right-hand side:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi> </mi><mrow><mi>'</mi><msup><mo>=</mo><mi>'</mi></msup></mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>:</mi><mi>T</mi></mrow><mrow><mn>11.13</mn><mn>.1</mn></mrow></math></simpara>
<simpara>Compound assignments are reduced to the former by splitting an operator
’@=’, in which ’@’ is a simple operator, into a simple operator
expression with operator ’@’ and a simple assignment ’=’. Since the type
of the latter is the right-hand side, we can define:</simpara>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi> </mi><mrow><mi>'</mi><mi>@</mi><msup><mo>=</mo><mi>'</mi></msup></mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi> </mi><mrow><mi>'</mi><msup><mi>@</mi><mi>'</mi></msup></mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>:</mi><mi>T</mi></mrow><mrow><mn>11.13</mn><mn>.1</mn></mrow></math></simpara>
<simpara>=== Comma Expression</simpara>
<simpara>==== Syntax <anchor xml:id="comma-expression-syntax" xreflabel="[comma-expression-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.14, p.p.85)</link>]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">CommaExpression &lt;In, Yield&gt;:
    exprs+=AssignmentExpression&lt;In,Yield&gt; ',' exprs+=AssignmentExpression&lt;In,Yield&gt;
    (','    exprs+=AssignmentExpression&lt;In,Yield&gt;)*
;</programlisting>
<simpara>==== Semantics <anchor xml:id="comma-expression-semantics" xreflabel="[comma-expression-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-778"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-778</link></simpara>
</sidebar>
<simpara>All expressions will be evaluated even though only the value of the last
expression will be the result.</simpara>
<simpara>[Comma Expression][ex:CommaExpression] Assignment expressions preceed
comma expressions:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var b: boolean;
b = (12, 34, true); // ok, b=true
b =  12, 34, true ; // error, b=12 is invalid</programlisting>
<simpara>==== Type Inference <anchor xml:id="type-inference-18" xreflabel="[type-inference-18]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-244"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-244</link></simpara>
</sidebar>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S11.14, p.p.85)</link>]</simpara>
<simpara>The type of a comma expression <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></math> is inferred to the
last expression: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>n</mi><mo>=</mo><mo>|</mo><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>s</mi><mo>|</mo><mo>,</mo><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><msub><mi>s</mi><mi>n</mi></msub><mi>:</mi><mi>T</mi></mrow><mn>11.14</mn></math></simpara>
<simpara>== ECMAScript 6 Expressions</simpara>
<simpara>=== The super Keyword</simpara>
<programlisting language="n4js" linenumbering="unnumbered">SuperLiteral: {SuperLiteral} 'super';</programlisting>
<simpara>Apart from the use of keyword <literal>super</literal> in wildcards of type expressions (cf. <xref linkend="Type_Expressions"/>), there are two use cases for keyword <literal>super</literal>: super member access and super
constructor calls.</simpara>
<simpara>Super Keyword</simpara>
<simpara>Two use cases for keyword super:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class B extends A {
    constructor() {
        // super call
        super();
    }
    @Override
    m();: void {
        // super member access
        super.m();
    }
}</programlisting>
<simpara>==== Semantics <anchor xml:id="super-keyword-semantics" xreflabel="[super-keyword-semantics]"/></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-645"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-645</link></simpara>
</sidebar>
<simpara><literal>super</literal> can be used to access the supertype’s constructor, methods, getters and
setters. The supertype is defined lexically, which is different from how <literal>this</literal>
works.
<footnote><simpara>See [<link linkend="ECMA15a">ECMA15a</link></simpara></footnote>],
Chapter 12.3.5 "The Super Keyword"; note the use of "HomeObject" instead of "thisValue"; also see this
<link xl:href="http://www.2ality.com/2011/11/super-references.html">blog</link>). Note that in  cite:[ECMA15a]
Chapter 12.3.5 <literal>The Super Keyword</literal>, <literal>super</literal> is defined as a keyword but the
syntax and semantics are defined in conjunction of member access.]</simpara>
<simpara>The type referenced with the super literal is always nominal. This is a
consequence of references to types in extend clauses to be nominal.
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi></mrow><mi>:</mi><mi>T</mi><mo>∧</mo><mi>T</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>S</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>g</mi><mi>y</mi><mo>=</mo><mrow><mi>n</mi><mi>o</mi><mi>m</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></mrow></math></simpara>

<simpara>If the super literal <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math> is used to access the super constructor of a
class, all of the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The super constructor access must be a call expression:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mrow><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></mrow></mfenced><mo>=</mo><mrow><mi>C</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mo>∧</mo><mi>c</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></math></simpara>
</listitem>
<listitem>
<simpara>The super constructor call must be the expression of an expression
statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi></math>: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>=</mo><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>∧</mo><mi>μ</mi><mfenced close=")" open="("><mrow><mi>c</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi></mrow></mfenced><mo>=</mo><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>The containing statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>m</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></math> must be directly
contained in a constructor body: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></mfenced><mo>=</mo><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></mrow><mo>)</mo></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>b</mi><mi>o</mi><mi>d</mi><mi>y</mi></math></simpara>
</listitem>
<listitem>
<simpara> There must be no access to and not return statement before the
containing statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi></math>.<?asciidoc-br?>
Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>i</mi></math> be the index of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi></math> in the
constructor body:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>m</mi><mi>t</mi><msub><mi>s</mi><mrow><mi>s</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi></math>.<?asciidoc-br?>
Then, the following constraint must
hold<footnote><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><msup><mo>∈</mo><mo>*</mo></msup><mi>c</mi></math> is the transitive version of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mo>∈</mo><mi>c</mi></math>, that is, it <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi></math> directly or indirectly contained in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi></math>.</simpara></footnote> <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>s</mi><mi>i</mi><mi>:</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><msup><mo>∈</mo><mo>*</mo></msup><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>m</mi><mi>t</mi><msub><mi>s</mi><mi>i</mi></msub><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>μ</mi><mfenced close=")" open="("><mi>i</mi></mfenced><mo>∈</mo><mrow><mi>T</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>L</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mo>,</mo><mi>R</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/147"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-147</link></simpara>
</sidebar>
<simpara>Further constraints with regard to super constructor calls are described
in <xref linkend="Constructor"/>.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1753"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1753</link></simpara>
</sidebar>

<simpara>If the super literal <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math> is used to access a member of the super class, all of
the following constraints must hold, with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mo>=</mo><mi>s</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>r</mi></math></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The super literal must be the receiver of a method call (cf. remarks
below): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>c</mi></mfenced><mo>=</mo><mrow><mi>C</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mtext>
</mtext><mo>∧</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>c</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>y</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mtext>
</mtext><mo>∧</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>c</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>s</mi></math></simpara>
</listitem>
<listitem>
<simpara>The super literal is used in a method or field accessor of a class:

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mfenced close=")" open="("><mrow><mi>s</mi><mo>.</mo><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow></mfenced><mo>=</mo><mrow><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>The super literal must not be used in a nested function expression:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>μ</mi><mrow><mo>(</mo><mi>s</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>=</mo><mi>s</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi><mi>O</mi><mi>r</mi><mi>F</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>A</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>r</mi></mrow></math></simpara>
</listitem>
<listitem>
<simpara>If the return type of the method access via super is this, the
actually bound this type will be the type of the calling class (and not
of the class defining the method). <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close=")" open="("/><mi>:</mi><mi>T</mi></mrow><mi>s</mi><mo>.</mo><mi>m</mi></mrow><mrow><mi>s</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>C</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi>T</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>μ</mi><mfenced close=")" open="("><mi>m</mi></mfenced><mo>=</mo><mrow><mi>M</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>m</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi></mrow></mrow></math></simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/386"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-386</link></simpara>
</sidebar>

<simpara>For super literals, either <xref linkend="req:Access_Super_Constructor_with_Super_Literal"/> or <xref linkend="req:Access_Super_Member_with_Super_Literal"/> must hold, no other usage
is allowed.</simpara>
<simpara>Consequences:</simpara>
<itemizedlist>
<listitem>
<simpara>Since fields cannot be overridden (except for changing the access
modifier), it is not possible nor allowed to access a field via <literal>super</literal>.</simpara>
</listitem>
<listitem>
<simpara>Super literals must not be used with index access (e.g., <literal>super["foo"]</literal>)</simpara>
</listitem>
<listitem>
<simpara>It is not possible to chain super keywords. That is, it is not
possible to call <literal>super.super.m()</literal>.</simpara>
</listitem>
<listitem>
<simpara>It is not allowed to use the super literal in interfaces or
non-methods/accessors.</simpara>
</listitem>
<listitem>
<simpara>Super cannot be used to call an overridden method of an implemented
method from the overriding method in the implementing class.</simpara>
</listitem>
<listitem>
<simpara>In order to be able to access a super method of a method
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> of a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, exactly one non-abstract
super method <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math> in a super class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> must exist. This is assured by the standard rules for
binding identifiers.</simpara>
</listitem>
</itemizedlist>
<simpara>If super is used to access a super member, the receiver type is not
changed. This is important in particular for static methods as
demonstrated in the following example:</simpara>
<example>
<title>Super Call in Static Methods</title>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    static foo(): void { console.log("A") }
    static bar(): void {
        this.foo();
    }
}

class B extends A {

    @Override
    static foo(): void { console.log("B") }
    @Override
    static bar(): void {
        A.bar();        // outputs "A"
        super.bar();    // outputs "B"
    }
}

B.bar();</programlisting>
</example>
<simpara>In line 14, the receiver (which is similar to the this-binding in
ECMAScript) is changed to <literal>A</literal> . In line 15, using super, the receiver is
preserved, i.e. <literal>B</literal> coming from line 19.</simpara>
<simpara>== ECMAScript 7 Expressions</simpara>
<simpara>=== Await Expression</simpara>
<simpara>In N4JS, <literal>await</literal> is implemented as a unary operator with the same precedence as
<literal>yield</literal> in ECMAScript 6.</simpara>
<simpara>Constraints governing the use of <literal>await</literal> are given together with those for <literal>async</literal> in <xref linkend="Asynchronous_Functions"/>.</simpara>
<simpara>== N4JS Specific Expressions</simpara>
<simpara>=== Class Expression</simpara>
<simpara>A class expression in N4JS is similar to a class expression in
ECMAScript 6 [<link linkend="ECMA15a">ECMA15a(p.14.5)</link>].</simpara>
<simpara>==== Syntax <anchor xml:id="class-expression-syntax" xreflabel="[class-expression-syntax]"/></simpara>
<simpara>See <xref linkend="_classes"/>.</simpara>
<simpara>==== Semantics and Type Inference <anchor xml:id="class-expression-semantics-type-inference" xreflabel="[class-expression-semantics-type-inference]"/></simpara>
<simpara>The inferred type of a class expression simply is the class type as
described in <xref linkend="Constructor_Type"/>.</simpara>
<simpara>=== Cast (As) Expression</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-161p"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-161p</link></simpara>
</sidebar>
<simpara>==== Syntax <anchor xml:id="cast-as-expression-syntax" xreflabel="[cast-as-expression-syntax]"/></simpara>
<programlisting language="n4js" linenumbering="unnumbered">CastExpression &lt;Yield&gt; returns Expression: expression=Expression 'as' targetTypeRef=TypeRefForCast;

TypeRefForCast returns StaticBaseTypeRef:
      ParameterizedTypeRef
    | ThisTypeRef
    | ConstructorTypeRef
    | ClassifierTypeRef
    | FunctionTypeExpression
    | UnionTypeExpression
    | IntersectionTypeExpression</programlisting>
<simpara>=== Semantics and Type Inference <anchor xml:id="cast-as-expression-semantics-type-inference" xreflabel="[cast-as-expression-semantics-type-inference]"/></simpara>
<simpara>The inferred type of the type cast expression is the target type:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi> </mi><mrow><mi>"</mi><mi>a</mi><mi>s</mi><mi>"</mi></mrow><mi> </mi><mi>T</mi><mi>:</mi><mi>T</mi></mrow><mrow/></math></simpara>
<simpara>The type cast returns the expression without further modifications. Type
casts are simply removed during compilation so there will be no
exceptions thrown at the cast until later when accessing properties
which may not be present in case of a failed cast.</simpara>
<simpara>An error is issued if the cast is either unnecessary or cannot succeed.
See further details in .</simpara>
<simpara>= Statements</simpara>
<simpara>For all statements, we define the following pseudo properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>containingFunction</literal> </term>
<listitem>
<simpara>The function or method in which the statement is (indirectly) contained,
this may be null.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>containingClass</literal> </term>
<listitem>
<simpara>The class in which the statement is (indirectly) contained, this may be
null.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The expressions and statements are ordered, at first describing the
constructs available in the 5th edition of ECMA-262 referred to as  [<link linkend="ECMA11a">ECMA11a</link>] in the following.
The grammar snippets already use newer constructs in some cases.</simpara>
<simpara>== ECMAScript 5 Statements</simpara>
<simpara>N4JS supports the same statements as
ECMAScript. Some of these statements are enhanced with annotations <xref linkend="Annotations"/> and type information.</simpara>
<simpara>Although some statements may return a value which can be used via
certain constructs such as <literal>eval</literal>), no type is inferred for any statement. The
compiler will always create a warning if a statement is used instead of
an expression.</simpara>
<simpara>The following sections, therefore, do not define how to infer types for
statement but how types and type annotations are used in these
statements and the specific type constraints for a given statement.</simpara>
<simpara>All syntax definitions taken from  [<link linkend="ECMA11a">ECMA11a</link>]  are repeated here for convenience
reasons and in order to define temporary variables for simplifying
constraint definitions. If non-terminals are not defined here, the
definition specified in  [<link linkend="ECMA11a">ECMA11a</link>]   is to be used.</simpara>
<simpara>=== Function or Field Accessor Bodies</simpara>
<simpara>For all statements in a function or field accessor (getter/setter) body, the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Statements appearing directly after return, throw, break, or
continue statements (in the same block) are considered to be dead code
and a warning is issued in these cases.</simpara>
</listitem>
</orderedlist>
<simpara>=== Variable Statement</simpara>
<simpara>==== Syntax <anchor xml:id="variable-statement-syntax" xreflabel="[variable-statement-syntax]"/></simpara>
<simpara>A var statement can declare the type of the variable with a type
reference. This is described with the following grammar similar to
[<link linkend="ECMA11a">ECMA11a(p.S12.2, p.p.87)</link>]:</simpara>
<screen>VariableStatement &lt;In, Yield&gt;:
    =&gt;({VariableStatement}
        'var'
    )
    varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In,Yield,false&gt; (',' varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In,Yield,false&gt;)* Semi
;

VariableDeclarationOrBinding &lt;In, Yield, OptionalInit&gt;:
        VariableBinding&lt;In,Yield,OptionalInit&gt;
    |   VariableDeclaration&lt;In,Yield,true&gt;
;

VariableBinding &lt;In, Yield, OptionalInit&gt;:
    =&gt; pattern=BindingPattern&lt;Yield&gt; (
            &lt;OptionalInit&gt; ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
        |   &lt;!OptionalInit&gt; '=' expression=AssignmentExpression&lt;In,Yield&gt;
    )
;

VariableDeclaration &lt;In, Yield, AllowType&gt;:
    {VariableDeclaration} VariableDeclarationImpl&lt;In,Yield,AllowType&gt;;

fragment VariableDeclarationImpl &lt;In, Yield, AllowType&gt;*:
    annotations+=Annotation*
    (
        &lt;AllowType&gt; =&gt;(
            name=BindingIdentifier&lt;Yield&gt; ColonSepTypeRef?
        ) ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
    |   &lt;!AllowType&gt; =&gt;(
        name=BindingIdentifier&lt;Yield&gt;
        ) ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
    )
;</screen>
<screen>var any: any;
// any.type := any

var anyNull = null;
// anyNull.type := any

var s: string;
// s.type := string

var init = "Hi";
// init.type := string

const MESSAGE = "Hello World";
// MESSAGE.type := string</screen>
<simpara>==== Semantics <anchor xml:id="variable-statement-semantics" xreflabel="[variable-statement-semantics]"/></simpara>
<simpara>From a model and type inference point of view, variable and constant
statements and declarations are similar except that the pseudo property
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi></math> is set to false for variables and true for
constants. Also see exported variable statement (<xref linkend="Export Statement"/>) and constant statement and declaration (<xref linkend="Const"/>).</simpara>
<simpara>For a given variable declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi></math>, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>The type of the initializer expression must conform to the declared
type:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>≠</mo><mo>∧</mo><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi><mo>≠</mo><mtext>
</mtext><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>R</mi><mi>e</mi><mi>f</mi></math></simpara>
</listitem>
<listitem>
<simpara>The initializer expression should not contain a reference to
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>d</mi></math> except where the reference is contained in a class
expression or function expression and the class is not immediately
initialized or the function is not immediately invoked. In these cases,
the code is executed later and the self-reference is not a problem.<?asciidoc-br?>
To clarify: <literal>should not</literal> means that only a warning will be produced.</simpara>
</listitem>
</itemizedlist>
<screen>// not ok (simple case)
var n = n + 1;

// ok (class expression  not in version 0.1)
// var cls1 = class { static sfield1 = "hello"; field2 = cls1.sfield1; };

// not ok, immediately instantiated (class expression  not in version 0.1)
// var cls2 = new class { field1 = "hello"; field2 = cls2.field1; };

// ok
var fun1 = function() : number { var x = fun1; return -42; };

// not ok, immediately invoked
var fun2 = function() : number { var x = fun2;  return -42; }();</screen>
<simpara>The variable statement may contain array or object destructuring
patterns, see <xref linkend="Destructuring"/> for details.</simpara>
<simpara>==== Type Inference <anchor xml:id="variable-statement-type-inference" xreflabel="[variable-statement-type-inference]"/></simpara>
<simpara>The type of a variable is the type of its declaration:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>v</mi><mi>:</mi><mi>d</mi></mrow><mrow/><mtext>
</mtext></math></simpara>
<simpara>The type of a variable declaration is either the declared type or the
inferred type of the initializer expression:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>≠</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>d</mi><mo>.</mo><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>≠</mo><mtext>
</mtext><mi>E</mi><mo>=</mo><mi>d</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>E</mi><mo>∉</mo><mfenced close="}" open="{"><mrow><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>,</mo><mi>u</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi></mrow></mfenced><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>E</mi></mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>d</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow><mi>e</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></math></simpara>
<simpara>=== If Statement</simpara>
<simpara>==== Syntax <anchor xml:id="if-statement-syntax" xreflabel="[if-statement-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S12.5, p.p.89)</link>]</simpara>
<screen>IfStatement &lt;Yield&gt;:
    'if' '(' expression=Expression&lt;In=true,Yield&gt; ')'
    ifStmt=Statement&lt;Yield&gt;
    (=&gt; 'else' elseStmt=Statement&lt;Yield&gt;)?;</screen>
<simpara>==== Semantics <anchor xml:id="if-statement-semantics" xreflabel="[if-statement-semantics]"/></simpara>
<simpara>There are no specific constraints defined for the condition, the
ECMAScript operation <literal>ToBoolean</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.2, p.p.43)</link>] is used to convert any type to boolean.</simpara>
<simpara>In N4JS, the expression of an if statement must not evaluate to <literal>void</literal>. If the expressions is a function call
in particular, the called function must not be declared to return <literal>void</literal>.</simpara>
<simpara>=== Iteration Statements</simpara>
<simpara>==== Syntax <anchor xml:id="iterations-statements-syntax" xreflabel="[iterations-statements-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S12.6, p.p.90ff)</link>]</simpara>
<simpara>The syntax already considers the for-of style described in .</simpara>
<screen>IterationStatement &lt;Yield&gt;:
        DoStatement&lt;Yield&gt;
    |   WhileStatement&lt;Yield&gt;
    |   ForStatement&lt;Yield&gt;
;

DoStatement &lt;Yield&gt;: 'do' statement=Statement&lt;Yield&gt; 'while' '(' expression=Expression&lt;In=true,Yield&gt; ')' =&gt; Semi?;
WhileStatement &lt;Yield&gt;: 'while' '(' expression=Expression&lt;In=true,Yield&gt; ')' statement=Statement&lt;Yield&gt;;

ForStatement &lt;Yield&gt;:
    {ForStatement} 'for' '('
    (
        // this is not in the spec as far as I can tell, but there are tests that rely on this to be valid JS
            =&gt;(initExpr=LetIdentifierRef forIn?='in' expression=Expression&lt;In=true,Yield&gt; ')')
        |   (   -&gt;varStmtKeyword=VariableStatementKeyword
                (
                        =&gt;(varDeclsOrBindings+=BindingIdentifierAsVariableDeclaration&lt;In=false,Yield&gt; (forIn?='in' | forOf?='of') -&gt;expression=AssignmentExpression&lt;In=true,Yield&gt;?)
                    |   varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In=false,Yield,OptionalInit=true&gt;
                        (
                                (',' varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In=false,Yield,false&gt;)* ';' expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
                            |   forIn?='in' expression=Expression&lt;In=true,Yield&gt;?
                            |   forOf?='of' expression=AssignmentExpression&lt;In=true,Yield&gt;?
                        )
                )
            |   initExpr=Expression&lt;In=false,Yield&gt;
                (
                        ';' expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
                    |   forIn?='in' expression=Expression&lt;In=true,Yield&gt;?
                    |   forOf?='of' expression=AssignmentExpression&lt;In=true,Yield&gt;?
                )
            |   ';' expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
            )
        ')'
    ) statement=Statement&lt;Yield&gt;
;

ContinueStatement &lt;Yield&gt;: {ContinueStatement} 'continue' (label=[LabelledStatement|BindingIdentifier&lt;Yield&gt;])? Semi;
BreakStatement &lt;Yield&gt;: {BreakStatement} 'break' (label=[LabelledStatement|BindingIdentifier&lt;Yield&gt;])? Semi;</screen>
<simpara>Since <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mfenced close=")" open="("><mi>s</mi></mfenced></math> are <literal>VariableStatement</literal>s as described in <xref linkend="Var_Statement"/>, the declared variables can be type annotated.</simpara>
<tip>
<simpara>Using for-in is not recommended, instead `_each
` should be used.</simpara>
</tip>
<simpara>==== Semantics <anchor xml:id="iterations-statements-semantics" xreflabel="[iterations-statements-semantics]"/></simpara>
<simpara>There are no specific constraints defined for the condition, the
ECMAScript operation <literal>ToBoolean</literal> [<link linkend="ECMA11a">ECMA11a(p.S9.2, p.p.43)</link>] is used to convert any type to boolean.</simpara>
<simpara>For a given <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> the following conditions must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>The type of the expression must be conform to object:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mrow><mi>u</mi><mi>n</mi><mi>i</mi><mi>o</mi><mi>n</mi><mfenced close="}" open="{"><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mrow><mi>A</mi><mi>r</mi><mi>g</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></mfenced></mrow></math></simpara>
</listitem>
<listitem>
<simpara>Either a new loop variable must be declared or an rvalue must be
provided as init expression:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mi>i</mi><mi>s</mi><mi>R</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>The type of the loop variable must be a string (or a super type of
string, i.e. any): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mi>f</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow></mrow></mfenced><mtext>
</mtext><mo>∨</mo><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></mrow></mfenced></math></simpara>
</listitem>
</itemizedlist>
<simpara>=== Return Statement</simpara>
<simpara>==== Syntax <anchor xml:id="return-statement-syntax" xreflabel="[return-statement-syntax]"/></simpara>
<simpara>The returns statement is defined as in [<link linkend="ECMA11a">ECMA11a(p.S12.9, p.p.93)</link>] with</simpara>
<screen>ReturnStatement &lt;Yield&gt;:
    'return' (expression=Expression&lt;In=true,Yield&gt;)? Semi;</screen>
<simpara>==== Semantics <anchor xml:id="return-statement-semantics" xreflabel="[return-statement-semantics]"/></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Expected type of expression in a return statement must be a sub type
of the return type of the enclosing function:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>:</mi><mi>T</mi></mrow><mrow><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>:</mi><mi>F</mi><mi>T</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>T</mi><mo>=</mo><mi>F</mi><mi>T</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow></math> Note that the expression may be evaluated to <literal>void</literal>.</simpara>
</listitem>
<listitem>
<simpara>If enclosing function is declared to return <literal>void</literal>, then either</simpara>
<itemizedlist>
<listitem>
<simpara>no return statement must be defined</simpara>
</listitem>
<listitem>
<simpara>return statement has no expression</simpara>
</listitem>
<listitem>
<simpara>type of expression of return statement is <literal>void</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>If enclosing function is declared to to return a type different from
<literal>void</literal>, then</simpara>
<itemizedlist>
<listitem>
<simpara>all return statements must have a return expression</simpara>
</listitem>
<listitem>
<simpara>all control flows must either end with a return or throw statement</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Returns statements must be enclosed in a function. A return
statement, for example, must not be a top-level statement.</simpara>
</listitem>
</orderedlist>
<simpara>=== With Statement</simpara>
<simpara>==== Syntax <anchor xml:id="with-statement-syntax" xreflabel="[with-statement-syntax]"/></simpara>
<simpara>The with statement is not allowed in N4JS, thus an error is issued.</simpara>
<screen>WithStatement &lt;Yield&gt;:
    'with' '(' expression=Expression&lt;In=true,Yield&gt; ')'
    statement=Statement&lt;Yield&gt;;</screen>
<simpara>==== Semantics <anchor xml:id="with-statement-semantics" xreflabel="[with-statement-semantics]"/></simpara>
<simpara>N4JS is based on strict mode and the with statement is not allowed in
strict mode, cf. [<link linkend="ECMA11a">ECMA11a(p.S12.10.1, p.p.94)</link>].</simpara>
<simpara>With statements are not allowed in N4JS or strict mode.</simpara>
<simpara>=== Switch Statement</simpara>
<simpara>==== Syntax <anchor xml:id="switch-statement-syntax" xreflabel="[switch-statement-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S12.11, p.p.94ff)</link>]</simpara>
<screen>SwitchStatement &lt;Yield&gt;:
    'switch' '(' expression=Expression&lt;In=true,Yield&gt; ')' '{'
    (cases+=CaseClause&lt;Yield&gt;)*
    ((cases+=DefaultClause&lt;Yield&gt;)
    (cases+=CaseClause&lt;Yield&gt;)*)? '}'
;

CaseClause &lt;Yield&gt;: 'case' expression=Expression&lt;In=true,Yield&gt; ':' (statements+=Statement&lt;Yield&gt;)*;
DefaultClause &lt;Yield&gt;: {DefaultClause} 'default' ':' (statements+=Statement&lt;Yield&gt;)*;</screen>
<simpara>==== Semantics <anchor xml:id="switch-statement-semantics" xreflabel="[switch-statement-semantics]"/></simpara>
<simpara>For a given switch statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi></math>, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>For all cases <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mo>∈</mo><mi>s</mi><mo>.</mo><mi>c</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>s</mi></math>,
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></math>===<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mo>.</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi></math> must be valid according to
the constraints defined in <xref linkend="Equality Expression"/>.</simpara>
</listitem>
</itemizedlist>
<simpara>=== Throw, Try, and Catch Statements</simpara>
<simpara>==== Syntax <anchor xml:id="throw-try-catch-syntax" xreflabel="[throw-try-catch-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S12.13/14, p.p.96ff)</link>]</simpara>
<screen>ThrowStatement &lt;Yield&gt;:
    'throw' expression=Expression&lt;In=true,Yield&gt; Semi;

TryStatement &lt;Yield&gt;:
    'try' block=Block&lt;Yield&gt;
    ((catch=CatchBlock&lt;Yield&gt; finally=FinallyBlock&lt;Yield&gt;?) | finally=FinallyBlock&lt;Yield&gt;)
;

CatchBlock &lt;Yield&gt;: {CatchBlock} 'catch' '(' catchVariable=CatchVariable&lt;Yield&gt; ')' block=Block&lt;Yield&gt;;

CatchVariable &lt;Yield&gt;:
        =&gt;bindingPattern=BindingPattern&lt;Yield&gt;
    |   name=BindingIdentifier&lt;Yield&gt;
;

FinallyBlock &lt;Yield&gt;: {FinallyBlock} 'finally' block=Block&lt;Yield&gt;;</screen>
<simpara>There must be not type annotation for the catch variable, as this would
lead to the wrong assumption that a type can be specified.</simpara>
<simpara>==== Type Inference <anchor xml:id="throw-try-catch-type-inference" xreflabel="[throw-try-catch-type-inference]"/></simpara>
<simpara>The type of the catch variable is always assumed to be .
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mi>c</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi><mi>B</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mo>.</mo><mi>c</mi><mi>a</mi><mi>t</mi><mi>c</mi><mi>h</mi><mi>V</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>:</mi><mrow><mi>a</mi><mi>n</mi><mi>y</mi></mrow></mrow><mrow/></math></simpara>
<simpara>=== Debugger Statement</simpara>
<simpara>==== Syntax <anchor xml:id="debugger-statement-syntax" xreflabel="[debugger-statement-syntax]"/></simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.S12.15, p.p.97ff)</link>])</simpara>
<screen>DebuggerStatement: {DebuggerStatement} 'debugger' Semi;</screen>
<simpara>==== Semantics [[debugger-statement&#8212;&#8203;semantics]]</simpara>
<simpara>na</simpara>
<simpara>== ECMAScript 6 Statements</simpara>
<simpara>N4JS export and import statements are similar to ES6 with some minor
differences which are elaborated on below.</simpara>
<simpara>=== Let</simpara>
<simpara>Cf. [<link linkend="ECMA11a">ECMA11a(p.13.2.1)</link>], also <link xl:href="http://www.2ality.com/2015/02/es6-scoping.html">Rauschmayer, 2ality: <literal>Variables and scoping in ECMAScript 6</literal></link></simpara>
<simpara>=== Const</simpara>
<simpara>Cf. [<link linkend="ECMA15a">ECMA15a(p.13.2.1)</link>], also <link xl:href="http://www.2ality.com/2015/02/es6-scoping.html">Rauschmayer, 2ality: <literal>Variables and scoping in ECMAScript 6</literal></link></simpara>
<simpara>Additionally to the <literal>var</literal> statement, the <literal>const</literal> statement is supported. It allows for
declaring variables which must be assigned to a value in the declaration
and their value must not change. That is to say that constants are not
allowed to be on the left-hand side of other assignments.</simpara>
<screen>ConstStatement returns VariableStatement: 'const' varDecl+=ConstDeclaration ( ',' varDecl+=ConstDeclaration )* Semi;

ConstDeclaration returns VariableDeclaration: typeRef=TypeRef? name=IDENTIFIER const?='=' expression=AssignmentExpression;</screen>
<simpara>==== Semantics <anchor xml:id="const-semantics" xreflabel="[const-semantics]"/></simpara>
<simpara>A const variable statement is more or less a normal variable statement
(see <xref linkend="Variable Statement"/>), except that all variables declared by that statement are not
writable (cf. <xref linkend="req:Write_Acccess"/>). This is similar to constant data
fields (cf. <xref linkend="Assignment_Modifiers"/>).</simpara>
<simpara>All variable declarations of a const variable statement
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi></math> are not writeable: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>v</mi><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mo>∈</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>S</mi><mi>t</mi><mi>m</mi><mi>t</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mi>:</mi><mo>¬</mo><mi>v</mi><mi>d</mi><mi>e</mi><mi>c</mi><mi>l</mi><mo>.</mo><mi>w</mi><mi>r</mi><mi>i</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></math></simpara>
<simpara>=== for &#8230;&#8203; of statement</simpara>
<simpara>ES6 introduced a new form of <literal>for</literal> statement: <literal>for &#8230;&#8203; of</literal> to iterate over the elements of an  <literal>Iterable</literal>, cf. <xref linkend="Iterable_Object_Type"/>.</simpara>
<simpara>==== Syntax <anchor xml:id="for-of-statement-syntax" xreflabel="[for-of-statement-syntax]"/></simpara>
<simpara>See <xref linkend="Iteration Statements"/></simpara>
<simpara>==== Semantics <anchor xml:id="for-of-statement-semantics" xreflabel="[for-of-statement-semantics]"/></simpara>
<simpara>For a given <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi></math> the following conditions must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The value provided after <literal>of</literal> in a <literal>for &#8230;&#8203; of</literal> statement must be a subtype of <literal>Iterable&lt;?&gt;</literal>.</simpara>
</listitem>
<listitem>
<simpara>Either a new loop variable must be declared or an rvalue must be
provided as init expression:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo>.</mo><mi>v</mi><mi>a</mi><mi>r</mi><mi>D</mi><mi>e</mi><mi>c</mi><mi>l</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∨</mo><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi><mo>≠</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi><mo>∧</mo><mi>i</mi><mi>s</mi><mi>R</mi><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>f</mi><mo>.</mo><mi>i</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>E</mi><mi>x</mi><mi>p</mi><mi>r</mi></mrow></mfenced></mrow></mfenced></math></simpara>
</listitem>
<listitem>
<simpara>If a new variable <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi></math> is declared before <literal>of</literal> and it has a
declared type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the value provided after must be a
subtype of . If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi></math> does not have a declared type, the type
of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>v</mi></math> is inferred to the type of the first type argument of
the actual type of the value provided after .</simpara>
</listitem>
<listitem>
<simpara>If a previously-declared variable is referenced before with a
declared or inferred type of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, the value provided after <literal>of</literal>
must be a subtype of <literal>Iterable&lt;? extends T&gt;</literal>.</simpara>
</listitem>
</orderedlist>
<note>
<simpara><literal>Iterable</literal> is structurally typed on definition-site so non-N4JS types can
meet the above requirements by simply implementing the only method in
interface <literal>Iterable</literal> (with a correct return type).</simpara>
</note>
<note>
<simpara>The first of the above constraints (the type required by the
’of’ part in a <literal>for &#8230;&#8203; of</literal> loop is <literal>Iterable</literal>) was changed during the definition of ECMAScript 6.
This is implemented differently in separate implementations and even
in different versions of the same implementation (for instance in
different versions of V8). Older implementations require an <literal>Iterator</literal> or accept
both <literal>Iterator</literal> an or <literal>Iterable</literal>.</simpara>
</note>
<simpara>Requiring an <literal>Iterable</literal> and not accepting a plain <literal>Iterator</literal> seems to be the final decision (as of Dec. 2014). For reference, see abstract operations
<literal>GetIterator</literal> in [<link linkend="ECMA15a">ECMA15a(p.S7.4.2)</link>] and "CheckIterable"
[<link linkend="ECMA15a">ECMA15a(p.S7.4.1)</link>] and their application in "ForIn/OfExpressionEvaluation" [<link linkend="ECMA15a">ECMA15a(p.S13.6.4.8)</link>] and <literal>CheckIterable</literal> and their application in
<literal>ForIn/OfExpressionEvaluation</literal> . See also a related blog
post
<footnote><simpara>available at: <link xl:href="http://www.2ality.com/2013/06/iterators-generators.html">http://www.2ality.com/2013/06/iterators-generators.html</link></simpara></footnote> that is kept up
to date with changes to ECMAScript 6: <emphasis>"ECMAScript 6 has a new loop,
for-of. That loop works with iterables. Before we can use it with
createArrayIterator(), we need to turn the result into an iterable"</emphasis>.</simpara>
<simpara>An array or object destructuring pattern may be used left of the <literal>of</literal>.
This is used to destructure the elements of the <literal>Iterable</literal> on the right-hand side (not the <literal>Iterable</literal> itself). For detais, see <xref linkend="Destructuring"/>.</simpara>
<simpara>=== Import Statement</simpara>
<simpara>Cf. ES6 import [<link linkend="ECMA15a">ECMA15a(p.15.2.2)</link>], see also <link xl:href="https://babeljs.io/docs/usage/modules/">https://babeljs.io/docs/usage/modules/</link></simpara>
<simpara>==== Syntax <anchor xml:id="import-statement-syntax" xreflabel="[import-statement-syntax]"/></simpara>
<simpara>The grammar of import declarations is defined as follows:</simpara>
<screen>ImportDeclaration:
    {ImportDeclaration}
    ImportDeclarationImpl
;

fragment ImportDeclarationImpl*:
    'import' (
        ImportClause importFrom?='from'
    )? module=[types::TModule|ModuleSpecifier] Semi
;

fragment ImportClause*:
        importSpecifiers+=DefaultImportSpecifier (',' ImportSpecifiersExceptDefault)?
    |   ImportSpecifiersExceptDefault
;

fragment ImportSpecifiersExceptDefault*:
        importSpecifiers+=NamespaceImportSpecifier
    |   '{' (importSpecifiers+=NamedImportSpecifier (',' importSpecifiers+=NamedImportSpecifier)* ','?)? '}'
;

NamedImportSpecifier:
        importedElement=[types::TExportableElement|BindingIdentifier&lt;Yield=false&gt;]
    |   importedElement=[types::TExportableElement|IdentifierName] 'as' alias=BindingIdentifier&lt;Yield=false&gt;
;

DefaultImportSpecifier:
    importedElement=[types::TExportableElement|BindingIdentifier&lt;Yield=false&gt;]
;

NamespaceImportSpecifier: {NamespaceImportSpecifier} '*' 'as' alias=BindingIdentifier&lt;false&gt; (declaredDynamic?='+')?;

ModuleSpecifier: STRING;</screen>
<simpara>These are the properties of import declaration which can be specified by
the user:</simpara>
<variablelist>
<varlistentry>
<term><literal>annotations</literal> </term>
<listitem>
<simpara>Arbitrary annotations, see <xref linkend="Annotations"/> and below for details.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>importSpecifiers</literal> </term>
<listitem>
<simpara>The elements to be imported with their names.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Also see compilation as described in <xref linkend="_modules"/>, for semantics see following
section.</simpara>
<screen>import A from "p/A"
import {C,D,E} from "p/E"
import * as F from "p/F"
import {A as G} from "p/G"
import {A as H, B as I} from "p/H"</screen>
<simpara>==== Semantics <anchor xml:id="import-statement-semantics" xreflabel="[import-statement-semantics]"/></simpara>
<simpara>Import statements are used to import identifiable elements from another
module. Identifiable elements are</simpara>
<itemizedlist>
<listitem>
<simpara>types (via their type declaration), in particular</simpara>
<itemizedlist>
<listitem>
<simpara>classifiers (classes, interfaces)</simpara>
</listitem>
<listitem>
<simpara>functions</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>variables and constants. </simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-190"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-190</link></simpara>
</sidebar>
<simpara>The module to import from is identified by the string literal following
keyword <literal>from</literal>. This string must be a valid</simpara>
<itemizedlist>
<listitem>
<simpara>complete module specifier <footnote><simpara>For more details on module specifiers, see <xref linkend="Qualified_Names"/>.</simpara></footnote>:</simpara>
<screen>    import {A} from "ProjectA/a/b/c/M"</screen>
</listitem>
<listitem>
<simpara>plain module specifier:</simpara>
<screen>    import {A} from "a/b/c/M"</screen>
</listitem>
<listitem>
<simpara>or project name only, assuming the project defines a main module in
its manifest (using the <literal>MainModule</literal> manifest property, <xref linkend="Manifest_Properties"/>):</simpara>
<screen>    import {A} from "ProjectA"</screen>
</listitem>
</itemizedlist>
<simpara>For choosing the element to import, there are the exact same options as
in ECMAScript6:</simpara>
<itemizedlist>
<listitem>
<simpara>named imports select one or more elements by name, optionally
introducing a local alias:</simpara>
<screen>    import {C} from "M"
    import {D as MyD} from "M"
    import {E, F as MyF, G, H} from "M"</screen>
</listitem>
<listitem>
<simpara>namespace imports select all elements of the remote module for import
and define a namespace name; the imported elements are then accessed via
the namespace name:</simpara>
<screen>    import * as N from "M"
    var c: N.C = new N.C();</screen>
</listitem>
<listitem>
<simpara>default imports select whatever element was exported by the remote
module as the default (there can be at most one default export per
module):</simpara>
<screen>    import C from "M"</screen>
</listitem>
</itemizedlist>
<simpara>The following constraints are defined on a
(non-dynamic) import statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math>:</simpara>
<itemizedlist>
<listitem>
<simpara>The imported module needs to be accessible from the current project.</simpara>
</listitem>
<listitem>
<simpara>The imported declarations need to be accessible from the current
module.</simpara>
</listitem>
</itemizedlist>
<simpara>For named imports, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>No declaration must be imported multiple times, even if aliases are
used.</simpara>
</listitem>
<listitem>
<simpara>The names must be unique in the module. They must not conflict with
each other or locally declared variables, types, or functions.</simpara>
</listitem>
<listitem>
<simpara>Declarations imported via named imports are accessible only via used
name (or alias) and not via original name directly.</simpara>
</listitem>
</itemizedlist>
<simpara>For wildcard imports, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>Only one namespace import can be used per (target) module, even if
different namespace name is used.</simpara>
</listitem>
<listitem>
<simpara>The namespace name must be unique in the module. They must not
conflict with each other or locally declared variables, types, or
functions.</simpara>
</listitem>
<listitem>
<simpara>Declarations imported via namespace import are accessible via
namespace only and not with original name directly.</simpara>
</listitem>
</itemizedlist>
<simpara>For namespace imports, the following constraints must hold:</simpara>
<itemizedlist>
<listitem>
<simpara>If the referenced module is a plain <literal>js</literal> file, a warning will be
created to use the dynamic import instead.</simpara>
</listitem>
</itemizedlist>
<simpara>For default imports, the following constraints must hold: </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1744"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1744</link></simpara>
</sidebar>
<itemizedlist>
<listitem>
<simpara>The referenced module must have a default export.</simpara>
</listitem>
</itemizedlist>
<simpara>Cross-cutting constraints:</simpara>
<itemizedlist>
<listitem>
<simpara>No declaration can be imported via named import and namespace import
at the same time.</simpara>
</listitem>
</itemizedlist>
<simpara>Imports cannot be duplicated:</simpara>
<screen>import * as A from 'A';
import * as A from 'A';//error, duplicated import statement

import B from 'B';
import B from 'B';//error, duplicated import statement</screen>
<simpara>Given element cannot be imported multiple times:</simpara>
<screen>import * as A1 from 'A';
import * as A2 from 'A';//error, elements from A already imported in A1

import B from 'B';
import B as B1 from 'B';//error, B/B is already imported as B

import C as C1 from 'C';
import C from 'C';//error, C/C is already imported as C1

import D as D1 from 'D';
import D as D2 from 'D';//error, D/D is already imported as D1

import * as NE from 'E';
import E from 'E';//error, E/E is already imported as NE.E

import F from 'F';
import * as NF from 'F';//error, F/F is already imported as F</screen>
<simpara>Names used in imports must not not conflict with each other or local
declarations:</simpara>
<screen>import * as A from 'A1';
import * as A from 'A2';//A is already used as namespace for A1

import B from 'B1';
import B1 as B from 'B2';//B us already used as import B/B1

import C1 as C from 'C1';
import * as C from 'C2'; //C is already used as import C1/C1

import * as D from 'D1';
import D2 as D from 'D2';//D is already used as namespace for D1

import E from 'E';
var E: any; // conflict with named import E/E

import * as F from 'F';
var F: any; // conflict with namespace F</screen>
<simpara>Using named imports, aliases and namespaces allows to refer to mulitple
types of the same name such as  <literal>A/A</literal>, <literal>B/A</literal> and <literal>C/A</literal>:</simpara>
<screen>import A from 'A';// local name A referencess to A/A
import A as B from 'B';//local name B referencess to B/A
import * as C from 'C';//local name C.A referencess to C/A</screen>
<simpara>If a declaration has been imported with an alias or namespace, it is not
accessible via its original name:</simpara>
<screen>import * as B from 'A1';
import A2 as C from 'A2';

var a1_bad: A1;//error, A1/A1 is not directly accessible with original name
var a1_correct: B.A1;// A1/A1 is accessible via namespace B
var a2_bad: A2;//error, A2/A2 is not directly accessible with original name
var a2_correct: C;// A2/A2 is accessible via alias C</screen>
<simpara>==== Dynamic Imports</simpara>
<simpara>N4JS extends the ES6 module import in order that modules without a
<literal>n4jsd</literal> or <literal>n4js</literal> file (plain <literal>js</literal> modules) can be imported. This is
done by adding <literal>+</literal> to the name of the named import.</simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> be an import
statement <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> with a dynamic namespace specifier. The
following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>.</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi></math> must not reference an <literal>n4js</literal> file.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>.</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi></math> references an <literal>n4jsd</literal> file, a warning is
to be created.</simpara>
</listitem>
<listitem>
<simpara>If the file referenced by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi><mo>.</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi></math> is not found, an
error is created just as in the static case.</simpara>
</listitem>
</orderedlist>
<simpara>These constraints define the error level when using dynamic import: we
receive no error for <literal>js</literal>, a warning for <literal>n4jsd</literal>, and an error for
<literal>n4js</literal> files. The idea behind these distinct error levels is as follows:
If only a plain <literal>js</literal> file is available, using the dynamic import is the
only way to access elements from the <literal>js</literal> module. This might be an
unsafe way, but it allows the access and simplifies the first steps. An
<literal>n4jsd</literal> file may then be made available either by the developer using
the <literal>js</literal> module or by a third-party library. In this case, we do not
want to break existing code. There is only a warning created in the case
of an available <literal>n4jsd</literal> file and a <literal>js</literal> file still must be provided by
the user. Having an <literal>n4js</literal> file is a completely different story; no
<literal>n4jsd</literal> file is required, no <literal>js</literal> file is needed (since the transpiler
creates one from the <literal>n4js</literal> file) and there is absolutely no reason to
use the module dynamically.</simpara>
<simpara>==== Immutabilaty of Imports</simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/119"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-119</link></simpara>
</sidebar>
<simpara>Imports create always immutable bindings, c.f.
[<link linkend="ECMA15a">ECMA15a(p.8.1.1.5)</link>]
<link xl:href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-createimportbinding">http://www.ecma-international.org/ecma-262/6.0/index.html#sec-createimportbinding</link></simpara>
<simpara>Let <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> be a binding to an imported element. It is an error if</simpara>
<itemizedlist>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> occurs on the left-hand side as the assignment-target
of an assignment expression (this also includes any level in a
destructuring pattern on the left-hand side),</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> as a direct argument of a postfix operator (/),</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> as a direct argument of a operator,</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math> as a direct argument of the <literal>increment</literal> or
<literal>decrement</literal> unary operator (/)</simpara>
</listitem>
</itemizedlist>
<simpara>=== Export Statement</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1302"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1302</link></simpara>
</sidebar>
<simpara>Cf. ES6 import [<link linkend="ECMA15a">ECMA15a(p.15.2.3)</link>]</simpara>
<simpara>==== Syntax <anchor xml:id="export-statement-syntax" xreflabel="[export-statement-syntax]"/></simpara>
<simpara>Grammar of export declarations is defined as follows:</simpara>
<screen>ExportDeclaration:
    {ExportDeclaration}
    ExportDeclarationImpl
;

fragment ExportDeclarationImpl*:
    'export' (
        wildcardExport?='*' ExportFromClause Semi
    |   ExportClause -&gt;ExportFromClause? Semi
    |   exportedElement=ExportableElement
    |   defaultExport?='default' (-&gt;exportedElement=ExportableElement | defaultExportedExpression=AssignmentExpression&lt;In=true,Yield=false&gt; Semi)
    )
;

fragment ExportFromClause*:
    'from' reexportedFrom=[types::TModule|ModuleSpecifier]
;

fragment ExportClause*:
    '{'
        (namedExports+=ExportSpecifier (',' namedExports+=ExportSpecifier)* ','?)?
    '}'
;

ExportSpecifier:
    element=IdentifierRef&lt;Yield=false&gt; ('as' alias=IdentifierName)?
;

ExportableElement:
      N4ClassDeclaration&lt;Yield=false&gt;
    | N4InterfaceDeclaration&lt;Yield=false&gt;
    | N4EnumDeclaration&lt;Yield=false&gt;
    | ExportedFunctionDeclaration&lt;Yield=false&gt;
    | ExportedVariableStatement
;</screen>
<simpara>This are the properties of export declaration, which can be specified by
the user:</simpara>
<variablelist>
<varlistentry>
<term><literal>exportedElement</literal> </term>
<listitem>
<simpara>The element to be exported, can be a declaration or a variable/const
statement.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>export public class A{}
export interface B{}
export function foo() {}
export var a;
export const c="Hello";</screen>
<simpara>==== Semantics <anchor xml:id="export-statement-semantics" xreflabel="[export-statement-semantics]"/></simpara>
<simpara>With regard to type inference, export statements are not handled at all.
Only the exported element is inferred and the <literal>export</literal> keyword is ignored.</simpara>
<simpara>In order to use types defined in other compilation units, these types
have to be explicitly imported with an import statement.</simpara>
<simpara>Imported namespaces cannot be exported.</simpara>
<simpara>Declared elements (types, variables, functions) are usually only visible
outside the declaring module if the elements are exported and imported
(by the using module, cf. <xref linkend="Import_Statement"/>&gt;&gt;).</simpara>
<simpara>Some special components (runtime environment and libraries, cf. <xref linkend="Runtime_Environment_Libraries"/>, may export elements globally. This is done by annotating the export (or the
whole module) with <literal>@Global</literal>, see <xref linkend="Global_Definitions"/> for details.</simpara>
<simpara>By adding <literal>default</literal> after the keyword <literal>export</literal>, the identifiable element can be exported as ’the default’. This can then be imported from other modules via
default imports (see <xref linkend="Import_Statement"/>).</simpara>
<simpara>= Annotations
  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-139"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-139</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-260</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-272"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-272</link></simpara>
</sidebar>
<simpara>== Introduction</simpara>
<simpara>Annotations are used to further define meta properties of language
elements such as types, variables and functions. These annotations are
used by the compiler and validator to prohibit the developer from
introducing constructs which are either not allowed or are unnecessary
in certain contexts.</simpara>
<simpara>Since annotations are to be processed by the compiler and the
compilation cannot be extended by third-party users for security
reasons, annotations cannot be defined by developers. Instead, the
compiler comes with a predefined set of annotations which are summarized
here.</simpara>
<simpara>=== Syntax</simpara>
<simpara>Annotations are used similarly as in Java (although new annotations
cannot be defined by the user). They are formally defined as follows:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">Annotation:'@' AnnotationNoAtSign;
ScriptAnnotation returns Annotation: '@@' AnnotationNoAtSign;

AnnotationNoAtSign returns Annotation:
    name=AnnotationName (=&gt; '(' (args+=AnnotationArgument (',' args+=AnnotationArgument)*)? ')')?;

AnnotationArgument:
    LiteralAnnotationArgument | TypeRefAnnotationArgument
;

LiteralAnnotationArgument:
    literal=Literal
;

TypeRefAnnotationArgument:
    typeRef=TypeRef
;</programlisting>
<simpara>=== Properties</simpara>
<simpara>We use the map notation for retrieving annotation properties and values
from a list of annotations, for example
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mo>.</mo><mi>a</mi><mi>n</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi><mrow><mo>[</mo><mi>R</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi></mrow></math>$], or shorter
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>x</mi><mi>@</mi><mi>R</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi></math>.</simpara>
<simpara>=== Element-Specific Annotations</simpara>
<simpara>The following annotations are element-specific and are explained in the
corresponding sections:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="50*"/>
<colspec colname="col_3" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Annotation</entry>
<entry align="center" valign="top">Element Types</entry>
<entry align="left" valign="top">Section</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>@Internal</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>TypeDefiningElement, Member, Function, Export</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Access_Control"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Undefined</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Variable</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Undefined_Type"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@StringBased</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Enum</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="String_Based_Enums"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Final</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Class, Member</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Final_Methods"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Spec</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>FPar</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Spec_Construtor"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Override</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Method</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Redefinition_of_Members"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Promisifiable</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Promisifiable_Functions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Promisify</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>CallExpression</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Promisifiable_Functions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@This</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="This_keyword"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@N4JS</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Class, Export Statement</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="External_Declarations"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@IgnoreImplementation</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Script, ExportDeclaration, ExportableElement</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="External_Declarations"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Global</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>External Declaration</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Global_Definitions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@ProvidedByRuntime</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>External Declaration</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Runtime_Definitions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@TestAPI</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>TypeDefiningElement, Member</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Test_Support"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@Polyfill</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Class</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Polyfill_Definitions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@StaticPolyfill</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Class</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Static_Polyfill_Definitions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@StaticPolyfillAware</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Script</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Static_Polyfill_Definitions"/></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>@StaticPolyfillModule</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Script</literal></simpara></entry>
<entry align="left" valign="top"><simpara><xref linkend="Static_Polyfill_Definitions"/></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara>intended for internal use only; will be removed.</simpara>
</listitem>
</itemizedlist>
<simpara>=== General Annotations</simpara>
<simpara>==== IDEBUG</simpara>
<simpara><literal>IDEBUG</literal> is an annotation similar to Java’s <literal>@SuppressWarnings</literal>. It changes the severity of an issue
from an error to a warning so that code can be compiled regardless of
validation errors. This is to be used for known IDE bugs only.</simpara>
<simpara>=== Syntax <anchor xml:id="idebug-syntax" xreflabel="[idebug-syntax]"/></simpara>
<screen>'@IDEBUG' '(' bugID = INT ',' errorMessage=STRING ')'</screen>
<simpara>The annotation is defined transitively and repeatable on script, type
declaration, function and method level.</simpara>
<simpara>==== Semantics</simpara>
<simpara>This annotation will cause errors issued in the scope of the annotation
(in the defined script, type, or method) to be transformed to warnings
if their message text is similar to the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>M</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi></math> text.
If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>M</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi></math> ends with <literal>…</literal> (three dots as a single
character, created by Eclipse to abbreviate messages), then the error’s
message text must start with the specified text.</simpara>
<simpara>If no matching error is found, the annotation itself will issue an
error.</simpara>
<simpara>[IDEBUG][ex:IDEBUG] In the following code snippet, two errors are to be
transformed to warnings.</simpara>
<screen>export class TestDataBridge with IModuleTest {
    @IDEBUG(166, "{function(number):void} is not a subtype of {function(T):void}.")
    @IDEBUG(91, "Incorrect number of arguments: expected 1, got 2.")
    @Override public run(): void {
        var foo = new Foo(),
            cb = function(val: number): void {},
            db = DataBridge.&lt;number&gt;bind(foo, "bar");
        db.add(cb);
        Assert.isTrue(called);
    }
}</screen>
<simpara>The first one would occur on line 8, since there is a bug in the IDE
type system (as of writing this example) that type arguments are not
correctly bound in case of function expressions used as callback
methods. The annotation in line 2 transforms the error</simpara>
<screen>{function(number):void} is not a subtype of {function(T):void}.</screen>
<simpara>into a warning with the following text:</simpara>
<screen>IDEBUG-166: {function(number):void} is not a subtype of {function(T):void}.</screen>
<simpara>refers to the corresponding bug report, that is .</simpara>
<simpara>The annotation on line 3 was proposed as a workaround for <literal>IDEBUG-91</literal> which has
been fixed. <footnote><simpara>Hopefully IDEBUG-166  is fixed at time of publication.</simpara></footnote>. No error message is produced and an error will be issued on line 3 instead:</simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/166"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-166</link></simpara>
</sidebar>
<screen>No matching error found, apparently bug IDEBUG-91 has been fixed or does not occur here.</screen>
<simpara>==== Suppress Warnings</simpara>
<simpara>== Declaration of Annotations</simpara>
<simpara>= Extended Fetaures</simpara>
<simpara>== Array and Object Destructuring</simpara>
<simpara>N4JS supports array and object destructuring as provided in ES6. This is
used to conveniently assign selected elements of an array or object to a
number of newly-declared or pre-existing variables or to further
destructure them by using nested destructuring
patterns.</simpara>
<simpara><footnote><simpara>Further reading on <link linkend="AC">DI</link>: : Basics [<link linkend="Fowler04b">Fowler04b</link>; <link linkend="Prasanna09a">Prasanna09a</link></simpara></footnote>,  Verification [<link linkend="Zhu13a">Zhu13a</link>; <link linkend="Hudli13a">Hudli13a</link>],  Frameworks [<link linkend="Lesiecki08a">Lesiecki08a</link>; <link linkend="Betts13a">Betts13a</link>; <link linkend="Knol13a">Knol13a</link>; <link linkend="Dagger">Dagger</link>] , Verification ,
Frameworks ]</simpara>
<simpara>=== Syntax</simpara>
<programlisting language="n4js" linenumbering="unnumbered">BindingPattern &lt;Yield&gt;:
    ObjectBindingPattern&lt;Yield&gt;
    | ArrayBindingPattern&lt;Yield&gt;
;

ObjectBindingPattern &lt;Yield&gt; returns BindingPattern:
    {BindingPattern}
    '{' (properties+=BindingProperty&lt;Yield,AllowType=false&gt; (',' properties+=BindingProperty&lt;Yield,AllowType=false&gt;)*)? '}'
;

ArrayBindingPattern &lt;Yield&gt; returns BindingPattern:
    {BindingPattern}
    '['
        elements+=Elision* (
            elements+=BindingRestElement&lt;Yield&gt;
            (',' elements+=Elision* elements+=BindingRestElement&lt;Yield&gt;)*
            (',' elements+=Elision*)?
        )?
    ']'
;

BindingProperty &lt;Yield, AllowType&gt;:
      =&gt;(LiteralBindingPropertyName&lt;Yield&gt; ':') value=BindingElement&lt;Yield&gt;
    | value=SingleNameBinding&lt;Yield,AllowType&gt;
;

fragment LiteralBindingPropertyName &lt;Yield&gt;*:
    declaredName=IdentifierName | declaredName=STRING | declaredName=NumericLiteralAsString
    // this is added here due to special treatment for a known set of expressions
    | '[' (declaredName=SymbolLiteralComputedName&lt;Yield&gt; | declaredName=STRING) ']'
;</programlisting>
<simpara>=== Semantics</simpara>
<simpara>The following example declares four variables <literal>a</literal>, <literal>b</literal>, <literal>x</literal>, and <literal>prop2</literal>. Variables <literal>a</literal> and <literal>x</literal> will have the value <literal>hello</literal>, whereas <literal>b</literal> and <literal>prop2</literal> will have value 42.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var [a,b] = ["hello", 42];

var {prop1:x, prop2} = {prop1:"hello", prop2:42};</programlisting>
<simpara>In the case of <literal>prop2</literal>, we do not provide a property name and variable name
separately; this is useful in cases where the property name also makes
for a suitable variable name (called <literal>single name binding</literal>).</simpara>
<simpara>One of the most useful use cases of destructuring is in a <literal>for..of</literal> loop. Take
this example:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var arr1 = [ ["hello",1,2,3], ["goodbye",4,5,6] ];
for(var [head,...tail] of arr1) {
    console.log(head,'/',tail);
}
// will print:
//   hello / [ 1, 2, 3 ]
//   goodbye / [ 4, 5, 6 ]

var arr2 = [ {key:"hello", value:42}, {key:"goodbye", value:43} ];
for(var {key,value} of arr2) {
    console.log(key,'/',value);
}
// will print:
//   hello / 42
//   goodbye / 43</programlisting>
<simpara>Array and object destructuring pattern can appear in many different
places:</simpara>
<itemizedlist>
<listitem>
<simpara>In a variable declaration (not just in variable statements but also in
other places where variable declarations are allowed, e.g. plain for
loops; called <emphasis>destructuring binding</emphasis>; see <xref linkend="Var_Statement"/>).</simpara>
</listitem>
<listitem>
<simpara>On the left-hand side of an assignment expression (the assignment
expression is then called <emphasis>destructuring assignment</emphasis>; see <xref linkend="Assignment_Expression"/>).</simpara>
</listitem>
<listitem>
<simpara>In a <literal>for..in</literal> or <literal>for..of</literal> loop on the left side of the <literal>in</literal>/<literal>of</literal> (see <xref linkend="for_of_statement"/>).<?asciidoc-br?>
NOTE: It can also be used in plain statements, but then we actually have
one of the above two use cases.</simpara>
</listitem>
<listitem>
<simpara>With lists of formal parameters or function arguments (NOT SUPPORTED
YET) .</simpara>
</listitem>
</itemizedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1609"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1609</link></simpara>
</sidebar>
<simpara>For further details on array and object destructuring please refer to
the ECMAScript 6 specification.</simpara>
<simpara>Type annotations can only be added when a new variable name is
introduced since the short version would be ambiguous with the long one.
For example:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var {x: someTypeOrNewVar} = ol</programlisting>
<simpara>could either mean that a new variable is declared and is assigned to it,
or that a new variable is declared with type . The longer form would
look like this:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var {x: x: someType} = ol</programlisting>
<simpara>We can make this more readable:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var {propOfOl: newVar: typeOfNewVar} = ol</programlisting>
<simpara>== Dependency Injection</simpara>
<simpara>This chapter describes <link linkend="AC">DI</link> mechanisms for N4JS. This includes compiler,
validation and language extensions that allow to achieve <link linkend="AC">DI</link> mechanisms
built in into the N4JS language and IDE.</simpara>
<simpara>N4JS <link linkend="AC">DI</link> support specifies a means for obtaining objects in such a way as to
maximize reusability, testability and maintainability, especially
compared to traditional approaches such as constructors, factories and
service locators. While this can be achieved manually (without tooling
support) it is difficult for nontrivial applications. The solutions that <link linkend="AC">DI</link>
provides should empower N4JS users to achieve the above goals without
the burden of maintaining so-called ’boilerplate’ code.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="fig/diTerms.PNG"/>
</imageobject>
<textobject><phrase>fig:diTerms</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><emphasis>key: pass the dependency instead of letting the client create or find it</emphasis></simpara>
<simpara>Core terms</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Service</emphasis> - A set of APIs describing the functionality of the service.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Service Implementation</emphasis>s - One or more implementations of given
service API.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Client</emphasis> - Consumer of a given functionality, uses the given <emphasis role="strong">Service
Implementation</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Injector</emphasis> - Object providing <emphasis role="strong">Service Implementation</emphasis> of a specific
<emphasis role="strong">Service</emphasis>, according to configuration.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Binding</emphasis> - Part of configuration describing which interface
implementing a subtype will be injected, when a given interface is
requested.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Provider</emphasis> - Factory used to create instances of a given <emphasis role="strong">Service
Implementation</emphasis> or its sub-components, can be a method.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Injection Point</emphasis> - Part of the user’s code that will have the given
dependency injected. This is usually fields, method parameters,
constructor parameters etc.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">di configuration</emphasis> - This describes which elements of the user’s code
are used in mechanisms and how they are wired. It is derived from user
code elements being marked with appropriate annotations, bindings and
providers.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">di wiring</emphasis> - The code responsible for creating user objects. These
are injectors, type factories/providers, fields initiators etc.</simpara>
</listitem>
</itemizedlist>
<simpara>=== DI Components and Injectors</simpara>
<simpara>N4JS’ <link linkend="AC">DI</link> systems is based on the notion of <link linkend="AC">DIC</link>.</simpara>
<simpara>A <link linkend="AC">DIC</link> is a N4Class annotated with <literal>@GenerateInjector</literal>.</simpara>
<simpara>This annotation causes an <emphasis>injector</emphasis> to be created for (and associated
to) the <link linkend="AC">DI</link>. <link linkend="AC">DIC</link> can be composed; meaning that when requested to inject an
instance of a type, a <link linkend="AC">DIC</link>’s injector can delegate this request to the
injector of the containing <link linkend="AC">DIC</link>.
An injector always prioritizes its own configuration before delegating to the container’s injector.
For validation purposes, a child <link linkend="AC">DI</link> can be annotated with <literal>@WithParent</literal> to ensure that it is always used with a proper parent.</simpara>
<simpara><emphasis>Injector</emphasis> is the main object of <link linkend="AC">DI</link> mechanisms responsible for creating
object graphs of the application. At runtime, injectors are instances of
<literal>N4Injector</literal>.</simpara>
<simpara>The following constraints must hold for a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> marked as <link linkend="AC">DIC</link>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A subclass <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is a <xref linkend="DIC"/> as well and it
must be marked with <literal>GenerateInjector</literal> .</simpara>
</listitem>
<listitem>
<simpara>If a parent <link linkend="DIComponent Relations">DIC</link> <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> is specified via <literal>WithParent</literal>, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> must be a \ac{DIC} as well.</simpara>
</listitem>
<listitem>
<simpara>The injector associated to a \ac{DIC} is of type <literal>N4Injector</literal>. It can be retrieved via <literal>N4Injector.of(DIC)</literal> in which <literal>DIC</literal> is the <literal>DIC</literal>.</simpara>
</listitem>
<listitem>
<simpara>Injectors associated to \ac{DIC} a are DI-singletons (cf. <xref linkend="Singleton Scope"/>).
Two calls to <literal>N4Injector.of(DIC)</literal> are different (as different \acp{DIC} are assumed).</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1563"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1563</link></simpara>
</sidebar>

<simpara>
We call the (transitive)
creation and setting of values by an injector <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> caused by
the creation of an root object <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math> the <emphasis>injection phase</emphasis>.
If an instance <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is newly created by the injector
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> (regardless of the injection point being used), the
injection is transitively applied on <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>. The following
constraints have to hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1497"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1497</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>Root objects are created by one of the following mechanisms:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Any class or interface can be created as root objects via an
injector associated to a \ac{DIC}: <literal>var x: X = N4Injector.of(DIC).create(X);</literal>
in which <literal>DIC</literal> is a <literal>ac{DIC}</literal>. Of course, an appropriate binding must
exist. <footnote><simpara>Usually, only the itself is created like that, e.g., <literal>ar dic = N4Injector.of(DIC).create(DIC);}</literal></simpara></footnote></simpara>
</listitem>
<listitem>
<simpara>If a type has the injector being injected, e.g. via field injection
<literal>@Inject injector: N4Injector;</literal>, then this injector can be used anytime in the control flow to create a new root object similar as above (using <literal>create</literal> method).</simpara>
</listitem>
<listitem>
<simpara>If a provider has been injected (i.e., an instance of <literal>N4Provider}</literal>), then its
method can be used to create a root object causing a new injection phase
to take place.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> is marked as injection point, all its
arguments are set by the injector. This is also true for an inherited
constructor marked as an injection point. See <xref linkend="req:Constructor_Injection"/> . For all arguments the injection phase constraints have to hold as well.
\item All fields of $C$, including \emph{inherited} once, marked as injection points are set by the injector. For all fields the injection phase constraints have to hold as well.
 </simpara>
</listitem>
<listitem>
<simpara>All fields of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math>, including <emphasis>inherited</emphasis> once, marked as
injection points are set by the injector. For all fields the injection
phase constraints have to hold as well.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1264"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1264</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1264"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1264</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/441"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-441</link></simpara>
</sidebar>
<simpara>The injector may use a provider method (of a binder) to create nested
instances.</simpara>
<simpara>The injector is configured with <emphasis>Binders</emphasis> and it tracks <emphasis>Bindings</emphasis>
between types (). An N4JS developer normally would not interact with
this object directly except when defining an entry-point to his
application. <emphasis>Injector</emphasis>s are configured with <emphasis>Binder</emphasis>s which contain
explicit <emphasis>Binding</emphasis>s defined by an N4JS developer. A set of these
combined with <emphasis>implicit bindings</emphasis> creates the <emphasis>di configuration</emphasis> used by
a given injector. To configure given <emphasis>Injector</emphasis>s with given
<emphasis>Binder</emphasis>(s) use <literal>@UseBinder</literal> annotation.</simpara>
<simpara>==== DIComponent Relations</simpara>
<simpara>A Parent-Child relation can be established between two DIComponents.
Child DIComponents use the parent bindings but can also be configured
with their own bindings or <emphasis>change</emphasis> targets used by a parent. The final
circumstance is local to the child and is referred to as <emphasis>rebinding</emphasis>.
For more information about bindings see . A Child-Parent relation is
expressed by the annotation attached to a given DIComponent. When this
relation is defined between DIComponents, the user needs to take care to
preserve the proper relation between injectors. In other words, the user
must provide an instance of the parent injector (the injector of the
DIComponent passes as a parameter to <literal>@WithParentInjector</literal>) when creating the child injector
(injector of the DIComponent annotated with <literal>@WithParentInjector</literal>).</simpara>
<simpara>[[ex:Simple DIComponents Relation]]</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@GenerateInjector
class ParentDIComponent{}

@GenerateInjector
@WithParentInjector(ParentDIComponent)
class ChildDIComponent{}

var parentInejctor = N4Inejctor.of(ParentDiCompoennt);
var childInjector = N4Inejctor.of(ChildDIComponent, parentInjector);</programlisting>
<simpara>With complex DIComponent structures, injector instances can be created
with a directly-declared parent and also with any of its children. This
is due to the fact that any child can rebind types, add new bindings,
but not remove them. Any child is, therefore, <emphasis>compatible</emphasis> with its
parents.</simpara>
<simpara>A given DIComponent
is compatible with another DIComponent if it has bindings for all keys
in other component bindings.<?asciidoc-br?>
<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo><mi>D</mi><mi>I</mi><mi>C</mi><mn>1</mn><mo>,</mo><mi>D</mi><mi>I</mi><mi>C</mi><mn>2</mn><mi>:</mi><mi>D</mi><mi>I</mi><mi>C</mi><mn>1.</mn><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mo>.</mo><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><mi>D</mi><mi>I</mi><mi>C</mi><mn>2.</mn><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><mo>.</mo><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><mi>D</mi><mi>I</mi><mi>C</mi><mn>2</mn><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>D</mi><mi>I</mi><mi>C</mi><mn>1</mn></math></simpara>
<note>
<simpara>Although subtype notation <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi></math> is used here it does <emphasis role="strong">not</emphasis> imply actual subtype relations. It was used in this instance for of lack of formal notations for DI concepts and because this is similar to the Liskov Substitution principle.</simpara>
</note>
<simpara>A complex Child-Parent relation between components is depicted in <xref linkend="fig:diagDICParentChild"/> and <xref linkend="ex:Complex_DIComponents_Relations"/>.</simpara>
<figure xml:id="fig:diagDICParentChild">
<title>Complex DIComponents Relations</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/diagDICParentChild.png" align="center"/>
</imageobject>
<textobject><phrase>diagDICParentChild</phrase></textobject>
</mediaobject>
</figure>
<simpara>Complex DIComponents Relations</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@GenerateInjector class A {}
@GenerateInjector @WithParentInjector(A) class B {}
@GenerateInjector @WithParentInjector(B) class C {}
@GenerateInjector @WithParentInjector(C) class D {}
@GenerateInjector @WithParentInjector(A) class B2 {}
@GenerateInjector @WithParentInjector(B2) class C2 {}
@GenerateInjector @WithParentInjector(C2) class D2 {}
@GenerateInjector @WithParentInjector(A) class X {}
@GenerateInjector @WithParentInjector(C) class Y {}

// creating injectors
var injectorA = N4Injector.of(A);
//following throws DIConfigurationError, expected parent is not provided
//var injectorB =  N4Injector.of(B);
//correct declarations
var injectorB =  N4Injector.of(B, injectorA);
var injectorC = N4Injector.of(C, injectorB);
var injectorD = N4Injector.of(D, injectorC);
var injectorB2 = N4Injector.of(B2, injectorA);
var injectorC2 = N4Injector.of(C2, injectorB2);
var injectorD2 = N4Injector.of(D2, injectorC2);

//Any injector of {A,B,C,D,b2,C2,D2} s valid parent for injector of X, e.g. D or D2
N4Injector.of(X, injectorD);//is ok as compatible parent is provided
N4Injector.of(X, injectorD2);//is ok as compatible parent is provided

N4Injector.of(Y, injectorC);//is ok as direct parent is provided
N4Injector.of(Y, injectorD);//is ok as compatible parent is provided

N4Injector.of(Y, injectorB2);//throws DIConfigurationError, incompatible parent is provided
N4Injector.of(Y, injectorC2);//throws DIConfigurationError, incompatible parent is provided
N4Injector.of(Y, injectorD2);//throws DIConfigurationError, incompatible parent is provided</programlisting>
<simpara>=== Binders and Bindings</simpara>
<simpara><emphasis>Binder</emphasis> allows an N4JS developer to (explicitly) define a set of
<emphasis>Binding</emphasis>s that will be used by an <emphasis>Injector</emphasis> configured with a given
<emphasis>Binder</emphasis>. There are two ways for <emphasis>Binder</emphasis> to define <emphasis>Binding</emphasis>s: <literal>@Bind</literal> (<xref linkend="N4JS DI @Bind"/>)
annotations and a method annotated with <literal>@Provides</literal>.</simpara>
<simpara><emphasis>Binder</emphasis> is declared by annotating a class with the annotation.</simpara>
<simpara>A <emphasis>Binding</emphasis> is part of a configuration that defines which instance of
what type should be injected into an <emphasis>injection point</emphasis> (<xref linkend="N4JS_DI_Injection_Points"/>) with an expected type.</simpara>
<simpara><emphasis>Provider Method</emphasis> is essentially a <emphasis>factory method</emphasis> that is used to
create an instance of a type. N4JS allows a developer to declare those
methods (see <xref linkend="N4JS_DI_@Provides"/>) which gives them a hook in instance creation process.
Those methods will be used when creating instances by the <emphasis>Injector</emphasis>
configured with the corresponding <emphasis>Binder</emphasis>. A provider method is a
special kind of binding (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math>) in which the return type of
the method is the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math>. The <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></math> type is
unknown at compile time (although it may be inferred by examining the
return statements of the provide method).</simpara>
<simpara>A <emphasis>binding</emphasis> is a pair
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mfenced></math>. It defines that for a dependency with a
given key which usually is the expected type at the injection point. An
instance of type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></math> is injected.</simpara>
<simpara>A <emphasis>binding</emphasis> is called <emphasis>explicit</emphasis> if it is declared in the code, i.e. via <literal>@Bind</literal>
annotation or <literal>@Provides</literal> annotation).</simpara>
<simpara>A <emphasis>binding</emphasis> is called <emphasis>implicit</emphasis> if it is not declared. An implicit
binding can only be used if the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> is a class and derived
from the type at the injection point, i.e. the type of the field or
parameter to be injected. In that case, the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></math> equals
the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math>. </simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/484"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-484</link></simpara>
</sidebar>
<simpara>A provider method <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math> (in the binder) defines a binding
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>b</mi><mi>i</mi><mi>n</mi><mi>d</mi><mfenced close=")" open="("><mrow><mi>M</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></mrow><mi>X</mi></mfenced></math> (in which <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math> is an
existential type with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo><mi>X</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi></math>).</simpara>
<simpara>For simplification, we define<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi><mo>*</mo><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>,</mo></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>i</mi><mi>f</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow></mtd></mtr><mtr><mtd><mi>k</mi><mi>e</mi><mi>y</mi><mo>,</mo></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><mi>y</mi><mi>i</mi><mi>s</mi><mi>a</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow></mfenced></mrow></mtd></mtr></mtable></mfenced></math><?asciidoc-br?>
and<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>*</mo><mo>=</mo><mfenced close="" open="{"><mtable><mtr><mtd><mi>X</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>r</mi><mi>n</mi><mi>T</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>,</mo></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>i</mi><mi>f</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>s</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi>m</mi><mi>e</mi><mi>t</mi><mi>h</mi><mi>o</mi><mi>d</mi></mrow></mtd></mtr><mtr><mtd><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>,</mo></mtd><mtd><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi><mfenced close=")" open="("><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mi>i</mi><mi>s</mi><mi>a</mi><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>f</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>c</mi><mi>e</mi></mrow></mfenced></mrow></mtd></mtr></mtable></mfenced></math></simpara>

<simpara>For a given binding <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mo>=</mo><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mfenced></math>, the following constraints must
hold:
<footnote><simpara>Note that other frameworks may define other constraints, e.g., arbitrary keys.</simpara></footnote></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> must be either a class or an interface.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></math> must either be a class or a provider method.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi></math> is implicit, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> must be a
class. If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> references a type <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>T</mi></math>, then
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>=</mo><mi>T</mi></math> – even if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> is a use-site
structural type.</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>k</mi><mi>e</mi><mi>y</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>*</mo></math> can be nominal,
structural or field-structural types, either definition-site or
use-site.    The injector and binder needs to take the different structural
reference into account at runtime!</simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>*</mo><mi>k</mi><mi>e</mi><mi>y</mi></math> must hold</simpara>
</listitem>
<listitem>
<simpara>If during injection phase no binding for a given key is found, an is
thrown. </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1496"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1496</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/418"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-418</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/498"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-498</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/461"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-461</link></simpara>
</sidebar>

<simpara>If an injector contains two given bindings <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>1</mn></msub><mo>=</mo><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><msub><mi>t</mi><mn>1</mn></msub></mrow></mfenced></math> and
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>2</mn></msub><mo>=</mo><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>2</mn></msub></mrow><mrow><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>1</mn></msub></mrow></mfenced></math>, an effective binding
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mo>=</mo><mfenced close=")" open="("><mrow><mi>k</mi><mi>e</mi><msub><mi>y</mi><mn>2</mn></msub></mrow><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><msub><mi>t</mi><mn>1</mn></msub></mrow></mfenced></math> is derived (replacing
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>b</mi><mn>1</mn></msub></math>).</simpara>
<simpara>N4JS \ac{DI} mechanisms don’t allow for injection of primitives or built-in
types. Only user-defined N4Types can be used. In cases where a user
needs to inject a primitive or a built-in type, the developer must wrap
it into its own class.<footnote><simpara>Also cf. blog posting about <link xl:href="http://www.markhneedham.com/blog/2009/03/10/oo-micro-types/">micro types</link>, <link xl:href="http://darrenhobbs.com/2007/04/11/tiny-types/">tiny types</link></simpara></footnote>. This
is to say that none of the following metatypes can be bound: primitive
types, enumerations, functions, object types, union- or intersection
types. It is possible to (implicitly) bind to built-in classes.</simpara>
<simpara>While direct binding overriding or rebinding is not allowed, <emphasis>Injector</emphasis>
can be configured in a way where one type can be separately bound to
different types with implicit binding, <emphasis>explicit binding</emphasis> and in
bindings of the child injectors. <emphasis>Binding precedence</emphasis> is a mechanism of
<emphasis>Injector</emphasis> selecting a binding use for a type. If operates in the
following order:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Try to use explicit binding, if this is not available:</simpara>
</listitem>
<listitem>
<simpara>Try to delegate to parent injectors (order of lookup is not
guaranteed, first found is selected). If this is not available then:</simpara>
</listitem>
<listitem>
<simpara>Try to use use implicit binding, which is simply to attempt to
create the instance.</simpara>
</listitem>
</orderedlist>
<simpara>If no binding for a requested type is available an error will be thrown.</simpara>
<simpara>=== Injection Points</simpara>
<simpara>By <emphasis>injection point</emphasis> we mean a place in the source code which, at
runtime, will be expected to hold a reference to a particular type
instance.</simpara>
<simpara>==== Field Injection</simpara>
<simpara>In its simplest form, this is a class field annotated with <literal>@Inject</literal> annotation.
At runtime, an instance of the containing class will be expected to hold
reference to an instance of the field declared type. Usually that case
is called <emphasis>Field Injection</emphasis>.</simpara>
<simpara>The injector will inject the
following fields:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>All directly contained fields annotated with <literal>@Inject</literal>.</simpara>
</listitem>
<listitem>
<simpara>All inherited fields annotated with <literal>@Inject</literal>. </simpara>
</listitem>
<listitem>
<simpara>The injected fields will be created by the injector and their fields
will be injected as well.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/400"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-400</link></simpara>
</sidebar>
<simpara>demonstrates simple
field injection using default bindings. Note that all inherited fields
(i.e. <literal>A.xInA</literal>) are injected and also fields in injected fields (i.e. )</simpara>
<formalpara>
<title>Simple Field Injection</title>
<para>
<programlisting language="n4js" linenumbering="unnumbered">class X {
    @Inject y: Y;
}
class Y {}

class A {
    @Inject xInA: X;
}
class B extends A {
    @Inject xInB: X;
}

@GenerateInjector
export public class DIC {
    @Inject a: B;
}

var dic = N4Injector.of(DIC).create(DIC);
console.log(dic);              // --&gt; DIC
console.log(dic.a);            // --&gt; B
console.log(dic.a.xInA);       // --&gt; X
console.log(dic.a.xInA.y);     // --&gt; Y
console.log(dic.a.xInB);       // --&gt; X
console.log(dic.a.xInB.y);     // --&gt; Y</programlisting>
</para>
</formalpara>
<simpara>==== Constructor Injection</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1262"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1262</link></simpara>
</sidebar>
<simpara>Parameters of the constructor can also be injected, in which case this
is usually referred to as <emphasis>Constructor Inejction</emphasis>. This is similar to
<emphasis>Method Injection</emphasis> and while constructor injection is supported in N4JS,
method injection is not (see remarks below).</simpara>
<simpara>When a constructor is annotated with <literal>@Inject</literal> annotation, all user-defined,
non-generic types given as the parameters will be injected into the
instance’s constructor created by the dependency injection framework.
Currently, optional constructor parameters are always initialized and
created by the framework, therefore, they are ensured to be available at
the constructor invocation time. Unlike optional parameters, variadic
parameters cannot be injected into a type’s constructor. In case of
annotating a constructor with that has variadic parameters, a validation
error will be reported. When a class’s constructor is annotated with <literal>@Inject</literal>
annotation, it is highly recommended to annotate all explicitly-defined
constructors at the subclass level. If this is not done, the injection
chain can break and runtime errors might occur due to undefined
constructor parameters. In the case of a possible broken injection chain
due to missing <literal>@Inject</literal> annotations for any subclasses, a validation warning will
be reported.</simpara>
<simpara>If a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> has a constructor marked as injection point, the
following applies:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is subclassed by <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>, and if
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> has no explicit constructor, then <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math>
inherits the constructor from <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> and it will be an
injection point handled by the injector during injection phase.
  </simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi></math> provides its own injector, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math>
is no longer recognized by the injector during the injection phase.
There will be a warning generated in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> to mark it as
injection point as well in order to prevent inconsistent injection
behavior. Still, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> must be called in
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>S</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math> similarly to other overridden constructors.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/447"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-447</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/458"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-458</link></simpara>
</sidebar>
<simpara>==== Method Injection</simpara>
<simpara>Other kinds of injector points are method parameters where (usually) all
method parameters are injected when the method is called. In a way,
constructor injection is a special case of the method itself.</simpara>
<simpara>===== Provider</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1261"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1261</link></simpara>
</sidebar>
<simpara><emphasis>Provider</emphasis> is essentially a <emphasis>factory</emphasis> for a given type. By injecting an <literal>N4Provider</literal> into any injection point, one can acquire new instances of a given type
provided by the injected provider. The providers prove useful when one
has to solve re-injection issues since the depended type can be wired
and injected via the provider rather than the dependency itself and can
therefore obtain new instances from it if required. Provider can be also
used as a means of delaying the instantiation time of a given type.</simpara>
<simpara><literal>N4Provider</literal> is a public generic built-in interface that is used to support the
re-injection. The generic type represents the dependent type that has to
be obtained. The <literal>N4Provider</literal> interface has one single public method: <literal>public T get()</literal> which should be invoked from the client code when a new instance of the dependent type  is required.
Unlike any other unbound interfaces, the <literal>N4Provider</literal> can be injected
without any explicit binding.</simpara>
<simpara>The following snippet demonstrates the usage of <literal>N4Provider</literal>:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class SomeService { }

@Singleton
class SomeSingletonService { }

class SomeClass {

    @Inject serviceProvider: N4Provider&lt;SomeService&gt;;
    @Inject singletonServiceProvider: N4Provider&lt;SomeSingletonService&gt;;

    void foo() {
        console.log(serviceProvider.get() ===
            serviceProvider.get()); //false

        console.log(singletonServiceProvider.get() ===
            singletonServiceProvider.get()); //true
    }

}</programlisting>
<simpara>It is important to note that the <literal>N4Provider</literal> interface can be extended by any
user-defined interfaces and/or can be implemented by any user-defined
classes. For those user-defined providers, consider all binding-related
rules; the extended interface, for example, must be explicitly bound via
a binder to be injected. The binding can be omitted only for the
built-in <literal>N4Provider</literal>s.</simpara>
<simpara>=== N4JS DI Life Cycle and Scopes</simpara>
<simpara><link linkend="AC">DI</link> Life Cycle defines when a new instance is created by the injector as its
destruction is handled by JavaScript. The creation depends on the scope
of the type. Aside from the scopes, note that it is also possible to
implement custom scopes and life cycle management via <literal>N4JSProvider</literal> and
Binder@Provides methods.</simpara>
<simpara>==== Injection Cylces</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1608"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1608</link></simpara>
</sidebar>
<simpara>We define an injection graph
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mfenced close=")" open="("><mi>V</mi><mi>E</mi></mfenced></math> as a directed graph as follows: <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>V</mi></math>
(the vertices) is the set types of which instances are created during
the injection phase and which use . <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math> (the edges) is a set
of directed and labeled edges <math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><msub><mi>v</mi><mn>1</mn></msub><msub><mi>v</mi><mn>2</mn></msub><mrow><mi>l</mi><mi>a</mi><mi>b</mi><mi>e</mi><mi>l</mi></mrow></mfenced></math>, where
label indicates the injection point:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><msub><mi>T</mi><mi>o</mi></msub><msub><mi>T</mi><mi>f</mi></msub><mrow><mi>"</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>"</mi></mrow></mfenced></math>, if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mi>f</mi></msub></math> is the
actualy type of an an injected field of an instance of type
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mi>o</mi></msub></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mfenced close=")" open="("><msub><mi>T</mi><mi>c</mi></msub><msub><mi>T</mi><mi>p</mi></msub><mrow><mi>"</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>"</mi></mrow></mfenced></math>, if <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mi>p</mi></msub></math> is the type
of a parameter used in a constructor injection of type <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>T</mi><mi>c</mi></msub></math></simpara>
</listitem>
</orderedlist>
<simpara>One cycle in this graph is an injection cycle.</simpara>
<simpara>When injecting instances into an object, cycles have to be detected and
handled independently from the scope. If this is not done, the following
examples would result in an infinite loop causing the entire script to
freeze until the engine reports an error:</simpara>
<simpara>[c]0.6</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A { @Inject b: B; }
class B { @Inject a: A; }</programlisting>
<simpara>[c]0.4</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="fig/injectionGraph_cycleField.png" align="center"/>
</imageobject>
<textobject><phrase>injectionGraph cycleField</phrase></textobject>
</mediaobject>
</informalfigure>
<literallayout class="monospaced">+</literallayout>
<simpara>[c]0.6</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class C { @Inject constructor(d: D) {} }
class D { @Inject c: C; }</programlisting>
<simpara>[c]0.4</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="fig/injectionGraph_cycleCtorField.png" align="center"/>
</imageobject>
<textobject><phrase>injectionGraph cycleCtorField</phrase></textobject>
</mediaobject>
</informalfigure>
<literallayout class="monospaced">+</literallayout>
<simpara>[c]0.6</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class E { @Inject constructor(f: F) {} }
class F { @Inject constructor(e: E) {} }</programlisting>
<simpara>[c]0.4</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="fig/injectionGraph_cycleCtor.png" align="center"/>
</imageobject>
<textobject><phrase>injectionGraph cycleCtor</phrase></textobject>
</mediaobject>
</informalfigure>
<literallayout class="monospaced">+</literallayout>
<simpara>The injector needs to detect these cycles and resolve them.</simpara>
<simpara>A cycle <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi><mo>⊂</mo><mi>G</mi></math>, with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi></math> being an injection
graph, is resolved as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi></math> contains no edge with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>a</mi><mi>b</mi><mi>e</mi><mi>l</mi><mo>=</mo><mi>"</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>"</mi></math>,
the cycle is resolved using the algorithm described below.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>c</mi></math> contains at least one edge with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>a</mi><mi>b</mi><mi>e</mi><mi>l</mi><mo>=</mo><mi>"</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>"</mi></math>, a runtime exception is thrown.</simpara>
</listitem>
</orderedlist>
<simpara>Cycles stemming from field injection are resolved by halting the
creation of new instances of types which have been already created by a
containing instance. The previously-created instance is then reused.
This makes injecting the instance of a (transitive) container less
complicated and without the need to pass the container instance down the
entire chain. The following pseudo code describes the algorithm to
create new instances which are injected into a newly created object:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1608"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1608</link></simpara>
</sidebar>
<programlisting language="n4js" linenumbering="unnumbered">function injectDependencies(object) {
    doInjectionWithCylceAwareness(object, {(typeof object -&gt; object)})
}

function doInjectionWithCylceAwareness(object, createdInstancesPerType) {
    forall v $\in$ injectedVars of object {
        var type = retrieveBoundType(v)
        var instance = createdInstancesPerType.get(type)
        if (not exists instance) {
            instance = createInstance(type, createdInstancesPerType)
            doInjectionWithCylceAwareness(instance,
                createdInstancesPerType $\cap$ {(type-&gt;instance)})
        }
        v.value = instance;
    }
}</programlisting>
<simpara>The actual instance is created in line 10 via . This function then takes
scopes into account. The map is passed to that function in order to
enable cycle detection for constructor injection. The following scopes
are supported by the N4JS \ac{DI}, other scopes, cf.
<link xl:href="https://jersey.java.net/documentation/latest/ioc.html">Jersey custom
scopes</link> and <link xl:href="https://github.com/google/guice/wiki/CustomScopes">Guice
custom scopes</link>, may be added in the future.</simpara>
<simpara>This algorithm is not working for constructor injection because it is
possible to already access all fields of the arguments passed to the
constructor. In the algorithm, however, the instances may not be
completely initialized.</simpara>
<simpara>==== Default Scope</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1471"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1471</link></simpara>
</sidebar>
<simpara>The default scope always creates a new instance.</simpara>
<simpara>==== Singleton Scope</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1260"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1260</link></simpara>
</sidebar>
<simpara>The singleton scope (per injector) creates one instance (of the type with <literal>@Singleton</literal> scope) per injector, which is then shared between clients.</simpara>
<simpara>The injector will preserve a single instance of the type of <literal>S</literal> and will provide it to all injection points where type of <literal>S</literal> is used. Assuming nested injectors without any declared binding where the second parameter is <literal>S</literal>, the same preserved singleton instance will be available for all nested injectors at all injection points as well.</simpara>
<simpara>The singleton preservation behavior changes when explicit bindings are declared for type <literal>S</literal> on the nested injector level. Let&#8217;s assume that the type <literal>S</literal> exists and the type is annotated with <literal>@Singleton</literal>. Furthermore, there is a declared binding where the binding&#8217;s second argument is <literal>S</literal>. In that case, unlike in other dependency injection frameworks, nested injectors may preserve a singleton for itself and all descendant injectors with <literal>@Bind</literal> annotation. In this case, the preserved singleton at the child injector level will be a different instance than the one at the parent injectors.</simpara>
<simpara>The tables below depict the expected runtime behavior of singletons used at different injector levels.
Assume the following are injectors: <literal>C</literal>, <literal>D</literal>, <literal>E</literal>, <literal>F</literal> and <literal>G</literal>. Injector <literal>C</literal> is the top most injector and its nesting injector <literal>D</literal>, hence injector <literal>C</literal> is the parent of the injector <literal>D</literal>. Injector <literal>D</literal> is nesting <literal>E</literal> and so on. The most nested injector is <literal>G</literal>. Let&#8217;s assume <literal>J</literal> is an interface, class <literal>U</literal> implements interface <literal>J</literal> and class <literal>V</literal> extends class <literal>U</literal>. Finally assume both <literal>U</literal> and <literal>V</literal> are annotated with <literal>@Singleton</literal> at definition-site.</simpara>
<simpara>The example below depicts the singleton preservation for nested injectors without any bindings. All injectors use the same instance from a type. Type <literal>J</literal> is not available at all since it is not bound to any concrete implementation:</simpara>
<table xml:id="tab:diNoBindings" frame="all" rowsep="1" colsep="1">
<title>DI No Bindings</title>
<tgroup cols="6">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6666*"/>
<colspec colname="col_6" colwidth="16.667*"/>
<tbody>
<row>
<entry align="center" valign="top"><simpara>Binding</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>Injector nesting (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>t</mi><mi>;</mi></math>)</simpara></entry>
<entry align="center" valign="top"><simpara>C</simpara></entry>
<entry align="center" valign="top"><simpara>D</simpara></entry>
<entry align="center" valign="top"><simpara>E</simpara></entry>
<entry align="center" valign="top"><simpara>F</simpara></entry>
<entry align="center" valign="top"><simpara>G</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>J</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>U</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>V</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following example is configured by explicit bindings. At the root injector level, type <literal>J</literal> is binded to type <literal>U</literal>. Since the second argument of the binding is declared as a singleton at the definition-site, this explicit binding implicitly ensures that the injector and all of its descendants preserve a singleton of the bound type <literal>U</literal>. At injector level <literal>C</literal>, <literal>D</literal> and <literal>E</literal>, the same instance is used for type <literal>J</literal> which is type <literal>U</literal> at runtime. At injector level <literal>E</literal> there is an additional binding from type <literal>U</literal> to type <literal>V</literal> that overrules the binding declared at the root injector level. With this binding, each places where <literal>J</literal> is declared, type <literal>U</literal> is used at runtime. Furthermore, since <literal>V</literal> is declared as a singleton, both injector <literal>F</literal> and <literal>G</literal> are using a shared singleton instance of type <literal>V</literal>. Finally, for type <literal>V</literal>; injector <literal>C</literal>, <literal>D</literal> and <literal>E</literal> should use a separate instance of <literal>V</literal> other than injector level <literal>F</literal> and <literal>G</literal> because <literal>V</literal> is preserved at injector level <literal>F</literal> with the <literal>U</literal> <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>→</mo></math> <literal>V</literal> binding.</simpara>
<table xml:id="tab:diTransitiveBindings" frame="all" rowsep="1" colsep="1">
<title>DI Transitive Bindings</title>
<tgroup cols="6">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6666*"/>
<colspec colname="col_6" colwidth="16.667*"/>
<tbody>
<row>
<entry align="center" valign="top"><simpara>Binding</simpara></entry>
<entry align="center" valign="top"><simpara>J &#8594; U</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>U &#8594; V</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>Injector nesting (&gt;)</simpara></entry>
<entry align="center" valign="top"><simpara>C</simpara></entry>
<entry align="center" valign="top"><simpara>D</simpara></entry>
<entry align="center" valign="top"><simpara>E</simpara></entry>
<entry align="center" valign="top"><simpara>F</simpara></entry>
<entry align="center" valign="top"><simpara>G</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>J</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>U</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>V</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following table depicts the singleton behaviour but unlike the above
table, the bindings are declared for the interface <literal>J</literal>.</simpara>
<table xml:id="tab:diReBinding" frame="all" rowsep="1" colsep="1">
<title>DI Re - Binding</title>
<tgroup cols="6">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6666*"/>
<colspec colname="col_6" colwidth="16.667*"/>
<tbody>
<row>
<entry align="center" valign="top"><simpara>Binding</simpara></entry>
<entry align="center" valign="top"><simpara>J &#8594; U</simpara></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top"><simpara>J &#8594; V</simpara></entry>
<entry align="center" valign="top"></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>Injector nesting (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>t</mi><mi>;</mi></math>)</simpara></entry>
<entry align="center" valign="top"><simpara>C</simpara></entry>
<entry align="center" valign="top"><simpara>D</simpara></entry>
<entry align="center" valign="top"><simpara>E</simpara></entry>
<entry align="center" valign="top"><simpara>F</simpara></entry>
<entry align="center" valign="top"><simpara>G</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>J</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>U</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>V</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>This table describes the singleton behavior when both bindings are
configured at child injector levels but not the root injector level.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>DI Child Binding[tab:diChildBinding]</title>
<tgroup cols="6">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="16.6666*"/>
<colspec colname="col_3" colwidth="16.6666*"/>
<colspec colname="col_4" colwidth="16.6666*"/>
<colspec colname="col_5" colwidth="16.6666*"/>
<colspec colname="col_6" colwidth="16.667*"/>
<thead>
<row>
<entry align="center" valign="top">Binding</entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top">U <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>→</mo></math> V</entry>
<entry align="center" valign="top"></entry>
<entry align="center" valign="top">J <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>→</mo></math>
U</entry>
<entry align="center" valign="top"></entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>Injector nesting (<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>t</mi><mi>;</mi></math>)</simpara></entry>
<entry align="center" valign="top"><simpara>C</simpara></entry>
<entry align="center" valign="top"><simpara>D</simpara></entry>
<entry align="center" valign="top"><simpara>E</simpara></entry>
<entry align="center" valign="top"><simpara>F</simpara></entry>
<entry align="center" valign="top"><simpara>G</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>J</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>N</mi><mi>a</mi><mi>N</mi></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>U</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>U</mi><mn>0</mn></msub></math></simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>V</simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>1</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
<entry align="center" valign="top"><simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>V</mi><mn>0</mn></msub></math></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>==== Per Injection Chain Singleton</simpara>
<simpara>The per injection chain singleton is ’between’ the default and singleton
scope. It can be used in order to explicitly describe the situation
which happens when a simple cycle is resolved automatically. It has more
effects that lead to a more deterministic behavior.</simpara>
<simpara>Assume a provider declared as</simpara>
<programlisting language="n4js" linenumbering="unnumbered">var pb: Provider&lt;B&gt;;</programlisting>
<simpara>to be available:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@PerInjectionSingleton
class A {  }

class B { @Inject a: A; @Inject a1: A;}

b1=pb.get();
b2=pb.get();
b1.a != b2.a
b1.a == b1.a1
b2.a == b2.a1</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">@Singleton
class A {  }

class B { @Inject a: A; @Inject a1: A;}

b1=pb.get();
b2=pb.get();
b1.a == b2.a
b1.a == b1.a1
b2.a == b2.a1</programlisting>
<programlisting language="n4js" linenumbering="unnumbered">// no annotation
class A {  }

class B { @Inject a A; @Inject a1: A;}

b1=pb.get();
b2=pb.get();
b1.a != b2.a
b1.a != b1.a1
b2.a != b2.a1</programlisting>
<simpara>=== Validation of callsites targeting N4Injector methods</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1671"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1671</link></simpara>
</sidebar>
<simpara>Terminology for this section:</simpara>
<itemizedlist>
<listitem>
<simpara>a value is <emphasis role="strong">injectable</emphasis> if it</simpara>
<itemizedlist>
<listitem>
<simpara>either conforms to a user-defined class or interface (a
non-parameterized one, that is),</simpara>
</listitem>
<listitem>
<simpara>or conforms to Provider-of-T where T is injectable itself.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>a classifier declaring injected members is said to <emphasis role="strong">require injection</emphasis></simpara>
</listitem>
</itemizedlist>
<simpara>To better understand the validations in effect for callsites targeting</simpara>
<programlisting language="n4js" linenumbering="unnumbered">N4Injector.of(ctorOfDIC: constructor{N4Object}, parentDIC: N4Injector?, ...providedBinders: N4Object)</programlisting>
<simpara>we can recap that at runtime:</simpara>
<itemizedlist>
<listitem>
<simpara>The first argument denotes a DIC constructor.</simpara>
</listitem>
<listitem>
<simpara>The second (optional) argument is an injector.</simpara>
</listitem>
<listitem>
<simpara>Lastly, the purpose of <literal>providedBinders</literal> is as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>The DIC above is marked with one or more <literal>@UseBinder</literal>.</simpara>
</listitem>
<listitem>
<simpara>Some of those binders may require injection.</simpara>
</listitem>
<listitem>
<simpara>Some of those binders may have constructor(s) taking parameters.</simpara>
</listitem>
<listitem>
<simpara>The set of binders described above should match the providedBinders.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>Validations in effect for callsites:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>T</literal> should be injectable (in particular, it may be an <literal>N4Provider</literal>).</simpara>
</listitem>
</itemizedlist>
<simpara>=== N4JS DI Annotations</simpara>
<simpara>Following annotations describe API used to configure N4JSDI.</simpara>
<simpara>==== N4JS DI @GenerateInjector</simpara>
<simpara>3</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@GenerateInjector</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Class</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@GenerateInjector</literal> marks a given class as DIComponent of the graph. The generated injector
will be responsible for creating an instance of that class and all of
its dependencies.</simpara>
<simpara>==== N4JS DI @WithParentInjector</simpara>
<simpara>3</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@WithParentInjector</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Class</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>TypeRef</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments are optional</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@WithParentInjector</literal> marks given <emphasis>injector</emphasis> as depended on other <emphasis>injector</emphasis>. The depended
<emphasis>injector</emphasis> may use provided <emphasis>injector</emphasis> to create instances of objects
required in its object graph.</simpara>
<simpara>Additional <emphasis>WithParentInjector</emphasis> constraints:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Allowed only on annotated with <literal>@GenerateInjector</literal>.</simpara>
</listitem>
<listitem>
<simpara>Its parameter can only be annotated with .</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @UseBinder</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@UseBinder</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Class</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>TypeRef</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments are optional</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@UseBinder</literal> describes <emphasis>Binder</emphasis> to be used (configure) target <emphasis>Injector</emphasis>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Allowed only on annotated with <literal>@GenerateInjector</literal>.</simpara>
</listitem>
<listitem>
<simpara>Its parameter can only be annotated with <literal>@Binder</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @Binder</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@Binder</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Class</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>NONE</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@UseBinder</literal> defines a list of bind configurations.
That can be either annotations on itself or its factory methods annotated with <literal>@Bind</literal>.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Target <literal>N4ClassDeclaration</literal> must not be <emphasis>abstract</emphasis>.</simpara>
</listitem>
<listitem>
<simpara>Target <literal>N4ClassDeclaration</literal>  must not be annotated with <literal>@GenerateInjector</literal>.</simpara>
</listitem>
<listitem>
<simpara>Target class cannot have <emphasis>injection points</emphasis>.</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @Bind</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@Bind</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4ClassDeclaration</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara><?asciidoc-br?>
TypeRef key, TypeRef target</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments are optional</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Defines <emphasis>binding</emphasis> between type and subtype that will be used by injector
when configured with target . See also for description of injectable
types.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Allowed only on <literal>N4ClassDeclarations</literal> that are annotated with <literal>@Binder</literal>(<xref linkend="N4JS DI @Binder"/>).</simpara>
</listitem>
<listitem>
<simpara>Parameters are instances of one of the values described in <xref linkend="N4JS_DI_Validation_N4Injector_Callsites"/>.</simpara>
</listitem>
<listitem>
<simpara>The second parameter must be a subtype of the first one.</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @Provides</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@Provides</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4MethodDeclaration</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>NONE</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments are optional</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@Provides</literal> marks <emphasis>factory method</emphasis> to be used as part \ac{DI}. This is treated as <emphasis>explicit binding</emphasis> between declared return type and actual return type. This
method is expected to be part of the <literal>@Binder</literal>. Can be used to implement custom
scopes.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Allowed only on <literal>N4MethodDeclarations</literal> that are part of a classifier annotated with <literal>@Binder</literal>.</simpara>
</listitem>
<listitem>
<simpara>Annotated method declared type returns instance of one of the types
described in <emphasis>injectable values</emphasis>  <xref linkend="N4JS_DI_Validation_N4Injector_Callsites"/>.</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @Inject</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@Inject</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Field, N4Method, constructor</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>@Inject</literal> defines the injection point into which an instance object will be injected. The specific instance depends on the injector configuration (bindings)
used. Class fields, methods and constructors can be annotated. See <xref linkend="N4JS_DI_Injection_Points"/> for more information.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Injection point bindings need to be resolvable.</simpara>
</listitem>
<listitem>
<simpara>Binding for given type must not be duplicated.</simpara>
</listitem>
<listitem>
<simpara>Annotated types must be instances of one of the types described in <xref linkend="N4JS_DI_Validation_N4Injector_Callsites"/>.</simpara>
</listitem>
</orderedlist>
<simpara>==== N4JS DI @Singleton</simpara>
<variablelist>
<varlistentry>
<term>name</term>
<listitem>
<simpara>@Singleton</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>targets</term>
<listitem>
<simpara>N4Class</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>retention policy</term>
<listitem>
<simpara>RUNTIME</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transitive</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>repeatable</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>arguments</term>
<listitem>
<simpara>NO</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In the case of annotating a class <literal>S</literal> with <literal>@Singleton</literal> on the definition-site, the
singleton scope will be used as described in <xref linkend="Singleton Scope"/>.</simpara>
<simpara>== Test Support</simpara>
<simpara>N4JS provides some annotations for testing. Most of these annotations
are similar to annotations found in JUnit 4. For details see our
Mangelhaft test framework (stdlib specification) and the N4JS-IDE
specification.</simpara>
<simpara>In order to enable tests for private methods, test projects may define
which project they are testing.</simpara>
<simpara>
In some cases, types or methods are only provided for testing purposes. In order
to improve usability, e.g. content assist, these types and methods can
be annotated with <literal>@TestAPI</literal>. There are no constraints defined for that annotation
at the moment.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1468"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1468</link></simpara>
</sidebar>
<simpara>== Polyfill Definitions</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1142"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1142</link></simpara>
</sidebar>
<simpara>In plain JavaScript, so called <emphasis>polyfill</emphasis> (or sometimes called <emphasis>shim</emphasis>)
libraries are provided in order to modify existing classes which are
only prototypes in plain JavaScript. In N4JS, this can be defined for
declarations via the annotation <literal>@Polyfill</literal> or <literal>@StaticPolyfill</literal>.
One of these annotations can be added to class declarations which do not look that much different from
normal classes. In the case of polyfill classes, the extended class is
modified (or filled) instead of being subclassed.</simpara>
<simpara>We distinguish two flavours of polyfill classes: runtime and static.</simpara>
<itemizedlist>
<listitem>
<simpara>Runtime polyfilling covers type enrichment for runtime libraries. For
type modifications the annotation <literal>@Polyfill</literal> is used.</simpara>
</listitem>
<listitem>
<simpara>Static polyfilling covers code modifications for adapting generated
code. The annotation <literal>@StaticPolyfill</literal> denotes a polyfill in ordinary code, which usually provides executable implementations.</simpara>
</listitem>
</itemizedlist>
<simpara>A <emphasis>polyfill class</emphasis> (or simply <emphasis>polyfill</emphasis>) is
a class modifying an existing one. The polyfill is not a new class (or
type) on its own. Instead, new members defined in the polyfill are added
to the modified class and existing members can be modified similarly to
overriding. We call the modified class the <emphasis>filled</emphasis> class and the
modification <emphasis>filling</emphasis>.</simpara>
<simpara>We add a new pseudo property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi></math> to classes in order
to distinguish between normal (sub-) classes and polyfill classes.</simpara>

<simpara>For a polyfill class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> annotated with <literal>@Polyfill</literal> or  <literal>@StaticPolyfill</literal>, that is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>.</mo><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mo>=</mo></math>, all the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> must extend a class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math>
is called the filled class: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>P</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>F</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math>’s name equals the name of the filled class and is
contained in a module with same qualified name (specifier or global):
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>P</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mfenced close=")" open="("><mrow><mi>P</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∨</mo><mi>P</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi></mrow></mfenced><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>Both the polyfill and filled class must be top-level declarations
(i.e., no class expression): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>t</mi><mi>o</mi><mi>p</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>=</mo><mo>∧</mo><mi>F</mi><mo>.</mo><mi>t</mi><mi>o</mi><mi>p</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>=</mo></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> must not implement any interfaces:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>P</mi><mo>.</mo><mi>i</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>I</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>f</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>s</mi><mo>=</mo><mi>∅</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> must have the same access modifier (access,
abstract, final) as the filled class: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>a</mi><mi>c</mi><mi>c</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>a</mi><mi>b</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>l</mi></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> declares a constructor, it must be override
compatible with the constructor of the filled class:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∃</mo><mi>P</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>:</mi><mi>P</mi><mo>.</mo><mi>o</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>C</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>t</mi><mi>;</mi><mi>:</mi><mi>F</mi><mo>.</mo><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi></math></simpara>
</listitem>
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> must define the same type variables as the filled
class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> and the arguments must be in the same order as the
parameters (with no further modifications): <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∀</mo><mi>i</mi><mo>,</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mi>l</mi><mi>t</mi><mi>;</mi><mo>|</mo><mi>P</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><mi>s</mi><mo>|</mo><mi>:</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mi>P</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mo>=</mo><mi>F</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mspace width="3.0em"/><mo>∧</mo><mi>P</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>P</mi><mi>a</mi><mi>r</mi><msub><mi>s</mi><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>P</mi><mo>.</mo><mi>s</mi><mi>u</mi><mi>p</mi><mi>e</mi><mi>r</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mi>A</mi><mi>r</mi><mi>g</mi><msub><mi>s</mi><mi>i</mi></msub><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>All constraints related to member redefinition (cf. <xref linkend="Redefinition_of_Members"/>) have to hold.
In the case of polyfills, this is true for constructors (cf.
<xref linkend="req:Overriding_Members"/>) and private members.</simpara>
</listitem>
</orderedlist>
<simpara>=== Runtime Polyfill Definitions</simpara>
<simpara>(Runtime) Libraries often do not provide completely new types but modify
existing types. The ECMA-402 Internationalization Standard [<link linkend="ECMA12a">ECMA12a</link>], for example, changes methods of the built-in class \lstnfjs{Date} to be timezone aware. Other scenarios include new functionality provided by browsers which are not part of an official standard yet. Even ECMAScript 6 [<link linkend="ECMA15a">ECMA15a</link>] extends the predecessor [<link linkend="ECMA11a">ECMA11a</link>]  in terms of new methods (or new method parameters) added to
existing types (it also adds completely new classes and features, of
course).</simpara>
<simpara>Runtime polyfills are only applicable to runtime libraries or
environments and thus are limited to n4jsd files.</simpara>
<simpara>For a runtime-polyfill class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> annotated with <literal>@Polyfill</literal>, that is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mo>=</mo></math>, all the following constraints
must hold in addition to :</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Both the polyfill and filled class are provided by the runtime
(annotated with <literal>@ProvidedByRuntime</literal>+
):
<footnote><simpara>This restriction has two reasons: Firstly, user-defined types with implementations would require to ’bootstrap’ the polyfill, which is impossible to do automatically without serious constraints on bootstrap code in general. Secondly, instead of filling user-defined types, they can be subclasses. Mechanisms such as dependency injection could then solve almost all remaining problems.</simpara></footnote>
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>B</mi><mi>y</mi><mi>R</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>=</mo><mo>∧</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>B</mi><mi>y</mi><mi>R</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>=</mo></math></simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-154:</emphasis> <link linkend="IDE-154">Applying Polyfills</link> (ver. 1)</simpara>
<simpara>
A polyfill is
automatically applied if a runtime library or environment required by
the current project provides it. In this case, the following constraints
must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1207"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1207</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>No member must be filled by more than one polyfill.</simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_static_polyfill_definitions">
<title>Static Polyfill Definitions</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1735"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1735</link></simpara>
</sidebar>
<simpara>Static polyfilling is a compile time feature to enrich the definition
and usually also the implementation of generated code in N4JS. It is
related to runtime polyfilling described in () in a sense that both
fillings enrich the types they address. Despite this, static polyfilling
and runtime polyfilling differ in the way they are handled.</simpara>
<simpara>Static polyfills usually provide executable implementations and are thus
usually found in n4js files. However, they are allowed in n4jsd files,
as well, for example to enrich generated code in an API project.</simpara>
<simpara>The motivation for static polyfills is to support automatic code
generation. In many cases, automatically generated code is missing some
information to make it sufficiently usable in the desired environment.
Manual enhancements usually need to be applied. If we think of a
toolchain, the question may arise how to preserve the manual work when a
regeneration is triggered. Static polyfilling allows the separation of
generated code and manual adjustments in separate files. The transpiler
merges the two files into a single transpiled file. To enable this
behaviour, the statically fillable types must be contained in a module
annotated with <literal>@StaticPolyfillAware</literal>. The filling types must also be annotated with <literal>@StaticPolyfill</literal> and be contained in a different module with same specifier but annotated with <literal>@StaticPolyfillModule</literal>.
Static polyfilling is restricted to a project, thus the module to be
filled as well as the filling module must be contained in the same
project.</simpara>
<simpara>We add a new pseudo property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi></math> to classes in
order to distinguish between normal (sub-) classes and static polyfill
classes. We add two new pseudo properties to modules in order to modify
the transpilation process. The mutually-exclusive properties
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>A</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>e</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi></math>
signal the way these files are processed.</simpara>
<simpara>In order to support efficient transpilation, the following constraint
must hold in addition to constraints :</simpara>
<simpara><emphasis role="strong">Req. IDE-155:</emphasis> <link linkend="IDE-155">Static Polyfill Layout</link> (ver. 1)</simpara>
<simpara>For a static polyfill class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math> annotated with <literal>@StaticPolyfill</literal>, that is
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mo>=</mo></math>, all the following constraints must
hold in addition to <xref linkend="req:Polyfill_Class"/>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>P</mi></math>’s name equals the name of the filled class and is
contained in a module with the same qualified name:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>∧</mo><mi>P</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mtext>
</mtext></math></simpara>
</listitem>
<listitem>
<simpara>Both the static polyfill and the filled class are part of the same
project: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mi>F</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></math></simpara>
</listitem>
<listitem>
<simpara>The filled class must be contained in a module annotated with <literal>@StaticPolyfillAware</literal>:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>F</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>A</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>e</mi><mo>=</mo></math></simpara>
</listitem>
<listitem>
<simpara>The static polyfill and the filled type must both be declared in an
n4js file or both in an n4jsd file.</simpara>
</listitem>
<listitem>
<simpara>The filling class must be contained in a module annotated with :
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>P</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>e</mi><mi>d</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>=</mo></math></simpara>
</listitem>
<listitem>
<simpara>For a statically-filled class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>F</mi></math> there is at most one
static polyfill: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mfenced close=")" open="("><mrow><msub><mi>P</mi><mn>1</mn></msub><mrow><mi>i</mi><mi>s</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>f</mi></mrow><mi>F</mi><mo>∧</mo><msub><mi>P</mi><mn>2</mn></msub><mrow><mi>i</mi><mi>s</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>f</mi></mrow><mi>F</mi></mrow></mfenced><mo>→</mo><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><msub><mi>P</mi><mn>2</mn></msub></math></simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-156:</emphasis> <link linkend="IDE-156">Restrictions on static polyfilling</link> (ver. 1)</simpara>
<simpara>For a static polyfilling module <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>P</mi></msub></math> the following must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>All top-level elements are static polyfills:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mrow><mi>T</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mo>=</mo></mrow><mrow><mo>∀</mo><mi>T</mi><mo>∈</mo><msub><mi>M</mi><mi>P</mi></msub><mo>∧</mo><mi>T</mi><mo>.</mo><mi>t</mi><mi>o</mi><mi>p</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>=</mo></mrow></math></simpara>
</listitem>
<listitem>
<simpara>It exists exactly one filled module <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>M</mi><mi>F</mi></msub></math> annotated with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>A</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>e</mi></math> in the same project.</simpara>
</listitem>
<listitem>
<simpara>It is an error if two static polyfill modules for the same filled
module exist in the same project: <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><msub><mi>M</mi><mn>1</mn></msub><mo>=</mo><msub><mi>M</mi><mn>2</mn></msub></mrow><mrow><msub><mi>M</mi><mn>1.</mn></msub><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><msub><mi>M</mi><mn>2.</mn></msub><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>∧</mo><msub><mi>M</mi><mn>1.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><msub><mi>M</mi><mn>2.</mn></msub><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>
</mtext><mo>∧</mo><msub><mi>M</mi><mn>1.</mn></msub><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mo>=</mo><msub><mi>M</mi><mn>2.</mn></msub><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mo>=</mo></mrow></math></simpara>
</listitem>
</orderedlist>
<simpara>[[ex:Static polyfill]]</simpara>
<simpara><xref linkend="lst:StaticPolyfill_genMod"/> shows an example of generated code. <xref linkend="lst:StaticPolyfill_polyfillMod"/> demonstrates the static polyfill.
Note that the containing project has two source folders configured:
<literal>Project/src/n4js</literal> and <literal>Project/src/n4js-gen</literal>.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@@StaticPolyfillAware
export public class A {
    constructor() {...}
    m1(): void{...}
}
export public class B {
    constructor() {...}
    m2(): void{...}
}</programlisting>
<programlisting xml:id="lst:StaticPolyfill_genMod" language="n4js" linenumbering="unnumbered">@@StaticPolyfillModule
@StaticPolyfill
export public class B extends B {
    @Override
    constructor(){ ... } // replaces generated ctor of B
    @Override
    m1(): void {...} // adds overridden method m1 to B
    @Override
    m2(): void {...} // replaces method m2 in B
    m3(): void {...} // adds new method m3 to B
}</programlisting>
</section>
<section xml:id="_transpiling_static_polyfilled_classes">
<title>Transpiling static polyfilled classes</title>
<simpara>Transpiling static polyfilled classes encounters the special case that
two different <literal>n4js</literal> source files with the same qualified name are part of the
project. Since the current transpiler is file-based, both files would be
transpiled to the same output destination and would therefore overwrite
each other. The following pre-transpilation steps handle this situation:</simpara>
<itemizedlist>
<listitem>
<simpara>Current file to transpile is <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>A</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>e</mi><mo>=</mo></math>, then</simpara>
<itemizedlist>
<listitem>
<simpara>search for a second file <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi></math> with same qualified name:<?asciidoc-br?>
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>M</mi><mo>.</mo><mi>s</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>∧</mo><mi>G</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>=</mo><mi>M</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></math></simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>∃</mo><mi>G</mi></math>, then</simpara>
<itemizedlist>
<listitem>
<simpara>merge <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>G</mi></math> into current file
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mo>→</mo><msup><mi>M</mi><mi>'</mi></msup></math></simpara>
</listitem>
<listitem>
<simpara>conventionally transpile <math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>M</mi><mi>'</mi></msup></math></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>else conventionally transpile <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>else, if <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi><mo>.</mo><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>P</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mi>M</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo>=</mo></math>,</simpara>
<itemizedlist>
<listitem>
<simpara>then <emphasis>do nothing</emphasis>. (Transpilation will be triggered for filled type
separately.)</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>else, conventionally transpile <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>M</mi></math></simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="_components">
<title>Components</title>
<section xml:id="_n4js_platform_architecture">
<title>N4JS Platform Architecture</title>
<section xml:id="_overview_2">
<title>Overview</title>
<simpara>shows the N4JS components described in detail in this
chapter.
<footnote><simpara>Note that this diagram does not necessarily reflect the actual internal implementation but only the external view.</simpara></footnote></simpara>
<figure>
<title>N4JS Component Overview</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cmpd_components_in_n4js.png"/>
</imageobject>
<textobject><phrase>cmpd components in n4js</phrase></textobject>
</mediaobject>
</figure>
<simpara>The N4JS platform distinguishes several types of components. The
following components can only be created by internal developers:</simpara>
<variablelist>
<varlistentry>
<term>Runtime Environment</term>
<listitem>
<simpara>Definition of a runtime environment such as ECMAScript 5. A Runtime
Environment describes the base types provided by the runtime directly
which are usually globally available. Other components do not directly
rely on runtime environments, but on runtime libraries.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Runtime Library</term>
<listitem>
<simpara>Collections of types provided by the runtime. These types may be
extensions to certain language specifications. E.g., the ECMAScript 6
collection classes are already provided by some environments otherwise
only supporting ECMAScript 5. The collections are defined in terms of
a runtime library which can then be provided by these environments.
Runtime libraries may also contain polyfills to alter types predefined
in the environment.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Test Environment</term>
<listitem>
<simpara>Not yet clear. Environments defined for tests</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Test Library</term>
<listitem>
<simpara>Not yet clear. Libraries defined for tests supported by the to enable
running tests and viewing test reports directly within the , such as
<emphasis>Mangelhaft</emphasis>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following components can be created by external developers:</simpara>
<variablelist>
<varlistentry>
<term>Apps</term>
<listitem>
<simpara>User-written N4JS applications running in a web browser (the reference
browser is Chrome).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Processors</term>
<listitem>
<simpara>User-written N4JS processors running on Node.js.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Libraries</term>
<listitem>
<simpara>User-written libraries used by apps, processors or other libraries.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>These components are described in detail later.</simpara>
<simpara>A component is similar to a single project in the N4JS IDE. It is
shipped as NFAR archive and contains:</simpara>
<variablelist>
<varlistentry>
<term>Manifest</term>
<listitem>
<simpara>The manifest describing the components, dependencies and metadata.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Resources</term>
<listitem>
<simpara>Resources such as images, N4ML files etc.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Sources</term>
<listitem>
<simpara>Source files of modules - actual N4JS files used in a project.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Compilation</term>
<listitem>
<simpara>Compiled, minified and concatenated versions of the N4JS files and
other JS files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Tests</term>
<listitem>
<simpara>Optional test sources and compiled tests.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Source Maps</term>
<listitem>
<simpara>Optional source maps.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Components contain modules. describes what can be contained in a
component.</simpara>
<figure>
<title>Content of a Component</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cmpd_component_content.png"/>
</imageobject>
<textobject><phrase>cmpd component content</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section xml:id="_component_types">
<title>Component Types</title>
<simpara>Different N4JS component types are described in this section. At compile
time and runtime, dependent components have to be available. This is the
responsibility of the user interface ( or ) and described in the
specification.</simpara>
<section xml:id="_apps">
<title>Apps</title>
<simpara>Applications allow developers to bundle a project as an application and
deploy it to an N4 environment. An application is visible to users of
the N4 platform in the app store. Users can subscribe and use an
application that is available in the app store.</simpara>
</section>
<section xml:id="_processors">
<title>Processors</title>
<simpara>Processors allow developers to bundle a project as a processor which can
run asynchronously on an N4 environment. Users can deploy a processor to
an N4 environment so that other developers can use its services.</simpara>
</section>
<section xml:id="_libraries">
<title>Libraries</title>
<simpara>A library is a user project providing modules with declaration.</simpara>
</section>
<section xml:id="_runtime_environment_and_runtime_libraries">
<title>Runtime Environment and Runtime Libraries</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1036"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1036</link></simpara>
</sidebar>
<simpara>Runtime environments and libraries define globally available elements
(types, variables, functions) provided by the JavaScript engine. Both
must contain <emphasis>only</emphasis> definition files (n4jsd) of which all elements are
marked as (<literal>@ProvidedByRuntime</literal>) and (<literal>@Global</literal>)</simpara>
<simpara>Other projects may refer to a <emphasis>single</emphasis> runtime environment in their
manifest via <literal>RequiredRuntimeEnvironment</literal>  and to <emphasis>multiple</emphasis> runtime libraries via <literal>RequiredRuntimeLibraries</literal></simpara>
<simpara>Both types of components are referenced, similarly to libraries, by
their project Id. It is possible, however, to state that a specific
component may be used instead of another one via the <literal>CompatibleWith</literal> field defined by an environment or library.</simpara>
<simpara>The concrete runtime environment and library are selected by the
JavaScript engine. Deployment and execution scripts must ensure that a
component can run on the given engine; the required environments and
libraries must all be compatible with the provided environment. If no
runtime environment is specified, a default an ECMAScript 5 runtime is
assumed to be present.</simpara>
<simpara>Typical runtime environments are ES5 or ES6, typical runtime libraries
are DOM or HTML.</simpara>
<simpara>In JavaScript, browsers and other execution environments provide
built-in objects. In browsers, for example, the whole DOM is made
available via built-in object types. In this case, even the global
object also becomes a different type (in N4JS terms). Besides execution
environments such as browsers or Node.js, libraries also provide
functionality by exposing globally available functions. This is often
used to bridge execution environment inconsistencies. When browser API
differences are adapted by a library, this is called a <emphasis>polyfil</emphasis>.
Other adaptations, such as enabling ECMSScript 6 object types in
ECMAScript 5 environments, are known as <emphasis>shim</emphasis>. Instead of directly
supporting these kind of <literal>hacks</literal>, other components specify which
runtime environment and libraries they depend on by specifying unique
runtime ids. Possible shims (in case of environments) or polyfils (in
case of libraries) are transparently provided by the execution
environment and the bootstrap code.</simpara>
</section>
<section xml:id="_tests">
<title>Tests</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1400"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1400</link></simpara>
</sidebar>
<simpara>Tests are special projects which contain tests for other projects.</simpara>
<simpara><emphasis role="strong">Req. IDE-157:</emphasis> <link linkend="IDE-157">Test Project</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Tests have full access to the tested project including elements with
visibility.</simpara>
</listitem>
<listitem>
<simpara>Only other test projects can depend on tests project. In other
words, other components must not depend on test components.</simpara>
</listitem>
</orderedlist>
<simpara>In a test project, the tested projects can be specified via <literal>testee</literal>.</simpara>
</section>
</section>
<section xml:id="_component_content">
<title>Component Content</title>
<simpara>A component is similar to a project in the N4JS IDE. It consists of
sources, test sources, resources (such as images) and libraries (nears).
These items are contained in separate folders alongside output folders
and settings specified in the manifest file. The manifest file is stored
at the root of the project (and explained in ).</simpara>
<simpara>For build and production purposes, other files such as <literal>pom.xml</literal> or
<literal>.project</literal> files are automatically derived from the . These files are
not to be added manually.</simpara>
</section>
<section xml:id="_component_manifest">
<title>Component Manifest</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-18"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-18</link></simpara>
</sidebar>
<section xml:id="_syntax_6">
<title>Syntax</title>
<screen>ProjectDescription:
        ('ProjectId'        ':' projectId=N4mfIdentifier)
    &amp;   ('ProjectType'      ':' projectType=ProjectType)
    &amp;   ('ProjectVersion'   ':' projectVersion=DeclaredVersion)
    &amp;   ('VendorId'         ':' declaredVendorId=N4mfIdentifier)
    &amp;   ('VendorName'       ':' vendorName=STRING)?

    &amp;   ('MainModule'       ':' mainModule=STRING)?

    // only available for runtime environments
    &amp;   (extendedRuntimeEnvironment=ExtendedRuntimeEnvironment)?

    // only in case of runtime libraries or runtime environment:
    &amp;   (providedRuntimeLibraries=ProvidedRuntimeLibraries)?

    // not available in runtime environments:
    &amp;   (requiredRuntimeLibraries=RequiredRuntimeLibraries)?

    // only available in N4JS components (Apps, Libs, Processor)
    &amp;   (projectDependencies=ProjectDependencies)?

    // only available in N4JS components (Apps, Libs, Processor)
    &amp;   ('ImplementationId' ':' implementationId=N4mfIdentifier)?

    // only available in N4JS components (Apps, Libs, Processor)
    &amp;   (implementedProjects=ImplementedProjects)?

    //only RuntimeLibrary and RuntimeEnvironemnt
    &amp;   (initModules=InitModules)?
    &amp;   (execModule=ExecModule)?


    &amp;   ('Output'           ':' outputPath=STRING)?
    &amp;   ('Libraries'        '{' libraryPaths+=STRING (',' libraryPaths+=STRING)* '}')?
    &amp;   ('Resources'        '{' resourcePaths+=STRING (',' resourcePaths+=STRING)* '}')?
    &amp;   ('Sources'          '{' sourceFragment+=SourceFragment+ '}')?

    &amp;   ('ModuleFilters'    '{' moduleFilters+=ModuleFilter+ '}')?

    &amp;   (testedProjects=TestedProjects)?

    &amp;   ('ModuleLoader' ':' moduleLoader=ModuleLoader)?
;

enum ProjectType :
    APPLICATION = 'application' |
    APPLICATION = 'app' | //XXX deprecated. Will be removed soon. Use application instead.
    LIBRARY = 'library' |
    LIBRARY = 'lib' | //XXX deprecated. Will be removed soon. Use library instead.
    API = 'API' |
    RUNTIME_ENVIRONMENT = "runtimeEnvironment" |
    RUNTIME_LIBRARY = "runtimeLibrary" |
    TEST = "test"
;

ExecModule returns ExecModule:
    {ExecModule}
    'ExecModule' ':' execModule=BootstrapModule
;


TestedProjects returns TestedProjects:
    {TestedProjects}
    'TestedProjects' '{'
        (testedProjects+=TestedProject (',' testedProjects+=TestedProject)*)?
    '}'
;


InitModules returns InitModules:
    {InitModules}
    'InitModules' '{'
        (initModules+=BootstrapModule (',' initModules+=BootstrapModule)*)?
    '}'
;

ImplementedProjects returns ImplementedProjects:
    {ImplementedProjects}
    'ImplementedProjects' '{'
        (implementedProjects+=ProjectReference (',' implementedProjects+=ProjectReference)*)?
    '}'
;

ProjectDependencies returns ProjectDependencies:
    {ProjectDependencies}
    'ProjectDependencies' '{'
        (projectDependencies+=ProjectDependency (',' projectDependencies+=ProjectDependency)*)?
    '}'
;

ProvidedRuntimeLibraries returns ProvidedRuntimeLibraries:
    {ProvidedRuntimeLibraries}
    'ProvidedRuntimeLibraries' '{'
        (providedRuntimeLibraries+=ProvidedRuntimeLibraryDependency (',' providedRuntimeLibraries+=ProvidedRuntimeLibraryDependency)*)?
    '}'
;

RequiredRuntimeLibraries returns RequiredRuntimeLibraries:
    {RequiredRuntimeLibraries}
    'RequiredRuntimeLibraries' '{'
        (requiredRuntimeLibraries+=RequiredRuntimeLibraryDependency (',' requiredRuntimeLibraries+=RequiredRuntimeLibraryDependency)*)?
    '}'
;

ExtendedRuntimeEnvironment returns ExtendedRuntimeEnvironment:
    {ExtendedRuntimeEnvironment}
    'ExtendedRuntimeEnvironment' ':' extendedRuntimeEnvironment=ProjectReference
;

DeclaredVersion :
    major=INT ('.' minor=INT ('.' micro=INT)?)? ('-' qualifier=N4mfIdentifier)?
;

SourceFragment:
    sourceFragmentType=SourceFragmentType '{' paths+=STRING (',' paths+=STRING)* '}'
;

enum SourceFragmentType :
    SOURCE = 'source' | EXTERNAL = 'external' | TEST = 'test'
;

ModuleFilter:
    moduleFilterType=ModuleFilterType '{'
        moduleSpecifiers+=ModuleFilterSpecifier (',' moduleSpecifiers+=ModuleFilterSpecifier)* '}'
;

BootstrapModule:
    moduleSpecifierWithWildcard=STRING ('in' sourcePath=STRING)?
;


ModuleFilterSpecifier:
    moduleSpecifierWithWildcard=STRING ('in' sourcePath=STRING)?
;

enum ModuleFilterType:
    NO_VALIDATE = 'noValidate' | NO_MODULE_WRAPPING = 'noModuleWrap'
;

ProvidedRuntimeLibraryDependency:
    project=SimpleProjectDescription
;

RequiredRuntimeLibraryDependency:
    project=SimpleProjectDescription
;

TestedProject:
    project=SimpleProjectDescription
;

/*
 * scope is optional, default scope is compile
 */
ProjectReference :
    project=SimpleProjectDescription
;

/*
 * scope is optional, default scope is compile
 */
ProjectDependency :
    project=SimpleProjectDescription
    (versionConstraint=VersionConstraint)?
    (declaredScope=ProjectDependencyScope)?
;

/*
 * vendorN4mfIdentifier is optional, if it is not specified, vendor id of current project is used.
 */
SimpleProjectDescription :
    (declaredVendorId=N4mfIdentifier ':')? projectId=N4mfIdentifier
;

/*
 * If no version range is specified, lower version is inclusive.
 */
VersionConstraint:
    (
        (exclLowerBound?='(' | '[')  lowerVersion=DeclaredVersion
            ((',' upperVersion=DeclaredVersion (exclUpperBound?=')' | ']') )? | ')')
    ) | lowerVersion=DeclaredVersion
;


enum ProjectDependencyScope :
    COMPILE = 'compile' | TEST = 'test'
;

enum ModuleLoader:
    N4JS = 'n4js'
|   COMMONJS = 'commonjs'
|   NODE_BUILTIN = 'node_builtin'
;

// N4mfIdentifier: left off for simplicity, allows everything that starts with a letter, also allows keywords
// Path: project relative path
// ModuleSpecifierWithWildcard</screen>
</section>
<section xml:id="_properties_5">
<title>Properties</title>
<simpara>The manifest, called <literal>manifest.n4mf</literal>, specifies the following information:</simpara>
<variablelist>
<varlistentry>
<term>ProjectId </term>
<listitem>
<simpara>Compare to Maven pom / manifest symbolic name.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>VendorId </term>
<listitem>
<simpara>This is similar to the group id in Maven.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>VendorName </term>
<listitem>
<simpara>The <emphasis>vendor</emphasis> of the project as a string. This is optional and if not
specified, vendor id is used as vendor name.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ProjectType </term>
<listitem>
<simpara>The <emphasis>type</emphasis> of the project. The following types of projects exists:</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>app</term>
<listitem>
<simpara>Application</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>lib</term>
<listitem>
<simpara>Library</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>test</term>
<term>api</term>
<term>runtimeEnvironment</term>
<listitem>
<simpara>Runtime Environment</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>runtimeLibrary</term>
<listitem>
<simpara>Runtime Library</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>DeclaredVersion </term>
<listitem>
<simpara>The <emphasis>version</emphasis> of the project. The version consists of a major, minor and
micro version. The syntax of the version is given by:</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>    DeclaredVersion :
        major=INT ('.' minor=INT ('.' micro=INT)?)? ('-' qualifier=ID)?
    ;</screen>
<simpara>We use <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>q</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>e</mi><mi>r</mi><mo>=</mo><mi>S</mi><mi>N</mi><mi>A</mi><mi>P</mi><mi>S</mi><mi>H</mi><mi>O</mi><mi>T</mi></math> in our Maven builds so that each
build uses the latest available version of a project. The qualifier is
only supported for this tooling and is removed during deployment. The
lengths of the major, minor and micro numbers is additionally limited to
four digits.</simpara>
<variablelist>
<varlistentry>
<term>MainModule </term>
<listitem>
<simpara>(optional) A plain module specifier defining the project’s <literal>main
module</literal>. If this property is defined, other projects can import from
this project using imports where the string following keyword <literal>from</literal> states the
project name and not the complete module specifier (see <xref linkend="Imprt_Statement_Semantics"/>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>CompatibleWith </term>
<listitem>
<simpara>In the case of a runtime environment or library, this specifies to which
other component this one is compatible to.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>RequiredRuntimeEnvironment </term>
<listitem>
<simpara>Environment this project depends on. This is a simple project ID,
runtime environments are not versioned. This is usually omitted and
concrete environments are computed from the required N4JS libraries and
runtime libraries.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>RequiredRuntimeLibraries </term>
<listitem>
<simpara>Comma-separated list of runtime libraries this project depends on. These
are a simple project IDs, runtime libraries are not versioned.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ProjectDependencies </term>
<listitem>
<simpara>The <emphasis>dependencies</emphasis> section describes which projects this project
requires. A <emphasis>dependency</emphasis> has the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara>The <emphasis>vendorId</emphasis>. This is optional. If no vendor id is given, the
vendor id of the current project is also used as vendor id for this
project dependency.</simpara>
</listitem>
<listitem>
<simpara>The <emphasis>projectId</emphasis></simpara>
</listitem>
<listitem>
<simpara>Either the minimum excluded or included version and the maximum
excluded or included version. If no version (range) is given [0.0.0,
infinity) is assumed. If only one version (e.g. 1.0) is given this is
interpreted as [1.0, infinity]. Writing (1.0) means (1.0, infinity).</simpara>
</listitem>
<listitem>
<simpara>The <emphasis>scope</emphasis> of the dependency. The scopes are inspired by Maven [<link linkend="MavenDependencies">MavenDependencies</link>] and
the following scopes are supported:</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>compile</term>
<listitem>
<simpara>This dependency is needed for compilation of the project <emphasis>and</emphasis> it
needs to exist on the environment when deploying it.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>test</term>
<listitem>
<simpara>This dependency is only needed for compiling and running tests. <emphasis>Types
imported from a test dependency are only accessible from a test source
fragment.</emphasis></simpara>
<simpara>The deployment descriptor of a project only contains dependencies with
scope compile. If there is no scope explicitly set, the scope is set to
[compile].</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Output </term>
<listitem>
<simpara>Path to output folder, compilers may use subfolders inside this folder.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Libraries </term>
<listitem>
<simpara>List of paths to libraries, that is, folders in which nfars are found.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Resources </term>
<listitem>
<simpara>List of paths to resources, that is, folders in which images, css etc.
is found.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Sources </term>
<listitem>
<simpara>List of source fragments. A source fragment is a path to sources (n4js
or js), which are typically compiled to the output path, with a given
type. There exist three different source fragment types:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Source</emphasis>: files, will be available in scope for projects that defines
this project as compile time dependency. A module contained in a
source fragment of kind <emphasis>source</emphasis> can only access modules from other
source fragments with kind source and from dependencies with scope
compile. Files in sources will be validated and compiled to the output
folder.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">test</emphasis>: files, will be available in scope for projects that defines this
project as test time dependency. A module contained in a source
fragment of kind <emphasis>test</emphasis> can access any module from other source
fragments and from dependencies with any scope. Files in sources will
be validated and compiled to the output folder (maybe a subfolder).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">external</emphasis>: Implementation of modules defined in definition files (n4jsd). These
implementations are never validated nor fully compiled. Instead, they
are only wrapped into module definitions and copied to the output
folder. See <xref linkend="External_Declarations"/> and <xref linkend="Implementation_of_External_Declarations"/> for details.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>Filters for fine-tuning the validator and compiler. A filter is applied
to modules matching the given module specifier which may contain
wildcards, optionally restricted to modules defined in a specific source
path. The following filters are supported:</simpara>
<variablelist>
<varlistentry>
<term>noValidate</term>
<listitem>
<simpara>Modules matching this filter are not semantically validated. That is,
they are still syntactically validated. If they are contained in
source or test source fragments, it must be possible to bind
references to declarations inside these modules. Note that switching
off validation for n4js files is disallowed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>noModuleWrap</term>
<listitem>
<simpara>Files matching this filter are not wrapped into modules and they are
not semantically validated. Since they are assumed to be wrapped into
modules, declarations inside these modules cannot be referenced by
n4js code.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Optional property that defines what module loader are supported by the
modules in this component. Possible values are</simpara>
<variablelist>
<varlistentry>
<term>n4js</term>
<listitem>
<simpara>(default) The modules in this component can be loaded with SystemJS or
with CommonJS.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>commonjs</term>
<listitem>
<simpara>Modules in this component must be loaded with CommonJS. When these
modules are referenced in generated code (i.e. when importing from
these modules), the module specifier will be prefixed with <literal>@@cjs/</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>node_builtin</term>
<listitem>
<simpara>Modules in this component represent node built-in modules such as <literal>fs</literal>
or <literal>https</literal>. When these modules are referenced in generated code
(i.e. when importing from these modules), the module specifier will be
prefixed with <literal>@node/</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Validation or module-wrapping can be turned off for certain files or
folders via the manifest properties <literal>no-validate</literal> and
<literal>no-module-wrapping</literal>. While this is mostly intended for external
implementation modules below the source-external folder, it is also
allowed for <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>.</mo><mi>j</mi><mi>s</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mo>.</mo><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi></math> files in the
source folder.</simpara>
<simpara><emphasis role="strong">Req. IDE-158:</emphasis> <link linkend="IDE-158">GeneralConstraints</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The projectId used in the manifest file have to match the project
name in file system as well as project name in the Eclipse workspace.</simpara>
</listitem>
<listitem>
<simpara>There must be an output directory specified so the compiler(s) can
run.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-159:</emphasis> <link linkend="IDE-159">Paths</link> (ver. 1)</simpara>
<simpara>Paths Paths are constrained in the following way:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A path cannot appear more than one time within a source fragment
type (same applies to paths in the resources section).</simpara>
</listitem>
<listitem>
<simpara>A path cannot be used in different source fragment types at same
times.</simpara>
</listitem>
<listitem>
<simpara>A path can only be declared exclusively in one of the sections
Output, Libraries, Resources or Sources.</simpara>
</listitem>
<listitem>
<simpara>A path must not contain wild cards.</simpara>
</listitem>
<listitem>
<simpara>A path has to be relative to the project path.</simpara>
</listitem>
<listitem>
<simpara>A path has to point to folder.</simpara>
</listitem>
<listitem>
<simpara>The folder a defined path points to must exist in the project (but
in case of non-existent folders of source fragments, only a warning is
shown). </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/339"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-339</link></simpara>
</sidebar>
<simpara><emphasis role="strong">Req. IDE-160:</emphasis> <link linkend="IDE-160">Module Specifiers</link> (ver. 1)</simpara>
<simpara>Module Specifiers are constrained in the following
way:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Within a module filter type no duplicate specifiers are allowed.</simpara>
</listitem>
<listitem>
<simpara>A module specifier is by default applied relatively to all defined
source containers, i.e. if there src and src2 defined as source
containers in both folders files are looked up that matches the given
module specifier</simpara>
</listitem>
<listitem>
<simpara>A module specifier can be constrained to be applied only to a
certain source container.</simpara>
</listitem>
<listitem>
<simpara>A module specifier is allowed to contain wildcards but it must
resolve to some existing files in the project</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-161:</emphasis> <link linkend="IDE-161">Module Specifier Wildcard Constraints</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>All path patterns are case sensitive.</simpara>
</listitem>
<listitem>
<simpara>all module specifiers will be matched.</simpara>
</listitem>
<listitem>
<simpara>all module specifiers will be matched.</simpara>
</listitem>
<listitem>
<simpara>matches all module specifiers whose qualified name consists of two
segments where the first part matches test and the second part starts
with an <literal>A</literal> and then two more characters.</simpara>
</listitem>
<listitem>
<simpara>- matches all module specifiers whose qualified name contains a
segment that matches test and the last segment ends with an ’XYZ’.</simpara>
</listitem>
<listitem>
<simpara>A module specifier wild card isn’t allowed to contain ``***</simpara>
</listitem>
<listitem>
<simpara>A module specifier wild card isn’t allowed to contain relative
navigation.</simpara>
</listitem>
<listitem>
<simpara>A module specifier wild card shouldn’t contain the file extension
(only state the file name (pattern) without extension, valid file
extensions will then be used to match the file).</simpara>
</listitem>
</orderedlist>
<simpara>Examples of using external source fragments and filters are given in (<xref linkend="External_Definitions_and_Their_Implementations"/>).
<xref linkend="Implementation_of_External_Declarations"/></simpara>
<example>
<title>No validation and module wrapping example</title>
<simpara>The following manifest shows the use of filters to disable validation
and module wrapping.</simpara>
<screen>ProjectId: Test
ProjectType: lib
ProjectVersion: 0.0.1-SNAPSHOT
VendorId: eu.numberfour
VendorName: "NumberFour AG"
Output: "src-gen"
Sources {
    source {
        "src1",
        "src2"
    }
    external {
        "external"
    }
}
Libraries {
    "lib"
}
Resources {
    "resources"
}
ModuleFilters {
    noValidate {
        "p/UglyHack",
        "**/*" in "src2"
    }
    noModuleWrap {
        "p/myAlreadyAsModuleHack"
    }
}</screen>
</example>
</section>
</section>
<section xml:id="_component_dependencies">
<title>Component Dependencies</title>
<simpara>There are several dependencies between components. We can distinguish
between <literal>require</literal> dependencies and <literal>provide</literal> dependencies.</simpara>
<variablelist>
<varlistentry>
<term>require</term>
<listitem>
<simpara><emphasis>N4JS Components</emphasis> require:
+</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>APIs</emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis>RuntimeLiberaries</emphasis> and</simpara>
</listitem>
<listitem>
<simpara><emphasis>Libraries</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>provide</term>
<listitem>
<itemizedlist>
<listitem>
<simpara><emphasis>Runtime Environments</emphasis> provide <emphasis>Runtime Libraries</emphasis> and maybe extend
other <emphasis>Runtime Environments</emphasis> (which means they provide the same
runtime libraries as the extended environments and the same base
types).</simpara>
</listitem>
<listitem>
<simpara><emphasis>SysLibs</emphasis> implement (<literal>provide implementations</literal> of) <emphasis>APIs</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="_runtime_environment_resolution">
<title>Runtime Environment Resolution</title>
<simpara>In order to execute (run, debug, or test) an <emphasis>N4JS Component</emphasis>, an
actual <emphasis>runner</emphasis> has to be determined. Since runners support runtime
environments, this basically means calculating runtime environments
which provide all necessary runtime libraries needed by the component.
This is done by computing the transitive closure of required runtime
libraries and by comparing that with the transitive closure of runtime
libraries provided by an environment.</simpara>
<simpara><emphasis role="strong">Definition:</emphasis> <link linkend="transitive_component_dependencies">Transitive Component Dependencies</link></simpara>
<simpara>We defined the following transitive closures of dependencies:</simpara>
<simpara>For a given N4JS Component <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> we define</simpara>
<simpara><emphasis role="strong">Req. IDE-162:</emphasis> <link linkend="IDE-162">Runtime Environment Resolution</link> (ver. 1)</simpara>
<simpara>An N4JS Component <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> can be executed in an runtime environment
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>E</mi></math>, written as <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>E</mi><mo>⊨</mo><mi>C</mi></math> if the following constraints hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The environment must provide all runtime libraries transitively
required by the component:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>R</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>L</mi><mi>i</mi><mi>b</mi><msup><mi>s</mi><mo>&lt;</mo></msup><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mi>r</mi><mi>o</mi><mi>l</mi><mi>e</mi><mo>=</mo><mi>"</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>g</mi><mi>"</mi><mo>&gt;</mo><mi>:</mi><mi>R</mi><mo>∈</mo><mi>E</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>R</mi><mi>T</mi><mi>L</mi><mi>i</mi><mi>b</mi><msup><mi>s</mi><mo>&lt;</mo></msup><mo>/</mo><mi>e</mi><mi>m</mi><mi>p</mi><mi>h</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo>&gt;</mo></math></simpara>
</listitem>
<listitem>
<simpara>There exist libraries which can be executed by the environment, so
that all APIs are implemented:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mo>∀</mo><mi>S</mi><mo>∈</mo><mi>C</mi><mo>.</mo><mi>r</mi><mi>e</mi><mi>q</mi><mi>u</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>A</mi><mi>P</mi><mi>I</mi><msup><mi>s</mi><mo>*</mo></msup><mi>:</mi><mo>∃</mo><mi>I</mi><mi>:</mi><mi>S</mi><mo>∈</mo><mi>I</mi><mo>.</mo><mi>i</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>A</mi><mi>P</mi><mi>I</mi><mi>s</mi><mo>∧</mo><mi>E</mi><mo>⊨</mo><mi>I</mi></math></simpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="_modules">
<title>Modules</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-8"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-8</link></simpara>
</sidebar>
<simpara>All N4JS files are modules, sometimes also called compilation unit (CU).
This is the overall structure of a module, based on [<link linkend="ECMA15a">ECMA15a(p.S14)</link>].</simpara>
<screen>Script: {Script}
    annotations+=ScriptAnnotation*
    scriptElements+=ScriptElement*;

/*
 * The top level elements in a script are type declarations, exports, imports or statements
 */
ScriptElement:
      AnnotatedScriptElement
    | N4ClassDeclaration&lt;Yield=false&gt;
    | N4InterfaceDeclaration&lt;Yield=false&gt;
    | N4EnumDeclaration&lt;Yield=false&gt;
    | ImportDeclaration
    | ExportDeclaration
    | RootStatement&lt;Yield=false&gt;
;</screen>
<simpara>Grammar and semantics of import statement is described in ; of of export
statement is described in .</simpara>
<simpara>
An import statement imports a variable declaration, function
declaration, or N4 type declaration defined and exported by another
module into the current module under the given alias (which is similar
to the original name if no alias is defined). The name of the module is
its project’s source folder’s relative path without any extension, see
for details.</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-179"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-179</link></simpara>
</sidebar>
<simpara>This are the properties of script, which can be specified by the user:</simpara>
<simpara>Arbitrary annotations, see and below for details.</simpara>
<simpara>The content of the script.</simpara>
<simpara>And we additionally define the following pseudo properties:</simpara>
<simpara>File system path (path delimiter is always <literal>’/’</literal>) relative to the source
fragment of the file without the extension. E.g.: given a source folder
<literal>src</literal>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></math> of a module located at:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>src/n4/lang/List.js</literal> is <literal>n4/lang/List</literal></simpara>
</listitem>
<listitem>
<simpara><literal>src/n4/lang/Objects.prototypes</literal> is <literal>n4/lang/Objects</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Pseudo property consists of the project name and project version of the
module followed by the path, the concrete syntax is:<?asciidoc-br?>
<literal>&lt;project.name&gt;-&lt;project.version&gt;/&lt;module.path&gt;</literal>,<?asciidoc-br?>
where project version includes all version parts except the qualifier.<?asciidoc-br?>
E.g. given a module with path <literal>n4/lang/List</literal> in a project <literal>lib</literal> with
version <literal>1.0.0</literal>, the <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>e</mi><mi>x</mi><mi>p</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>P</mi><mi>a</mi><mi>t</mi><mi>h</mi></math> is
<literal>lib-1.0.0/n4/lang/List</literal>.</simpara>
<simpara>Pseudo property contains all load time dependencies of this module.</simpara>
<simpara>Pseudo property contains all runtime dependencies of this module.</simpara>
<simpara>Pseudo property contains all dependencies of this module. This is the
union of <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>s</mi></math> and <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>s</mi></math> which
maintains the ordering of both lists, with the
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi><mi>o</mi><mi>a</mi><mi>d</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>s</mi></math> at the front.</simpara>
<simpara>Pseudo properties to be set via annotations are explained in .</simpara>
</section>
<section xml:id="_numberfour_archives_nfar">
<title>NumberFour Archives (NFAR)</title>
<simpara>  </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-19"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-19</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-37"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-37</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-46"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-46</link></simpara>
</sidebar>
<simpara>Compiled projects are packaged in a N4 bundle archive and use <literal>nfar</literal> as a file extension. A nfar file is a zip archive that contains all source files,
compiled files and metadata of a project. It’s used to deploy projects
to:</simpara>
<itemizedlist>
<listitem>
<simpara>N4 environments via the N4 deployment web service</simpara>
</listitem>
<listitem>
<simpara>Maven artifact repositories via the standard Maven deploy</simpara>
</listitem>
</itemizedlist>
<simpara>A nfar archive has the following structure:</simpara>
<variablelist>
<varlistentry>
<term>/resources/</term>
<listitem>
<simpara>contains all resources such as images and css files</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>/src/</term>
<listitem>
<simpara>contains all JavaScript and N4ML source files, but doesn’t contain
test source files.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>/output/</term>
<listitem>
<simpara>contains the compiled JavaScript.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>/model/</term>
<listitem>
<simpara>contains the compiled type model.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>manifest.pmi</term>
<listitem>
<simpara>the manifest file</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bundle.json</term>
<listitem>
<simpara>This is used to track the format/version of the contained data, so
that we are able to see if two bundles are compatible with each other</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>package.json</term>
<listitem>
<simpara>This contains the <emphasis>N4 deployment descriptor</emphasis> required by the N4
deployment webservice. This file is only added to the nfar file when
deploying it to a N4 environment! That means that it’s not available
in nfar files deployed to a Maven artifact repository.</simpara>
</listitem>
</varlistentry>
</variablelist>
<section xml:id="_n4_deployment_descriptor">
<title>N4 Deployment Descriptor</title>
<simpara>The N4 deployment descriptor of a project <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is a NFON
formatted file with the following structure:</simpara>
<screen>{
  "@type":"n4.deployment.PackageDescription",
  "kind":~$p.deploymentKind$~, // LIBRARY, APPLICATION or PROCESSOR
  "name":~$p.name$~,
  "singleton":~$p.type="LIBRARY"$~,
  "version":~$p.version$~,
  "displayName":"",
  "buildComment":"",
  "allJavaScriptFile":~$p.allJavaScriptFile$~,
  "allMinJavaScriptFile":~$p.allMinJavaScriptFile$~,
  "dependentPackages": [
    // for (d in ~$p.dependencies$~)
    {
        "@type":"n4.deployment.DependencyInfo",
        "name": ~$d.name$~,
        "version": ~$d.version$~
    }
  ],
  "properties": {
    "@type":"n4.coreservices.graph.deployment.AppProperties",
    "objectHandlers": [
        // for (o in ~$p.objectHandlers$~)
        {
                "@type":"n4.coreservices.graph.deployment.ObjectHandler",
                "type":~$o.type$~,
                "viewId":~$o.viewId$~,
                "viewType":~$o.viewType$~,
                "perspectiveId":~$o.perspectiveId$~,
                "onlyCreatedByApp":~$o.onlyCreatedByApp$~,
                "actions":~$o.actions$~, // array of strings
                "docFileProvider":~$o.docFileProvider$~,
                "docMimeContentTypeMatch":~$o.docMimeContentTypeMatch$~
        }
    ]
  }
}</screen>
</section>
</section>
<section xml:id="_properties_files">
<title>Properties Files</title>
<simpara>Properties files have the file extension <literal>properties</literal> and describe how
to localize text in a project. They basically define keys
<xref linkend="Primitive_Pathselector__I18nKey"/> with their
values. The key is used during runtime to retrieve text localized to the
user’s locale.</simpara>
<section xml:id="_syntax_n4_deployment_descriptor_syntax">
<title>Syntax [[N4 Deployment Descriptor Syntax]]</title>
<simpara>The syntax of a resource file is defined as:</simpara>
<screen>ResourceFile:   Comment* | $entry+=$ Entry*;
Comment:        '#' .* EOL;
Entry:          $key$ = KeyIdentifier '=' $value$ = .* EOL;
KeyIdentifier:  LETTER (DIGIT | LETTER | '.')*;</screen>
</section>
<section xml:id="_constraints">
<title>Constraints</title>
<simpara>Properties files have to be stored in source fragment of type source.
The <emphasis>base folder</emphasis> for storing the properties files of a project
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi></math> is <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mrow><mo>/</mo><mi>n</mi><mi>l</mi><mi>s</mi></mrow></math>. The
language-specific resource files are stored in subfolders of the base
folder. The base language (normally english) has to be located in a
subfolder of the base folder. The resource files for other languages
have to be located in a subfolder with the name given by syntax
<emphasis role="strong">&lt;ISO Language Code&gt;_&lt;ISO Country Code&gt;</emphasis>, where ISO Language Code is
given by the ISO-639 standard and ISO Country Code is given by the
ISO-3166 standard.</simpara>
<simpara>All resource files stored in a language folder are compiled to a
JavaScript file which exports all resource keys as an object literal.</simpara>
<simpara>The resource files of a project are automatically loaded. To access a
resource key <literal>key</literal> stored in a resource file <literal>my.properties</literal>, you have
to use the file name as a prefix (e.g. you have to use the key <literal>my.key</literal>).</simpara>
</section>
</section>
<section xml:id="_api_and_implementation_components">
<title>API and Implementation Components</title>
<simpara>Instead of providing an implementation, N4JS components may only define
an API by way of one or more n4jsd files which is then implemented by
separate implementation projects. For one such API project, several
implementation projects may be provided. Client code using the API will
always be bound to the API project only, i.e. only the API project will
appear in the client project’s manifest under project dependencies. When
launching the client code, the launcher will choose an appropriate
implementation for each API project in the client code’s direct or
indirect dependencies and transparently replace the API project by the
implementation project. In other words, instead of the API project’s
output folder, the implementation project’s output folder will be put on
the class path. Static compile time validations ensure that the
implementation projects comply to their corresponding API project.</simpara>
<simpara>Note how this concept can be seen as an alternative way of providing the
implementation for an n4jsd file: usually n4jsd files are used to define
types that are implemented in plain JavaScript code or provided by the
runtime; this concept allows for providing the implementation of an
n4jsd file in form of ordinary N4JS code.</simpara>
<simpara>At this time, the concept of API and implementation components is in a
prototype phase and the tool support is limited. The goal is to gain
experience from using the early prototype support and then refine the
concept over time.</simpara>
<simpara>Here is a summary of the most important details of this concept (they
are all subject to discussion and change):</simpara>
<itemizedlist>
<listitem>
<simpara>Support for this concept, esp. validations, should not be built into
the core language but rather implemented as a separate
validation/analysis tool. Validation is currently provided in the form
of a separate view: the API / Implementation compare view.</simpara>
</listitem>
<listitem>
<simpara>A project that defines one or more other projects in its manifest
under <literal>ImplementedProjects</literal> is called <emphasis>implementation project</emphasis>. A project that has another
project pointing to itself via <literal>ImplementedProjects</literal> is called <emphasis>API project</emphasis>.
Note that, at the moment, there is no explicit definition making a project an API project.</simpara>
</listitem>
<listitem>
<simpara>An implementation project must define an implementation ID in its
manifest using the <literal>ImplementationID</literal> property.</simpara>
</listitem>
<listitem>
<simpara>For each public or public@Internal classifier or enum in an API
project, there must be a corresponding type with the same
fully-qualified name of the same or higher visibility in the
implementation project. For each member of such a type in the API, there
must exist a corresponding, owned <emphasis>or</emphasis> inherited type-compatible member
in the implementation type.</simpara>
</listitem>
<listitem>
<simpara>Beyond type compatibility, formal parameters should have the same name
on API and implementation side; however, different names are legal but
should be highlighted by API / Implementation tool support as a (legal)
change.</simpara>
</listitem>
<listitem>
<simpara>Comments regarding the state of the API or implementation may be added
to the JSDoc in the source code using the special tag @apiNote. API /
Implementation tool support should extract and present this information
to the user in an appropriate form.</simpara>
</listitem>
<listitem>
<simpara>If an API class <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> implements an interface
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math>, it has to explicitly (re-) declare all members of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math> similar to the implementation. This is necessary for
abstract classes anyway in order to distinguish the implemented methods
from the non-implemented ones. For concrete classes, we want all members
in <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> in order to be complete and avoid problems when the
interface is changed or <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> is made abstract.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_execution_of_api_and_implementation_components">
<title>Execution of API and Implementation Components</title>
<simpara>When launching an N4JS component <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> under runtime
environment <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mi>E</mi></math>, the user may(!) provide an implementation
ID <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mspace width="-0.167em"/><mi>I</mi><mspace width="-0.167em"/><mi>D</mi></math> to run. Then, for each API project
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math> in the direct or indirect dependencies of
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>C</mi></math> an implementation project is chosen as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Collect all implementation projects for <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math>
(i.e. projects that specify <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math> in their manifest under <literal>ImplementedProjects</literal>).</simpara>
</listitem>
<listitem>
<simpara>Remove implementation projects that cannot be run under runtime
environment <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mi>E</mi></math>, using the same logic as for running
ordinary N4JS components (this step is not implemented yet!).</simpara>
</listitem>
<listitem>
<simpara>If there are no implementation projects left, show an error.</simpara>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mspace width="-0.167em"/><mi>I</mi><mspace width="-0.167em"/><mi>D</mi></math> is defined (i.e. user specified an
implementation ID to run), then:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>If there is an implementation project left with implementation ID
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mspace width="-0.167em"/><mi>I</mi><mspace width="-0.167em"/><mi>D</mi></math>, use that.</simpara>
</listitem>
<listitem>
<simpara>Otherwise, show an error.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>If <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi><mspace width="-0.167em"/><mi>I</mi><mspace width="-0.167em"/><mi>D</mi></math> is undefined, then</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>If there is exactly 1 implementation project left, use it.</simpara>
</listitem>
<listitem>
<simpara>Otherwise, in UI mode prompt the user for a choice, in headless mode
show an error.</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<simpara>Having found an implementation project <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>n</mi></msub></math> for each API
project <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>A</mi><mi>n</mi></msub></math>, launch as usual except that whenever
<math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>A</mi><mi>n</mi></msub></math>’s output folder would be used, use <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>n</mi></msub></math>’s
output folder (esp. when constructing a <literal>class path</literal>) and when loading
or importing a type from <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>A</mi><mi>n</mi></msub></math> return the corresponding type
with the same fully-qualified name from <math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>I</mi><mi>n</mi></msub></math>.</simpara>
</section>
</section>
<section xml:id="_api_and_implementation_with_di">
<title>API and Implementation With DI</title>
<simpara>API projects may use N4JS DI (<xref linkend="Dependency_Injection"/>) language features which require
Implementation projects to provide DI-compatible behaviour in order to
allow a Client (implemented against an API project) to be executed with
a given Implementation project. This is essential for normal execution
and for test execution. Figure <xref linkend="diag_APITestsDI_Overview"/> shows some of those considerations from test client point of view.</simpara>
<figure xml:id="diag_APITestsDI_Overview">
<title>Overview of API tests with DI</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/diag_ApiTestsDI_Overview.png"/>
</imageobject>
<textobject><phrase>diag ApiTestsDI Overview</phrase></textobject>
</mediaobject>
</figure>
<simpara>Static DI mechanisms in N4JS allow an API project to enforce
Implementation projects to provide all necessary information. This
allows clients to work seamlessly with various implementations without
specific knowledge about them or without relying on extra tools for
proper project wiring. Figure <xref linkend="diag_ApiTestsDI_StaticDI"/> shows how API project defines project wiring and enforces certain level of testability.</simpara>
<figure xml:id="diag_ApiTestsDI_StaticDI">
<title>API tests with static DI</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/diag_ApiTestsDI_StaticDI.png"/>
</imageobject>
<textobject><phrase>diag ApiTestsDI StaticDI</phrase></textobject>
</mediaobject>
</figure>
<simpara>During Client execution, weather it is test execution or not, N4JS
mechanisms will replace the API project with a proper Implementation
project. During runtime DI mechanisms will take care of providing proper
instances of implantation types.
Figure <xref linkend="diag_ApiTestsDI_Views"/> shows Types View perspective of the client, and Instances View perspective of the client.</simpara>
<figure xml:id="diag_ApiTestsDI_Views">
<title>Types view and Instances view</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/diag_ApiTestsDI_Views.png"/>
</imageobject>
<textobject><phrase>diag ApiTestsDI Views</phrase></textobject>
</mediaobject>
</figure>
</section>
</chapter>
<chapter xml:id="_plainjs">
<title>PlainJS</title>
<simpara>Since N4JS is a super set of JavaScript, is it both possible to use
plain JavaScript in N4JS and vice versa. There may be some obstacles due
to concepts introduced by N4JS to make code more maintainable and
robust:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>N4JS’ static type system may complain about some older JavaScript
hacks. Declared types, in particular, are assumed to be implicitly
frozen.</simpara>
</listitem>
<listitem>
<simpara>In N4JS, modules are used as namespaces with explicit export and
import statements. The notion of globals is not directly supported by
N4JS as this leads to unexpected side effects (several components
providing and thus overriding global definitions, for example).</simpara>
</listitem>
<listitem>
<simpara>N4JS defines a (ECMAScript 6 compatible) concept of object-oriented
programming which may conflict with other plain JavaScript solutions.</simpara>
</listitem>
</orderedlist>
<simpara>To overcome these problems, N4JS provides a couple of techniques
summarized in this chapter.</simpara>
<section xml:id="_type_inference_and_validation_for_plain_js">
<title>Type Inference and Validation for Plain JS</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/45"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-45</link></simpara>
</sidebar>
<simpara>In plain JavaScript mode:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>All declared variables are inferred to <literal>any+</literal>.</simpara>
</listitem>
<listitem>
<simpara>All declared functions return and accept a variadic number of
arguments of type <literal>any+</literal>.</simpara>
</listitem>
<listitem>
<simpara>It is allowed to use the <literal>return</literal> statement with or without an expression.</simpara>
</listitem>
<listitem>
<simpara>New expressions with a receiver of <literal>any+</literal> is allowed.</simpara>
</listitem>
<listitem>
<simpara>No type arguments are required for generic built-in types.</simpara>
</listitem>
<listitem>
<simpara>Assigning a value to a read-only variable is not checked.</simpara>
</listitem>
<listitem>
<simpara>Undeclared variables are treated as <literal>any+</literal> as well.</simpara>
</listitem>
</orderedlist>
<simpara>Note that this essentially disables all validation particularly since
methods such as the ’import’-like function <literal>require</literal> are unknown.</simpara>
</section>
<section xml:id="_external_declarations">
<title>External Declarations</title>
<simpara> </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-572"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-572</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1236"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1236</link></simpara>
</sidebar>
<simpara>N4JS supports declaring external classes as
a means to declare classes whose implementation is not N4JS so they can
be used from N4JS. Together with structural typing , this allows N4JS to
seamlessly integrate frameworks and libraries which have not been
implemented in N4JS but in plain ECMAScript or another language.</simpara>
<simpara><emphasis role="strong">Req. IDE-163:</emphasis> <link linkend="IDE-163">External allowed occurrences</link> (ver. 1)</simpara>
<itemizedlist>
<listitem>
<simpara>Declarations with external flags are only allowed in files with the
extension <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi><mi>d</mi></math> (so called N4JS definition files).</simpara>
</listitem>
<listitem>
<simpara>Only external classes, external interfaces marked with <literal>@N4JS</literal>, external
enums, external function declarations and structurally typed interfaces
are allowed in a <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi><mi>d</mi></math> file.</simpara>
</listitem>
<listitem>
<simpara>Declarations with external flags are allowed to subclass built-in type
<literal>Error</literal> type and all of its descendants such as <literal>EvalError</literal>, <literal>RangeError</literal>, <literal>ReferenceError</literal>, <literal>SyntaxError</literal>, <literal>TypeError</literal> and <literal>URIError</literal>, although any of the error types are annotated with <literal>@N4JS</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>The following explanations apply to all external declarations except
where stated otherwise.</simpara>
<simpara>In general, an external declaration uses the same syntax as the
declaration of a normal N4JS declaration with the addition of the
modifier <literal>external</literal>.</simpara>
<simpara>External classifiers are always ’entirely external’ in that it is not
possible to combine defined methods and external methods within a single
class or interface.</simpara>
<simpara><emphasis role="strong">Req. IDE-164:</emphasis> <link linkend="IDE-164">External classes inheritance</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>An external class <emphasis>without</emphasis> the <literal>@N4JS</literal> annotation can only inherit from
another external class or from one of the built-in ECMAScript types
(e.g. Object). That is, by default external classes are derived from <literal>Object</literal>.</simpara>
</listitem>
<listitem>
<simpara>An external class <emphasis>with</emphasis> the annotation <literal>@N4JS</literal> can only inherit from
another external class annotated with <literal>@N4JS</literal> or from non-external N4JS classes.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-165:</emphasis> <link linkend="IDE-165">Structurally typed interface implementation</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>An external class <emphasis>without</emphasis> the annotation <literal>@N4JS</literal> can only be implemented
by structurally typed interfaces.</simpara>
</listitem>
<listitem>
<simpara>An external class <emphasis>with</emphasis> the annotation <literal>@N4JS</literal> can only be implemented by
structurally typed interfaces annotated with <literal>@N4JS</literal>.</simpara>
</listitem>
<listitem>
<simpara>An external interface <emphasis>without</emphasis> the annotation <literal>@N4JS</literal> must be defined
structurally.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-166:</emphasis> <link linkend="IDE-166">External interface inheritance</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>An interface in a n4jsd file <emphasis>without</emphasis> the annotation <literal>@N4JS</literal> can only
inherit from another interface within a n4jsd file.</simpara>
</listitem>
<listitem>
<simpara>An interface <emphasis>with</emphasis> the <literal>@N4JS</literal> annotation can only inherit from another
interface annotated with <literal>@N4JS</literal>.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Req. IDE-167:</emphasis> <link linkend="IDE-167">External class/interface members</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The static and instance methods, getters and setters of an external
class must not have a method body.</simpara>
</listitem>
<listitem>
<simpara>The static and instance fields of an external class must not have an
initializer.</simpara>
</listitem>
<listitem>
<simpara>The constructor of an external class without the annotation <literal>@N4JS</literal> must not be declared private. </simpara>
</listitem>
<listitem>
<simpara>Methods in interfaces with default implementation which cannot be
expressed in the definition file must be annotated with <literal>@ProvidesDefaultImplementation</literal>.
This is only allowed in interfaces annotated with <literal>@N4JS</literal>. </simpara>
</listitem>
<listitem>
<simpara>Fields in interfaces or classes with initializers which cannot be
expressed in the definition file, must be annotated with <literal>@ProvidesInitializer</literal>.
This is only allowed in classes or interfaces annotated with <literal>@N4JS</literal>.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/431"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-431</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1403"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1403</link>
<link xl:href="https://jira.numberfour.eu/browse/IDE-1509"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1509</link></simpara>
</sidebar>
<simpara>This means that in external classes, all members except constructors may
be declared private even if the class is not annotated with <literal>@N4JS</literal>. In
interfaces, however, private members are disallowed anyway,
cf. <xref linkend="req:Interfaces"/>.</simpara>
<simpara><emphasis role="strong">Req. IDE-168:</emphasis> <link linkend="IDE-168">Other external declarations</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The literals of an external enum must not have a value.</simpara>
</listitem>
<listitem>
<simpara>An external function declaration must not have a body.</simpara>
</listitem>
</orderedlist>
<section xml:id="_declaring_externals">
<title>Declaring externals</title>
<simpara>By default, the implicit supertype of an external class is Object. If
the <literal>@N4JS</literal> annotation is provided it is N4Object. If a superclass is explicitly
given, the constraints from the previous section apply.</simpara>
</section>
<section xml:id="_instantiating_external_classes">
<title>Instantiating external classes</title>
<simpara>In most cases, it is desirable to instantiate external classes from
external projects. Publicly exporting the class definition and providing
a public constructor is good practice.</simpara>
<simpara>In some cases, the instantiation from an outer scope is not wanted. A
possible approach is to use a structurally typed interface instead of a
class to link to the implementation.</simpara>
<simpara>In case of API-definitions (see <xref linkend="API_and_Implementation_Components"/>), it might be useful to limit the visibility of classes to narrower scopes such as package or private.</simpara>
<simpara>External declarations can be instantiated if the following three
requirements are fulfilled (not a constraint!):</simpara>
<itemizedlist>
<listitem>
<simpara>External declarations have to be exported and be marked as public so
they are accessible from outside.</simpara>
</listitem>
<listitem>
<simpara>The contained or inherited constructor of an external class must be
public.</simpara>
</listitem>
<listitem>
<simpara>The external class must be linked to an implementation module (see
below <xref linkend="_implementation_of_external_declarations"/>).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_implementation_of_external_declarations">
<title>Implementation of External Declarations</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/242"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-242</link></simpara>
</sidebar>
<simpara>All external declarations must be associated with an external
implementation module in one way or another. Any time the external
declaration is imported, the compiler generates code that imports the
corresponding implementation module at runtime.</simpara>
<simpara>There are two possible ways of linking an external declaration to its
corresponding implementation:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>By naming convention defined in the manifest.</simpara>
</listitem>
<listitem>
<simpara>By declaring that the implementation is provided by the JavaScript
runtime, see <xref linkend="Runtime_Definitions"/> for details.</simpara>
</listitem>
</orderedlist>
<simpara>The naming convention is based on the <literal>external</literal> source fragments
defined in the manifest (<xref linkend="Manifest"/>). If the implementation is provided by the
runtime directly, then this can be also specified in the manifest by a
module filter.</simpara>
<simpara>The implicit link via the naming convention is used to link an external
class declaration to its non-N4JS implementation module. It does not
effect validation, but only compilation and runtime. Essentially, this
makes the compiler generate code so that at runtime, the linked
implementation module is imported instead of the declaration module.</simpara>
<simpara>In most use cases of external declarations you also want to disable
validation and module wrapping by specifying appropriate filters in the
manifest.</simpara>
<simpara>Occasionally it is not possible for the validation to correctly detect a
corresponding implementation element. For that reason, it is possible to
disable validation of implementations completely via <literal>@@IgnoreImplementation</literal>.</simpara>
<simpara><emphasis role="strong">Req. IDE-169:</emphasis> <link linkend="IDE-169">Implementation of External Declarations</link> (ver. 1)</simpara>
<simpara>
For a given external declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math> but not for
API-definitions <footnote><simpara><xref linkend="API_and_Implementation_Components"/></simpara></footnote>, the
following constraints must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1099"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1099</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the declaration is neither provided by runtime nor validation of
implementation is disabled, a corresponding implementation must be found
by the naming convention. If no such implementation is found, a warning
is generated.</simpara>
</listitem>
</orderedlist>
<simpara>[[ex:External Definitions and Their Implementations]]
If, in addition to standard <literal>source</literal>, the <literal>source-external</literal> fragment is
provided in <literal>Sources</literal>, <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>n</mi><mn>4</mn><mi>j</mi><mi>s</mi><mi>d</mi></math> files in the folder tree
below source folders will be related to modules of the same name in the
external folders. This is shown in <xref linkend="externalClassImplementation_naming"/>.</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="fig/externalClassImplementation_naming.png"/>
</imageobject>
<textobject><phrase>externalClassImplementation naming</phrase></textobject>
</inlinemediaobject></simpara>
</section>
<section xml:id="ex:External_Classes_Example">
<title>Example</title>
<simpara>Assume the following non-N4JS module:</simpara>
<screen>module.exports = {
    "Point": function Point(x, y) {
        this.x = x;
        this.y = y;
    },

    "Circle": function Circle(center, radius) {
        this.center = center;
        this.radius = radius;
        this.scaleX = function(x){ this.x = x; }
    this.scaleY= function(y){ this.y = y; }
    }
}</screen>
<simpara>Assuming</simpara>
<itemizedlist>
<listitem>
<simpara><literal>shapes.js</literal> is placed in project folder /external/a/b/shapes.js</simpara>
</listitem>
<listitem>
<simpara><literal>shapes.n4jsd</literal> is placed in project folder /src/a/b/shapes.n4jsd</simpara>
</listitem>
<listitem>
<simpara><literal>manifest.n4mf</literal> defines src as source folder and external as external
source folder</simpara>
</listitem>
</itemizedlist>
<simpara>the following N4JS external class declarations in shapes.n4jsd are
sufficient:</simpara>
<screen>export external public class Point {
    x: number; y: number;
    constructor(x: number, y: number);
}

export external public class Circle {
    center: Point; radius: number;
    constructor(center: Point, radius: number);
}</screen>
<simpara>Note that the class and interface names in n4jsd files must match those
in the js files, respectively.</simpara>
<simpara>[[ex:Structural typed external interfaces]]</simpara>
<screen>export external public interface ~Scalable {
    scaleX(factor: number);
    scaleY(factor: number);
}

export external public class Circle implements Scalable {
    center: Point;
    radius: number; x: number; y: number;

    @Override public scaleX(factor: number);
    @Override public scaleY(factor: number);

    constructor(center: Point, radius: number);
}</screen>
</section>
</section>
<section xml:id="_global_definitions">
<title>Global Definitions</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1036"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1036</link></simpara>
</sidebar>
<simpara>Existing JavaScript libraries and built-in objects provided by certain
JavaScript environments often globally define variables. Although it is
not recommended to use global definitions, this cannot always be
avoided.</simpara>
<simpara>N4JS supports global definitions via the annotation <literal>Global</literal>. This annotation
can only be defined on modules (via <literal>@@Global</literal>) – this means that all declarations in the module are globally defined.
<footnote><simpara>Global basically means that the module defines no namespace on its own. Thus the annotation is a script/module related annotation.</simpara></footnote></simpara>
<simpara>We introduce a new pseudo property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></math> on all declared
elements accordingly:</simpara>
<simpara>Boolean flag set to true if annotation <literal>@Global</literal> is set in containing module. Flag indicates that the exported element is globally available and must not
be imported. </simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1036"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1036</link></simpara>
</sidebar>
<simpara>Since definition of global elements is not supported by N4JS directly,
this can be only used in external definitions. A declaration with
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi></math> can be used without explicit import statement. It
is not possible to import these declarations.</simpara>
<simpara><emphasis role="strong">Req. IDE-170:</emphasis> <link linkend="IDE-170">Global Definitions</link> (ver. 1)</simpara>
<simpara>Global Definitions</simpara>
<simpara>For a declaration <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math> with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi><mo>.</mo><mi>g</mi><mi>l</mi><mi>o</mi><mi>b</mi><mi>a</mi><mi>l</mi><mo>=</mo></math>, not a polyfill
(<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>D</mi><mo>.</mo><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>l</mi><mo>=</mo><mo>)</mo></mrow></math>, the following constraints must hold:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The name of the definition must not be equal to any primitive type
(<literal>string</literal>, <literal>number</literal> etc.), <literal>any</literal>, or an built-in N4 type (<literal>N4Object</literal> etc.).</simpara>
</listitem>
<listitem>
<simpara>If the name of the definition equals a basic runtime time Object
Type then the project must be a runtime environment:
<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mi>D</mi><mo>.</mo><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mo>∈</mo><mfenced close="}" open="{"><mrow><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msup><mspace width="3.0em"/><mi>'</mi></msup><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><msup><mi>t</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><msup><mi>n</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>A</mi><mi>r</mi><mi>r</mi><mi>a</mi><msup><mi>y</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><msup><mi>g</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>B</mi><mi>o</mi><mi>o</mi><mi>l</mi><mi>e</mi><mi>a</mi><msup><mi>n</mi><mi>'</mi></msup><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><msup><mspace width="3.0em"/><mi>'</mi></msup><mi>N</mi><mi>u</mi><mi>m</mi><mi>b</mi><mi>e</mi><msup><mi>r</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>M</mi><mi>a</mi><mi>t</mi><msup><mi>h</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>D</mi><mi>a</mi><mi>t</mi><msup><mi>e</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>R</mi><mi>e</mi><mi>g</mi><mi>E</mi><mi>x</mi><msup><mi>p</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>E</mi><mi>r</mi><mi>r</mi><mi>o</mi><msup><mi>r</mi><mi>'</mi></msup><msup><mo>,</mo><mi>'</mi></msup><mi>J</mi><mi>S</mi><mi>O</mi><msup><mi>N</mi><mi>'</mi></msup><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi></mrow></mfenced><mtext>
</mtext><mi>a</mi><mi>m</mi><mi>p</mi><mi>;</mi><mo>⇒</mo><mi>D</mi><mo>.</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>P</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>.</mo><mi>t</mi><mi>y</mi><mi>p</mi><mi>e</mi><mo>=</mo><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>E</mi><mi>n</mi><mi>v</mi><mi>i</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></math></simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="_runtime_definitions">
<title>Runtime Definitions</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1036"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1036</link></simpara>
</sidebar>
<simpara>Some elements are predefined by the JavaScript runtime such as DOM
elements by the browser or built-in ECMAScript or non-standard objects.
These elements can be defined by means of external definitions; however,
no actual implementation can be provided as these elements are actually
provided by the runtime itself.</simpara>
<simpara>Since these cases are rather rare and in order to enable additional
checks such as verification that a given runtime actually provides the
elements, this kind of element can only be defined in components of type
runtime environment or runtime library (cf <xref linkend="Runtime_Environment_Libraries"/>).</simpara>
<simpara>N4JS supports runtime definitions via the annotation <literal>@ProvidedByRuntime</literal>. This annotation can be defined</simpara>
<itemizedlist>
<listitem>
<simpara>on modules (via <literal>@@ProvidedByRuntime</literal>)– this means that all declarations in the module are provided by the runtime</simpara>
</listitem>
<listitem>
<simpara>on export statements or declarations.</simpara>
</listitem>
</itemizedlist>
<simpara>We introduce a new pseudo property <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>B</mi><mi>y</mi><mi>R</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi></math>
accordingly:</simpara>
<simpara>Boolean flag set to true if the annotation <literal>@ProvidedByRuntime</literal> is set. Flag indicates that
the element is only declared in the module but its implementation is
provided by the runtime.</simpara>
<simpara>Since built-in types are usually defined globally, the annotation <literal>@ProvidedByRuntime</literal> is usually used in combination with <literal>@Global</literal>.</simpara>
<simpara><emphasis role="strong">Req. IDE-171:</emphasis> <link linkend="IDE-171">Provided By Runtime</link> (ver. 1)</simpara>
<simpara>Provided By Runtime</simpara>
<simpara>
For a declaration
<math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi></math> with <math xmlns="http://www.w3.org/1998/Math/MathML"><mi>D</mi><mo>.</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>v</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi>d</mi><mi>B</mi><mi>y</mi><mi>R</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mo>=</mo></math>, the
following constraints must hold:</simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1036"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1036</link></simpara>
</sidebar>
<orderedlist numeration="arabic">
<listitem>
<simpara>The declaration must either be an export declaration itself or an
exportable declaration.</simpara>
</listitem>
<listitem>
<simpara>The declaration must be contained in a definition module.</simpara>
</listitem>
<listitem>
<simpara>The declaration must be (indirectly) contained in a component of
type <math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>E</mi><mi>n</mi><mi>v</mi><mi>i</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>m</mi><mi>e</mi><mi>n</mi><mi>t</mi></mrow></math> or
<math xmlns="http://www.w3.org/1998/Math/MathML"><mrow><mi>r</mi><mi>u</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>L</mi><mi>i</mi><mi>b</mi><mi>r</mi><mi>a</mi><mi>r</mi><mi>y</mi></mrow></math>.</simpara>
</listitem>
<listitem>
<simpara>There must be no implementation file with the same name as the
definition module if annotation is defined for a whole module. </simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1084"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1084</link></simpara>
</sidebar>
</section>
<section xml:id="_applying_polyfills">
<title>Applying Polyfills</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1142"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1142</link></simpara>
</sidebar>
<simpara>(Runtime) Libraries often do not provide completely new types but modify
existing types.
The ECMA-402 Internationalization Standard [<link linkend="ECMA12a">ECMA12a</link>], for example, changes methods of the built-in class <literal>Date</literal> to be timezone-aware.
Other scenarios include new functionality provided by browsers which are not part of an official standard yet.
Even ECMAScript 6 [<link linkend="ECMA15a">ECMA15a</link>] extends the predecessor [<link linkend="ECMA11a">ECMA11a</link>] in terms of new methods or new method parameters added to
existing types.
It also adds completely new classes and features, of course.</simpara>
<simpara>The syntax of runtime polyfills is described in section <xref linkend="Polyfill_Definitions"/>.
Here, an example of applying a runtime polyfill is detailed.</simpara>
<simpara>[[ex:Object.observe with Polyfill]]
The following snippet demonstrates how to define a polyfill of the built-in
class to add the new ECMAScript 7 observer functionality.
This snippet has to be defined in a runtime library or environment.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">@@ProvidedByRuntime
@@Global

@Polyfill
export external public class Object extends Object {
    public static Object observe(Object object, Function callback, Array&lt;string&gt;? accept);

}</programlisting>
<simpara>A client referring to this runtime library (or environment) can now
access the observer methods as if it were defined directly in the
original declaration of <literal>Object</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="_jsdoc_2">
<title>JSDoc</title>
<simpara>In N4JS, comments starting with two asterisks (in <literal>/** .. */
</literal>) are interpreted as
documentation comments. The format is similar to JavaDoc or Google
Closure annotations.</simpara>
<section xml:id="_general_n4jsdoc_features">
<title>General N4JSDoc Features</title>
<simpara>We distinguish between line and inline tags.
The format of the content of a tag is specific to the tag.
Most line tags, however, contain a description which is simply multiline text with nested inline tags.
Every comment may start with a description.</simpara>
<section xml:id="_provided_inline_tags">
<title>Provided Inline Tags</title>
<section xml:id="jsdoc_tag__code">
<title>@code</title>
<simpara>Small code snippet, not validated yet.</simpara>
</section>
<section xml:id="jsdoc_tag__link">
<title>@link</title>
<simpara>Link to a type of element, not validated or supported in navigation yet.</simpara>
</section>
</section>
</section>
<section xml:id="_n4jsdoc_for_user_projects">
<title>N4JSdoc for User Projects</title>
<section xml:id="_standard_tags">
<title>Standard Tags</title>
<section xml:id="__author">
<title>@author</title>
<simpara>Name of author, repeat for multiple authors. Name of author is not
validated.</simpara>
</section>
<section xml:id="jsdoc_tag_param">
<title>@param</title>
<simpara>Parameter description, not validated at the moment.</simpara>
</section>
<section xml:id="jsdoc_tag_return">
<title>@return</title>
<simpara>Return description, not validated at the moment.</simpara>
</section>
</section>
<section xml:id="_test_related_tags">
<title>Test Related Tags</title>
<simpara>The following tags are supposed to be used only in tests.</simpara>
<section xml:id="jsdoc_tag__testee">
<title>@testee</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1469"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1469</link></simpara>
</sidebar>
<simpara>Link to type (maybe a function) or member tested by the test.</simpara>
<simpara><emphasis role="strong">Req. IDE-172:</emphasis> <link linkend="IDE-172">@testee Semantics</link> (ver. 1)</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Tag can be only used on either</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>methods annotated with <literal>@Test</literal></simpara>
</listitem>
<listitem>
<simpara>classes in test projects or folders, cf. <xref linkend="jsdoc_tag__testeeFromType"/>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Tag requires a single argument, which is a fully qualified name to a type, including the module specifier.
The format is as follows: `moduleSpecifier '.' typeName ( ('.'|'#') memberName)?</simpara>
</listitem>
<listitem>
<simpara>Tag is <emphasis>not</emphasis> repeatable, that is a single test method (or class) can refer to only one testee. </simpara>
</listitem>
<listitem>
<simpara>Tag precedes the <literal>reqid</literal> tag, i.e., if a <literal>@testee</literal> is specified, the <literal>reqid</literal> will be ignored.</simpara>
</listitem>
</orderedlist>
<sidebar>
<simpara><link xl:href="https://github.com/NumberFour/N4JS/issues/635"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-635</link></simpara>
</sidebar>
<informalexample>
<simpara>[[ex:@testee Example]]
The target element is to be fully qualified including the module specifier. The module specifier is simply
the source folder relative path name with forward slashes. Type and
element are added to that using dot as a separator. For example:</simpara>
<screen>/**
 * @testee some/package/Module.Type.member
 */</screen>
</informalexample>
</section>
<section xml:id="jsdoc_tag__testeeFromType">
<title>@testeeFromType</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/SL-41"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-41</link></simpara>
</sidebar>
<simpara>Instead of directly linking a test method to a testee, the testee is to
be derived from the linked testee of the test class. This is useful if a
base test class is defined with generic tests, e.g., for testing methods
defined in an interface and implemented by some classes. This base test
class is then extended by concrete test classes, correctly setting up
the test fixture, e.g., creating instances of some classes implementing
the interfaces tested in the base class.</simpara>
<simpara>[[ex:Usage of testeeFromType]]
In the following example, the is used. This tag will lead to a test documentation for <literal>B.foo</literal> and <literal>C.foo</literal>.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">abstract class Base {
    /**
     * @testeeFromType
     */
    @Test testFoo() {..}
}

/**
 * @testee B.foo
 */
class TestB extends Base {}

/**
 * @testee C.foo
 */
class TestC extends Base {}</programlisting>
<simpara>Note that the resulting spec has to be double-checked for consistency
since it is easily possible that too many constraints are generated.</simpara>
</section>
<section xml:id="_testeeType_and__testeeMember">
<title>@testeeType and @testeeMember</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/SL-41"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-41</link></simpara>
</sidebar>
<simpara>Specifying the testee at the test method directly should be sufficient
for most cases. The <literal>@testeeFromType</literal> tag already provides support for some cases in which a base test class is reused by subtypes. This case usually only works if
the base test class tests a single method only. If the base test class
tests several methods and if a sub test class only provides a different
fixture, this mechanism is not sufficient. For that purpose, the two
tags <literal>@testeeFromType</literal> and <literal>@@testeeMember</literal> are to be used.
They enable the separation of a test related to a specific member and the concrete receiver type of the tested member.</simpara>
<simpara>The <literal>@testeeType</literal> is to defined in the test class JSDoc (actually, it is not
recognized when defined in a member JSDoc). The <literal>@testeeMember</literal> is specified in the test method JSDoc. The "real" testee is then computed from the testee type and the testee method.</simpara>
<simpara>This only works for instance members, so far! Note: There is no
validation for invalid combinations!</simpara>
<simpara>[[ex:testeeType and testeeMethod]]
Assume the following testees:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">class A {
    foo(): void {..}
    bar(): void { .. this.foo(); ..}
}
class B extends A {
    @Override foo() { .. }
}</programlisting>
<simpara>Assume that the tests have to ensure the same semantics for <literal>bar</literal>, which is
maybe changed by a wrong implementation of <literal>foo</literal>. That is, <literal>bar</literal> is to be tested in
case of the receiver type <literal>A</literal> and <literal>B</literal>. This can be achieved by the following
tests:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">/**
 * @testeeType A.A
 */
class ATest {
    fixture(): A { return new A(); }

    /**
     * @testeeMember bar
     */
    @Test testBar(): void { assertBehavior( fixture().bar() ); }
}
/**
 * @testeeType B.B
 */
class BTest extends ATest {
    @Override fixture(): B { return new B(); }
}</programlisting>
<simpara>This actually defines two tests, which is also recognized by the spec
exporter:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>testBar</literal> for a receiver of type <literal>A</literal>:</simpara>
<simpara><literal>ATest</literal>'s JSDoc <literal>@testeeType</literal> + <literal>ATest.testBar</literal>'s JSDoc <literal>@testeeMember</literal> = testee <literal>A.A.bar</literal></simpara>
</listitem>
<listitem>
<simpara><literal>testBar</literal> for a receiver of type <literal>B</literal>:</simpara>
<simpara><literal>BTest</literal>'s JSDoc <literal>@testeeType</literal> + <literal>ATest.testBar</literal>'s JSDoc <literal>@testeeMember</literal> = testee <literal>B.B.bar</literal></simpara>
</listitem>
</orderedlist>
<simpara>Note that in all cases when <literal>@testeeFromType</literal> or <literal>@testeeType</literal>/<literal>@testeeMember</literal> is used, the resulting spec has to be
double-checked for consistency. Consider if the multiplication of spec
constraints is truly required, in particular if the original semantics
of a method is not changed. Remember: It is possible to write API tests
and omit the spec constraint generation simply by not adding the testee
links.</simpara>
<simpara>[[ex:testeeType and testeeMethod with omitted constraints]]</simpara>
<simpara>Assume testees similar as in <xref linkend="ex:testeeType_and_testeeMethod"/>. Since the semantics of <literal>bar</literal> is not changed in <literal>B</literal>, it is probably not necessary to generate the same constraint in the documentation for <literal>bar</literal> twice (one in the section for class <literal>A</literal> and another one in the section of class <literal>B</literal>).
Still, we want the test to be executed for both receivers. This is how it is achieved:</simpara>
<programlisting language="n4js" linenumbering="unnumbered">abstract class BaseTest {
    abstract fixture(): A;

    /**
     * @testeeMember bar
     */
    @Test testBar(): void { assertBehavior( fixture().bar() ); }
}

/**
 * @testeeType A.A
 */
class ATest extends BaseTest {
    fixture(): A { return new A(); }
}

class BTest extends BaseTest {
    @Override fixture(): B { return new B(); }
}</programlisting>
<simpara>This actually defines two tests as in the previous example. Only one
constraint is created in the spec by the spec exporter:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>testBar</literal> for a receiver of type <literal>A</literal>:<?asciidoc-br?>
<literal>ATest</literal>'s JSDoc <literal>@testeeType</literal> + <literal>BaseTest.testBar</literal>'s JSDoc <literal>@testeeMember</literal> = testee <literal>A.A.bar</literal></simpara>
</listitem>
</orderedlist>
<simpara>Although a test for receiver of type <literal>B</literal> is run, no additional constraint is
created since there is no <literal>@testeeType</literal> available neither in <literal>BTest</literal> nor in <literal>BaseTest</literal>.</simpara>
</section>
<section xml:id="jsdoc_tag_reqid_in_Tests">
<title>@reqid in Tests</title>
<simpara>ID of feature used in LaTeX-code for the requirements section. If no
testee (via one of the tags above) is given, then the test is linked to
the requirement with given id.</simpara>
</section>
</section>
</section>
<section xml:id="_n4jsdoc_for_api_and_implementation_projects">
<title>N4JSDoc for API and Implementation Projects</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1509"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1509</link></simpara>
</sidebar>
<simpara>The following tags are supposed to be used in API and implementation
projects.</simpara>
<section xml:id="jsdoc_tag__apiNote">
<title>@apiNote</title>
<simpara>Simple note that is shown in the API compare view.</simpara>
</section>
<section xml:id="API_Project_Tags">
<title>API Project Tags</title>
<simpara>The following tags are supposed to be used in API projects only.</simpara>
<section xml:id="jsdoc_tag_apiState">
<title>@apiState</title>
<simpara>State of type or member definition, e.g., stable or draft. This can be
used to define a history. In this case, the tag has to be repeated. For
example:</simpara>
<screen>/**
 * @apiState stable (WK)
 * @apiState reviewed (JvP)
 */</screen>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_grammars">
<title>Grammars</title>
<simpara>N4JS extends the ECMAScript 2015 language grammar and combines it with
type expression.</simpara>
<note>
<simpara>These grammars are slightly simplified versions of the "real"
Xtext grammars used in the implementation.
These grammars are post-processed and combined with additional validators so not all constructs are necessarily available in N4JS.</simpara>
</note>
<section xml:id="_type_expressions_grammar">
<title>Type Expressions Grammar</title>
<screen>TypeRef:
    TypeRefWithoutModifiers =&gt;undefModifier=UndefModifierToken?
    | undefModifier=UndefModifierToken;

TypeRefWithoutModifiers:
      ((ParameterizedTypeRef | ThisTypeRef) =&gt; dynamic?='+'?)
    | ConstructorTypeRef
    | ClassifierTypeRef
    | FunctionTypeExpression
    | UnionTypeExpression
    | IntersectionTypeExpression;

TypeRefFunctionTypeExpression:
      ParameterizedTypeRef
    | ConstructorTypeRef
    | ClassifierTypeRef
    | UnionTypeExpression
    | IntersectionTypeExpression
    ;

TypeRefForCast:
      ParameterizedTypeRef
    | ThisTypeRef
    | ConstructorTypeRef
    | ClassifierTypeRef
    | FunctionTypeExpression;

TypeRefInClassifierType:
      ParameterizedTypeRefNominal
    | ThisTypeRefNominal;


ThisTypeRef:
    ThisTypeRefNominal | ThisTypeRefStructural;

ThisTypeRefNominal:
    'this';

ThisTypeRefStructural:
    definedTypingStrategy=TypingStrategyUseSiteOperator
    'this'
    ('with' TStructMemberList)?;

FunctionTypeExpression:
    '{'
    ('@' 'This' '(' declaredThisType=TypeRefFunctionTypeExpression ')')?
    'function'
    ('&lt;' ownedTypeVars+=TypeVariable (',' ownedTypeVars+=TypeVariable)* '&gt;')?
    '(' TAnonymousFormalParameterList ')'
    (':' returnTypeRef=TypeRef)?
    '}';

fragment TAnonymousFormalParameterList*:
    (fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)?
;

TAnonymousFormalParameter:
    variadic?='...'? (=&gt; name=TIdentifier ':')? typeRef=TypeRef
;

UnionTypeExpression:
    'union' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';

IntersectionTypeExpression:
    'intersection' '{' typeRefs+=TypeRefWithoutModifiers (',' typeRefs+=TypeRefWithoutModifiers)* '}';

ParameterizedTypeRef:
    ParameterizedTypeRefNominal | ParameterizedTypeRefStructural;

ParameterizedTypeRefStructural:
    definedTypingStrategy=TypingStrategyUseSiteOperator
    declaredType=[Type|TypeReferenceName]
    (=&gt;'&lt;' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '&gt;')?
    ('with' TStructMemberList)?;

fragment TStructMemberList*:  '{' (astStructuralMembers+=TStructMember (';'|',')?)*  '}';

TStructMember:
      TStructGetter
    | TStructSetter
    | TStructMethod
    | TStructField;

TStructMethod:
    =&gt;
    (('&lt;' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '&gt;')?
        name=TypesIdentifier '('
    ) TAnonymousFormalParameterList ')'
    (':' returnTypeRef=TypeRef)?
;

TStructField:
    name=TypesIdentifier (':' typeRef=TypeRef)?
;

TStructGetter:
    =&gt; ('get'
    name=TypesIdentifier)
    '(' ')' (':' declaredTypeRef=TypeRef)?
;

TStructSetter:
    =&gt; ('set'
    name=TypesIdentifier)
    '(' fpar=TAnonymousFormalParameter ')'
;

ParameterizedTypeRefNominal:
    declaredType=[Type|TypeReferenceName]
    (=&gt; '&lt;' typeArgs+=TypeArgument (',' typeArgs+=TypeArgument)* '&gt;')?;

TypingStrategyUseSiteOperator:
    '~' ('~' | STRUCTMODSUFFIX)?;

TypingStrategyDefSiteOperator:
    '~';

terminal STRUCTMODSUFFIX:
    ('r' | 'i' | 'w') '~'
;

ConstructorTypeRef:
    'constructor' '{' staticTypeRef=TypeRefInClassifierType '}';

ClassifierTypeRef:
    'type' '{' staticTypeRef=TypeRefInClassifierType '}';

TypeReferenceName:
    IDENTIFIER ('.' IDENTIFIER)*;

TypeArgument:
    Wildcard | TypeRef;

Wildcard:
    =&gt; ('?') (('extends' declaredUpperBound=TypeRef) | ('super'
    declaredLowerBound=TypeRef))?;

UndefModifierToken:
    '?';

TypeVariable:
    name=IDENTIFIER ('extends' declaredUpperBounds+=ParameterizedTypeRef ('&amp;'
    declaredUpperBounds+=ParameterizedTypeRef)*)?;

TypesIdentifier:
    IDENTIFIER
    | 'get' | 'set' | 'abstract' | 'project'
    | 'union' | 'intersection'
    | 'as' | 'from' | 'type' | 'void' | 'null';

TIdentifier:
    TypesIdentifier
    | 'implements' | 'interface'
    | 'private' | 'protected' | 'public'
    | 'static'
;

terminal IDENTIFIER:
    IDENTIFIER_START IDENTIFIER_PART*;

terminal INT:
    DECIMAL_INTEGER_LITERAL_FRAGMENT;

terminal ML_COMMENT:
    ML_COMMENT_FRAGMENT;

terminal SL_COMMENT:
    '//' (!LINE_TERMINATOR_FRAGMENT)*;

terminal EOL:
    LINE_TERMINATOR_SEQUENCE_FRAGMENT;

terminal WS:
    WHITESPACE_FRAGMENT+;

terminal fragment UNICODE_ESCAPE_FRAGMENT:
    '\\' ('u' (
        HEX_DIGIT (HEX_DIGIT (HEX_DIGIT HEX_DIGIT?)?)?
      | '{' HEX_DIGIT* '}'?
    )?)?;

terminal fragment IDENTIFIER_START:
      UNICODE_LETTER_FRAGMENT
    | '$'
    | '_'
    | UNICODE_ESCAPE_FRAGMENT;

terminal fragment IDENTIFIER_PART:
      UNICODE_LETTER_FRAGMENT
    | UNICODE_ESCAPE_FRAGMENT
    | '$'
    | UNICODE_COMBINING_MARK_FRAGMENT
    | UNICODE_DIGIT_FRAGMENT
    | UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT
    | ZWNJ
    | ZWJ;

terminal DOT_DOT:
    '..'
;</screen>
</section>
<section xml:id="_n4js_language_grammar">
<title>N4JS Language Grammar</title>
<screen>Script: annotations+=ScriptAnnotation*
    scriptElements+=ScriptElement*;

ScriptElement:
      AnnotatedScriptElement
    | N4ClassDeclaration&lt;Yield=false&gt;
    | N4InterfaceDeclaration&lt;Yield=false&gt;
    | N4EnumDeclaration&lt;Yield=false&gt;
    | ImportDeclaration
    | ExportDeclaration
    | RootStatement&lt;Yield=false&gt;
;

AnnotatedScriptElement:
    AnnotationList (
        {ExportDeclaration.annotationList=current} ExportDeclarationImpl
    |   {ImportDeclaration.annotationList=current} ImportDeclarationImpl
    |   {FunctionDeclaration.annotationList=current}
        =&gt;((declaredModifiers+=N4Modifier)* AsyncNoTrailingLineBreak
            -&gt;FunctionImpl&lt;Yield=false,YieldIfGenerator=false,Expression=false&gt;)
    |   (
            (
                {N4ClassDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)*
                'class' typingStrategy=TypingStrategyDefSiteOperator?
                name=BindingIdentifier&lt;Yield=false&gt;
                TypeVariables?
                ClassExtendsClause&lt;Yield=false&gt;?
            |   {N4InterfaceDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)*
                'interface' typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield=false&gt;
                TypeVariables?
                InterfaceImplementsList?
            )
            Members&lt;Yield=false&gt;
        )
    |   {N4EnumDeclaration.annotationList=current}
        (declaredModifiers+=N4Modifier)*
        'enum' name=BindingIdentifier&lt;Yield=false&gt;
        '{'
            literals+=N4EnumLiteral (',' literals+= N4EnumLiteral)*
        '}'
    )
;

fragment TypeVariables*:
    '&lt;' typeVars+=TypeVariable (',' typeVars+=TypeVariable)* '&gt;'
;

ExportDeclaration:
    ExportDeclarationImpl
;

fragment ExportDeclarationImpl*:
    'export' (
        wildcardExport?='*' ExportFromClause Semi
    |   ExportClause -&gt;ExportFromClause? Semi
    |   exportedElement=ExportableElement
    |   defaultExport?='default' (-&gt;exportedElement=ExportableElement | defaultExportedExpression=AssignmentExpression&lt;In=true,Yield=false&gt; Semi)
    )
;

fragment ExportFromClause*:
    'from' reexportedFrom=[types::TModule|ModuleSpecifier]
;

fragment ExportClause*:
    '{'
        (namedExports+=ExportSpecifier (',' namedExports+=ExportSpecifier)* ','?)?
    '}'
;

ExportSpecifier:
    element=IdentifierRef&lt;Yield=false&gt; ('as' alias=IdentifierName)?
;

ExportableElement:
      AnnotatedExportableElement&lt;Yield=false&gt;
    | N4ClassDeclaration&lt;Yield=false&gt;
    | N4InterfaceDeclaration&lt;Yield=false&gt;
    | N4EnumDeclaration&lt;Yield=false&gt;
    | ExportedFunctionDeclaration&lt;Yield=false&gt;
    | ExportedVariableStatement
;

AnnotatedExportableElement &lt;Yield&gt;:
    AnnotationList (
        {FunctionDeclaration.annotationList=current}
        (declaredModifiers+=N4Modifier)* AsyncNoTrailingLineBreak
        FunctionImpl&lt;Yield, Yield, Expression=false&gt;
    |   {ExportedVariableStatement.annotationList=current}
        (declaredModifiers+=N4Modifier)*
        varStmtKeyword=VariableStatementKeyword
        varDeclsOrBindings+=ExportedVariableDeclarationOrBinding&lt;Yield&gt; ( ',' varDeclsOrBindings+=ExportedVariableDeclarationOrBinding&lt;Yield&gt; )* Semi
    |   (
            (
                {N4ClassDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)*
                'class' typingStrategy=TypingStrategyDefSiteOperator?
                name=BindingIdentifier&lt;Yield&gt;
                TypeVariables?
                ClassExtendsClause&lt;Yield&gt;?
            |   {N4InterfaceDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)*
                ('interface') typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield&gt;
                TypeVariables?
                InterfaceImplementsList?
            )
            Members&lt;Yield&gt;
        )
    |   {N4EnumDeclaration.annotationList=current}
        (declaredModifiers+=N4Modifier)*
        'enum' name=BindingIdentifier&lt;Yield&gt;
        '{'
            literals+=N4EnumLiteral (',' literals+= N4EnumLiteral)*
        '}'
    )
;

ImportDeclaration:
    ImportDeclarationImpl
;

fragment ImportDeclarationImpl*:
    'import' (
        ImportClause importFrom?='from'
    )? module=[types::TModule|ModuleSpecifier] Semi
;

fragment ImportClause*:
        importSpecifiers+=DefaultImportSpecifier (',' ImportSpecifiersExceptDefault)?
    |   ImportSpecifiersExceptDefault
;

fragment ImportSpecifiersExceptDefault*:
        importSpecifiers+=NamespaceImportSpecifier
    |   '{' (importSpecifiers+=NamedImportSpecifier (',' importSpecifiers+=NamedImportSpecifier)* ','?)? '}'
;

NamedImportSpecifier:
        importedElement=[types::TExportableElement|BindingIdentifier&lt;Yield=false&gt;]
    |   importedElement=[types::TExportableElement|IdentifierName] 'as' alias=BindingIdentifier&lt;Yield=false&gt;
;

DefaultImportSpecifier:
    importedElement=[types::TExportableElement|BindingIdentifier&lt;Yield=false&gt;]
;

NamespaceImportSpecifier: '*' 'as' alias=BindingIdentifier&lt;false&gt; (declaredDynamic?='+')?;

ModuleSpecifier: STRING;

FunctionDeclaration &lt;Yield&gt;:
    =&gt; ((declaredModifiers+=N4Modifier)* AsyncNoTrailingLineBreak
        -&gt; FunctionImpl &lt;Yield,Yield,Expression=false&gt;
    ) =&gt; Semi?
;

fragment AsyncNoTrailingLineBreak *: (declaredAsync?='async' NoLineTerminator)?;

fragment FunctionImpl&lt;Yield, YieldIfGenerator, Expression&gt;*:
    'function'
    (
        generator?='*' FunctionHeader&lt;YieldIfGenerator,Generator=true&gt; FunctionBody&lt;Yield=true,Expression&gt;
    |   FunctionHeader&lt;Yield,Generator=false&gt; FunctionBody&lt;Yield=false,Expression&gt;
    )
;

fragment FunctionHeader&lt;Yield, Generator&gt;*:
    TypeVariables?
    name=BindingIdentifier&lt;Yield&gt;?
    StrictFormalParameters&lt;Yield=Generator&gt;
    (-&gt; ':' returnTypeRef=TypeRef)?
;

fragment FunctionBody &lt;Yield, Expression&gt;*:
        &lt;Expression&gt; body=Block&lt;Yield&gt;
    |   &lt;!Expression&gt; body=Block&lt;Yield&gt;?
;

ExportedFunctionDeclaration&lt;Yield&gt;:
    FunctionDeclaration&lt;Yield&gt;
;

FunctionTypeExpression:
    {types::FunctionTypeExpression}
    '{'
    ('@' 'This' '(' declaredThisType=TypeRefFunctionTypeExpression ')')?
    'function'
    ('&lt;' ownedTypeVars+=TypeVariable (',' ownedTypeVars+=TypeVariable)* '&gt;')?
    '('
    (fpars+=TAnonymousFormalParameter (',' fpars+=TAnonymousFormalParameter)*)?
    ')'
    (':' returnTypeRef=TypeRef)?
    '}';

AnnotatedFunctionDeclaration &lt;Yield, Default&gt;:
    annotationList=AnnotationList
    (declaredModifiers+=N4Modifier)* AsyncNoTrailingLineBreak
    FunctionImpl&lt;Yield,Yield,Expression=false&gt;
;


FunctionExpression:
         (FunctionImpl&lt;Yield=false,YieldIfGenerator=true,Expression=true&gt;
         )
;

AsyncFunctionExpression:
     =&gt;(declaredAsync?='async' NoLineTerminator 'function')
        FunctionHeader&lt;Yield=false,Generator=false&gt; FunctionBody&lt;Yield=false,Expression=true&gt;
;

ArrowExpression &lt;In, Yield&gt;:
    =&gt; (
            (
                    '(' (fpars+=FormalParameter&lt;Yield&gt;
                        (',' fpars+=FormalParameter&lt;Yield&gt;)*)?
                    ')' (':' returnTypeRef=TypeRef)?
                |   =&gt;(declaredAsync?='async' NoLineTerminator '(')
                    (fpars+=FormalParameter&lt;Yield&gt; (',' fpars+=FormalParameter&lt;Yield&gt;)*)?
                    ')' (':' returnTypeRef=TypeRef)?
                |   fpars+=BindingIdentifierAsFormalParameter&lt;Yield&gt;
            )
            '=&gt;'
        )
        (-&gt; hasBracesAroundBody?='{' body=BlockMinusBraces&lt;Yield&gt; '}'
            | body=ExpressionDisguisedAsBlock&lt;In&gt;)
;

fragment StrictFormalParameters &lt;Yield&gt;*:
    '(' (fpars+=FormalParameter&lt;Yield&gt; (',' fpars+=FormalParameter&lt;Yield&gt;)*)? ')'
;

BindingIdentifierAsFormalParameter &lt;Yield&gt;: name=BindingIdentifier&lt;Yield&gt;;

BlockMinusBraces &lt;Yield&gt;:   statements+=Statement&lt;Yield&gt;*;

ExpressionDisguisedAsBlock &lt;In&gt;:
    statements+=AssignmentExpressionStatement&lt;In&gt;
;

AssignmentExpressionStatement &lt;In&gt;: expression=AssignmentExpression&lt;In,Yield=false&gt;;

AnnotatedExpression &lt;Yield&gt;:
    ExpressionAnnotationList (
        {N4ClassExpression.annotationList=current}
        'class' name=BindingIdentifier&lt;Yield&gt;?
        ClassExtendsClause&lt;Yield&gt;?
        Members&lt;Yield&gt;
    |   {FunctionExpression.annotationList=current} AsyncNoTrailingLineBreak
        FunctionImpl&lt;Yield=false,YieldIfGenerator=true,Expression=true&gt;
    )
;

TypeVariable:
    name=IdentifierOrThis
    (   'extends' declaredUpperBounds+=ParameterizedTypeRefNominal
        ('&amp;' declaredUpperBounds+=ParameterizedTypeRefNominal)*
    )?
;

FormalParameter &lt;Yield&gt;:
    BindingElementFragment&lt;Yield&gt;
;

fragment BindingElementFragment &lt;Yield&gt;*:
    (=&gt; bindingPattern=BindingPattern&lt;Yield&gt;
    | annotations+=Annotation*
        (
            variadic?='...'? name=BindingIdentifier&lt;Yield&gt; ColonSepTypeRef?
        )
    )
    ('=' initializer=AssignmentExpression&lt;In=true, Yield&gt;)?
;

fragment ColonSepTypeRef*:
    ':' declaredTypeRef=TypeRef
;

Block &lt;Yield&gt;: =&gt; ('{') statements+=Statement&lt;Yield&gt;* '}';
RootStatement &lt;Yield&gt;:
    Block&lt;Yield&gt;
    | FunctionDeclaration&lt;Yield&gt;
    | VariableStatement&lt;In=true,Yield&gt;
    | EmptyStatement
    | LabelledStatement&lt;Yield&gt;
    | ExpressionStatement&lt;Yield&gt;
    | IfStatement&lt;Yield&gt;
    | IterationStatement&lt;Yield&gt;
    | ContinueStatement&lt;Yield&gt;
    | BreakStatement&lt;Yield&gt;
    | ReturnStatement&lt;Yield&gt;
    | WithStatement&lt;Yield&gt;
    | SwitchStatement&lt;Yield&gt;
    | ThrowStatement&lt;Yield&gt;
    | TryStatement&lt;Yield&gt;
    | DebuggerStatement
;

Statement &lt;Yield&gt;:
    AnnotatedFunctionDeclaration&lt;Yield,Default=false&gt;
    | RootStatement&lt;Yield&gt;
;

enum VariableStatementKeyword:
    var='var' | const='const' | let='let'
;

VariableStatement &lt;In, Yield&gt;:
    =&gt;(varStmtKeyword=VariableStatementKeyword
    )
    varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In,Yield,false&gt;
    (',' varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In,Yield,false&gt;)* Semi
;

ExportedVariableStatement:
    (declaredModifiers+=N4Modifier)*
    varStmtKeyword=VariableStatementKeyword
    varDeclsOrBindings+=ExportedVariableDeclarationOrBinding&lt;Yield=false&gt;
    (',' varDeclsOrBindings+=ExportedVariableDeclarationOrBinding&lt;Yield=false&gt;)* Semi
;

VariableDeclarationOrBinding &lt;In, Yield, OptionalInit&gt;:
        VariableBinding&lt;In,Yield,OptionalInit&gt;
    |   VariableDeclaration&lt;In,Yield,true&gt;
;

VariableBinding &lt;In, Yield, OptionalInit&gt;:
    =&gt; pattern=BindingPattern&lt;Yield&gt; (
            &lt;OptionalInit&gt; ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
        |   &lt;!OptionalInit&gt; '=' expression=AssignmentExpression&lt;In,Yield&gt;
    )
;

VariableDeclaration &lt;In, Yield, AllowType&gt;:
    VariableDeclarationImpl&lt;In,Yield,AllowType&gt;;

fragment VariableDeclarationImpl &lt;In, Yield, AllowType&gt;*:
    annotations+=Annotation*
    (
        &lt;AllowType&gt; =&gt;(
            name=BindingIdentifier&lt;Yield&gt; ColonSepTypeRef?
        ) ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
    |   &lt;!AllowType&gt; =&gt;(
        name=BindingIdentifier&lt;Yield&gt;
        ) ('=' expression=AssignmentExpression&lt;In,Yield&gt;)?
    )
;

ExportedVariableDeclarationOrBinding &lt;Yield&gt;:
        ExportedVariableBinding&lt;Yield&gt;
    |   ExportedVariableDeclaration&lt;Yield&gt;
;

ExportedVariableBinding &lt;Yield&gt;:
    =&gt; pattern=BindingPattern&lt;Yield&gt; '=' expression=AssignmentExpression&lt;In=true,Yield&gt;
;

ExportedVariableDeclaration &lt;Yield&gt;:
    VariableDeclarationImpl&lt;In=true,Yield,AllowType=true&gt;
;
EmptyStatement: ';';
ExpressionStatement &lt;Yield&gt;: expression=Expression&lt;In=true,Yield&gt; Semi;

IfStatement &lt;Yield&gt;: 'if' '(' expression=Expression&lt;In=true,Yield&gt; ')'
    ifStmt=Statement&lt;Yield&gt; (=&gt; 'else' elseStmt=Statement&lt;Yield&gt;)?;

IterationStatement &lt;Yield&gt;:
        DoStatement&lt;Yield&gt;
    |   WhileStatement&lt;Yield&gt;
    |   ForStatement&lt;Yield&gt;
;

DoStatement &lt;Yield&gt;: 'do' statement=Statement&lt;Yield&gt; 'while'
    '(' expression=Expression&lt;In=true,Yield&gt; ')' =&gt; Semi?;
WhileStatement &lt;Yield&gt;: 'while' '(' expression=Expression&lt;In=true,Yield&gt; ')'
    statement=Statement&lt;Yield&gt;;

ForStatement &lt;Yield&gt;:
    'for' '('
    (
            =&gt;(initExpr=LetIdentifierRef forIn?='in' expression=Expression&lt;In=true,Yield&gt; ')')
        |   (   -&gt;varStmtKeyword=VariableStatementKeyword
                (
                        =&gt;(varDeclsOrBindings+=BindingIdentifierAsVariableDeclaration&lt;In=false,Yield&gt;
                        (forIn?='in' | forOf?='of') -&gt;expression=AssignmentExpression&lt;In=true,Yield&gt;?)
                    |   varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In=false,Yield,OptionalInit=true&gt;
                        (
                                (',' varDeclsOrBindings+=VariableDeclarationOrBinding&lt;In=false,Yield,false&gt;)* ';'
                                expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
                            |   forIn?='in' expression=Expression&lt;In=true,Yield&gt;?
                            |   forOf?='of' expression=AssignmentExpression&lt;In=true,Yield&gt;?
                        )
                )
            |   initExpr=Expression&lt;In=false,Yield&gt;
                (
                        ';' expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
                    |   forIn?='in' expression=Expression&lt;In=true,Yield&gt;?
                    |   forOf?='of' expression=AssignmentExpression&lt;In=true,Yield&gt;?
                )
            |   ';' expression=Expression&lt;In=true,Yield&gt;? ';' updateExpr=Expression&lt;In=true,Yield&gt;?
            )
        ')'
    ) statement=Statement&lt;Yield&gt;
;

LetIdentifierRef:
    id=[types::IdentifiableElement|LetAsIdentifier]
;

LetAsIdentifier: 'let';

BindingIdentifierAsVariableDeclaration &lt;In, Yield&gt;:
    name=BindingIdentifier&lt;Yield&gt;
;

ContinueStatement &lt;Yield&gt;: 'continue' (label=[LabelledStatement|BindingIdentifier&lt;Yield&gt;])? Semi;

BreakStatement &lt;Yield&gt;: 'break' (label=[LabelledStatement|BindingIdentifier&lt;Yield&gt;])? Semi;

ReturnStatement &lt;Yield&gt;: 'return' (expression=Expression&lt;In=true,Yield&gt;)? Semi;

WithStatement &lt;Yield&gt;: 'with' '(' expression=Expression&lt;In=true,Yield&gt; ')' statement=Statement&lt;Yield&gt;;

SwitchStatement &lt;Yield&gt;:
    'switch' '(' expression=Expression&lt;In=true,Yield&gt; ')' '{'
    (cases+=CaseClause&lt;Yield&gt;)*
    ((cases+=DefaultClause&lt;Yield&gt;)
    (cases+=CaseClause&lt;Yield&gt;)*)? '}'
;

CaseClause &lt;Yield&gt;: 'case' expression=Expression&lt;In=true,Yield&gt; ':' (statements+=Statement&lt;Yield&gt;)*;

DefaultClause &lt;Yield&gt;: 'default' ':' (statements+=Statement&lt;Yield&gt;)*;

LabelledStatement &lt;Yield&gt;: =&gt; (name=BindingIdentifier&lt;Yield&gt; ':') statement=Statement&lt;Yield&gt;;

ThrowStatement &lt;Yield&gt;:
    'throw' expression=Expression&lt;In=true,Yield&gt; Semi;

TryStatement &lt;Yield&gt;:
    'try' block=Block&lt;Yield&gt;
    ((catch=CatchBlock&lt;Yield&gt; finally=FinallyBlock&lt;Yield&gt;?) | finally=FinallyBlock&lt;Yield&gt;)
;

CatchBlock &lt;Yield&gt;: 'catch' '(' catchVariable=CatchVariable&lt;Yield&gt; ')' block=Block&lt;Yield&gt;;

CatchVariable &lt;Yield&gt;:
        =&gt;bindingPattern=BindingPattern&lt;Yield&gt;
    |   =&gt;(name=BindingIdentifier&lt;Yield&gt; -&gt; ColonSepTypeRef)
    |   name=BindingIdentifier&lt;Yield&gt;
;

FinallyBlock &lt;Yield&gt;: 'finally' block=Block&lt;Yield&gt;;

DebuggerStatement:
    'debugger' Semi;

PrimaryExpression &lt;Yield&gt;:
      ThisLiteral
    | SuperLiteral
    | IdentifierRef&lt;Yield&gt;
    | ParameterizedCallExpression&lt;Yield&gt;
    | Literal
    | ArrayLiteral&lt;Yield&gt;
    | ObjectLiteral&lt;Yield&gt;
    | ParenExpression&lt;Yield&gt;
    | AnnotatedExpression&lt;Yield&gt;
    | FunctionExpression
    | AsyncFunctionExpression
    | N4ClassExpression&lt;Yield&gt;
    | TemplateLiteral&lt;Yield&gt;
;

ParenExpression &lt;Yield&gt;: '(' expression=Expression&lt;In=true,Yield&gt; ')';

IdentifierRef &lt;Yield&gt;:
    id=[types::IdentifiableElement|BindingIdentifier&lt;Yield&gt;]
;

SuperLiteral: 'super';

ThisLiteral: 'this';

ArrayLiteral &lt;Yield&gt;:
    '['
        elements+=ArrayPadding* (
            elements+=ArrayElement&lt;Yield&gt;
            (',' elements+=ArrayPadding* elements+=ArrayElement&lt;Yield&gt;)*
            (trailingComma?=',' elements+=ArrayPadding*)?
        )?
    ']'
;

ArrayPadding: ',';

ArrayElement &lt;Yield&gt;: spread?='...'? expression=AssignmentExpression&lt;In=true,Yield&gt;;

ObjectLiteral &lt;Yield&gt;: '{'
        ( propertyAssignments+=PropertyAssignment&lt;Yield&gt;
          (',' propertyAssignments+=PropertyAssignment&lt;Yield&gt;)* ','?
        )?
    '}'
;

PropertyAssignment &lt;Yield&gt;:
      AnnotatedPropertyAssignment&lt;Yield&gt;
    | PropertyNameValuePair&lt;Yield&gt;
    | PropertyGetterDeclaration&lt;Yield&gt;
    | PropertySetterDeclaration&lt;Yield&gt;
    | PropertyMethodDeclaration&lt;Yield&gt;
    | PropertyNameValuePairSingleName&lt;Yield&gt;
;

AnnotatedPropertyAssignment &lt;Yield&gt;:
    PropertyAssignmentAnnotationList (
    =&gt;( {PropertyNameValuePair.annotationList=current} declaredTypeRef=TypeRef?
            LiteralOrComputedPropertyName&lt;Yield&gt; ':'
        ) expression=AssignmentExpression&lt;In=true,Yield&gt;
    | =&gt;({PropertyGetterDeclaration.annotationList=current}
            GetterHeader&lt;Yield&gt;
        ) body=Block&lt;Yield=false&gt;
    | =&gt;({PropertySetterDeclaration.annotationList=current}
            'set' -&gt;LiteralOrComputedPropertyName &lt;Yield&gt;
        ) '(' fpar=FormalParameter&lt;Yield&gt; ')' body=Block&lt;Yield=false&gt;
    | =&gt;({PropertyMethodDeclaration.annotationList=current}
            TypeVariables? returnTypeRef=TypeRef?
            (generator?='*' LiteralOrComputedPropertyName&lt;Yield&gt; -&gt;MethodParamsAndBody &lt;Generator=true&gt;
                | LiteralOrComputedPropertyName&lt;Yield&gt; -&gt; MethodParamsAndBody &lt;Generator=false&gt;
            )
        ) ';'?
    | {PropertyNameValuePairSingleName.annotationList=current}
        declaredTypeRef=TypeRef? identifierRef=IdentifierRef&lt;Yield&gt;
        ( '=' expression=AssignmentExpression&lt;In=true,Yield&gt;)?)
;

PropertyMethodDeclaration &lt;Yield&gt;:
    =&gt; (TypeVariables? returnTypeRef=TypeRef?
            (
                generator?='*'  LiteralOrComputedPropertyName&lt;Yield&gt;
                    -&gt;MethodParamsAndBody&lt;Generator=true&gt;
                | LiteralOrComputedPropertyName&lt;Yield&gt; -&gt;MethodParamsAndBody &lt;Generator=false&gt;
            )
        )
    ';'?
;

PropertyNameValuePair &lt;Yield&gt;:
    =&gt; (
        declaredTypeRef=TypeRef? LiteralOrComputedPropertyName&lt;Yield&gt; ':'
    )
    expression=AssignmentExpression&lt;In=true,Yield&gt;
;

PropertyNameValuePairSingleName &lt;Yield&gt;:
    declaredTypeRef=TypeRef?
    identifierRef=IdentifierRef&lt;Yield&gt;
    ('=' expression=AssignmentExpression&lt;In=true,Yield&gt;)?
;

PropertyGetterDeclaration &lt;Yield&gt;:
    =&gt;(
        GetterHeader&lt;Yield&gt;
    )
    body=Block&lt;Yield=false&gt;
;

PropertySetterDeclaration &lt;Yield&gt;:
    =&gt;(
        'set'
        -&gt;LiteralOrComputedPropertyName &lt;Yield&gt;
    )
    '(' fpar=FormalParameter&lt;Yield&gt; ')' body=Block&lt;Yield=false&gt;
;

ParameterizedCallExpression &lt;Yield&gt;:
    TypeArguments
    target=IdentifierRef&lt;Yield&gt;
    ArgumentsWithParentheses&lt;Yield&gt;
;

LeftHandSideExpression &lt;Yield&gt;:
    MemberExpression&lt;Yield&gt; (
        {ParameterizedCallExpression.target=current} ArgumentsWithParentheses&lt;Yield&gt;
        (
              {ParameterizedCallExpression.target=current} ArgumentsWithParentheses&lt;Yield&gt;
            | {IndexedAccessExpression.target=current} IndexedAccessExpressionTail&lt;Yield&gt;
            | {ParameterizedPropertyAccessExpression.target=current}
                ParameterizedPropertyAccessExpressionTail&lt;Yield&gt;
            | -&gt;({TaggedTemplateString.target=current} template=TemplateLiteral&lt;Yield&gt;)
        )*
    )?
;

fragment Arguments &lt;Yield&gt;*:
      arguments+=AssignmentExpression&lt;In=true,Yield&gt;
      (',' arguments+=AssignmentExpression&lt;In=true,Yield&gt;)*
      (',' spread?='...' arguments+=AssignmentExpression&lt;In=true,Yield&gt;)?
    | spread?='...' arguments+=AssignmentExpression&lt;In=true,Yield&gt;
;

fragment TypeArguments*:
    '&lt;' typeArgs+=TypeRef (',' typeArgs+=TypeRef)* '&gt;'
;

fragment ArgumentsWithParentheses &lt;Yield&gt;*:
    '(' Arguments&lt;Yield&gt;? ')'
;

MemberExpression &lt;Yield&gt;:
    =&gt;('new' '.') 'target'
    | =&gt; ('new') callee=MemberExpression&lt;Yield&gt; (-&gt; TypeArguments)?
        (=&gt; withArgs?='(' Arguments&lt;Yield&gt;? ')'
            (
                  {IndexedAccessExpression.target=current} IndexedAccessExpressionTail&lt;Yield&gt;
                | {ParameterizedPropertyAccessExpression.target=current}
                    ParameterizedPropertyAccessExpressionTail&lt;Yield&gt;
                | {TaggedTemplateString.target=current} template=TemplateLiteral&lt;Yield&gt;
            )*
        )?
    | PrimaryExpression&lt;Yield&gt; (
          {IndexedAccessExpression.target=current} IndexedAccessExpressionTail&lt;Yield&gt;
        | {ParameterizedPropertyAccessExpression.target=current}
            ParameterizedPropertyAccessExpressionTail&lt;Yield&gt;
        | {TaggedTemplateString.target=current} template=TemplateLiteral&lt;Yield&gt;
        )*
;

fragment IndexedAccessExpressionTail &lt;Yield&gt;*:
    '[' index=Expression&lt;In=true,Yield&gt; ']'
;

fragment ParameterizedPropertyAccessExpressionTail &lt;Yield&gt;*:
    '.' TypeArguments? property=[types::IdentifiableElement|IdentifierName]
;

PostfixExpression &lt;Yield&gt;:
    LeftHandSideExpression&lt;Yield&gt; (
        =&gt;({PostfixExpression.expression=current} op=PostfixOperator
        )
    )?
;

enum PostfixOperator: inc='++' | dec='--';

CastExpression &lt;Yield&gt;: PostfixExpression&lt;Yield&gt;
    (=&gt;({CastExpression.expression=current} 'as') targetTypeRef=TypeRefForCast)?;

UnaryExpression &lt;Yield&gt;:
      CastExpression&lt;Yield&gt;
    | (op=UnaryOperator expression=UnaryExpression&lt;Yield&gt;);

enum UnaryOperator: delete | void | typeof | inc='++' | dec='--' | pos='+' | neg='-' | inv='~' | not='!';

MultiplicativeExpression &lt;Yield&gt;: UnaryExpression&lt;Yield&gt;
    (=&gt;({MultiplicativeExpression.lhs=current} op=MultiplicativeOperator)
        rhs=UnaryExpression&lt;Yield&gt;)*;

enum MultiplicativeOperator: times='*' | div='/' | mod='%';

AdditiveExpression &lt;Yield&gt;: MultiplicativeExpression&lt;Yield&gt;
    (=&gt;({AdditiveExpression.lhs=current} op=AdditiveOperator)
        rhs=MultiplicativeExpression&lt;Yield&gt;)*;

enum AdditiveOperator: add='+' | sub='-';

ShiftExpression &lt;Yield&gt;: AdditiveExpression&lt;Yield&gt;
    (=&gt;({ShiftExpression.lhs=current} op=ShiftOperator rhs=AdditiveExpression&lt;Yield&gt;))*
;

ShiftOperator:
      '&gt;' '&gt;' '&gt;'?
    | '&lt;&lt;'
;

RelationalExpression &lt;In, Yield&gt;: ShiftExpression&lt;Yield&gt;
    =&gt;({RelationalExpression.lhs=current} op=RelationalOperator&lt;In&gt;
        -&gt;rhs=ShiftExpression&lt;Yield&gt;)*;

RelationalOperator &lt;In&gt;:
    '&lt;' | '&gt;' | '&lt;=' | '&gt;=' | 'instanceof' | &lt;In&gt; 'in';

EqualityExpression &lt;In, Yield&gt;: RelationalExpression&lt;In,Yield&gt;
    (=&gt;({EqualityExpression.lhs=current} op=EqualityOperator) rhs=RelationalExpression&lt;In,Yield&gt;)*;

enum EqualityOperator: same='===' | nsame='!==' | eq='==' | neq='!=';

BitwiseANDExpression &lt;In, Yield&gt;: EqualityExpression&lt;In,Yield&gt;
    (=&gt;({BinaryBitwiseExpression.lhs=current} op=BitwiseANDOperator) rhs=EqualityExpression&lt;In,Yield&gt;)*;

BitwiseANDOperator: '&amp;';

BitwiseXORExpression &lt;In, Yield&gt;: BitwiseANDExpression&lt;In,Yield&gt;
    (=&gt;({BinaryBitwiseExpression.lhs=current} op=BitwiseXOROperator) rhs=BitwiseANDExpression&lt;In,Yield&gt;)*;

BitwiseXOROperator: '^';

BitwiseORExpression &lt;In, Yield&gt;: BitwiseXORExpression&lt;In,Yield&gt;
    (=&gt;({BinaryBitwiseExpression.lhs=current} op=BitwiseOROperator) rhs=BitwiseXORExpression&lt;In,Yield&gt;)*;

BitwiseOROperator: '|';

LogicalANDExpression &lt;In, Yield&gt;: BitwiseORExpression&lt;In,Yield&gt;
    (=&gt; ({BinaryLogicalExpression.lhs=current} op=LogicalANDOperator) rhs=BitwiseORExpression&lt;In,Yield&gt;)*;

LogicalANDOperator: '&amp;&amp;';

LogicalORExpression &lt;In, Yield&gt;: LogicalANDExpression&lt;In,Yield&gt;
    (=&gt;({BinaryLogicalExpression.lhs=current} op=LogicalOROperator) rhs=LogicalANDExpression&lt;In,Yield&gt;)*;

LogicalOROperator: '||';

ConditionalExpression &lt;In, Yield&gt;: LogicalORExpression&lt;In,Yield&gt;
    (=&gt; ({ConditionalExpression.expression=current} '?') trueExpression=AssignmentExpression&lt;In=true,Yield&gt;
        ':' falseExpression=AssignmentExpression&lt;In,Yield&gt;)?;

AssignmentExpression &lt;In, Yield&gt;:
      AwaitExpression&lt;In,Yield&gt;
    | PromisifyExpression&lt;In,Yield&gt;
    | ArrowExpression&lt;In,Yield&gt;
    | &lt;Yield&gt; YieldExpression&lt;In&gt;
    | ConditionalExpression&lt;In,Yield&gt;
        (=&gt; ({AssignmentExpression.lhs=current} op=AssignmentOperator)
            rhs=AssignmentExpression&lt;In,Yield&gt;)?
;

YieldExpression &lt;In&gt;:
    'yield' =&gt; many?='*'? -&gt; expression=AssignmentExpression&lt;In,Yield=true&gt;?
;

AssignmentOperator:
      '=' | '*=' | '/=' | '%=' | '+=' | '-='
    | '&lt;&lt;='
    | '&gt;' '&gt;'? '&gt;='
    | '&amp;=' | '^=' | '|='
;

AwaitExpression &lt;In, Yield&gt;:
    =&gt;('await') expression=AssignmentExpression&lt;In,Yield&gt;;

PromisifyExpression &lt;In, Yield&gt;:
    =&gt; ('@' 'Promisify') expression=AssignmentExpression&lt;In,Yield&gt;;

Expression &lt;In, Yield&gt;:
    AssignmentExpression&lt;In,Yield&gt; ({CommaExpression.exprs+=current}
    ',' exprs+=AssignmentExpression&lt;In,Yield&gt;
    (','    exprs+=AssignmentExpression&lt;In,Yield&gt;)*)?
;

TemplateLiteral &lt;Yield&gt;:
    (
          segments+=NoSubstitutionTemplate
        | segments+=TemplateHead segments+=Expression&lt;In=true,Yield&gt;? TemplateExpressionEnd
            (
                segments+=TemplateMiddle segments+=Expression&lt;In=true,Yield&gt;?
                TemplateExpressionEnd
            )*
            segments+=TemplateTail
    )
;

TemplateExpressionEnd:
    '}'
;

NoSubstitutionTemplate:
    rawValue=NO_SUBSTITUTION_TEMPLATE_LITERAL
;

TemplateHead:
    rawValue=TEMPLATE_HEAD
;

TemplateTail:
    rawValue=TemplateTailLiteral;

TemplateMiddle:
    rawValue=TemplateMiddleLiteral;

Literal:
      NumericLiteral | BooleanLiteral | StringLiteral
    | NullLiteral | RegularExpressionLiteral;
NullLiteral: 'null';
BooleanLiteral: (true?='true' | 'false');
StringLiteral: value=STRING;
NumericLiteral:
      DoubleLiteral | IntLiteral | BinaryIntLiteral | OctalIntLiteral
    | LegacyOctalIntLiteral | HexIntLiteral | ScientificIntLiteral;
DoubleLiteral: value=DOUBLE;
IntLiteral: value=INT;
OctalIntLiteral: value=OCTAL_INT;
LegacyOctalIntLiteral: value=LEGACY_OCTAL_INT;
HexIntLiteral: value=HEX_INT;
BinaryIntLiteral: value=BINARY_INT;
ScientificIntLiteral: value=SCIENTIFIC_INT;
RegularExpressionLiteral: value=REGEX_LITERAL;

NumericLiteralAsString:
    DOUBLE | INT | OCTAL_INT | HEX_INT | SCIENTIFIC_INT
;

IdentifierOrThis:
    IDENTIFIER
    | 'This'
    | 'Promisify'
    | 'target';

AnnotationName:
    IDENTIFIER
    | 'This'
    | 'target';

BindingIdentifier &lt;Yield&gt;:
    IDENTIFIER
    | &lt;!Yield&gt; 'yield'
    | N4Keyword
;

IdentifierName:
    IDENTIFIER | ReservedWord | N4Keyword
;

ReservedWord:
    'break' | 'case' | 'catch' | 'class' | 'const' | 'continue' | 'debugger' | 'default' | 'delete'
    | 'do' | 'else' | 'export' | 'extends' | 'finally' | 'for' | 'function' | 'if' | 'import'
    | 'in' | 'instanceof' | 'new' | 'return' | 'super' | 'switch' | 'this' | 'throw' | 'try'
    | 'typeof' | 'var' | 'void' | 'while' | 'with' | 'yield'
    | 'null'
    | 'true' | 'false'
    | 'enum';

N4Keyword:
    'get' | 'set'
    | 'let'
    | 'project'
    | 'external' | 'abstract' | 'static'
    | 'as' | 'from' | 'constructor' | 'of' | 'target'
    | 'type' | 'union' | 'intersection'
    | 'This' | 'Await' | 'Promisify'
    | 'await'
    | 'async'
    | 'implements' | 'interface'
    | 'private' | 'protected' | 'public'
;

SymbolLiteralComputedName &lt;Yield&gt;:
    BindingIdentifier&lt;Yield&gt; ('.' IdentifierName)?
;

terminal DOUBLE:
    '.' DECIMAL_DIGIT_FRAGMENT+ EXPONENT_PART?
    | DECIMAL_INTEGER_LITERAL_FRAGMENT '.' DECIMAL_DIGIT_FRAGMENT* EXPONENT_PART?
;

terminal HEX_INT: '0' ('x' | 'X') INT_SUFFIX;

terminal BINARY_INT: '0' ('b' | 'B') INT_SUFFIX;

terminal OCTAL_INT: '0' ('o' | 'O') INT_SUFFIX;

terminal LEGACY_OCTAL_INT: '0' DECIMAL_DIGIT_FRAGMENT INT_SUFFIX;

terminal fragment INT_SUFFIX: IDENTIFIER_PART*;

terminal SCIENTIFIC_INT:
    DECIMAL_INTEGER_LITERAL_FRAGMENT EXPONENT_PART
;

terminal fragment EXPONENT_PART:
      ('e' | 'E') SIGNED_INT
    | IDENTIFIER
;

terminal fragment SIGNED_INT:
    ('+' | '-') DECIMAL_DIGIT_FRAGMENT+ IDENTIFIER?
;

terminal STRING:
      '"' DOUBLE_STRING_CHAR* '"'?
    | "'" SINGLE_STRING_CHAR* "'"?
;

terminal fragment DOUBLE_STRING_CHAR:
      !(LINE_TERMINATOR_FRAGMENT | '"' | '\\')
    | '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

terminal fragment SINGLE_STRING_CHAR:
      !(LINE_TERMINATOR_FRAGMENT | "'" | '\\')
    | '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

terminal fragment BACKSLASH_SEQUENCE:
    '\\' !(LINE_TERMINATOR_FRAGMENT)?
;

terminal fragment REGEX_CHAR:
      !(LINE_TERMINATOR_FRAGMENT | '\\' | '/' | '[')
    | BACKSLASH_SEQUENCE
    | '[' REGEX_CHAR_OR_BRACKET* ']'?
;

terminal fragment REGEX_CHAR_OR_BRACKET:
      !(LINE_TERMINATOR_FRAGMENT | '\\' | ']')
    | BACKSLASH_SEQUENCE
;

REGEX_LITERAL:
    ('/' | '/=') REGEX_TAIL?
;

terminal fragment ACTUAL_REGEX_TAIL:
      REGEX_CHAR+ ('/' IDENTIFIER_PART*)?
    | '/' IDENTIFIER_PART*
;

terminal fragment REGEX_START:
    ('/' | '/=')
;

terminal REGEX_TAIL: // post processed
    '//1'
;
terminal TEMPLATE_HEAD:
    "`" TEMPLATE_LITERAL_CHAR* '$'+ '{'
;

terminal NO_SUBSTITUTION_TEMPLATE_LITERAL:
    '`' TEMPLATE_LITERAL_CHAR* '$'* "`"?
;

terminal fragment ACTUAL_TEMPLATE_END:
    TEMPLATE_LITERAL_CHAR* ('$'+ ('{' | '`'?) | '`'?)
;

terminal fragment TEMPLATE_LITERAL_CHAR:
      !(LINE_TERMINATOR_FRAGMENT | '`' | '\\' | '$')
    | '$'+ !('{' | '`' | '$')
    | LINE_TERMINATOR_SEQUENCE_FRAGMENT
    | '\\' (LINE_TERMINATOR_SEQUENCE_FRAGMENT | !LINE_TERMINATOR_FRAGMENT)?
;

TemplateTailLiteral:
    TEMPLATE_END?
;

TemplateMiddleLiteral:
    TEMPLATE_MIDDLE
;

terminal TEMPLATE_MIDDLE:
    '//2' // will never be lexed
;

terminal TEMPLATE_END:
    '//3' // will never be lexed
;

terminal fragment TEMPLATE_CONTINUATION:
    '//4' // actually '}'
;

Semi: ';'; // automatic semicolon instertion, post-processed

fragment NoLineTerminator*: NO_LINE_TERMINATOR?;

terminal NO_LINE_TERMINATOR:
    '//5' // post-processed, will never be lexed
;
Annotation:'@' AnnotationNoAtSign;
ScriptAnnotation: '@@' AnnotationNoAtSign;

AnnotationNoAtSign:
    name=AnnotationName (=&gt; '(' (args+=AnnotationArgument (',' args+=AnnotationArgument)*)? ')')?;

AnnotationArgument:
    LiteralAnnotationArgument | TypeRefAnnotationArgument
;

LiteralAnnotationArgument:
    literal=Literal
;

TypeRefAnnotationArgument:
    typeRef=TypeRef
;

AnnotationList:
    =&gt;('@' -&gt; annotations+=AnnotationNoAtSign) annotations+=Annotation*
;

ExpressionAnnotationList:
    annotations+=Annotation+
;

PropertyAssignmentAnnotationList:
    annotations+=Annotation+
;

N4MemberAnnotationList:
    {N4MemberAnnotationList} annotations+=Annotation+
;

TypeReferenceName:
    'void' | 'This' | 'await' | 'Promisify' | 'target' | QualifiedTypeReferenceName
;

QualifiedTypeReferenceName:
    IDENTIFIER ('.' IDENTIFIER)?
;
N4ClassDeclaration &lt;Yield&gt;:
    =&gt;(
        {N4ClassDeclaration}
        (declaredModifiers+=N4Modifier)*
        'class' typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield&gt;?
    )
    TypeVariables?
    ClassExtendsClause&lt;Yield&gt;?
    Members&lt;Yield&gt;
;

fragment Members &lt;Yield&gt;*:
    '{'
    ownedMembersRaw+=N4MemberDeclaration&lt;Yield&gt;*
    '}'
;

fragment ClassExtendsClause &lt;Yield&gt;*:
    'extends' (
          =&gt;superClassRef=ParameterizedTypeRefNominal ('implements' ClassImplementsList)?
        | superClassExpression=LeftHandSideExpression&lt;Yield&gt;
    )
    | 'implements' ClassImplementsList
;

fragment ClassImplementsList*:
    implementedInterfaceRefs+=ParameterizedTypeRefNominal
    (',' implementedInterfaceRefs+=ParameterizedTypeRefNominal)*
;

N4ClassExpression &lt;Yield&gt;:
    {N4ClassExpression}
    'class' name=BindingIdentifier&lt;Yield&gt;?
    ClassExtendsClause&lt;Yield&gt;?
    Members&lt;Yield&gt;;
N4InterfaceDeclaration &lt;Yield&gt;:
    =&gt; (
        {N4InterfaceDeclaration}
        (declaredModifiers+=N4Modifier)*
        'interface' typingStrategy=TypingStrategyDefSiteOperator? name=BindingIdentifier&lt;Yield&gt;?
    )
    TypeVariables?
    InterfaceImplementsList?
    Members&lt;Yield&gt;
;

fragment InterfaceImplementsList*:
     'extends' superInterfaceRefs+=ParameterizedTypeRefNominal
        (',' superInterfaceRefs+=ParameterizedTypeRefNominal)*
;
N4EnumDeclaration &lt;Yield&gt;:
    =&gt;(
        {N4EnumDeclaration}
        (declaredModifiers+=N4Modifier)*
        'enum' name=BindingIdentifier&lt;Yield&gt;?
    )
    '{'
        (literals+=N4EnumLiteral (',' literals+=N4EnumLiteral)*)?
    '}'
;
N4EnumLiteral: name=IdentifierOrThis (':' value=STRING)?;

enum N4Modifier: // validator applies further checks
      private | project | protected | public
    | external | abstract | static | const;

N4MemberDeclaration &lt;Yield&gt;:
    AnnotatedN4MemberDeclaration&lt;Yield&gt;
    | N4GetterDeclaration&lt;Yield&gt;
    | N4SetterDeclaration&lt;Yield&gt;
    | N4MethodDeclaration&lt;Yield&gt;
    | N4FieldDeclaration&lt;Yield&gt;
    | N4CallableConstructorDeclaration&lt;Yield&gt;
;

AnnotatedN4MemberDeclaration &lt;Yield&gt; returns N4MemberDeclaration:
    N4MemberAnnotationList (
            =&gt; ({N4GetterDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)* GetterHeader&lt;Yield&gt;) (body=Block&lt;Yield&gt;)? ';'?
        |   =&gt; ({N4SetterDeclaration.annotationList=current}
                (declaredModifiers+=N4Modifier)* 'set' -&gt; LiteralOrComputedPropertyName &lt;Yield&gt;)
                '(' fpar=FormalParameter&lt;Yield&gt; ')' (body=Block&lt;Yield&gt;)? ';'?
        |   =&gt; (
                {N4MethodDeclaration.annotationList=current} (declaredModifiers+=N4Modifier)* TypeVariables?
                (
                        generator?='*' LiteralOrComputedPropertyName&lt;Yield&gt;
                        -&gt;MethodParamsReturnAndBody &lt;Generator=true&gt;
                    |   AsyncNoTrailingLineBreak LiteralOrComputedPropertyName&lt;Yield&gt;
                        -&gt;MethodParamsReturnAndBody &lt;Generator=false&gt;
                )
                )';'?
        |   {N4FieldDeclaration.annotationList=current} FieldDeclarationImpl&lt;Yield&gt;
    )
;

fragment LiteralOrComputedPropertyName &lt;Yield&gt;*:
    name=IdentifierName | name=STRING | name=NumericLiteralAsString
    | '[' (=&gt;((name=SymbolLiteralComputedName&lt;Yield&gt; | name=StringLiteralAsName) ']')
        |   computeNameFrom=AssignmentExpression&lt;In=true,Yield&gt; ']')
;

fragment LiteralPropertyName &lt;Yield&gt;*:
    name=IdentifierName | name=STRING | name=NumericLiteralAsString
    | '[' (name=SymbolLiteralComputedName&lt;Yield&gt; | name=StringLiteralAsName) ']'
;

StringLiteralAsName:
    STRING
;

fragment FieldDeclarationImpl &lt;Yield&gt;*:
    (declaredModifiers+=N4Modifier)*
    LiteralPropertyName&lt;Yield&gt; ColonSepTypeRef? ('=' expression=Expression&lt;In=true,Yield&gt;)? ';'
;

N4FieldDeclaration &lt;Yield&gt;:
    {N4FieldDeclaration}
    FieldDeclarationImpl&lt;Yield&gt;
;

N4MethodDeclaration &lt;Yield&gt;:
    =&gt; ({N4MethodDeclaration} (declaredModifiers+=N4Modifier)* TypeVariables?
        (
                generator?='*' LiteralOrComputedPropertyName&lt;Yield&gt;
                -&gt;MethodParamsReturnAndBody &lt;Generator=true&gt;
            |   AsyncNoTrailingLineBreak LiteralOrComputedPropertyName&lt;Yield&gt;
                -&gt;MethodParamsReturnAndBody &lt;Generator=false&gt;
        )
    ) ';'?
;

N4CallableConstructorDeclaration &lt;Yield&gt; returns N4MethodDeclaration:
    MethodParamsReturnAndBody &lt;Generator=false&gt; ';'?
;

fragment MethodParamsAndBody &lt;Generator&gt;*:
    StrictFormalParameters&lt;Yield=Generator&gt;
    (body=Block&lt;Yield=Generator&gt;)?
;

fragment MethodParamsReturnAndBody &lt;Generator&gt;*:
    StrictFormalParameters&lt;Yield=Generator&gt;
    (':' returnTypeRef=TypeRef)?
    (body=Block&lt;Yield=Generator&gt;)?
;

N4GetterDeclaration &lt;Yield&gt;:
    =&gt; ({N4GetterDeclaration}
    (declaredModifiers+=N4Modifier)*
    GetterHeader&lt;Yield&gt;)
    (body=Block&lt;Yield&gt;)? ';'?
;

fragment GetterHeader &lt;Yield&gt;*:
    ('get' -&gt; LiteralOrComputedPropertyName &lt;Yield&gt; '(' ')' ColonSepTypeRef?)
;

N4SetterDeclaration &lt;Yield&gt;:
    =&gt;({N4SetterDeclaration}
        (declaredModifiers+=N4Modifier)*
        'set'
        -&gt;LiteralOrComputedPropertyName &lt;Yield&gt;
    )
    '(' fpar=FormalParameter&lt;Yield&gt; ')' (body=Block&lt;Yield&gt;)? ';'?
;

BindingPattern &lt;Yield&gt;:
    ObjectBindingPattern&lt;Yield&gt;
    | ArrayBindingPattern&lt;Yield&gt;
;

ObjectBindingPattern &lt;Yield&gt;:
    '{' (properties+=BindingProperty&lt;Yield,AllowType=false&gt;
        (',' properties+=BindingProperty&lt;Yield,AllowType=false&gt;)*)? '}'
;

ArrayBindingPattern &lt;Yield&gt;:
    '['
        elements+=Elision* (
            elements+=BindingRestElement&lt;Yield&gt;
            (',' elements+=Elision* elements+=BindingRestElement&lt;Yield&gt;)*
            (',' elements+=Elision*)?
        )?
    ']'
;

BindingProperty &lt;Yield, AllowType&gt;:
      =&gt;(LiteralBindingPropertyName&lt;Yield&gt; ':') value=BindingElement&lt;Yield&gt;
    | value=SingleNameBinding&lt;Yield,AllowType&gt;
;

fragment LiteralBindingPropertyName &lt;Yield&gt;*:
    declaredName=IdentifierName | declaredName=STRING | declaredName=NumericLiteralAsString
    | '[' (declaredName=SymbolLiteralComputedName&lt;Yield&gt; | declaredName=STRING) ']'
;

SingleNameBinding &lt;Yield, AllowType&gt;:
    varDecl=VariableDeclaration&lt;In=true,Yield,AllowType&gt;
;

BindingElement &lt;Yield&gt;:
      =&gt;(nestedPattern=BindingPattern&lt;Yield&gt;) ('=' expression=AssignmentExpression&lt;In=true,Yield&gt;)?
    | varDecl=VariableDeclaration&lt;In=true,Yield,AllowType=true&gt;
;

BindingRestElement &lt;Yield&gt;:
    rest?='...'?
    (
          =&gt;(nestedPattern=BindingPattern&lt;Yield&gt;)
            ('=' expression=AssignmentExpression&lt;In=true,Yield&gt;)?
        | varDecl=VariableDeclaration&lt;In=true,Yield,AllowType=true&gt;
    )
;

Elision:
    ','
;</screen>
</section>
</chapter>
<chapter xml:id="_jsobjects">
<title>JSObjects</title>
<simpara>The built-in ECMAScript Objects
[<link linkend="ECMA11a">ECMA11a(p.S15, p.pp.102)</link>] are supported and their properties are annotated with types as described in this chapter. The semantics of these properties do not change. The short description is copied from [<link linkend="ECMA11a">ECMA11a</link>] repeated here for convenience.</simpara>
<section xml:id="_object">
<title>Object</title>
<simpara><literal>Object</literal> is the super type of all declared types and <literal>N4Object</literal>. It is almost similar to the JavaScript type <literal>Object</literal> except that no properties may be dynamically added to it. In order to declare a variable to which properties can be dynamically added, the <literal>Object+</literal> type has to be declared (cf.
<xref linkend="Type_Modifiers_Dynamic"/>).</simpara>
<section xml:id="_attributes">
<title>Attributes</title>
<variablelist>
<varlistentry>
<term><literal>constructor:Object</literal>: </term>
<listitem>
<simpara>Returns a reference to the Object function that created the instance’s
prototype.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_methods_2">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>toString():Object</literal>: </term>
<listitem>
<simpara>Returns a string representing the specified object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleString():Object</literal>: </term>
<listitem>
<simpara>Returns a string representing the object. This method is meant to be
overridden by derived objects for locale-specific purposes.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>valueOf():Object</literal>: </term>
<listitem>
<simpara>Returns the primitive value of the specified object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>hasOwnProperty(prop:String):Boolean</literal>: </term>
<listitem>
<simpara>Returns a boolean indicating whether an object contains the specified
property as a direct property of that object and not inherited through
the prototype chain.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isPrototypeOf(object:Object):Boolean</literal>: </term>
<listitem>
<simpara>Returns a boolean indication whether the specified object is in the
prototype chain of the object this method is called upon.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>propertyIsEnumerable(prop:String):Boolean</literal>: </term>
<listitem>
<simpara>Returns a boolean indicating if the internal ECMAScript DontEnum
attribute is set.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_static_methods">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>getPrototypeOf(object:Object):Object</literal>: </term>
<listitem>
<simpara>Returns the prototype of the specified object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>create(object:Object,properties:Object=):Object</literal>: </term>
<listitem>
<simpara>Creates a new object with the specified prototype object and properties.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>defineProperty(object:Object,prop:Object,descriptor:Object):Object</literal>: </term>
<listitem>
<simpara>Defines a new property directly on an object or modifies an existing
property on an object and returns the object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>defineProperties(object:Object,properties:Object):Object</literal>: </term>
<listitem>
<simpara>Defines new or modifies existing properties directly on an object,
returning the object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>seal(object:Object,properties:Object)</literal>: </term>
<listitem>
<simpara>Seals an object, preventing new properties from being added to it and
marking all existing properties as non-configurable. Values of present
properties can still be changed as long as they are writable.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>freeze(object:Object):Object</literal>: </term>
<listitem>
<simpara>Freezes an object: that is, prevents new properties from being added to it, prevents existing properties from being removed, prevents existing properties or their enumerability, configurability, or writability from being changed.
In essence, the object is made effectively immutable.
The method returns the object being frozen.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>preventExtensions(object:Object):Object</literal>: </term>
<listitem>
<simpara>Prevents new properties from ever being added to an object (i.e.
prevents future extensions to the object).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isSealed(object:Object):Boolean static</literal>: </term>
<listitem>
<simpara>Determine if an object is sealed.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isFrozen(object:Object):Boolean</literal>: </term>
<listitem>
<simpara>Determine if an object is frozen.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>isExtensible(object:Object):Boolean</literal>: </term>
<listitem>
<simpara>Determines if an object is extensible (whether it can have new
properties added to it).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>keys(object:Object):Array&lt;String&gt;</literal>: </term>
<listitem>
<simpara>Returns an array of all own enumerable properties found upon a given
object in the same order as that provided by a for-in loop (the
difference being that a for-in loop enumerates properties in the
prototype chain as well).</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_string">
<title>String</title>
<simpara>String is a global object that may be used to construct String
instances and is a sub class of Object.</simpara>
<section xml:id="string-attributes">
<title>Attributes</title>
<variablelist>
<varlistentry>
<term><literal>number: length</literal> </term>
<listitem>
<simpara>The length of a string.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="methods-1">
<title>Methods</title>
<simpara><literal>String(thing:Object=)</literal></simpara>
<variablelist>
<varlistentry>
<term><literal>anchor(anchorname:String):String</literal>: </term>
<listitem>
<simpara>Creates an HTML anchor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>big():String</literal>: </term>
<listitem>
<simpara>Returns a string in a big font.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>blink():String</literal>: </term>
<listitem>
<simpara>Returns a string in a blinking string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>bold():String</literal>: </term>
<listitem>
<simpara>Returns a string in a bold font.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>charAt(index:Number):String</literal>: </term>
<listitem>
<simpara>Returns the character at a specified position.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>charCodeAt(index:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the Unicode of the character at a specified position.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>concat(strings:String&#8230;&#8203;):String</literal>: </term>
<listitem>
<simpara>Joins two or more strings.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara><literal>equals(object:Object):Boolean</literal></simpara>
<simpara><literal>equalsIgnoreCase(object:Object):Boolean</literal></simpara>
<variablelist>
<varlistentry>
<term><literal>fromCharCode(num:Any&#8230;&#8203;):String</literal>: </term>
<listitem>
<simpara>Returns a string created by using the specified sequence of Unicode values.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fixed():String</literal>: </term>
<listitem>
<simpara>Returns a string as teletype text.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fontcolor(color):String</literal>: </term>
<listitem>
<simpara>Returns a string in a specified color.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>fontsize(size):String</literal>: </term>
<listitem>
<simpara>Returns a string in a specified size.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>indexOf(searchValue, fromIndex:Number=):Number</literal>: </term>
<listitem>
<simpara>Returns the position of the first occurrence of a specified string value in a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>italics():String</literal>: </term>
<listitem>
<simpara>Returns a string in italic.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>lastIndexOf(searchValue, fromIndex:Number=):Number</literal>: </term>
<listitem>
<simpara>Returns the position of the last occurrence of a specified string value, searching backwards from the specified position in a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>link(url):String</literal>: </term>
<listitem>
<simpara>Returns a string as a hyperlink.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>localeCompare(otherString):Number</literal>: </term>
<listitem>
<simpara>This method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>match(search value):String</literal>: </term>
<listitem>
<simpara>Searches for a specified value in a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>replace(findString,newString):String</literal>: </term>
<listitem>
<simpara>Replaces some characters with some other characters in a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>search(search string):Number</literal>: </term>
<listitem>
<simpara>Searches a string for a specified value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>slice(beginSlice:Number, endSclice:Number=):String</literal>: </term>
<listitem>
<simpara>Extracts a part of a string and returns the extracted part in a new string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>small():String</literal>: </term>
<listitem>
<simpara>Returns a string in a small font.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>split(separator, howmany:Number=):Array&lt;String&gt;</literal>: </term>
<listitem>
<simpara>Splits a string into an array of strings.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>strike():String</literal>: </term>
<listitem>
<simpara>Returns a string with a strikethrough.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>sub():String</literal>: </term>
<listitem>
<simpara>Returns a string as subscript.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>substr(start:Number,length:Number=):String</literal>: </term>
<listitem>
<simpara>Extracts a specified number of characters in a string, from a start index.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>substring(beginIndex:number,endIndex:Number=):String</literal>: </term>
<listitem>
<simpara>Extracts the characters in a string between two specified indices.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>sup():String</literal>: </term>
<listitem>
<simpara>Returns a string as superscript.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleUpperCase():String</literal>: </term>
<listitem>
<simpara>Returns a string in lowercase letters.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toString():String</literal>: </term>
<listitem>
<simpara>Returns a String value for this object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toUpperCase():String</literal>: </term>
<listitem>
<simpara>Returns a string in uppercase letters.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>valueOf():String</literal>: </term>
<listitem>
<simpara>Returns the primitive value of a String object.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="static-methods-1">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>String(value:Object=)</literal>: </term>
<listitem>
<simpara>Static constructor.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_boolean">
<title>Boolean</title>
<simpara><literal>Boolean</literal> does not have a super class.</simpara>
<section xml:id="static-methods-2">
<title>Static Methods</title>
<simpara><literal>Boolean(value:Object=):Boolean</literal></simpara>
</section>
</section>
<section xml:id="_number">
<title>Number</title>
<simpara><literal>Number</literal> does not have a super class.</simpara>
<section xml:id="_static_attributes">
<title>Static Attributes</title>
<variablelist>
<varlistentry>
<term><literal>MAX\_VALUE:Number</literal>: </term>
<listitem>
<simpara>The largest representable number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>MIN\_VALUE:Number</literal>: </term>
<listitem>
<simpara>The smallest representable number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>NaN:Number</literal>: </term>
<listitem>
<simpara>Special 'not a number' value.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>NEGATIVE\_INFINITY:Number</literal>: </term>
<listitem>
<simpara>Special value representing negative infinity, returned on overflow.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>POSITIVE\_INFINITY:Number</literal>: </term>
<listitem>
<simpara>Special value representing infinity, returned on overflow.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="methods-2">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>toExponential(numberOfDecimals:Number=):String</literal>: </term>
<listitem>
<simpara>Converts the value of the object into an exponential notation.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toFixed(numberOfDecimals:Number=):String</literal>: </term>
<listitem>
<simpara>Formats a number to the specified number of decimals.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toPrecision(numberOfDecimals:Number=):String</literal>: </term>
<listitem>
<simpara>Converts a number into an exponential notation if it has more digits than specified.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>valueOf():Number</literal>: </term>
<listitem>
<simpara>Returns the primitive value of a Number object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toString(radix:Number=):String</literal>: </term>
<listitem>
<simpara>Returns a String value for this object. The toString method parses its first argument and attempts to return a string representation in the specified radix (base).</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="static-methods-3">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>Number(value:Object=):Number</literal>: </term>
<listitem>
<simpara>Static constructor.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="function">
<title>Function</title>
<simpara><literal>Function</literal> does not have a super class.</simpara>
<section xml:id="attributes-2">
<title>Attributes</title>
<variablelist>
<varlistentry>
<term><literal>prototype:Object</literal>: </term>
<listitem>
<simpara>Allows the addition of properties to the instance of the object created by the constructor function.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>length:Number</literal>: </term>
<listitem>
<simpara>Specifies the number of arguments expected by the functio</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="methods-3">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>apply(thisArg,argsArray:Array=):Object</literal>: </term>
<listitem>
<simpara>Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>call(thisArg,arg&#8230;&#8203;):Object</literal>: </term>
<listitem>
<simpara>Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>bind(thisArg:Object,arg&#8230;&#8203;):Function</literal>: </term>
<listitem>
<simpara>Creates a new function that, when called, itself calls this function in the context of the provided this value with a given sequence of arguments preceding any provided when the new function was called.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_error">
<title>Error</title>
<simpara><literal>Error</literal> does not have a super class.</simpara>
<section xml:id="attributes-3">
<title>Attributes</title>
<variablelist>
<varlistentry>
<term><literal>name:String</literal>: </term>
<listitem>
<simpara>Error name.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>message:String</literal>: </term>
<listitem>
<simpara>Error message.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="static-methods-4">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>Error(message:Object=):Error</literal>: </term>
<listitem>
<simpara>Static Constructor.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_array">
<title>Array</title>
<simpara><literal>Array</literal> is a generic type with the type parameter <literal>E</literal> and  does not have a super class.</simpara>
<section xml:id="methods-4">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>concat(array&#8230;&#8203;):Array&lt;E&gt;)</literal>: </term>
<listitem>
<simpara>Joins two or more arrays and returns the result.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>every(callback:Function):Boolean</literal>: </term>
<listitem>
<simpara>Tests whether all elements in the array pass the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>filter(callback:Function):Array&lt;E&gt;</literal>: </term>
<listitem>
<simpara>Creates a new array with all elements that pass the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>forEach(callback:Function,thisArg=)</literal>: </term>
<listitem>
<simpara>Calls a function for each element in the array. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally with a thisObject argument to use as this when executing callback.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>indexOf(searchElement,fromIndex=):Number</literal>: </term>
<listitem>
<simpara>Returns the first index at which a given element can be found in the array, or -1 if it is not present.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>join(separator=):String</literal>: </term>
<listitem>
<simpara>Puts all the elements of an array into a string. The elements are separated by a specified delimiter.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>lastIndexOf(searchElement,fromIndex=):Number</literal>: </term>
<listitem>
<simpara>Returns the last (greatest) index of an element within the array equal to the specified value. Will return -1 if none are found.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>length():Number</literal>: </term>
<listitem>
<simpara>The length returns an integer representing the length of an array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>map(callback:Function,thisArg=):Array</literal>: </term>
<listitem>
<simpara>Creates a new array with the results of calling a provided function on every element in this array. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally, with a thisObject argument to use as this when executing callback.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>pop():E</literal>: </term>
<listitem>
<simpara>Removes and returns the last element of an array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>push(element&#8230;&#8203;):E</literal>: </term>
<listitem>
<simpara>Adds one or more elements to the end of an array and returns the new length.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>reverse():Array&lt;E&gt;</literal>: </term>
<listitem>
<simpara>Reverses the order of the elements in an array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>shift()</literal>: </term>
<listitem>
<simpara>Removes and returns the first element of an array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>slice(start:Number,end:Number=):Array&lt;E&gt;</literal>: </term>
<listitem>
<simpara>Returns selected elements from an existing array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>some(callback:Function,thisArg=):Boolean</literal>: </term>
<listitem>
<simpara>Tests whether some element in the array passes the test implemented by the provided function. The callback will be called with 3 arguments (elementValue,elementIndex,traversedArray). Optionally, with a thisObject argument to use as this when executing callback.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>sort(sortByFunction:Function=):Array&lt;E&gt;</literal>: </term>
<listitem>
<simpara>Sorts the elements of an array. The function will be called with 2 arguments (a,b).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>splice(index:Number,how many:Number,element&#8230;&#8203;):Array&lt;E&gt;</literal>: </term>
<listitem>
<simpara>Removes and adds new elements to an array. Returns the removed elements as an Array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleString():String</literal>: </term>
<term><literal>toString():String</literal>: </term>
<listitem>
<simpara>Returns a String value for Array.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>unshift(element&#8230;&#8203;):E</literal>: </term>
<listitem>
<simpara>Adds one or more elements to the beginning of an array and returns the new length.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="static-methods-5">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>Array(item:Object&#8230;&#8203;)</literal>: </term>
<listitem>
<simpara>Static constructor.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_date">
<title>Date</title>
<simpara><literal>Date</literal> does not have a super class.</simpara>
<section xml:id="static-methods-6">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>Date():Date</literal>: </term>
<listitem>
<simpara>Static constructor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Date(milliseconds:Number):Date</literal>: </term>
<listitem>
<simpara>Constructor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Date(date:Date):Date</literal>: </term>
<listitem>
<simpara>Constructor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Date(dateString:String):Date</literal>: </term>
<listitem>
<simpara>Constructor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>Date(year:Number,month:Number,day=Number=,hour:Number=,minute:Number=,second:Number=,millisecond:Number=):Date</literal>: </term>
<listitem>
<simpara>Constructor.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>parse(dateString:String):Date</literal>: </term>
<listitem>
<simpara>Parses a string representation of a date, and returns the number of milliseconds since midnight Jan 1, 1970.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>now():Number</literal>: </term>
<listitem>
<simpara>Returns the numeric value corresponding to the current time.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>UTC(year:Number,month:Number,date:Number=,hrs:Number=,min:Number=,sec:Number=,ms:Number=):Number</literal>: </term>
<listitem>
<simpara>UTC takes comma-delimited date parameters and returns the number of milliseconds between January 1, 1970, 00:00:00, Universal Time and the time you specified.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="methods-5">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>getDate():Number</literal>: </term>
<listitem>
<simpara>Returns the day of the month from a Date object (from 1-31).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getDay():Number</literal>: </term>
<listitem>
<simpara>Returns the day of the week from a Date object (from 0-6).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getFullYear():Number</literal>: </term>
<listitem>
<simpara>Returns the year, as a four-digit number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getHours():Number</literal>: </term>
<listitem>
<simpara>Returns the hour of a day (from 0-23).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getMilliseconds():Number</literal>: </term>
<listitem>
<simpara>Returns the milliseconds of a Date object (from 0-999).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getMinutes():Number</literal>: </term>
<listitem>
<simpara>Returns the minutes of a date (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getMonth():Number</literal>: </term>
<listitem>
<simpara>Returns the month from a date (from 0-11).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getSeconds():Number</literal>: </term>
<listitem>
<simpara>Returns the seconds of a date (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getTime():Number</literal>: </term>
<listitem>
<simpara>Returns the number of milliseconds since midnight Jan 1, 1970.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>valueOf():Number</literal>: </term>
<listitem>
<simpara>Returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC. This method is functionally equivalent to the getTime method.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getTimezoneOffset():Number</literal>: </term>
<listitem>
<simpara>Returns the difference in minutes between local time and Greenwich Mean Time (GMT).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCDate():Number</literal>: </term>
<listitem>
<simpara>Returns the day of the month from a date according to Universal Time (from 1-31).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCDay():Number</literal>: </term>
<listitem>
<simpara>Returns the day of the week from a date according to Universal Time (from 0-6).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCFullYear():Number</literal>: </term>
<listitem>
<simpara>Returns the four-digit year from a date according to Universal Time.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCHours():Number</literal>: </term>
<listitem>
<simpara>Returns the hour of a date according to Universal Time (from 0-23).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCMilliseconds():Number</literal>: </term>
<listitem>
<simpara>Returns the milliseconds of a date according to Universal Time (from 0-999).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCMinutes():Number</literal>: </term>
<listitem>
<simpara>Returns the minutes of a date according to Universal Time (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCMonth():Number</literal>: </term>
<listitem>
<simpara>Returns the month from a Date object according to Universal Time (from 0-11).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getUTCSeconds():Number</literal>: </term>
<listitem>
<simpara>Returns the seconds of a date according to Universal Time (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>getYear():Number deprecated</literal>: </term>
<listitem>
<simpara>Returns the year as a two-digit or a three/four-digit number, depending on the browser. Use getFullYear() instead!</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setDate(day):Number</literal>: </term>
<listitem>
<simpara>Sets the day of the month from a Date object (from 1-31).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setFullYear(full year, month=, day=):Number</literal>: </term>
<listitem>
<simpara>Sets the year as a four-digit number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setHours(hours,minutes=,seconds=,milis=):Number</literal>: </term>
<listitem>
<simpara>Sets the hour of a day (from 0-23).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setMilliseconds(mills):Number</literal>: </term>
<listitem>
<simpara>Sets the milliseconds of a Date object (from 0-999).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setMinutes(minutes,=seconds,=millis):Number</literal>: </term>
<listitem>
<simpara>Sets the minutes of a date (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setMonth" directType="Number(month,day=):Number</literal>: </term>
<listitem>
<simpara>Sets the month from a date (from 0-11).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setSeconds(seconds,millis=):number</literal>: </term>
<listitem>
<simpara>Sets the seconds of a date (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setTime(mills):Number</literal>: </term>
<listitem>
<simpara>Sets the number of milliseconds since midnight Jan 1, 1970.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCDate(day):Number</literal>: </term>
<listitem>
<simpara>Sets the day of the month from a date according to Universal Time (from 0-6).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCFullYear(fullyear,month=,day=):Number</literal>: </term>
<listitem>
<simpara>Sets the four-digit year from a date according to Universal Time.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCHours(hours,minutes=,seconds=,millis=):Number</literal>: </term>
<listitem>
<simpara>Sets the hour of a date according to Universal Time (from 0-23).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCMilliseconds(mills):Number</literal>: </term>
<listitem>
<simpara>Sets the milliseconds of a date according to Universal Time (from 0-999).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCMinutes(minutes,seconds=,millis=):Number</literal>: </term>
<listitem>
<simpara>Sets the minutes of a date according to Universal Time time (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCMonth(month,day=):Number</literal>: </term>
<listitem>
<simpara>Sets the month from a Date object according to Universal Time (from 0-11).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setUTCSeconds(seconds,millis=):Number</literal>: </term>
<listitem>
<simpara>Sets the seconds of a date according to Universal Time (from 0-59).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>setYear(year):Number deprecated</literal>: </term>
<listitem>
<simpara>Sets the year, as a two-digit or a three/four-digit number, depending on the browser. Use setFullYear() instead!!</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toDateString():String</literal>: </term>
<listitem>
<simpara>Returns the date portion of a Date object in readable form.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleDateString():String</literal>: </term>
<listitem>
<simpara>Converts a Date object, according to local time, to a string and returns the date portion.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleString():String</literal>: </term>
<listitem>
<simpara>Converts a Date object, according to local time, to a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toLocaleTimeString():String</literal>: </term>
<listitem>
<simpara>Converts a Date object, according to local time, to a string and returns the time portion.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toString():String</literal>: </term>
<listitem>
<simpara>Returns a String value for this object.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toTimeString():String</literal>: </term>
<listitem>
<simpara>Returns the time portion of a Date object in readable form.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>toUTCString():String</literal>: </term>
<listitem>
<simpara>Converts a Date object, according to Universal Time, to a string.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_math">
<title>Math</title>
<simpara><literal>Math</literal> is not instantiable and only provides static properties and methods.</simpara>
<section xml:id="static-attributes-1">
<title>Static Attributes</title>
<variablelist>
<varlistentry>
<term><literal>E:Number</literal>: </term>
<listitem>
<simpara>Euler&#8217;s constant and the base of natural logarithms, approximately 2.718.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>LN2:Number</literal>: </term>
<listitem>
<simpara>Natural logarithm of 2, approximately 0.693.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>LN10:Number</literal>: </term>
<listitem>
<simpara>Natural logarithm of 10, approximately 2.302.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>LOG2E:Number</literal>: </term>
<listitem>
<simpara>Base 2 logarithm of E, approximately 1.442.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>LOG10E:Number</literal>: </term>
<listitem>
<simpara>Base 10 logarithm of E, approximately 0.434.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>PI:Number</literal>: </term>
<listitem>
<simpara>Ratio of the circumference of a circle to its diameter, approximately 3.14159.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>SQRT1\_2:Number</literal>: </term>
<listitem>
<simpara>Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>SQRT2:Number</literal>: </term>
<listitem>
<simpara>Square root of 2, approximately 1.414.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="static-methods-7">
<title>Static Methods</title>
<variablelist>
<varlistentry>
<term><literal>abs(x):Number</literal>: </term>
<listitem>
<simpara>Returns the absolute value of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>acos(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the arccosine of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>asinx:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the arcsine of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>atan(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the arctangent of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>atan2(y:Number,x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the arctangent of the quotient of its arguments.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ceil(x):Number</literal>: </term>
<listitem>
<simpara>Returns the smallest integer greater than or equal to a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>cos(x):Number</literal>: </term>
<listitem>
<simpara>Returns the arctangent of the quotient of its arguments.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>exp(x):Number</literal>: </term>
<listitem>
<simpara>Returns Enumber, where number is the argument, and E is Euler&#8217;s constant (2.718&#8230;&#8203;), the base of the natural logarithm.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>floor(x):Number</literal>: </term>
<listitem>
<simpara>Returns the largest integer less than or equal to a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>log(x):Number</literal>: </term>
<listitem>
<simpara>Returns the natural logarithm (loge, also ln) of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>max(value&#8230;&#8203;):Number</literal>: </term>
<listitem>
<simpara>Returns the largest of zero or more numbers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>min(value&#8230;&#8203;):Number</literal>: </term>
<listitem>
<simpara>Returns the smallest of zero or more numbers.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>pow(base:Number,exponent:Number):Number</literal>: </term>
<listitem>
<simpara>Returns base to the exponent power, that is, baseexponent.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>random():Number</literal>: </term>
<listitem>
<simpara>Returns a pseudorandom number between 0 and 1.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>round(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the value of a number rounded to the nearest integer.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>sin(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the sine of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>sqrt(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the positive square root of a number.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>tan(x:Number):Number</literal>: </term>
<listitem>
<simpara>Returns the tangent of a number.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_regexp">
<title>RegExp</title>
<simpara><literal>RegExp</literal> does not have a super class.</simpara>
<section xml:id="attributes-4">
<title>Attributes</title>
<variablelist>
<varlistentry>
<term><literal>global:Boolean</literal>: </term>
<listitem>
<simpara>Whether to test the regular expression against all possible matches in a string, or only against the first.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ignoreCase:Boolean</literal>: </term>
<listitem>
<simpara>Whether to ignore case while attempting a match in a string.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>lastIndex:Number</literal>: </term>
<listitem>
<simpara>The index at which to start the next match.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>multiline:Boolean</literal>: </term>
<listitem>
<simpara>Whether or not to search in strings across multiple lines.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>source:String</literal>: </term>
<listitem>
<simpara>The text of the pattern.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="methods-6">
<title>Methods</title>
<variablelist>
<varlistentry>
<term><literal>exec(str:String):Array</literal>: </term>
<listitem>
<simpara>Executes a search for a match in its string parameter.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>test(str:String):Boolean</literal>: </term>
<listitem>
<simpara>Tests for a match in its string parameter.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_json">
<title>JSON</title>
<simpara><literal>JSON</literal> is a global object and a subclass of <literal>Object</literal>. Its functionality is provided by two static methods.
It is not possible to create new instances of type JSON.</simpara>
<section xml:id="attributes-5">
<title>Attributes</title>
<simpara>The JSON object does not define own properties.</simpara>
</section>
<section xml:id="methods-7">
<title>Methods</title>
<simpara>The JSON object does not define own methods.</simpara>
</section>
<section xml:id="static-methods-8">
<title>Static Methods</title>
<simpara>The parse function parses a JSON text (a JSON-formatted String) and
produces an ECMAScript value. The JSON format is a restricted form of
ECMAScript literal. JSON objects are realized as ECMAScript objects.
JSON arrays are realized as ECMAScript arrays. JSON strings, numbers,
booleans, and null are realized as ECMAScript Strings, Numbers,
Booleans, and null. For detailed information see [<link linkend="ECMA11a">ECMA11a(p.S15.12.2)</link>]</simpara>
<simpara>The optional reviver parameter is a function that takes two parameters
(key and value). It can filter and transform the results. It is called
with each of the key/value pairs produced by the parse and its return
value is used instead of the original value. If it returns what it
received, the structure is not modified. If it returns then the property
is deleted from the result.</simpara>
<simpara>The stringify function returns a String in JSON format representing an
ECMAScript value. It can take three parameters. The first parameter is
required. The value parameter is an ECMAScript value which is usually an
object or array, although it can also be a String, Boolean, Number or
null.</simpara>
<simpara>The optional replacer parameter is either a function that alters the way
objects and arrays are stringified or an array of Strings and Numbers
that act as a white list for selecting the object properties that will
be stringified.</simpara>
<simpara>The optional space parameter is a String or Number that allows the
result to have whitespace injected into it to improve human readability.</simpara>
<simpara>For detailed information see [<link linkend="ECMA11a">ECMA11a(p.S15.12.3)</link>].</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_n4js_objects">
<title>N4JS Objects</title>
<section xml:id="_reflection_model">
<title>Reflection Model</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1236"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1236</link>
<link xl:href="https://github.com/NumberFour/N4JS/issues/344"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/github.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>GH-344</link></simpara>
</sidebar>
<simpara>N4JS provided metadata for reflection (and introspection). This
information is available via instances of some reflection model classes
(described below) attached to types and (in some cases) functions.</simpara>
<simpara>The following class diagrams shows the defined classes. Note that for
performance reasons, the actual structure may vary from the model.</simpara>
<figure>
<title>N4JS Reflection Classes</title>
<mediaobject>
<imageobject>
<imagedata fileref="fig/cd_reflectionModel.svg"/>
</imageobject>
<textobject><phrase>cd reflectionModel</phrase></textobject>
</mediaobject>
</figure>
<simpara>Remark: This section is work in progress. The final goal is to provide a
metamodel similar to Ecore, but we will only add new features if needed.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">/**
 * Base class for all N4 reflective elements.
 */
export public abstract class N4Element extends Object {
    /**
     * Annotations attached to this element.
     */
    public Array&lt;N4Annotation&gt; annotations = [];

    /**
     * The origin string formed as &lt;ID-VERSION&gt;, where ID is containing project artefact id, and VERSION is its version
     */
    public String origin;

    /**
     * Returns true if an annotation with the given name is attached to the element.
     */
    public boolean hasAnnotation(string name) {
        return !!this.anyAnnotation(name)
    }

    /**
     * Returns any annotation with the given name attached to the element, or null if no such annotation is found.
     */
    public N4Annotation anyAnnotation(string name) {
        for (var i=this.annotations.length-1; i&gt;=0; i--) {
            var a = this.annotations[i];
            if (a) {
                return a;
            }
        }
        return null;
    }
    /**
     * Returns all annotations with the given name attached to the element, or an empty array if no such annotations are found.
     */
    public Array&lt;N4Annotation&gt; allAnnotations(string name) {
        return this.annotations.filter(function(a){return a.name==name});
    }
}

/**
 * Base class for all reflective classes with a name.
 */
export public abstract class N4NamedElement extends N4Element {
    /**
     * The simple name of a named element.
     */
    public string name;
}

/**
 * Base class for all reflective classes describing a type (declaration).
 */
export public abstract class N4Type extends N4NamedElement {
    /**
     * The FQN of the type.
     */
    public string fqn;

    /**
     * Returns true if this N4Class describes an N4-class declaration.
     */
    public boolean get isClass() { return false; }

    /**
     * Returns true if this N4Class describes an N4-interface declaration.
     */
    public boolean get isInterface() { return false; }

    /**
     * Returns true if this N4Class describes an N4-enumeration declaration.
     */
    public boolean get isEnum() { return false; }
}

/**
 * Base class for meta types of classes or interfaces.
 */
export public abstract class N4Classifier extends N4Type {

    /**
     * The N4Class of the super type, may be null if super type is a not an N4Class.
     */
    public N4Class n4superType;

    /**
     * Array of the FQN of all (transitively) implemented interfaces, i.e. interfaces directly implemented by this class, its super
     * class or interfaces extended by directly implemented interfaces.
     */
    public Array&lt;string&gt; allImplementedInterfaces;

    /**
     * Array of all owned members, that is members defined in the class directly.
     * This field is private as it is an internal detail, members are accessed via methods defined in this class.
     */
    private Array&lt;N4Member&gt; ownedMembers;

    /**
     * Array of all consumed members, that is members mixed into the classifier via interface implementation and default methods.
     * This field is private as it is an internal detail, members are accessed via methods defined in this class.
     */
    private Array&lt;N4Member&gt; consumedMembers;

    /**
     * Only used internally, must not be called by client.
     */
    protected constructor(@Spec ~~this spec) {}

    /**
     * Returns all members defined by this class directly, consumed, and inherited. The boolean flags control which members are returned.
     *
     * @param consumed if set, consumed members are returned as well (false by default)
     * @param inherited if set, inherited members are returned as well (false by default)
     * @param _static if set, static members are returned, otherwise instance members (false by default).
     * @return array of members, may be empty but never null
     */
    public Array&lt;? extends N4Member&gt; members(boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }

    /**
     * Returns all members defined in this classifier (or inherited) with an annotation
     * of given name attached to it. The boolean flags control which methods are returned.
     *
     * @param name name of annotation to be used as filter
     * @param consumed if set, consumed members are returned as well (false by default)
     * @param inherited if set, inherited members are returned as well (false by default)
     * @param _static if set, static members are returned, otherwise instance members (false by default).
     * @return array of members, may be empty but never null
     */
    public Array&lt;? extends N4Member&gt; membersWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }

    /**
     * Returns all data fields defined by this class directly, consumed, and inherited. The boolean flags control which data fields are returned.
     *
     * @param consumed if set, consumed data fields are returned as well (false by default)
     * @param inherited if set, inherited data fields are returned as well (false by default)
     * @param _static if set, static data fields are returned, otherwise instance members (false by default).
     * @return array of data fields, may be empty but never null
     */
    public Array&lt;? extends N4DataField&gt; dataFields(boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }

    /**
     * Returns all data fields defined in this classifier (or inherited) with an annotation
     * of given name attached to it. The boolean flags control which data fields are returned.
     *
     * @param name name of annotation to be used as filter
     * @param consumed if set, consumed data fields are returned as well (false by default)
     * @param inherited if set, inherited data fields are returned as well (false by default)
     * @param _static if set, static data fields are returned, otherwise instance members (false by default).
     * @return array of data fields, may be empty but never null
     */
    public Array&lt;? extends N4DataField&gt; dataFieldsWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }

    /**
     * Returns all methods defined by this class directly, consumed, and inherited. The boolean flags control which methods are returned.
     *
     * @param consumed if set, consumed methods are returned as well (false by default)
     * @param inherited if set, inherited methods are returned as well (false by default)
     * @param _static if set, static methods are returned, otherwise instance members (false by default).
     * @return array of methods, may be empty but never null
     */
    public Array&lt;? extends N4Method&gt; methods(boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }

    /**
     * Returns all methods defined in this classifier (or inherited) with an annotation
     * of given name attached to it. The boolean flags control which methods are returned.
     *
     * @param name name of annotation to be used as filter
     * @param consumed if set, consumed methods are returned as well (false by default)
     * @param inherited if set, inherited methods are returned as well (false by default)
     * @param _static if set, static methods are returned, otherwise instance members (false by default).
     * @return array of methods, may be empty but never null
     */
    public Array&lt;? extends N4Method&gt; methodsWithAnnotation(string name, boolean? consumed, boolean? inherited, boolean? _static) {
        return null; // TODO
    }


}

/**
 * Meta information of an n4 class.
 */
export @Final public class N4Class extends N4Classifier {

    /**
     * Returns the N4Class instance for a given n4object. This is similar to
     * {@code n4object.constructor.n4type}, however it can also be used in interfaces
     * to get reflective information of the implementor.
     */
    public static N4Class of(N4Object n4object) {
        return n4object.constructor.n4type
    }

    /**
     * Returns true if this N4Class describes an N4-class declaration.
     */
    @Override
    public boolean get isClass() { return true; }
}


/**
 * Meta information of an n4 interface.
 */
export @Final public class N4Interface extends N4Classifier {
    /**
     * Returns true if this N4Class describes an N4-interface declaration.
     */
    @Override
    public boolean get isInterface() { return true; }
}

/**
 * Description of a member, that is a method or field.
 */
export public abstract class N4Member extends N4Element {
    public string name;
}

/**
 * Description of a method.
 */
export @Final public class N4Method extends N4Member {
    public Function jsFunction;
}

/**
 * Description of a field, that is either a data field or an accessor.
 */
export public abstract class N4Field extends N4Member {
}

/**
 * Description of a simple data field.
 */
export @Final public class N4DataField extends N4Member {
}

/**
 * Description of an accessor, that is a getter or setter.
 */
export @Final public class N4Accessor extends N4Member {
    /**
     * Flag indicating whether accessor is a getter or setter, internal detail.
     */
    private boolean getter;
    /**
     * Returns true if accessor is a getter.
     */
    public boolean isGetter() { return this.getter; }
    /**
     * Returns true if accessor is a setter.
     */
    public boolean isSetter() { return ! this.getter; }
}

/**
 * Description of an N4Enum
 */
export @Final public class N4EnumType extends N4Type {
    /**
     * Returns true if this N4Clasifier describes an N4-enumeration declaration.
     */
    @Override public boolean get isEnum() { return true; }
    /**
     * Returns the N4EnumType instance for a given enum literal. This is similar to
     * {@code n4enum.constructor.n4type}.
     */
    public static N4EnumType of(N4Enum n4enum) {
        return n4enum.constructor.n4type
    }
}

/**
 * Base class for all enumeration, literals are assumed to be static constant fields of concrete subclasses.
 */
export public abstract class N4Enum  extends Object {

    /**
     * Returns the name of a concrete literal
     */
    public abstract string get name();

    /**
     * Returns the value of a concrete literal. If no value is
     * explicitly set, it is similar to the name.
     */
    public abstract string get value()

    /**
     * Returns a string representation of a concrete literal, it returns
     * the same result as value()
     */
    @Override public string toString() { return this.value }

    /**
     * Returns the enum class object of this enum literal for reflection.
     * The very same meta class object can be retrieved from the enumeration type directly.
     */
    public abstract N4Enum get n4Enum()

    /**
     * Natively overridden by concrete enums.
     */
    public static Array&lt;? extends N4Enum&gt; get values() { return null; }

    /**
     * Natively overridden by concrete enums.
     */
    public static N4Enum valueByName(string name) { return null; }

    /**
     * Returns the meta class object of this class for reflection.
     * The very same meta class object can be retrieved from an instance by calling
     * &lt;code&gt;instance.constructor.n4type&lt;/code&gt;
     */
    public static N4EnumType get n4type() { return null; }
}

/**
 * Annotation with value.
 */
export @Final public class N4Annotation extends Object {
    public string name;
    public union{string,number} value;
}

/**
 * The base class for all instances of n4 classes.
 */
export public class N4Object {
    /**
     * Returns the meta class object of this class for reflection.
     * The very same meta class object can be retrieved from an instance by calling
     * &lt;code&gt;instance.constructor.n4type&lt;/code&gt;
     */
    // defined in types model, added by $makeClass:
    // public static N4Class get n4type() { return null; }
}</programlisting>
</section>
<section xml:id="_error_types">
<title>Error Types</title>
<simpara>N4JS provides additional Error types as subtypes of <literal>Error</literal>.</simpara>
<section xml:id="_n4apinotimplemented">
<title>N4ApiNotImplemented</title>
<simpara></simpara>
<sidebar>
<simpara><link xl:href="https://jira.numberfour.eu/browse/IDE-1510"><inlinemediaobject>
<imageobject>
<imagedata fileref="resources/images/jira.png"/>
</imageobject>
<textobject><phrase></phrase></textobject>
</inlinemediaobject>IDE-1510</link></simpara>
</sidebar>
<simpara>Considering API definitions and concrete implementations of those APIs
the error <literal>N4-Api\-Not\-Im\-ple\-men\-ted\-Error</literal> is introduced to specifically report missing implementations.
Instances of this error type are inserted internally during the
transpilation of API-implementing projects. Whenever a difference to the
API in form of a missing implementation is encountered, the transpiler
will insert stub-code throwing an instance of <literal>N4-Api\-Not\-Im\-ple\-men\-ted\-Error</literal>.</simpara>
<simpara>API-testing projects can catch those errors and act accordingly. This
enables tracking of completeness of implementations by counting the
occasions an <literal>N4-Api\-Not\-Im\-ple\-men\-ted\-Error</literal> was encountered.</simpara>
<programlisting language="n4js" linenumbering="unnumbered">/**
 * Error type reporting a not implemented situation.
 */
public class N4ApiNotImplementedError extends Error {  }</programlisting>
</section>
</section>
</chapter>
<chapter xml:id="_bibliography">
<title>Bibliography</title>

</chapter>
</part>
</book>
