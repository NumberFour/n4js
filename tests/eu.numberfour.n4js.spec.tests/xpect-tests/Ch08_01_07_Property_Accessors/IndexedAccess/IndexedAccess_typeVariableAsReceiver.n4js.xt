/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */


class G1<T extends Array<string>> {
	public arr: T;
	
	m1() {
		// XPECT noerrors -->
		// XPECT type of 'this.arr[42]' --> string
		this.arr[42];
	}
}


class G2<T1, T2 extends Array<T1>> {
	public arr: T2;
	
	m2() {
		// XPECT noerrors -->
		// XPECT type of 'this.arr[42]' --> T1
		this.arr[42];
	}
}


class G3<T3> extends G2<T3, Array<T3>> {
	
	m3() {
		// XPECT noerrors -->
		// XPECT type of 'this.arr[42]' --> T3
		this.arr[42];
	}
}


class G4 extends G3<number> {
	
	m4() {
		// XPECT noerrors -->
		// XPECT type of 'this.arr[42]' --> number
		this.arr[42];
	}
}


// ------------------------------------------------------------------------------------
// original use case (see GH-54):


interface IterableExt<T> extends Iterable<T> {}

class B<E_Element, T_Iterable extends Iterable<E_Element>> {
    public iterable: T_Iterable;
}

class C<E_Element, T_Iterable extends IterableExt<E_Element>> extends B<E_Element, T_Iterable> {

    foo() {
        // XPECT noerrors --> "Not a function or method: any." at "this.iterable[Symbol.iterator]"
        // XPECT type of 'this.iterable[Symbol.iterator]()' --> Iterator<E_Element>
        this.iterable[Symbol.iterator]();

// work-around no longer required after fix:

        // Unfortunately static cast is necessary :(
        // X--PECT warnings --> "Unnecessary cast from T_Iterable to IterableExt<E_Element>" at "this.iterable as IterableExt<E_Element>"
//      var workaroundIt = (this.iterable as IterableExt<E_Element>)[Symbol.iterator](); 
    }
}

