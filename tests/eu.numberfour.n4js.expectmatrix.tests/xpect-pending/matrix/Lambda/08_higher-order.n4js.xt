/* XPECT_SETUP eu.numberfour.n4js.expectmatrix.tests.N4JSExpectMatrixPendingTest END_SETUP  */

////////////////////////////
// Higher-order functions //
////////////////////////////

function foo (f : {function (number) : number}) : number {
	return f(5);
}

// lambda as a parameter XPECT noerrors -->
foo(n => {return n+6});

// IDE-1037 lambda as a parameter, wrong return XPECT errors --> "string is not a subtype of number." at ""hello""
foo(n => {return "hello"});

// IDE-1037 lambda as a parameter, simpler syntax XPECT noerrors -->
foo(n => n+6);

// IDE-1037 lambda as a parameter, simpler syntax XPECT errors -->"string is not a subtype of number." at "n+6"
foo((n : any) => n+6);

// IDE-1037 lambda as a parameter, simpler syntax XPECT noerrors -->"string is not a subtype of number." at "n+6"
foo((n : number) => n+6);




function bar1 () : {function (number) : number} {
	// IDE-1037 lambda as return, wrong syntax XPECT FIXME errors --> "missing brackets or whatever" at "n=>{return n+6}"
	// this is compiled to "returnn=>..."
	return n=>{return n+6};
}

function bar2 () : {function (number) : number} {
	// IDEBUG-177 lambda as return, good syntax XPECT FIXME noerrors -->
	return ( (n : number) => { return n+6 } );
}

function bar3 () : {function (number) : number} {
	// IDE-1037 lambda as return, simpler syntax XPECT FIXME errors --> "missing brackets or whatever" at "n=>n+6"
	return n=>n+6;
}

function bar4 () : {function (number) : number} {
	// lambda as return, wrong return XPECT errors --> "string is not a subtype of number." at ""hello""
	return n=>{return "hello"};
}




function baz (g : {function (number) : string}) : {function (number) : string} {
	return s=>{return g(s)};
}

// lambda as return & parameter XPECT noerrors -->
baz( n => { return ""+n })(5);

// IDE-1037 lambda as return & parameter, simple syntax XPECT noerrors -->
baz( n => ""+n )(6);
