/* XPECT_SETUP eu.numberfour.n4js.transpiler.es5.xpect.tests.CompileAndExecuteTest END_SETUP */


/* XPECT output ---
<==
stdout:
================= without intermediate classes
case #1:
A#acc1 (getter)
B#acc1 (setter), p: new value
case #2:
B#acc2 (getter)
<access disallowed in the static case>
case #3:
B#acc3 (getter)
<access disallowed in the static case>
case #4:
A#acc4 (getter)
B#acc4 (setter), p: new value
================= with 2 intermediate classes
case #1:
A#acc1 (getter)
C#acc1 (setter), p: new value
case #2:
C#acc2 (getter)
<access disallowed in the static case>
case #3:
C#acc3 (getter)
<access disallowed in the static case>
case #4:
A#acc4 (getter)
C#acc4 (setter), p: new value
=================
stderr:
==>
--- */



class A {
	// case #1: override getter with setter
	static get acc1() {return "A#acc1 (getter)";}
	// case #2: override setter with getter
	static set acc2(p) {console.log("A#acc2 (setter), p:", p);}
	// case #3: override getter+setter with getter
	static get acc3() {return "A#acc3 (getter)";}
	static set acc3(p) {console.log("A#acc3 (setter), p:", p);}
	// case #4: override getter+setter with setter
	static get acc4() {return "A#acc4 (getter)";}
	static set acc4(p) {console.log("A#acc4 (setter), p:", p);}
}


console.log('================= without intermediate classes');

class B extends A {
	static set acc1(p) {console.log("B#acc1 (setter), p:", p);}
	static get acc2() {return "B#acc2 (getter)";}
	@Override
	static get acc3() {return "B#acc3 (getter)";}
	@Override
	static set acc4(p) {console.log("B#acc4 (setter), p:", p);}
}


console.log('case #1:');
console.log(B.acc1);
B.acc1="new value";

console.log('case #2:');
console.log(B.acc2);
console.log('<access disallowed in the static case>');//B.acc2="new value";

console.log('case #3:');
console.log(B.acc3);
console.log('<access disallowed in the static case>');//B.acc3="new value";

console.log('case #4:');
console.log(B.acc4);
B.acc4="new value";


console.log('================= with 2 intermediate classes');

class X1 extends A {}
class X2 extends X1 {}
class C extends X2 {
	static set acc1(p) {console.log("C#acc1 (setter), p:", p);}
	static get acc2() {return "C#acc2 (getter)";}
	@Override
	static get acc3() {return "C#acc3 (getter)";}
	@Override
	static set acc4(p) {console.log("C#acc4 (setter), p:", p);}
}


console.log('case #1:');
console.log(C.acc1);
C.acc1="new value";

console.log('case #2:');
console.log(C.acc2);
console.log('<access disallowed in the static case>');//C.acc2="new value";

console.log('case #3:');
console.log(C.acc3);
console.log('<access disallowed in the static case>');//C.acc3="new value";

console.log('case #4:');
console.log(C.acc4);
C.acc4="new value";


console.log('=================');

